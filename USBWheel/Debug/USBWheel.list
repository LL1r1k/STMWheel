
USBWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018708  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d28  08018818  08018818  00028818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019540  08019540  000308f8  2**0
                  CONTENTS
  4 .ARM          00000000  08019540  08019540  000308f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08019540  08019540  000308f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08019540  08019540  00029540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801954c  0801954c  0002954c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008f8  20000000  08019554  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018ac  200008f8  08019e4c  000308f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200021a4  08019e4c  000321a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000308f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00074cbe  00000000  00000000  00030921  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000b456  00000000  00000000  000a55df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002db0  00000000  00000000  000b0a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002ad8  00000000  00000000  000b37e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024292  00000000  00000000  000b62c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002adff  00000000  00000000  000da552  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a74ea  00000000  00000000  00105351  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ac83b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e624  00000000  00000000  001ac8b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200008f8 	.word	0x200008f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08018800 	.word	0x08018800

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200008fc 	.word	0x200008fc
 800014c:	08018800 	.word	0x08018800

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <cppmain>:
extern uint16_t BUF_DMA [ARRAY_LEN];
extern TIM_HandleTypeDef htim2;

USBD_HandleTypeDef hUsbDeviceFS;

void cppmain() {
 800115c:	b598      	push	{r3, r4, r7, lr}
 800115e:	af00      	add	r7, sp, #0

	ws2812_init();
 8001160:	f011 fbd4 	bl	801290c <_Z11ws2812_initv>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 8001164:	f44f 735e 	mov.w	r3, #888	; 0x378
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <cppmain+0x5c>)
 800116a:	2100      	movs	r1, #0
 800116c:	4813      	ldr	r0, [pc, #76]	; (80011bc <cppmain+0x60>)
 800116e:	f004 fe31 	bl	8005dd4 <HAL_TIM_PWM_Start_DMA>
	HAL_ADC_Start_DMA(&HADC, ADC_BUF, ADC_CHANNELS);
 8001172:	2202      	movs	r2, #2
 8001174:	4912      	ldr	r1, [pc, #72]	; (80011c0 <cppmain+0x64>)
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <cppmain+0x68>)
 8001178:	f001 f8a0 	bl	80022bc <HAL_ADC_Start_DMA>

	mainclass = new FFBWheel();
 800117c:	20c0      	movs	r0, #192	; 0xc0
 800117e:	f014 f939 	bl	80153f4 <_Znwj>
 8001182:	4603      	mov	r3, r0
 8001184:	461c      	mov	r4, r3
 8001186:	4620      	mov	r0, r4
 8001188:	f00a ffc6 	bl	800c118 <_ZN8FFBWheelC1Ev>
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <cppmain+0x6c>)
 800118e:	601c      	str	r4, [r3, #0]
	mainclass->usbInit();
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <cppmain+0x6c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f00b fcfb 	bl	800cb90 <_ZN8FFBWheel7usbInitEv>

	while(running){
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <cppmain+0x70>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d007      	beq.n	80011b2 <cppmain+0x56>
		mainclass->update();
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <cppmain+0x6c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f00b f934 	bl	800c414 <_ZN8FFBWheel6updateEv>
		updateLeds();
 80011ac:	f011 fb8c 	bl	80128c8 <_Z10updateLedsv>
	while(running){
 80011b0:	e7f3      	b.n	800119a <cppmain+0x3e>
	}

}
 80011b2:	bf00      	nop
 80011b4:	bd98      	pop	{r3, r4, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000b8c 	.word	0x20000b8c
 80011bc:	200016dc 	.word	0x200016dc
 80011c0:	20000b64 	.word	0x20000b64
 80011c4:	20001628 	.word	0x20001628
 80011c8:	20000914 	.word	0x20000914
 80011cc:	20000000 	.word	0x20000000

080011d0 <EE_Format>:

//##########################################################################################################
//##########################################################################################################
//##########################################################################################################
bool	EE_Format(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
	uint32_t	error;
	HAL_FLASH_Unlock();
 80011d6:	f001 feb7 	bl	8002f48 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 80011da:	2301      	movs	r3, #1
 80011dc:	613b      	str	r3, [r7, #16]
	#if ( _EEPROM_F1_LOW_DESTINY==1 || _EEPROM_F1_MEDIUM_DESTINY==1 || _EEPROM_F1_HIGH_DESTINY==1 )
	flashErase.Banks = FLASH_BANK_1;
 80011de:	2301      	movs	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
	#endif
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <EE_Format+0x50>)
 80011e4:	60fb      	str	r3, [r7, #12]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80011ea:	f107 0214 	add.w	r2, r7, #20
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 ff90 	bl	8003118 <HAL_FLASHEx_Erase>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <EE_Format+0x42>
	{
		HAL_FLASH_Lock();
 80011fe:	f001 fec9 	bl	8002f94 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001208:	d001      	beq.n	800120e <EE_Format+0x3e>
			return false;
 800120a:	2300      	movs	r3, #0
 800120c:	e004      	b.n	8001218 <EE_Format+0x48>
		else
			return true;	
 800120e:	2301      	movs	r3, #1
 8001210:	e002      	b.n	8001218 <EE_Format+0x48>
	}
	HAL_FLASH_Lock();
 8001212:	f001 febf 	bl	8002f94 <HAL_FLASH_Lock>
	return false;	
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	0801fc00 	.word	0x0801fc00

08001224 <EE_Reads>:
	HAL_FLASH_Lock();
	return true;
}
//##########################################################################################################
bool EE_Reads(uint16_t StartVirtualAddress,uint16_t HowManyToRead,uint32_t* Data)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	603a      	str	r2, [r7, #0]
 800122e:	80fb      	strh	r3, [r7, #6]
 8001230:	460b      	mov	r3, r1
 8001232:	80bb      	strh	r3, [r7, #4]
	if((StartVirtualAddress+HowManyToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8001234:	88fa      	ldrh	r2, [r7, #6]
 8001236:	88bb      	ldrh	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800123e:	dd01      	ble.n	8001244 <EE_Reads+0x20>
		return false;
 8001240:	2300      	movs	r3, #0
 8001242:	e018      	b.n	8001276 <EE_Reads+0x52>
	for(uint16_t	i=StartVirtualAddress ; i<HowManyToRead+StartVirtualAddress ; i++)
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	81fb      	strh	r3, [r7, #14]
 8001248:	e00e      	b.n	8001268 <EE_Reads+0x44>
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001252:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	601a      	str	r2, [r3, #0]
		Data++;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3304      	adds	r3, #4
 8001260:	603b      	str	r3, [r7, #0]
	for(uint16_t	i=StartVirtualAddress ; i<HowManyToRead+StartVirtualAddress ; i++)
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	3301      	adds	r3, #1
 8001266:	81fb      	strh	r3, [r7, #14]
 8001268:	89fa      	ldrh	r2, [r7, #14]
 800126a:	88b9      	ldrh	r1, [r7, #4]
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	440b      	add	r3, r1
 8001270:	429a      	cmp	r2, r3
 8001272:	dbea      	blt.n	800124a <EE_Reads+0x26>
	}
	return true;
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <EE_Writes>:
//##########################################################################################################
bool 	EE_Writes(uint16_t StartVirtualAddress,uint16_t HowManyToWrite,uint32_t* Data)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	603a      	str	r2, [r7, #0]
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	460b      	mov	r3, r1
 800128e:	80bb      	strh	r3, [r7, #4]
	if((StartVirtualAddress+HowManyToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8001290:	88fa      	ldrh	r2, [r7, #6]
 8001292:	88bb      	ldrh	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800129a:	dd01      	ble.n	80012a0 <EE_Writes+0x20>
		return false;
 800129c:	2300      	movs	r3, #0
 800129e:	e02b      	b.n	80012f8 <EE_Writes+0x78>
		Data++;
	}	
	if(EE_Format()==false)
		return false;
	#endif
	HAL_FLASH_Unlock();
 80012a0:	f001 fe52 	bl	8002f48 <HAL_FLASH_Unlock>
			HAL_FLASH_Lock();
			return false;
		}
	}
	#else
	HAL_FLASH_Unlock();
 80012a4:	f001 fe50 	bl	8002f48 <HAL_FLASH_Unlock>
	for(uint16_t i=0; i<HowManyToWrite ; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	81fb      	strh	r3, [r7, #14]
 80012ac:	e01d      	b.n	80012ea <EE_Writes+0x6a>
	{		
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,((i+StartVirtualAddress)*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)Data[i])!=HAL_OK)
 80012ae:	89fa      	ldrh	r2, [r7, #14]
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80012ba:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f04f 0400 	mov.w	r4, #0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4623      	mov	r3, r4
 80012d0:	2002      	movs	r0, #2
 80012d2:	f001 fdc9 	bl	8002e68 <HAL_FLASH_Program>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <EE_Writes+0x64>
		{
			HAL_FLASH_Lock();
 80012dc:	f001 fe5a 	bl	8002f94 <HAL_FLASH_Lock>
			return false;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e009      	b.n	80012f8 <EE_Writes+0x78>
	for(uint16_t i=0; i<HowManyToWrite ; i++)
 80012e4:	89fb      	ldrh	r3, [r7, #14]
 80012e6:	3301      	adds	r3, #1
 80012e8:	81fb      	strh	r3, [r7, #14]
 80012ea:	89fa      	ldrh	r2, [r7, #14]
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3dd      	bcc.n	80012ae <EE_Writes+0x2e>
		}
	}	
	#endif
	HAL_FLASH_Lock();
 80012f2:	f001 fe4f 	bl	8002f94 <HAL_FLASH_Lock>
	return true;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd90      	pop	{r4, r7, pc}

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001304:	f000 fea0 	bl	8002048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001308:	f000 f815 	bl	8001336 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130c:	f000 fada 	bl	80018c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001310:	f000 fab2 	bl	8001878 <MX_DMA_Init>
  MX_ADC1_Init();
 8001314:	f000 f86c 	bl	80013f0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001318:	f000 fa06 	bl	8001728 <MX_TIM3_Init>
  MX_USB_PCD_Init();
 800131c:	f000 faa6 	bl	800186c <MX_USB_PCD_Init>
  MX_TIM4_Init();
 8001320:	f000 fa50 	bl	80017c4 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001324:	f000 f8b2 	bl	800148c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001328:	f000 f8de 	bl	80014e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800132c:	f000 f988 	bl	8001640 <MX_TIM2_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  cppmain();
 8001330:	f7ff ff14 	bl	800115c <cppmain>
 8001334:	e7fc      	b.n	8001330 <main+0x30>

08001336 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b094      	sub	sp, #80	; 0x50
 800133a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001340:	2228      	movs	r2, #40	; 0x28
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f016 fd5e 	bl	8017e06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001366:	2301      	movs	r3, #1
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001374:	2301      	movs	r3, #1
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001378:	2302      	movs	r3, #2
 800137a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001380:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001382:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001386:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138c:	4618      	mov	r0, r3
 800138e:	f003 ff63 	bl	8005258 <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001398:	f000 fb10 	bl	80019bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 f9cd 	bl	8005758 <HAL_RCC_ClockConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013c4:	f000 fafa 	bl	80019bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80013c8:	2312      	movs	r3, #18
 80013ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 fb45 	bl	8005a68 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80013e4:	f000 faea 	bl	80019bc <Error_Handler>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3750      	adds	r7, #80	; 0x50
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_ADC1_Init+0x94>)
 8001402:	4a21      	ldr	r2, [pc, #132]	; (8001488 <MX_ADC1_Init+0x98>)
 8001404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <MX_ADC1_Init+0x94>)
 8001408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800140c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_ADC1_Init+0x94>)
 8001410:	2201      	movs	r2, #1
 8001412:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_ADC1_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_ADC1_Init+0x94>)
 800141c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001420:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_ADC1_Init+0x94>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_ADC1_Init+0x94>)
 800142a:	2202      	movs	r2, #2
 800142c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800142e:	4815      	ldr	r0, [pc, #84]	; (8001484 <MX_ADC1_Init+0x94>)
 8001430:	f000 fe6c 	bl	800210c <HAL_ADC_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800143a:	f000 fabf 	bl	80019bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001442:	2301      	movs	r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001446:	2307      	movs	r3, #7
 8001448:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_ADC1_Init+0x94>)
 8001450:	f001 f824 	bl	800249c <HAL_ADC_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800145a:	f000 faaf 	bl	80019bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800145e:	2301      	movs	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001462:	2302      	movs	r3, #2
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_ADC1_Init+0x94>)
 800146c:	f001 f816 	bl	800249c <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001476:	f000 faa1 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20001628 	.word	0x20001628
 8001488:	40012400 	.word	0x40012400

0800148c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_I2C1_Init+0x50>)
 8001492:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <MX_I2C1_Init+0x54>)
 8001494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_I2C1_Init+0x50>)
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <MX_I2C1_Init+0x58>)
 800149a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_I2C1_Init+0x50>)
 80014aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <MX_I2C1_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_I2C1_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_I2C1_Init+0x50>)
 80014ca:	f002 f887 	bl	80035dc <HAL_I2C_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d4:	f000 fa72 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20001594 	.word	0x20001594
 80014e0:	40005400 	.word	0x40005400
 80014e4:	000186a0 	.word	0x000186a0

080014e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b096      	sub	sp, #88	; 0x58
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2220      	movs	r2, #32
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f016 fc70 	bl	8017e06 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <MX_TIM1_Init+0x150>)
 8001528:	4a44      	ldr	r2, [pc, #272]	; (800163c <MX_TIM1_Init+0x154>)
 800152a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800152c:	4b42      	ldr	r3, [pc, #264]	; (8001638 <MX_TIM1_Init+0x150>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <MX_TIM1_Init+0x150>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <MX_TIM1_Init+0x150>)
 800153a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800153e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <MX_TIM1_Init+0x150>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001546:	4b3c      	ldr	r3, [pc, #240]	; (8001638 <MX_TIM1_Init+0x150>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <MX_TIM1_Init+0x150>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001552:	4839      	ldr	r0, [pc, #228]	; (8001638 <MX_TIM1_Init+0x150>)
 8001554:	f004 fb3e 	bl	8005bd4 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800155e:	f000 fa2d 	bl	80019bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800156c:	4619      	mov	r1, r3
 800156e:	4832      	ldr	r0, [pc, #200]	; (8001638 <MX_TIM1_Init+0x150>)
 8001570:	f004 ff92 	bl	8006498 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800157a:	f000 fa1f 	bl	80019bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800157e:	482e      	ldr	r0, [pc, #184]	; (8001638 <MX_TIM1_Init+0x150>)
 8001580:	f004 fb76 	bl	8005c70 <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800158a:	f000 fa17 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001596:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800159a:	4619      	mov	r1, r3
 800159c:	4826      	ldr	r0, [pc, #152]	; (8001638 <MX_TIM1_Init+0x150>)
 800159e:	f005 fb8f 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015a8:	f000 fa08 	bl	80019bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ac:	2360      	movs	r3, #96	; 0x60
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4819      	ldr	r0, [pc, #100]	; (8001638 <MX_TIM1_Init+0x150>)
 80015d2:	f004 fe9b 	bl	800630c <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015dc:	f000 f9ee 	bl	80019bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	2204      	movs	r2, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_TIM1_Init+0x150>)
 80015ea:	f004 fe8f 	bl	800630c <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015f4:	f000 f9e2 	bl	80019bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM1_Init+0x150>)
 800161c:	f005 fb94 	bl	8006d48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001626:	f000 f9c9 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM1_Init+0x150>)
 800162c:	f000 fb74 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 8001630:	bf00      	nop
 8001632:	3758      	adds	r7, #88	; 0x58
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000169c 	.word	0x2000169c
 800163c:	40012c00 	.word	0x40012c00

08001640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	f107 0320 	add.w	r3, r7, #32
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001676:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <MX_TIM2_Init+0xe4>)
 800167a:	2200      	movs	r2, #0
 800167c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001686:	2259      	movs	r2, #89	; 0x59
 8001688:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <MX_TIM2_Init+0xe4>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001696:	4823      	ldr	r0, [pc, #140]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001698:	f004 fa9c 	bl	8005bd4 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80016a2:	f000 f98b 	bl	80019bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b0:	4619      	mov	r1, r3
 80016b2:	481c      	ldr	r0, [pc, #112]	; (8001724 <MX_TIM2_Init+0xe4>)
 80016b4:	f004 fef0 	bl	8006498 <HAL_TIM_ConfigClockSource>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80016be:	f000 f97d 	bl	80019bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016c2:	4818      	ldr	r0, [pc, #96]	; (8001724 <MX_TIM2_Init+0xe4>)
 80016c4:	f004 fad4 	bl	8005c70 <HAL_TIM_PWM_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80016ce:	f000 f975 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	4619      	mov	r1, r3
 80016e0:	4810      	ldr	r0, [pc, #64]	; (8001724 <MX_TIM2_Init+0xe4>)
 80016e2:	f005 faed 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80016ec:	f000 f966 	bl	80019bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f0:	2360      	movs	r3, #96	; 0x60
 80016f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001708:	f004 fe00 	bl	800630c <HAL_TIM_PWM_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001712:	f000 f953 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001718:	f000 fafe 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 800171c:	bf00      	nop
 800171e:	3738      	adds	r7, #56	; 0x38
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200016dc 	.word	0x200016dc

08001728 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_TIM3_Init+0x94>)
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <MX_TIM3_Init+0x98>)
 8001748:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_TIM3_Init+0x94>)
 800174c:	2247      	movs	r2, #71	; 0x47
 800174e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_TIM3_Init+0x94>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_TIM3_Init+0x94>)
 8001758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_TIM3_Init+0x94>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_TIM3_Init+0x94>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800176a:	4814      	ldr	r0, [pc, #80]	; (80017bc <MX_TIM3_Init+0x94>)
 800176c:	f004 fa32 	bl	8005bd4 <HAL_TIM_Base_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001776:	f000 f921 	bl	80019bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4619      	mov	r1, r3
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_TIM3_Init+0x94>)
 8001788:	f004 fe86 	bl	8006498 <HAL_TIM_ConfigClockSource>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001792:	f000 f913 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	4619      	mov	r1, r3
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <MX_TIM3_Init+0x94>)
 80017a4:	f005 fa8c 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80017ae:	f000 f905 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200015e8 	.word	0x200015e8
 80017c0:	40000400 	.word	0x40000400

080017c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	; 0x30
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	2224      	movs	r2, #36	; 0x24
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f016 fb17 	bl	8017e06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017e0:	4b20      	ldr	r3, [pc, #128]	; (8001864 <MX_TIM4_Init+0xa0>)
 80017e2:	4a21      	ldr	r2, [pc, #132]	; (8001868 <MX_TIM4_Init+0xa4>)
 80017e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <MX_TIM4_Init+0xa0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <MX_TIM4_Init+0xa0>)
 80017ee:	2220      	movs	r2, #32
 80017f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <MX_TIM4_Init+0xa0>)
 80017f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_TIM4_Init+0xa0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <MX_TIM4_Init+0xa0>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001806:	2303      	movs	r3, #3
 8001808:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800180e:	2301      	movs	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800181e:	2301      	movs	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	4619      	mov	r1, r3
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <MX_TIM4_Init+0xa0>)
 8001832:	f004 fbd5 	bl	8005fe0 <HAL_TIM_Encoder_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800183c:	f000 f8be 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_TIM4_Init+0xa0>)
 800184e:	f005 fa37 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001858:	f000 f8b0 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	3730      	adds	r7, #48	; 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20001554 	.word	0x20001554
 8001868:	40000800 	.word	0x40000800

0800186c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN USB_Init 2 */
#endif
  /* USER CODE END USB_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <MX_DMA_Init+0x48>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <MX_DMA_Init+0x48>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6153      	str	r3, [r2, #20]
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <MX_DMA_Init+0x48>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	200b      	movs	r0, #11
 800189c:	f001 f8bf 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018a0:	200b      	movs	r0, #11
 80018a2:	f001 f8d8 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	200f      	movs	r0, #15
 80018ac:	f001 f8b7 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018b0:	200f      	movs	r0, #15
 80018b2:	f001 f8d0 	bl	8002a56 <HAL_NVIC_EnableIRQ>

}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000

080018c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ca:	f107 0310 	add.w	r3, r7, #16
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a33      	ldr	r2, [pc, #204]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b31      	ldr	r3, [pc, #196]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a2d      	ldr	r2, [pc, #180]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018f6:	f043 0320 	orr.w	r3, r3, #32
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <MX_GPIO_Init+0xe8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <MX_GPIO_Init+0xe8>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <MX_GPIO_Init+0xe8>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <MX_GPIO_Init+0xe8>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a21      	ldr	r2, [pc, #132]	; (80019ac <MX_GPIO_Init+0xe8>)
 8001926:	f043 0308 	orr.w	r3, r3, #8
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <MX_GPIO_Init+0xe8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193e:	481c      	ldr	r0, [pc, #112]	; (80019b0 <MX_GPIO_Init+0xec>)
 8001940:	f001 fe03 	bl	800354a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2302      	movs	r3, #2
 8001954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4619      	mov	r1, r3
 800195c:	4814      	ldr	r0, [pc, #80]	; (80019b0 <MX_GPIO_Init+0xec>)
 800195e:	f001 fc83 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN1_Pin */
  GPIO_InitStruct.Pin = DIN1_Pin;
 8001962:	2308      	movs	r3, #8
 8001964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196a:	2301      	movs	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIN1_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4619      	mov	r1, r3
 8001974:	480f      	ldr	r0, [pc, #60]	; (80019b4 <MX_GPIO_Init+0xf0>)
 8001976:	f001 fc77 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Z_Pin */
  GPIO_InitStruct.Pin = ENCODER_Z_Pin;
 800197a:	2320      	movs	r3, #32
 800197c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_GPIO_Init+0xf4>)
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001982:	2301      	movs	r3, #1
 8001984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	4619      	mov	r1, r3
 800198c:	4809      	ldr	r0, [pc, #36]	; (80019b4 <MX_GPIO_Init+0xf0>)
 800198e:	f001 fc6b 	bl	8003268 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2017      	movs	r0, #23
 8001998:	f001 f841 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800199c:	2017      	movs	r0, #23
 800199e:	f001 f85a 	bl	8002a56 <HAL_NVIC_EnableIRQ>

}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40010c00 	.word	0x40010c00
 80019b8:	10110000 	.word	0x10110000

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_MspInit+0x5c>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_MspInit+0x5c>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6193      	str	r3, [r2, #24]
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_MspInit+0x5c>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_MspInit+0x5c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_MspInit+0x5c>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_MspInit+0x5c>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_MspInit+0x60>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_MspInit+0x60>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000

08001a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a29      	ldr	r2, [pc, #164]	; (8001aec <HAL_ADC_MspInit+0xc0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d14a      	bne.n	8001ae2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a27      	ldr	r2, [pc, #156]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a80:	2303      	movs	r3, #3
 8001a82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	481a      	ldr	r0, [pc, #104]	; (8001af4 <HAL_ADC_MspInit+0xc8>)
 8001a8c:	f001 fbec 	bl	8003268 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001a92:	4a1a      	ldr	r2, [pc, #104]	; (8001afc <HAL_ADC_MspInit+0xd0>)
 8001a94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ab6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001aba:	2220      	movs	r2, #32
 8001abc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001ac8:	f000 ffe0 	bl	8002a8c <HAL_DMA_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001ad2:	f7ff ff73 	bl	80019bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001ada:	621a      	str	r2, [r3, #32]
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40012400 	.word	0x40012400
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010800 	.word	0x40010800
 8001af8:	20001658 	.word	0x20001658
 8001afc:	40020008 	.word	0x40020008

08001b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <HAL_I2C_MspInit+0x90>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d132      	bne.n	8001b86 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3e:	2312      	movs	r3, #18
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4812      	ldr	r0, [pc, #72]	; (8001b98 <HAL_I2C_MspInit+0x98>)
 8001b4e:	f001 fb8b 	bl	8003268 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_I2C_MspInit+0x9c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
 8001b68:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_I2C_MspInit+0x9c>)
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	; 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40005400 	.word	0x40005400
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010c00 	.word	0x40010c00
 8001b9c:	40010000 	.word	0x40010000

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a32      	ldr	r2, [pc, #200]	; (8001c78 <HAL_TIM_Base_MspInit+0xd8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10c      	bne.n	8001bcc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	4a31      	ldr	r2, [pc, #196]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bbc:	6193      	str	r3, [r2, #24]
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bca:	e051      	b.n	8001c70 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d133      	bne.n	8001c3e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001bf0:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <HAL_TIM_Base_MspInit+0xe4>)
 8001bf2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c0c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c16:	2220      	movs	r2, #32
 8001c18:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001c20:	4817      	ldr	r0, [pc, #92]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c22:	f000 ff33 	bl	8002a8c <HAL_DMA_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_TIM_Base_MspInit+0x90>
      Error_Handler();
 8001c2c:	f7ff fec6 	bl	80019bc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001c3c:	e018      	b.n	8001c70 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_TIM_Base_MspInit+0xe8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d113      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	61d3      	str	r3, [r2, #28]
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	201d      	movs	r0, #29
 8001c66:	f000 feda 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c6a:	201d      	movs	r0, #29
 8001c6c:	f000 fef3 	bl	8002a56 <HAL_NVIC_EnableIRQ>
}
 8001c70:	bf00      	nop
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40012c00 	.word	0x40012c00
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	20001510 	.word	0x20001510
 8001c84:	40020058 	.word	0x40020058
 8001c88:	40000400 	.word	0x40000400

08001c8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_TIM_Encoder_MspInit+0x80>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d12b      	bne.n	8001d04 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	61d3      	str	r3, [r2, #28]
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001cdc:	23c0      	movs	r3, #192	; 0xc0
 8001cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4619      	mov	r1, r3
 8001cee:	4809      	ldr	r0, [pc, #36]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x88>)
 8001cf0:	f001 faba 	bl	8003268 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	201e      	movs	r0, #30
 8001cfa:	f000 fe90 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cfe:	201e      	movs	r0, #30
 8001d00:	f000 fea9 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40000800 	.word	0x40000800
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010c00 	.word	0x40010c00

08001d18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <HAL_TIM_MspPostInit+0xbc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d119      	bne.n	8001d6c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = MOTOR_B_Pin|MOTOR_A_Pin;
 8001d50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	481d      	ldr	r0, [pc, #116]	; (8001ddc <HAL_TIM_MspPostInit+0xc4>)
 8001d66:	f001 fa7f 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d6a:	e02f      	b.n	8001dcc <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d74:	d12a      	bne.n	8001dcc <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6193      	str	r3, [r2, #24]
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	480e      	ldr	r0, [pc, #56]	; (8001ddc <HAL_TIM_MspPostInit+0xc4>)
 8001da4:	f001 fa60 	bl	8003268 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_TIM_MspPostInit+0xc8>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_TIM_MspPostInit+0xc8>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	6053      	str	r3, [r2, #4]
}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	40010000 	.word	0x40010000

08001de4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_PCD_MspInit+0x44>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d113      	bne.n	8001e1e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_PCD_MspInit+0x48>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <HAL_PCD_MspInit+0x48>)
 8001dfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e00:	61d3      	str	r3, [r2, #28]
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_PCD_MspInit+0x48>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	2014      	movs	r0, #20
 8001e14:	f000 fe03 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001e18:	2014      	movs	r0, #20
 8001e1a:	f000 fe1c 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USB_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40005c00 	.word	0x40005c00
 8001e2c:	40021000 	.word	0x40021000

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <HardFault_Handler+0x4>

08001e42 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <MemManage_Handler+0x4>

08001e48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <BusFault_Handler+0x4>

08001e4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <UsageFault_Handler+0x4>

08001e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7c:	f000 f92a 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <DMA1_Channel1_IRQHandler+0x10>)
 8001e8a:	f000 feb9 	bl	8002c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20001658 	.word	0x20001658

08001e98 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
  //HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_1);
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <DMA1_Channel5_IRQHandler+0x10>)
 8001e9e:	f000 feaf 	bl	8002c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20001510 	.word	0x20001510

08001eac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001eb0:	2020      	movs	r0, #32
 8001eb2:	f001 fb7b 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <TIM3_IRQHandler+0x10>)
 8001ec2:	f004 f91b 	bl	80060fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200015e8 	.word	0x200015e8

08001ed0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <TIM4_IRQHandler+0x10>)
 8001ed6:	f004 f911 	bl	80060fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20001554 	.word	0x20001554

08001ee4 <USB_LP_CAN1_RX0_IRQHandler>:

/* USER CODE BEGIN 1 */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001eea:	f002 fbda 	bl	80046a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000171c 	.word	0x2000171c

08001ef8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
	return 1;
 8001efc:	2301      	movs	r3, #1
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <_kill>:

int _kill(int pid, int sig)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f10:	f015 fefe 	bl	8017d10 <__errno>
 8001f14:	4602      	mov	r2, r0
 8001f16:	2316      	movs	r3, #22
 8001f18:	6013      	str	r3, [r2, #0]
	return -1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_exit>:

void _exit (int status)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffe7 	bl	8001f06 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f38:	e7fe      	b.n	8001f38 <_exit+0x12>
	...

08001f3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <_sbrk+0x50>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <_sbrk+0x16>
		heap_end = &end;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <_sbrk+0x50>)
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <_sbrk+0x54>)
 8001f50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <_sbrk+0x50>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <_sbrk+0x50>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	466a      	mov	r2, sp
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d907      	bls.n	8001f76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f66:	f015 fed3 	bl	8017d10 <__errno>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	e006      	b.n	8001f84 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <_sbrk+0x50>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <_sbrk+0x50>)
 8001f80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f82:	68fb      	ldr	r3, [r7, #12]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000b3c 	.word	0x20000b3c
 8001f90:	200021a8 	.word	0x200021a8

08001f94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <SystemInit+0x5c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <SystemInit+0x5c>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <SystemInit+0x5c>)
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4911      	ldr	r1, [pc, #68]	; (8001ff0 <SystemInit+0x5c>)
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <SystemInit+0x60>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <SystemInit+0x5c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <SystemInit+0x5c>)
 8001fb6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <SystemInit+0x5c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SystemInit+0x5c>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <SystemInit+0x5c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <SystemInit+0x5c>)
 8001fd2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001fd6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SystemInit+0x5c>)
 8001fda:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fde:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SystemInit+0x64>)
 8001fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fe6:	609a      	str	r2, [r3, #8]
#endif 
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	f8ff0000 	.word	0xf8ff0000
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ffc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ffe:	e003      	b.n	8002008 <LoopCopyDataInit>

08002000 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002002:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002004:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002006:	3104      	adds	r1, #4

08002008 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002008:	480a      	ldr	r0, [pc, #40]	; (8002034 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800200c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800200e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002010:	d3f6      	bcc.n	8002000 <CopyDataInit>
  ldr r2, =_sbss
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002014:	e002      	b.n	800201c <LoopFillZerobss>

08002016 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002018:	f842 3b04 	str.w	r3, [r2], #4

0800201c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800201e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002020:	d3f9      	bcc.n	8002016 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002022:	f7ff ffb7 	bl	8001f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002026:	f015 fe79 	bl	8017d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800202a:	f7ff f969 	bl	8001300 <main>
  bx lr
 800202e:	4770      	bx	lr
  ldr r3, =_sidata
 8002030:	08019554 	.word	0x08019554
  ldr r0, =_sdata
 8002034:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002038:	200008f8 	.word	0x200008f8
  ldr r2, =_sbss
 800203c:	200008f8 	.word	0x200008f8
  ldr r3, = _ebss
 8002040:	200021a4 	.word	0x200021a4

08002044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC1_2_IRQHandler>
	...

08002048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_Init+0x28>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_Init+0x28>)
 8002052:	f043 0310 	orr.w	r3, r3, #16
 8002056:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f000 fcd5 	bl	8002a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205e:	2000      	movs	r0, #0
 8002060:	f000 f808 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff fcb0 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000

08002074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_InitTick+0x54>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x58>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fced 	bl	8002a72 <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00e      	b.n	80020c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d80a      	bhi.n	80020be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f000 fcb5 	bl	8002a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <HAL_InitTick+0x5c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000004 	.word	0x20000004
 80020cc:	2000000c 	.word	0x2000000c
 80020d0:	20000008 	.word	0x20000008

080020d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_IncTick+0x1c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_IncTick+0x20>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a03      	ldr	r2, [pc, #12]	; (80020f4 <HAL_IncTick+0x20>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	2000000c 	.word	0x2000000c
 80020f4:	20001988 	.word	0x20001988

080020f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b02      	ldr	r3, [pc, #8]	; (8002108 <HAL_GetTick+0x10>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	20001988 	.word	0x20001988

0800210c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0be      	b.n	80022ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fc6e 	bl	8001a2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 faed 	bl	8002730 <ADC_ConversionStop_Disable>
 8002156:	4603      	mov	r3, r0
 8002158:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 8099 	bne.w	800229a <HAL_ADC_Init+0x18e>
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f040 8095 	bne.w	800229a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002178:	f023 0302 	bic.w	r3, r3, #2
 800217c:	f043 0202 	orr.w	r2, r3, #2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800218c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7b1b      	ldrb	r3, [r3, #12]
 8002192:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002194:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	4313      	orrs	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a4:	d003      	beq.n	80021ae <HAL_ADC_Init+0xa2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d102      	bne.n	80021b4 <HAL_ADC_Init+0xa8>
 80021ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b2:	e000      	b.n	80021b6 <HAL_ADC_Init+0xaa>
 80021b4:	2300      	movs	r3, #0
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7d1b      	ldrb	r3, [r3, #20]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d119      	bne.n	80021f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7b1b      	ldrb	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	035a      	lsls	r2, r3, #13
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e00b      	b.n	80021f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <HAL_ADC_Init+0x1a8>)
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	430b      	orrs	r3, r1
 800221e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002228:	d003      	beq.n	8002232 <HAL_ADC_Init+0x126>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d104      	bne.n	800223c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	3b01      	subs	r3, #1
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	430a      	orrs	r2, r1
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_ADC_Init+0x1ac>)
 8002258:	4013      	ands	r3, r2
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	429a      	cmp	r2, r3
 800225e:	d10b      	bne.n	8002278 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f023 0303 	bic.w	r3, r3, #3
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002276:	e018      	b.n	80022aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	f023 0312 	bic.w	r3, r3, #18
 8002280:	f043 0210 	orr.w	r2, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	f043 0201 	orr.w	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002298:	e007      	b.n	80022aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	f043 0210 	orr.w	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	ffe1f7fd 	.word	0xffe1f7fd
 80022b8:	ff1f0efe 	.word	0xff1f0efe

080022bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a64      	ldr	r2, [pc, #400]	; (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d004      	beq.n	80022e0 <HAL_ADC_Start_DMA+0x24>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a63      	ldr	r2, [pc, #396]	; (8002468 <HAL_ADC_Start_DMA+0x1ac>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d106      	bne.n	80022ee <HAL_ADC_Start_DMA+0x32>
 80022e0:	4b60      	ldr	r3, [pc, #384]	; (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 80b3 	bne.w	8002454 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_Start_DMA+0x40>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e0ae      	b.n	800245a <HAL_ADC_Start_DMA+0x19e>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f9c1 	bl	800268c <ADC_Enable>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f040 809a 	bne.w	800244a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a4e      	ldr	r2, [pc, #312]	; (8002468 <HAL_ADC_Start_DMA+0x1ac>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d105      	bne.n	8002340 <HAL_ADC_Start_DMA+0x84>
 8002334:	4b4b      	ldr	r3, [pc, #300]	; (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d115      	bne.n	800236c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	2b00      	cmp	r3, #0
 8002358:	d026      	beq.n	80023a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002362:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800236a:	e01d      	b.n	80023a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a39      	ldr	r2, [pc, #228]	; (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d004      	beq.n	800238c <HAL_ADC_Start_DMA+0xd0>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a38      	ldr	r2, [pc, #224]	; (8002468 <HAL_ADC_Start_DMA+0x1ac>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d10d      	bne.n	80023a8 <HAL_ADC_Start_DMA+0xec>
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	f023 0206 	bic.w	r2, r3, #6
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
 80023c0:	e002      	b.n	80023c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <HAL_ADC_Start_DMA+0x1b0>)
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <HAL_ADC_Start_DMA+0x1b4>)
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <HAL_ADC_Start_DMA+0x1b8>)
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0202 	mvn.w	r2, #2
 80023f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002400:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a18      	ldr	r0, [r3, #32]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	334c      	adds	r3, #76	; 0x4c
 800240c:	4619      	mov	r1, r3
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f000 fb95 	bl	8002b40 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002420:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002424:	d108      	bne.n	8002438 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002434:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002436:	e00f      	b.n	8002458 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002446:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002448:	e006      	b.n	8002458 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002452:	e001      	b.n	8002458 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002458:	7dfb      	ldrb	r3, [r7, #23]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40012400 	.word	0x40012400
 8002468:	40012800 	.word	0x40012800
 800246c:	080027a5 	.word	0x080027a5
 8002470:	08002821 	.word	0x08002821
 8002474:	0800283d 	.word	0x0800283d

08002478 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x20>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e0dc      	b.n	8002676 <HAL_ADC_ConfigChannel+0x1da>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b06      	cmp	r3, #6
 80024ca:	d81c      	bhi.n	8002506 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b05      	subs	r3, #5
 80024de:	221f      	movs	r2, #31
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	4019      	ands	r1, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	3b05      	subs	r3, #5
 80024f8:	fa00 f203 	lsl.w	r2, r0, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	635a      	str	r2, [r3, #52]	; 0x34
 8002504:	e03c      	b.n	8002580 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d81c      	bhi.n	8002548 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	3b23      	subs	r3, #35	; 0x23
 8002520:	221f      	movs	r2, #31
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	4019      	ands	r1, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b23      	subs	r3, #35	; 0x23
 800253a:	fa00 f203 	lsl.w	r2, r0, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
 8002546:	e01b      	b.n	8002580 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b41      	subs	r3, #65	; 0x41
 800255a:	221f      	movs	r2, #31
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	4019      	ands	r1, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b41      	subs	r3, #65	; 0x41
 8002574:	fa00 f203 	lsl.w	r2, r0, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b09      	cmp	r3, #9
 8002586:	d91c      	bls.n	80025c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68d9      	ldr	r1, [r3, #12]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	3b1e      	subs	r3, #30
 800259a:	2207      	movs	r2, #7
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	4019      	ands	r1, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6898      	ldr	r0, [r3, #8]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	3b1e      	subs	r3, #30
 80025b4:	fa00 f203 	lsl.w	r2, r0, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	e019      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6919      	ldr	r1, [r3, #16]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	2207      	movs	r2, #7
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	4019      	ands	r1, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6898      	ldr	r0, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	fa00 f203 	lsl.w	r2, r0, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d003      	beq.n	8002606 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002602:	2b11      	cmp	r3, #17
 8002604:	d132      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <HAL_ADC_ConfigChannel+0x1e4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d125      	bne.n	800265c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d126      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800262c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b10      	cmp	r3, #16
 8002634:	d11a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <HAL_ADC_ConfigChannel+0x1e8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <HAL_ADC_ConfigChannel+0x1ec>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	0c9a      	lsrs	r2, r3, #18
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800264c:	e002      	b.n	8002654 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	3b01      	subs	r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <HAL_ADC_ConfigChannel+0x1b2>
 800265a:	e007      	b.n	800266c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40012400 	.word	0x40012400
 8002684:	20000004 	.word	0x20000004
 8002688:	431bde83 	.word	0x431bde83

0800268c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d039      	beq.n	800271e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <ADC_Enable+0x9c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1b      	ldr	r2, [pc, #108]	; (800272c <ADC_Enable+0xa0>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	0c9b      	lsrs	r3, r3, #18
 80026c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026c8:	e002      	b.n	80026d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f9      	bne.n	80026ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026d6:	f7ff fd0f 	bl	80020f8 <HAL_GetTick>
 80026da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026dc:	e018      	b.n	8002710 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026de:	f7ff fd0b 	bl	80020f8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d911      	bls.n	8002710 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f043 0210 	orr.w	r2, r3, #16
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e007      	b.n	8002720 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d1df      	bne.n	80026de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000004 	.word	0x20000004
 800272c:	431bde83 	.word	0x431bde83

08002730 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d127      	bne.n	800279a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800275a:	f7ff fccd 	bl	80020f8 <HAL_GetTick>
 800275e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002760:	e014      	b.n	800278c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002762:	f7ff fcc9 	bl	80020f8 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d90d      	bls.n	800278c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	f043 0210 	orr.w	r2, r3, #16
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e007      	b.n	800279c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d0e3      	beq.n	8002762 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d127      	bne.n	800280e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027d4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027d8:	d115      	bne.n	8002806 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d111      	bne.n	8002806 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d105      	bne.n	8002806 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	f043 0201 	orr.w	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f00f fc38 	bl	801207c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800280c:	e004      	b.n	8002818 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fe22 	bl	8002478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff fe11 	bl	800248a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4906      	ldr	r1, [pc, #24]	; (8002908 <__NVIC_EnableIRQ+0x34>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d4:	d301      	bcc.n	80029da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00f      	b.n	80029fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <SysTick_Config+0x40>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e2:	210f      	movs	r1, #15
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f7ff ff90 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <SysTick_Config+0x40>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f2:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <SysTick_Config+0x40>)
 80029f4:	2207      	movs	r2, #7
 80029f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	e000e010 	.word	0xe000e010

08002a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff2d 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a30:	f7ff ff42 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ff90 	bl	8002960 <NVIC_EncodePriority>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff5f 	bl	800290c <__NVIC_SetPriority>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff35 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ffa2 	bl	80029c4 <SysTick_Config>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e043      	b.n	8002b2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_DMA_Init+0xa8>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <HAL_DMA_Init+0xac>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	009a      	lsls	r2, r3, #2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <HAL_DMA_Init+0xb0>)
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ad6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ada:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	bffdfff8 	.word	0xbffdfff8
 8002b38:	cccccccd 	.word	0xcccccccd
 8002b3c:	40020000 	.word	0x40020000

08002b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_DMA_Start_IT+0x20>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e04a      	b.n	8002bf6 <HAL_DMA_Start_IT+0xb6>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d13a      	bne.n	8002be8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f938 	bl	8002e0c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 020e 	orr.w	r2, r2, #14
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e00f      	b.n	8002bd6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0204 	bic.w	r2, r2, #4
 8002bc4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 020a 	orr.w	r2, r2, #10
 8002bd4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e005      	b.n	8002bf4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d04f      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xc8>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04a      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0204 	bic.w	r2, r2, #4
 8002c4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a66      	ldr	r2, [pc, #408]	; (8002df0 <HAL_DMA_IRQHandler+0x1f0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d029      	beq.n	8002cae <HAL_DMA_IRQHandler+0xae>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a65      	ldr	r2, [pc, #404]	; (8002df4 <HAL_DMA_IRQHandler+0x1f4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d022      	beq.n	8002caa <HAL_DMA_IRQHandler+0xaa>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a63      	ldr	r2, [pc, #396]	; (8002df8 <HAL_DMA_IRQHandler+0x1f8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01a      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0xa4>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a62      	ldr	r2, [pc, #392]	; (8002dfc <HAL_DMA_IRQHandler+0x1fc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d012      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x9e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a60      	ldr	r2, [pc, #384]	; (8002e00 <HAL_DMA_IRQHandler+0x200>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00a      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x98>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5f      	ldr	r2, [pc, #380]	; (8002e04 <HAL_DMA_IRQHandler+0x204>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d102      	bne.n	8002c92 <HAL_DMA_IRQHandler+0x92>
 8002c8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c90:	e00e      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002c92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c96:	e00b      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002c98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c9c:	e008      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002c9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ca2:	e005      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca8:	e002      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002caa:	2340      	movs	r3, #64	; 0x40
 8002cac:	e000      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	4a55      	ldr	r2, [pc, #340]	; (8002e08 <HAL_DMA_IRQHandler+0x208>)
 8002cb2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8094 	beq.w	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cc6:	e08e      	b.n	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	2202      	movs	r2, #2
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d056      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x186>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d051      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 020a 	bic.w	r2, r2, #10
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a38      	ldr	r2, [pc, #224]	; (8002df0 <HAL_DMA_IRQHandler+0x1f0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d029      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x166>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a37      	ldr	r2, [pc, #220]	; (8002df4 <HAL_DMA_IRQHandler+0x1f4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d022      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x162>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a35      	ldr	r2, [pc, #212]	; (8002df8 <HAL_DMA_IRQHandler+0x1f8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d01a      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x15c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <HAL_DMA_IRQHandler+0x1fc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d012      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x156>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a32      	ldr	r2, [pc, #200]	; (8002e00 <HAL_DMA_IRQHandler+0x200>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00a      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x150>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a31      	ldr	r2, [pc, #196]	; (8002e04 <HAL_DMA_IRQHandler+0x204>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d102      	bne.n	8002d4a <HAL_DMA_IRQHandler+0x14a>
 8002d44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d48:	e00e      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d4e:	e00b      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d54:	e008      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d5a:	e005      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d60:	e002      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d62:	2320      	movs	r3, #32
 8002d64:	e000      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d66:	2302      	movs	r3, #2
 8002d68:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <HAL_DMA_IRQHandler+0x208>)
 8002d6a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d034      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d84:	e02f      	b.n	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d028      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x1e8>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d023      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 020e 	bic.w	r2, r2, #14
 8002dae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
    }
  }
  return;
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
}
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40020008 	.word	0x40020008
 8002df4:	4002001c 	.word	0x4002001c
 8002df8:	40020030 	.word	0x40020030
 8002dfc:	40020044 	.word	0x40020044
 8002e00:	40020058 	.word	0x40020058
 8002e04:	4002006c 	.word	0x4002006c
 8002e08:	40020000 	.word	0x40020000

08002e0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d108      	bne.n	8002e4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e4a:	e007      	b.n	8002e5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_FLASH_Program+0xd8>)
 8002e84:	7e1b      	ldrb	r3, [r3, #24]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_FLASH_Program+0x26>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e054      	b.n	8002f38 <HAL_FLASH_Program+0xd0>
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <HAL_FLASH_Program+0xd8>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002e94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e98:	f000 f8a8 	bl	8002fec <FLASH_WaitForLastOperation>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d144      	bne.n	8002f30 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d102      	bne.n	8002eb2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002eac:	2301      	movs	r3, #1
 8002eae:	757b      	strb	r3, [r7, #21]
 8002eb0:	e007      	b.n	8002ec2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d102      	bne.n	8002ebe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	757b      	strb	r3, [r7, #21]
 8002ebc:	e001      	b.n	8002ec2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75bb      	strb	r3, [r7, #22]
 8002ec6:	e02d      	b.n	8002f24 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002ec8:	7dbb      	ldrb	r3, [r7, #22]
 8002eca:	005a      	lsls	r2, r3, #1
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	eb02 0c03 	add.w	ip, r2, r3
 8002ed2:	7dbb      	ldrb	r3, [r7, #22]
 8002ed4:	0119      	lsls	r1, r3, #4
 8002ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eda:	f1c1 0620 	rsb	r6, r1, #32
 8002ede:	f1a1 0020 	sub.w	r0, r1, #32
 8002ee2:	fa22 f401 	lsr.w	r4, r2, r1
 8002ee6:	fa03 f606 	lsl.w	r6, r3, r6
 8002eea:	4334      	orrs	r4, r6
 8002eec:	fa23 f000 	lsr.w	r0, r3, r0
 8002ef0:	4304      	orrs	r4, r0
 8002ef2:	fa23 f501 	lsr.w	r5, r3, r1
 8002ef6:	b2a3      	uxth	r3, r4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4660      	mov	r0, ip
 8002efc:	f000 f85a 	bl	8002fb4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f04:	f000 f872 	bl	8002fec <FLASH_WaitForLastOperation>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_FLASH_Program+0xdc>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <HAL_FLASH_Program+0xdc>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002f1e:	7dbb      	ldrb	r3, [r7, #22]
 8002f20:	3301      	adds	r3, #1
 8002f22:	75bb      	strb	r3, [r7, #22]
 8002f24:	7dba      	ldrb	r2, [r7, #22]
 8002f26:	7d7b      	ldrb	r3, [r7, #21]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3cd      	bcc.n	8002ec8 <HAL_FLASH_Program+0x60>
 8002f2c:	e000      	b.n	8002f30 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002f2e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_FLASH_Program+0xd8>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	761a      	strb	r2, [r3, #24]

  return status;
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f40:	20001990 	.word	0x20001990
 8002f44:	40022000 	.word	0x40022000

08002f48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <HAL_FLASH_Unlock+0x40>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_FLASH_Unlock+0x40>)
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_FLASH_Unlock+0x44>)
 8002f62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_FLASH_Unlock+0x40>)
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <HAL_FLASH_Unlock+0x48>)
 8002f68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_FLASH_Unlock+0x40>)
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	45670123 	.word	0x45670123
 8002f90:	cdef89ab 	.word	0xcdef89ab

08002f94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_FLASH_Lock+0x1c>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_FLASH_Lock+0x1c>)
 8002f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40022000 	.word	0x40022000

08002fb4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <FLASH_Program_HalfWord+0x30>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <FLASH_Program_HalfWord+0x34>)
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <FLASH_Program_HalfWord+0x34>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	887a      	ldrh	r2, [r7, #2]
 8002fd6:	801a      	strh	r2, [r3, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20001990 	.word	0x20001990
 8002fe8:	40022000 	.word	0x40022000

08002fec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7ff f880 	bl	80020f8 <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002ffa:	e010      	b.n	800301e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d00c      	beq.n	800301e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <FLASH_WaitForLastOperation+0x2e>
 800300a:	f7ff f875 	bl	80020f8 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	d201      	bcs.n	800301e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e025      	b.n	800306a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e8      	bne.n	8002ffc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003036:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 8003038:	2220      	movs	r2, #32
 800303a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003060:	f000 f80a 	bl	8003078 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000

08003078 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003082:	4b23      	ldr	r3, [pc, #140]	; (8003110 <FLASH_SetErrorCode+0x98>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800308e:	4b21      	ldr	r3, [pc, #132]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	4a1f      	ldr	r2, [pc, #124]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 8003098:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f043 0310 	orr.w	r3, r3, #16
 80030a0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 80030b8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f043 0304 	orr.w	r3, r3, #4
 80030d6:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 80030d8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f240 1201 	movw	r2, #257	; 0x101
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d106      	bne.n	80030fe <FLASH_SetErrorCode+0x86>
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	4a06      	ldr	r2, [pc, #24]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	61d3      	str	r3, [r2, #28]
}  
 80030fc:	e002      	b.n	8003104 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80030fe:	4a04      	ldr	r2, [pc, #16]	; (8003110 <FLASH_SetErrorCode+0x98>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	60d3      	str	r3, [r2, #12]
}  
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40022000 	.word	0x40022000
 8003114:	20001990 	.word	0x20001990

08003118 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800312a:	4b2f      	ldr	r3, [pc, #188]	; (80031e8 <HAL_FLASHEx_Erase+0xd0>)
 800312c:	7e1b      	ldrb	r3, [r3, #24]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_FLASHEx_Erase+0x1e>
 8003132:	2302      	movs	r3, #2
 8003134:	e053      	b.n	80031de <HAL_FLASHEx_Erase+0xc6>
 8003136:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_FLASHEx_Erase+0xd0>)
 8003138:	2201      	movs	r2, #1
 800313a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d116      	bne.n	8003172 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003144:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003148:	f7ff ff50 	bl	8002fec <FLASH_WaitForLastOperation>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d141      	bne.n	80031d6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003152:	2001      	movs	r0, #1
 8003154:	f000 f84c 	bl	80031f0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003158:	f24c 3050 	movw	r0, #50000	; 0xc350
 800315c:	f7ff ff46 	bl	8002fec <FLASH_WaitForLastOperation>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_FLASHEx_Erase+0xd4>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	4a20      	ldr	r2, [pc, #128]	; (80031ec <HAL_FLASHEx_Erase+0xd4>)
 800316a:	f023 0304 	bic.w	r3, r3, #4
 800316e:	6113      	str	r3, [r2, #16]
 8003170:	e031      	b.n	80031d6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003172:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003176:	f7ff ff39 	bl	8002fec <FLASH_WaitForLastOperation>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d12a      	bne.n	80031d6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f04f 32ff 	mov.w	r2, #4294967295
 8003186:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	e019      	b.n	80031c4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003190:	68b8      	ldr	r0, [r7, #8]
 8003192:	f000 f849 	bl	8003228 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003196:	f24c 3050 	movw	r0, #50000	; 0xc350
 800319a:	f7ff ff27 	bl	8002fec <FLASH_WaitForLastOperation>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_FLASHEx_Erase+0xd4>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_FLASHEx_Erase+0xd4>)
 80031a8:	f023 0302 	bic.w	r3, r3, #2
 80031ac:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	601a      	str	r2, [r3, #0]
            break;
 80031ba:	e00c      	b.n	80031d6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031c2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	029a      	lsls	r2, r3, #10
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3dc      	bcc.n	8003190 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <HAL_FLASHEx_Erase+0xd0>)
 80031d8:	2200      	movs	r2, #0
 80031da:	761a      	strb	r2, [r3, #24]

  return status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20001990 	.word	0x20001990
 80031ec:	40022000 	.word	0x40022000

080031f0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <FLASH_MassErase+0x30>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <FLASH_MassErase+0x34>)
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	4a08      	ldr	r2, [pc, #32]	; (8003224 <FLASH_MassErase+0x34>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <FLASH_MassErase+0x34>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	4a05      	ldr	r2, [pc, #20]	; (8003224 <FLASH_MassErase+0x34>)
 8003210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003214:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	20001990 	.word	0x20001990
 8003224:	40022000 	.word	0x40022000

08003228 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <FLASH_PageErase+0x38>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <FLASH_PageErase+0x3c>)
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <FLASH_PageErase+0x3c>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003242:	4a08      	ldr	r2, [pc, #32]	; (8003264 <FLASH_PageErase+0x3c>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <FLASH_PageErase+0x3c>)
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	4a05      	ldr	r2, [pc, #20]	; (8003264 <FLASH_PageErase+0x3c>)
 800324e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003252:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20001990 	.word	0x20001990
 8003264:	40022000 	.word	0x40022000

08003268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003268:	b480      	push	{r7}
 800326a:	b08b      	sub	sp, #44	; 0x2c
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003272:	2300      	movs	r3, #0
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800327a:	e127      	b.n	80034cc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800327c:	2201      	movs	r2, #1
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	429a      	cmp	r2, r3
 8003296:	f040 8116 	bne.w	80034c6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b12      	cmp	r3, #18
 80032a0:	d034      	beq.n	800330c <HAL_GPIO_Init+0xa4>
 80032a2:	2b12      	cmp	r3, #18
 80032a4:	d80d      	bhi.n	80032c2 <HAL_GPIO_Init+0x5a>
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d02b      	beq.n	8003302 <HAL_GPIO_Init+0x9a>
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d804      	bhi.n	80032b8 <HAL_GPIO_Init+0x50>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d031      	beq.n	8003316 <HAL_GPIO_Init+0xae>
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d01c      	beq.n	80032f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032b6:	e048      	b.n	800334a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d043      	beq.n	8003344 <HAL_GPIO_Init+0xdc>
 80032bc:	2b11      	cmp	r3, #17
 80032be:	d01b      	beq.n	80032f8 <HAL_GPIO_Init+0x90>
          break;
 80032c0:	e043      	b.n	800334a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032c2:	4a89      	ldr	r2, [pc, #548]	; (80034e8 <HAL_GPIO_Init+0x280>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d026      	beq.n	8003316 <HAL_GPIO_Init+0xae>
 80032c8:	4a87      	ldr	r2, [pc, #540]	; (80034e8 <HAL_GPIO_Init+0x280>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d806      	bhi.n	80032dc <HAL_GPIO_Init+0x74>
 80032ce:	4a87      	ldr	r2, [pc, #540]	; (80034ec <HAL_GPIO_Init+0x284>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d020      	beq.n	8003316 <HAL_GPIO_Init+0xae>
 80032d4:	4a86      	ldr	r2, [pc, #536]	; (80034f0 <HAL_GPIO_Init+0x288>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01d      	beq.n	8003316 <HAL_GPIO_Init+0xae>
          break;
 80032da:	e036      	b.n	800334a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032dc:	4a85      	ldr	r2, [pc, #532]	; (80034f4 <HAL_GPIO_Init+0x28c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d019      	beq.n	8003316 <HAL_GPIO_Init+0xae>
 80032e2:	4a85      	ldr	r2, [pc, #532]	; (80034f8 <HAL_GPIO_Init+0x290>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d016      	beq.n	8003316 <HAL_GPIO_Init+0xae>
 80032e8:	4a84      	ldr	r2, [pc, #528]	; (80034fc <HAL_GPIO_Init+0x294>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_GPIO_Init+0xae>
          break;
 80032ee:	e02c      	b.n	800334a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	623b      	str	r3, [r7, #32]
          break;
 80032f6:	e028      	b.n	800334a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	3304      	adds	r3, #4
 80032fe:	623b      	str	r3, [r7, #32]
          break;
 8003300:	e023      	b.n	800334a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	3308      	adds	r3, #8
 8003308:	623b      	str	r3, [r7, #32]
          break;
 800330a:	e01e      	b.n	800334a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	330c      	adds	r3, #12
 8003312:	623b      	str	r3, [r7, #32]
          break;
 8003314:	e019      	b.n	800334a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800331e:	2304      	movs	r3, #4
 8003320:	623b      	str	r3, [r7, #32]
          break;
 8003322:	e012      	b.n	800334a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800332c:	2308      	movs	r3, #8
 800332e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	611a      	str	r2, [r3, #16]
          break;
 8003336:	e008      	b.n	800334a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003338:	2308      	movs	r3, #8
 800333a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	615a      	str	r2, [r3, #20]
          break;
 8003342:	e002      	b.n	800334a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003344:	2300      	movs	r3, #0
 8003346:	623b      	str	r3, [r7, #32]
          break;
 8003348:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2bff      	cmp	r3, #255	; 0xff
 800334e:	d801      	bhi.n	8003354 <HAL_GPIO_Init+0xec>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	e001      	b.n	8003358 <HAL_GPIO_Init+0xf0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2bff      	cmp	r3, #255	; 0xff
 800335e:	d802      	bhi.n	8003366 <HAL_GPIO_Init+0xfe>
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	e002      	b.n	800336c <HAL_GPIO_Init+0x104>
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	3b08      	subs	r3, #8
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	210f      	movs	r1, #15
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	401a      	ands	r2, r3
 800337e:	6a39      	ldr	r1, [r7, #32]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	431a      	orrs	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8096 	beq.w	80034c6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800339a:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_GPIO_Init+0x298>)
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_GPIO_Init+0x298>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6193      	str	r3, [r2, #24]
 80033a6:	4b56      	ldr	r3, [pc, #344]	; (8003500 <HAL_GPIO_Init+0x298>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033b2:	4a54      	ldr	r2, [pc, #336]	; (8003504 <HAL_GPIO_Init+0x29c>)
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	3302      	adds	r3, #2
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4013      	ands	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4b      	ldr	r2, [pc, #300]	; (8003508 <HAL_GPIO_Init+0x2a0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x19e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4a      	ldr	r2, [pc, #296]	; (800350c <HAL_GPIO_Init+0x2a4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x19a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a49      	ldr	r2, [pc, #292]	; (8003510 <HAL_GPIO_Init+0x2a8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x196>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a48      	ldr	r2, [pc, #288]	; (8003514 <HAL_GPIO_Init+0x2ac>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x192>
 80033f6:	2303      	movs	r3, #3
 80033f8:	e006      	b.n	8003408 <HAL_GPIO_Init+0x1a0>
 80033fa:	2304      	movs	r3, #4
 80033fc:	e004      	b.n	8003408 <HAL_GPIO_Init+0x1a0>
 80033fe:	2302      	movs	r3, #2
 8003400:	e002      	b.n	8003408 <HAL_GPIO_Init+0x1a0>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_GPIO_Init+0x1a0>
 8003406:	2300      	movs	r3, #0
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	f002 0203 	and.w	r2, r2, #3
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	4093      	lsls	r3, r2
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003418:	493a      	ldr	r1, [pc, #232]	; (8003504 <HAL_GPIO_Init+0x29c>)
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003432:	4b39      	ldr	r3, [pc, #228]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4938      	ldr	r1, [pc, #224]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
 800343e:	e006      	b.n	800344e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003440:	4b35      	ldr	r3, [pc, #212]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	43db      	mvns	r3, r3
 8003448:	4933      	ldr	r1, [pc, #204]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 800344a:	4013      	ands	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d006      	beq.n	8003468 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	492e      	ldr	r1, [pc, #184]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
 8003466:	e006      	b.n	8003476 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003468:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	43db      	mvns	r3, r3
 8003470:	4929      	ldr	r1, [pc, #164]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003472:	4013      	ands	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003482:	4b25      	ldr	r3, [pc, #148]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	4924      	ldr	r1, [pc, #144]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
 800348e:	e006      	b.n	800349e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003490:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	43db      	mvns	r3, r3
 8003498:	491f      	ldr	r1, [pc, #124]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 800349a:	4013      	ands	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d006      	beq.n	80034b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	491a      	ldr	r1, [pc, #104]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60cb      	str	r3, [r1, #12]
 80034b6:	e006      	b.n	80034c6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034b8:	4b17      	ldr	r3, [pc, #92]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	43db      	mvns	r3, r3
 80034c0:	4915      	ldr	r1, [pc, #84]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	3301      	adds	r3, #1
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	fa22 f303 	lsr.w	r3, r2, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f47f aed0 	bne.w	800327c <HAL_GPIO_Init+0x14>
  }
}
 80034dc:	bf00      	nop
 80034de:	372c      	adds	r7, #44	; 0x2c
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	10210000 	.word	0x10210000
 80034ec:	10110000 	.word	0x10110000
 80034f0:	10120000 	.word	0x10120000
 80034f4:	10310000 	.word	0x10310000
 80034f8:	10320000 	.word	0x10320000
 80034fc:	10220000 	.word	0x10220000
 8003500:	40021000 	.word	0x40021000
 8003504:	40010000 	.word	0x40010000
 8003508:	40010800 	.word	0x40010800
 800350c:	40010c00 	.word	0x40010c00
 8003510:	40011000 	.word	0x40011000
 8003514:	40011400 	.word	0x40011400
 8003518:	40010400 	.word	0x40010400

0800351c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e001      	b.n	800353e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	807b      	strh	r3, [r7, #2]
 8003556:	4613      	mov	r3, r2
 8003558:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800355a:	787b      	ldrb	r3, [r7, #1]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003560:	887a      	ldrh	r2, [r7, #2]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003566:	e003      	b.n	8003570 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	041a      	lsls	r2, r3, #16
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	611a      	str	r2, [r3, #16]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	887b      	ldrh	r3, [r7, #2]
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003598:	e002      	b.n	80035a0 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800359a:	887a      	ldrh	r2, [r7, #2]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	611a      	str	r2, [r3, #16]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f00e fdc4 	bl	8012158 <HAL_GPIO_EXTI_Callback>
  }
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e10f      	b.n	800380e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fe fa7c 	bl	8001b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2224      	movs	r2, #36	; 0x24
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003620:	f002 f9f0 	bl	8005a04 <HAL_RCC_GetPCLK1Freq>
 8003624:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4a7b      	ldr	r2, [pc, #492]	; (8003818 <HAL_I2C_Init+0x23c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d807      	bhi.n	8003640 <HAL_I2C_Init+0x64>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a7a      	ldr	r2, [pc, #488]	; (800381c <HAL_I2C_Init+0x240>)
 8003634:	4293      	cmp	r3, r2
 8003636:	bf94      	ite	ls
 8003638:	2301      	movls	r3, #1
 800363a:	2300      	movhi	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e006      	b.n	800364e <HAL_I2C_Init+0x72>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a77      	ldr	r2, [pc, #476]	; (8003820 <HAL_I2C_Init+0x244>)
 8003644:	4293      	cmp	r3, r2
 8003646:	bf94      	ite	ls
 8003648:	2301      	movls	r3, #1
 800364a:	2300      	movhi	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0db      	b.n	800380e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a72      	ldr	r2, [pc, #456]	; (8003824 <HAL_I2C_Init+0x248>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	0c9b      	lsrs	r3, r3, #18
 8003660:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a64      	ldr	r2, [pc, #400]	; (8003818 <HAL_I2C_Init+0x23c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d802      	bhi.n	8003690 <HAL_I2C_Init+0xb4>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3301      	adds	r3, #1
 800368e:	e009      	b.n	80036a4 <HAL_I2C_Init+0xc8>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	4a63      	ldr	r2, [pc, #396]	; (8003828 <HAL_I2C_Init+0x24c>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	3301      	adds	r3, #1
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4956      	ldr	r1, [pc, #344]	; (8003818 <HAL_I2C_Init+0x23c>)
 80036c0:	428b      	cmp	r3, r1
 80036c2:	d80d      	bhi.n	80036e0 <HAL_I2C_Init+0x104>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1e59      	subs	r1, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d2:	3301      	adds	r3, #1
 80036d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d8:	2b04      	cmp	r3, #4
 80036da:	bf38      	it	cc
 80036dc:	2304      	movcc	r3, #4
 80036de:	e04f      	b.n	8003780 <HAL_I2C_Init+0x1a4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d111      	bne.n	800370c <HAL_I2C_Init+0x130>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1e58      	subs	r0, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	440b      	add	r3, r1
 80036f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036fa:	3301      	adds	r3, #1
 80036fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	e012      	b.n	8003732 <HAL_I2C_Init+0x156>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1e58      	subs	r0, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	0099      	lsls	r1, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003722:	3301      	adds	r3, #1
 8003724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Init+0x15e>
 8003736:	2301      	movs	r3, #1
 8003738:	e022      	b.n	8003780 <HAL_I2C_Init+0x1a4>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10e      	bne.n	8003760 <HAL_I2C_Init+0x184>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1e58      	subs	r0, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	440b      	add	r3, r1
 8003750:	fbb0 f3f3 	udiv	r3, r0, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375e:	e00f      	b.n	8003780 <HAL_I2C_Init+0x1a4>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1e58      	subs	r0, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	0099      	lsls	r1, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	fbb0 f3f3 	udiv	r3, r0, r3
 8003776:	3301      	adds	r3, #1
 8003778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	6809      	ldr	r1, [r1, #0]
 8003784:	4313      	orrs	r3, r2
 8003786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6911      	ldr	r1, [r2, #16]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68d2      	ldr	r2, [r2, #12]
 80037ba:	4311      	orrs	r1, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	000186a0 	.word	0x000186a0
 800381c:	001e847f 	.word	0x001e847f
 8003820:	003d08ff 	.word	0x003d08ff
 8003824:	431bde83 	.word	0x431bde83
 8003828:	10624dd3 	.word	0x10624dd3

0800382c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af02      	add	r7, sp, #8
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	461a      	mov	r2, r3
 8003838:	460b      	mov	r3, r1
 800383a:	817b      	strh	r3, [r7, #10]
 800383c:	4613      	mov	r3, r2
 800383e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003840:	f7fe fc5a 	bl	80020f8 <HAL_GetTick>
 8003844:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b20      	cmp	r3, #32
 8003850:	f040 80e0 	bne.w	8003a14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2319      	movs	r3, #25
 800385a:	2201      	movs	r2, #1
 800385c:	4970      	ldr	r1, [pc, #448]	; (8003a20 <HAL_I2C_Master_Transmit+0x1f4>)
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fc3c 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
 800386c:	e0d3      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_I2C_Master_Transmit+0x50>
 8003878:	2302      	movs	r3, #2
 800387a:	e0cc      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d007      	beq.n	80038a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2221      	movs	r2, #33	; 0x21
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2210      	movs	r2, #16
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	893a      	ldrh	r2, [r7, #8]
 80038d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a50      	ldr	r2, [pc, #320]	; (8003a24 <HAL_I2C_Master_Transmit+0x1f8>)
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038e4:	8979      	ldrh	r1, [r7, #10]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	6a3a      	ldr	r2, [r7, #32]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 faca 	bl	8003e84 <I2C_MasterRequestWrite>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e08d      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003910:	e066      	b.n	80039e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	6a39      	ldr	r1, [r7, #32]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fcb6 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	2b04      	cmp	r3, #4
 8003928:	d107      	bne.n	800393a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06b      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	781a      	ldrb	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b04      	cmp	r3, #4
 800397a:	d11b      	bne.n	80039b4 <HAL_I2C_Master_Transmit+0x188>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003980:	2b00      	cmp	r3, #0
 8003982:	d017      	beq.n	80039b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	781a      	ldrb	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	6a39      	ldr	r1, [r7, #32]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 fca6 	bl	800430a <I2C_WaitOnBTFFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00d      	beq.n	80039e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d107      	bne.n	80039dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e01a      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d194      	bne.n	8003912 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e000      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	00100002 	.word	0x00100002
 8003a24:	ffff0000 	.word	0xffff0000

08003a28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	; 0x30
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	461a      	mov	r2, r3
 8003a34:	460b      	mov	r3, r1
 8003a36:	817b      	strh	r3, [r7, #10]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a3c:	f7fe fb5c 	bl	80020f8 <HAL_GetTick>
 8003a40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	f040 8213 	bne.w	8003e76 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2319      	movs	r3, #25
 8003a56:	2201      	movs	r2, #1
 8003a58:	497e      	ldr	r1, [pc, #504]	; (8003c54 <HAL_I2C_Master_Receive+0x22c>)
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fb3e 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
 8003a68:	e206      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_I2C_Master_Receive+0x50>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e1ff      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d007      	beq.n	8003a9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2222      	movs	r2, #34	; 0x22
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2210      	movs	r2, #16
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	893a      	ldrh	r2, [r7, #8]
 8003ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a5e      	ldr	r2, [pc, #376]	; (8003c58 <HAL_I2C_Master_Receive+0x230>)
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ae0:	8979      	ldrh	r1, [r7, #10]
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fa42 	bl	8003f70 <I2C_MasterRequestRead>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e1c0      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d113      	bne.n	8003b26 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	623b      	str	r3, [r7, #32]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	623b      	str	r3, [r7, #32]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	623b      	str	r3, [r7, #32]
 8003b12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e194      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d11d      	bne.n	8003b6a <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b3e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b66:	b662      	cpsie	i
 8003b68:	e172      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d11d      	bne.n	8003bae <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b82:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003baa:	b662      	cpsie	i
 8003bac:	e150      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bd4:	e13c      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	f200 80f5 	bhi.w	8003dca <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d123      	bne.n	8003c30 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fbcd 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e13d      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c2e:	e10f      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d150      	bne.n	8003cda <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	2200      	movs	r2, #0
 8003c40:	4906      	ldr	r1, [pc, #24]	; (8003c5c <HAL_I2C_Master_Receive+0x234>)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fa4a 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e112      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
 8003c52:	bf00      	nop
 8003c54:	00100002 	.word	0x00100002
 8003c58:	ffff0000 	.word	0xffff0000
 8003c5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c60:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c70:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ca4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cd8:	e0ba      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	4967      	ldr	r1, [pc, #412]	; (8003e80 <HAL_I2C_Master_Receive+0x458>)
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f9f9 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0c1      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d04:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	2200      	movs	r2, #0
 8003d40:	494f      	ldr	r1, [pc, #316]	; (8003e80 <HAL_I2C_Master_Receive+0x458>)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f9ca 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e092      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d60:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d94:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dc8:	e042      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fadc 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e04c      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d118      	bne.n	8003e50 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f47f aebe 	bne.w	8003bd6 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	00010004 	.word	0x00010004

08003e84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	460b      	mov	r3, r1
 8003e92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d006      	beq.n	8003eae <I2C_MasterRequestWrite+0x2a>
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d003      	beq.n	8003eae <I2C_MasterRequestWrite+0x2a>
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eac:	d108      	bne.n	8003ec0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e00b      	b.n	8003ed8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	2b12      	cmp	r3, #18
 8003ec6:	d107      	bne.n	8003ed8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f8f9 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e035      	b.n	8003f60 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003efc:	d108      	bne.n	8003f10 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003efe:	897b      	ldrh	r3, [r7, #10]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f0c:	611a      	str	r2, [r3, #16]
 8003f0e:	e01b      	b.n	8003f48 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f10:	897b      	ldrh	r3, [r7, #10]
 8003f12:	11db      	asrs	r3, r3, #7
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f003 0306 	and.w	r3, r3, #6
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f063 030f 	orn	r3, r3, #15
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	490e      	ldr	r1, [pc, #56]	; (8003f68 <I2C_MasterRequestWrite+0xe4>)
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f92b 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e010      	b.n	8003f60 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f3e:	897b      	ldrh	r3, [r7, #10]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	4907      	ldr	r1, [pc, #28]	; (8003f6c <I2C_MasterRequestWrite+0xe8>)
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f91b 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	00010008 	.word	0x00010008
 8003f6c:	00010002 	.word	0x00010002

08003f70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d006      	beq.n	8003faa <I2C_MasterRequestRead+0x3a>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d003      	beq.n	8003faa <I2C_MasterRequestRead+0x3a>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa8:	d108      	bne.n	8003fbc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e00b      	b.n	8003fd4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	2b11      	cmp	r3, #17
 8003fc2:	d107      	bne.n	8003fd4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f87b 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e06d      	b.n	80040cc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff8:	d108      	bne.n	800400c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ffa:	897b      	ldrh	r3, [r7, #10]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	e053      	b.n	80040b4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800400c:	897b      	ldrh	r3, [r7, #10]
 800400e:	11db      	asrs	r3, r3, #7
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 0306 	and.w	r3, r3, #6
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f063 030f 	orn	r3, r3, #15
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	492a      	ldr	r1, [pc, #168]	; (80040d4 <I2C_MasterRequestRead+0x164>)
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f8ad 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e048      	b.n	80040cc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800403a:	897b      	ldrh	r3, [r7, #10]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4923      	ldr	r1, [pc, #140]	; (80040d8 <I2C_MasterRequestRead+0x168>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f89d 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e038      	b.n	80040cc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800407e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f825 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e017      	b.n	80040cc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800409c:	897b      	ldrh	r3, [r7, #10]
 800409e:	11db      	asrs	r3, r3, #7
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f003 0306 	and.w	r3, r3, #6
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f063 030e 	orn	r3, r3, #14
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4907      	ldr	r1, [pc, #28]	; (80040d8 <I2C_MasterRequestRead+0x168>)
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f865 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	00010008 	.word	0x00010008
 80040d8:	00010002 	.word	0x00010002

080040dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ec:	e025      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d021      	beq.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7fd ffff 	bl	80020f8 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d116      	bne.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e023      	b.n	8004182 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10d      	bne.n	8004160 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	43da      	mvns	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	e00c      	b.n	800417a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	43da      	mvns	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	429a      	cmp	r2, r3
 800417e:	d0b6      	beq.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004198:	e051      	b.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d123      	bne.n	80041f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f043 0204 	orr.w	r2, r3, #4
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e046      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d021      	beq.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fd ff7d 	bl	80020f8 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e020      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10c      	bne.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4013      	ands	r3, r2
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e00b      	b.n	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	43da      	mvns	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d18d      	bne.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004294:	e02d      	b.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8ce 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e02d      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d021      	beq.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fd ff23 	bl	80020f8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d116      	bne.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e007      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fc:	2b80      	cmp	r3, #128	; 0x80
 80042fe:	d1ca      	bne.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004316:	e02d      	b.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f88d 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e02d      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d021      	beq.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004330:	f7fd fee2 	bl	80020f8 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e007      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d1ca      	bne.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004398:	e042      	b.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d119      	bne.n	80043dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0210 	mvn.w	r2, #16
 80043b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e029      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fd fe8c 	bl	80020f8 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e007      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d1b5      	bne.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444e:	d11b      	bne.n	8004488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004496:	b08b      	sub	sp, #44	; 0x2c
 8004498:	af06      	add	r7, sp, #24
 800449a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0d3      	b.n	800464e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd fc92 	bl	8001de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2203      	movs	r2, #3
 80044c4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f002 fcc5 	bl	8006e5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	687e      	ldr	r6, [r7, #4]
 80044da:	466d      	mov	r5, sp
 80044dc:	f106 0410 	add.w	r4, r6, #16
 80044e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	1d33      	adds	r3, r6, #4
 80044ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044ec:	6838      	ldr	r0, [r7, #0]
 80044ee:	f002 fc8e 	bl	8006e0e <USB_CoreInit>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0a4      	b.n	800464e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f002 fcc2 	bl	8006e94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004510:	2300      	movs	r3, #0
 8004512:	73fb      	strb	r3, [r7, #15]
 8004514:	e035      	b.n	8004582 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	015b      	lsls	r3, r3, #5
 800451c:	4413      	add	r3, r2
 800451e:	3329      	adds	r3, #41	; 0x29
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	015b      	lsls	r3, r3, #5
 800452a:	4413      	add	r3, r2
 800452c:	3328      	adds	r3, #40	; 0x28
 800452e:	7bfa      	ldrb	r2, [r7, #15]
 8004530:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	b291      	uxth	r1, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	015b      	lsls	r3, r3, #5
 800453c:	4413      	add	r3, r2
 800453e:	3336      	adds	r3, #54	; 0x36
 8004540:	460a      	mov	r2, r1
 8004542:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	015b      	lsls	r3, r3, #5
 800454a:	4413      	add	r3, r2
 800454c:	332b      	adds	r3, #43	; 0x2b
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	015b      	lsls	r3, r3, #5
 8004558:	4413      	add	r3, r2
 800455a:	3338      	adds	r3, #56	; 0x38
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	015b      	lsls	r3, r3, #5
 8004566:	4413      	add	r3, r2
 8004568:	333c      	adds	r3, #60	; 0x3c
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	3302      	adds	r3, #2
 8004574:	015b      	lsls	r3, r3, #5
 8004576:	4413      	add	r3, r2
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	3301      	adds	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d3c4      	bcc.n	8004516 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800458c:	2300      	movs	r3, #0
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	e031      	b.n	80045f6 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	015b      	lsls	r3, r3, #5
 8004598:	4413      	add	r3, r2
 800459a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	015b      	lsls	r3, r3, #5
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80045ae:	7bfa      	ldrb	r2, [r7, #15]
 80045b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	015b      	lsls	r3, r3, #5
 80045b8:	4413      	add	r3, r2
 80045ba:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	015b      	lsls	r3, r3, #5
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	015b      	lsls	r3, r3, #5
 80045d8:	4413      	add	r3, r2
 80045da:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	330a      	adds	r3, #10
 80045e8:	015b      	lsls	r3, r3, #5
 80045ea:	4413      	add	r3, r2
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	3301      	adds	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d3c8      	bcc.n	8004592 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	687e      	ldr	r6, [r7, #4]
 8004608:	466d      	mov	r5, sp
 800460a:	f106 0410 	add.w	r4, r6, #16
 800460e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	602b      	str	r3, [r5, #0]
 8004616:	1d33      	adds	r3, r6, #4
 8004618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800461a:	6838      	ldr	r0, [r7, #0]
 800461c:	f002 fc46 	bl	8006eac <USB_DevInit>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e00d      	b.n	800464e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f003 fc83 	bl	8007f52 <USB_DevDisconnect>

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004656 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_PCD_Start+0x16>
 8004668:	2302      	movs	r3, #2
 800466a:	e016      	b.n	800469a <HAL_PCD_Start+0x44>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004674:	2101      	movs	r1, #1
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f00f fafd 	bl	8013c76 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f003 fc5c 	bl	8007f3e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f002 fbcf 	bl	8006e2e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f003 fc59 	bl	8007f66 <USB_ReadInterrupts>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046be:	d102      	bne.n	80046c6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 faf3 	bl	8004cac <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f003 fc4b 	bl	8007f66 <USB_ReadInterrupts>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d112      	bne.n	8004702 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ee:	b292      	uxth	r2, r2
 80046f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f00f f8d0 	bl	801389a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80046fa:	2100      	movs	r1, #0
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f8de 	bl	80048be <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f003 fc2d 	bl	8007f66 <USB_ReadInterrupts>
 800470c:	4603      	mov	r3, r0
 800470e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004716:	d10b      	bne.n	8004730 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004720:	b29a      	uxth	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800472a:	b292      	uxth	r2, r2
 800472c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f003 fc16 	bl	8007f66 <USB_ReadInterrupts>
 800473a:	4603      	mov	r3, r0
 800473c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004744:	d10b      	bne.n	800475e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800474e:	b29a      	uxth	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004758:	b292      	uxth	r2, r2
 800475a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f003 fbff 	bl	8007f66 <USB_ReadInterrupts>
 8004768:	4603      	mov	r3, r0
 800476a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004772:	d126      	bne.n	80047c2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800477c:	b29a      	uxth	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0204 	bic.w	r2, r2, #4
 8004786:	b292      	uxth	r2, r2
 8004788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0208 	bic.w	r2, r2, #8
 800479e:	b292      	uxth	r2, r2
 80047a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f00f f8b1 	bl	801390c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047bc:	b292      	uxth	r2, r2
 80047be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f003 fbcd 	bl	8007f66 <USB_ReadInterrupts>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d6:	d13d      	bne.n	8004854 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0208 	orr.w	r2, r2, #8
 80047ea:	b292      	uxth	r2, r2
 80047ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004802:	b292      	uxth	r2, r2
 8004804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0204 	orr.w	r2, r2, #4
 800481a:	b292      	uxth	r2, r2
 800481c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f003 fb9e 	bl	8007f66 <USB_ReadInterrupts>
 800482a:	4603      	mov	r3, r0
 800482c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004834:	d10b      	bne.n	800484e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004848:	b292      	uxth	r2, r2
 800484a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f00f f842 	bl	80138d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f003 fb84 	bl	8007f66 <USB_ReadInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004868:	d10e      	bne.n	8004888 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004872:	b29a      	uxth	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800487c:	b292      	uxth	r2, r2
 800487e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f00e fffb 	bl	801387e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f003 fb6a 	bl	8007f66 <USB_ReadInterrupts>
 8004892:	4603      	mov	r3, r0
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489c:	d10b      	bne.n	80048b6 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048b0:	b292      	uxth	r2, r2
 80048b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_PCD_SetAddress+0x1a>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e013      	b.n	8004900 <HAL_PCD_SetAddress+0x42>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	4611      	mov	r1, r2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f003 fb11 	bl	8007f18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	4608      	mov	r0, r1
 8004912:	4611      	mov	r1, r2
 8004914:	461a      	mov	r2, r3
 8004916:	4603      	mov	r3, r0
 8004918:	70fb      	strb	r3, [r7, #3]
 800491a:	460b      	mov	r3, r1
 800491c:	803b      	strh	r3, [r7, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004926:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800492a:	2b00      	cmp	r3, #0
 800492c:	da0b      	bge.n	8004946 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	015b      	lsls	r3, r3, #5
 8004936:	3328      	adds	r3, #40	; 0x28
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	705a      	strb	r2, [r3, #1]
 8004944:	e00b      	b.n	800495e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	015b      	lsls	r3, r3, #5
 800494e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800496a:	883a      	ldrh	r2, [r7, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	78ba      	ldrb	r2, [r7, #2]
 8004974:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	785b      	ldrb	r3, [r3, #1]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004988:	78bb      	ldrb	r3, [r7, #2]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d102      	bne.n	8004994 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_PCD_EP_Open+0x9a>
 800499e:	2302      	movs	r3, #2
 80049a0:	e00e      	b.n	80049c0 <HAL_PCD_EP_Open+0xb8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f002 fa9f 	bl	8006ef4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80049be:	7afb      	ldrb	r3, [r7, #11]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da0b      	bge.n	80049f4 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	015b      	lsls	r3, r3, #5
 80049e4:	3328      	adds	r3, #40	; 0x28
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	705a      	strb	r2, [r3, #1]
 80049f2:	e00b      	b.n	8004a0c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	015b      	lsls	r3, r3, #5
 80049fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_PCD_EP_Close+0x5e>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e00e      	b.n	8004a44 <HAL_PCD_EP_Close+0x7c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68f9      	ldr	r1, [r7, #12]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f002 fd4b 	bl	80074d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	607a      	str	r2, [r7, #4]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a5c:	7afb      	ldrb	r3, [r7, #11]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	015b      	lsls	r3, r3, #5
 8004a64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2200      	movs	r2, #0
 8004a84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a86:	7afb      	ldrb	r3, [r7, #11]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a92:	7afb      	ldrb	r3, [r7, #11]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6979      	ldr	r1, [r7, #20]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f002 feaa 	bl	80077fc <USB_EPStartXfer>
 8004aa8:	e005      	b.n	8004ab6 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6979      	ldr	r1, [r7, #20]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f002 fea3 	bl	80077fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	330a      	adds	r3, #10
 8004ad6:	015b      	lsls	r3, r3, #5
 8004ad8:	4413      	add	r3, r2
 8004ada:	3304      	adds	r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	460b      	mov	r3, r1
 8004af6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af8:	7afb      	ldrb	r3, [r7, #11]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	015b      	lsls	r3, r3, #5
 8004b00:	3328      	adds	r3, #40	; 0x28
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b20:	7afb      	ldrb	r3, [r7, #11]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b2c:	7afb      	ldrb	r3, [r7, #11]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6979      	ldr	r1, [r7, #20]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f002 fe5d 	bl	80077fc <USB_EPStartXfer>
 8004b42:	e005      	b.n	8004b50 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6979      	ldr	r1, [r7, #20]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f002 fe56 	bl	80077fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b66:	78fb      	ldrb	r3, [r7, #3]
 8004b68:	f003 0207 	and.w	r2, r3, #7
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d901      	bls.n	8004b78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e046      	b.n	8004c06 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	da0b      	bge.n	8004b98 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	015b      	lsls	r3, r3, #5
 8004b88:	3328      	adds	r3, #40	; 0x28
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	705a      	strb	r2, [r3, #1]
 8004b96:	e009      	b.n	8004bac <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	015b      	lsls	r3, r3, #5
 8004b9c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_PCD_EP_SetStall+0x72>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e01c      	b.n	8004c06 <HAL_PCD_EP_SetStall+0xac>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68f9      	ldr	r1, [r7, #12]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f003 f8c6 	bl	8007d6c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d108      	bne.n	8004bfc <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	f003 f9c4 	bl	8007f84 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	f003 020f 	and.w	r2, r3, #15
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d901      	bls.n	8004c2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e03a      	b.n	8004ca2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	da0b      	bge.n	8004c4c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	015b      	lsls	r3, r3, #5
 8004c3c:	3328      	adds	r3, #40	; 0x28
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	705a      	strb	r2, [r3, #1]
 8004c4a:	e00b      	b.n	8004c64 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	015b      	lsls	r3, r3, #5
 8004c54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_PCD_EP_ClrStall+0x76>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e00e      	b.n	8004ca2 <HAL_PCD_EP_ClrStall+0x94>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f003 f8ac 	bl	8007df0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b089      	sub	sp, #36	; 0x24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cb4:	e282      	b.n	80051bc <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cbe:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004cc0:	8afb      	ldrh	r3, [r7, #22]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8004cca:	7d7b      	ldrb	r3, [r7, #21]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 8142 	bne.w	8004f56 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004cd2:	8afb      	ldrh	r3, [r7, #22]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d151      	bne.n	8004d80 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cec:	b29c      	uxth	r4, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3328      	adds	r3, #40	; 0x28
 8004d02:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4413      	add	r3, r2
 8004d18:	3302      	adds	r3, #2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	695a      	ldr	r2, [r3, #20]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	441a      	add	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d3e:	2100      	movs	r1, #0
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f00e fd85 	bl	8013850 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8234 	beq.w	80051bc <PCD_EP_ISR_Handler+0x510>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f040 822f 	bne.w	80051bc <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	b292      	uxth	r2, r2
 8004d72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d7e:	e21d      	b.n	80051bc <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004d86:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d90:	8a7b      	ldrh	r3, [r7, #18]
 8004d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d033      	beq.n	8004e02 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4413      	add	r3, r2
 8004dae:	3306      	adds	r3, #6
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f003 f922 	bl	8008022 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004dea:	4013      	ands	r3, r2
 8004dec:	b29c      	uxth	r4, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004df6:	b292      	uxth	r2, r2
 8004df8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f00e fcfe 	bl	80137fc <HAL_PCD_SetupStageCallback>
 8004e00:	e1dc      	b.n	80051bc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f280 81d8 	bge.w	80051bc <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e18:	4013      	ands	r3, r2
 8004e1a:	b29c      	uxth	r4, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004e24:	b292      	uxth	r2, r2
 8004e26:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	461a      	mov	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3306      	adds	r3, #6
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d019      	beq.n	8004e90 <PCD_EP_ISR_Handler+0x1e4>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d015      	beq.n	8004e90 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6959      	ldr	r1, [r3, #20]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f003 f8d4 	bl	8008022 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	441a      	add	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004e88:	2100      	movs	r1, #0
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f00e fcc8 	bl	8013820 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461c      	mov	r4, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	441c      	add	r4, r3
 8004ea2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8004ea6:	461c      	mov	r4, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10e      	bne.n	8004ece <PCD_EP_ISR_Handler+0x222>
 8004eb0:	8823      	ldrh	r3, [r4, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8023      	strh	r3, [r4, #0]
 8004ebc:	8823      	ldrh	r3, [r4, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8023      	strh	r3, [r4, #0]
 8004ecc:	e02d      	b.n	8004f2a <PCD_EP_ISR_Handler+0x27e>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ed4:	d812      	bhi.n	8004efc <PCD_EP_ISR_Handler+0x250>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <PCD_EP_ISR_Handler+0x244>
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	3301      	adds	r3, #1
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	029b      	lsls	r3, r3, #10
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	8023      	strh	r3, [r4, #0]
 8004efa:	e016      	b.n	8004f2a <PCD_EP_ISR_Handler+0x27e>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <PCD_EP_ISR_Handler+0x26a>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	029b      	lsls	r3, r3, #10
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	b29c      	uxth	r4, r3
 8004f3c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f40:	b29c      	uxth	r4, r3
 8004f42:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004f46:	b29c      	uxth	r4, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4ba2      	ldr	r3, [pc, #648]	; (80051d8 <PCD_EP_ISR_Handler+0x52c>)
 8004f4e:	4323      	orrs	r3, r4
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8013      	strh	r3, [r2, #0]
 8004f54:	e132      	b.n	80051bc <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	7d7b      	ldrb	r3, [r7, #21]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f280 80d1 	bge.w	8005112 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	7d7b      	ldrb	r3, [r7, #21]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f84:	4013      	ands	r3, r2
 8004f86:	b29c      	uxth	r4, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	7d7b      	ldrb	r3, [r7, #21]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004f98:	b292      	uxth	r2, r2
 8004f9a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004f9c:	7d7b      	ldrb	r3, [r7, #21]
 8004f9e:	015b      	lsls	r3, r3, #5
 8004fa0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	7b1b      	ldrb	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d121      	bne.n	8004ff6 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3306      	adds	r3, #6
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fda:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004fdc:	8bfb      	ldrh	r3, [r7, #30]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d072      	beq.n	80050c8 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6959      	ldr	r1, [r3, #20]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	88da      	ldrh	r2, [r3, #6]
 8004fee:	8bfb      	ldrh	r3, [r7, #30]
 8004ff0:	f003 f817 	bl	8008022 <USB_ReadPMA>
 8004ff4:	e068      	b.n	80050c8 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d021      	beq.n	8005054 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005018:	b29b      	uxth	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4413      	add	r3, r2
 8005024:	3302      	adds	r3, #2
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005038:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800503a:	8bfb      	ldrh	r3, [r7, #30]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d02a      	beq.n	8005096 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6959      	ldr	r1, [r3, #20]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	891a      	ldrh	r2, [r3, #8]
 800504c:	8bfb      	ldrh	r3, [r7, #30]
 800504e:	f002 ffe8 	bl	8008022 <USB_ReadPMA>
 8005052:	e020      	b.n	8005096 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505c:	b29b      	uxth	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4413      	add	r3, r2
 8005068:	3306      	adds	r3, #6
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800507c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800507e:	8bfb      	ldrh	r3, [r7, #30]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6818      	ldr	r0, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6959      	ldr	r1, [r3, #20]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	895a      	ldrh	r2, [r3, #10]
 8005090:	8bfb      	ldrh	r3, [r7, #30]
 8005092:	f002 ffc6 	bl	8008022 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b0:	b29c      	uxth	r4, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	4b46      	ldr	r3, [pc, #280]	; (80051dc <PCD_EP_ISR_Handler+0x530>)
 80050c2:	4323      	orrs	r3, r4
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	8bfb      	ldrh	r3, [r7, #30]
 80050ce:	441a      	add	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	8bfb      	ldrh	r3, [r7, #30]
 80050da:	441a      	add	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <PCD_EP_ISR_Handler+0x446>
 80050e8:	8bfa      	ldrh	r2, [r7, #30]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d206      	bcs.n	8005100 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f00e fb91 	bl	8013820 <HAL_PCD_DataOutStageCallback>
 80050fe:	e008      	b.n	8005112 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	7819      	ldrb	r1, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff fc9d 	bl	8004a4c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005112:	8a7b      	ldrh	r3, [r7, #18]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	2b00      	cmp	r3, #0
 800511a:	d04f      	beq.n	80051bc <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800511c:	7d7b      	ldrb	r3, [r7, #21]
 800511e:	015b      	lsls	r3, r3, #5
 8005120:	3328      	adds	r3, #40	; 0x28
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	7d7b      	ldrb	r3, [r7, #21]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	b29c      	uxth	r4, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	7d7b      	ldrb	r3, [r7, #21]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8005152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005156:	b29b      	uxth	r3, r3
 8005158:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005162:	b29b      	uxth	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	3302      	adds	r3, #2
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f00e fb54 	bl	8013850 <HAL_PCD_DataInStageCallback>
 80051a8:	e008      	b.n	80051bc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	7819      	ldrb	r1, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	695a      	ldr	r2, [r3, #20]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff fc96 	bl	8004ae8 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	b21b      	sxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f6ff ad74 	blt.w	8004cb6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3724      	adds	r7, #36	; 0x24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd90      	pop	{r4, r7, pc}
 80051d8:	ffff8080 	.word	0xffff8080
 80051dc:	ffff80c0 	.word	0xffff80c0

080051e0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	460b      	mov	r3, r1
 80051ec:	817b      	strh	r3, [r7, #10]
 80051ee:	4613      	mov	r3, r2
 80051f0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80051f2:	897b      	ldrh	r3, [r7, #10]
 80051f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051fe:	897b      	ldrh	r3, [r7, #10]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	015b      	lsls	r3, r3, #5
 8005206:	3328      	adds	r3, #40	; 0x28
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e006      	b.n	800521e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005210:	897b      	ldrh	r3, [r7, #10]
 8005212:	015b      	lsls	r3, r3, #5
 8005214:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800521e:	893b      	ldrh	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d107      	bne.n	8005234 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2200      	movs	r2, #0
 8005228:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	b29a      	uxth	r2, r3
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	80da      	strh	r2, [r3, #6]
 8005232:	e00b      	b.n	800524c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2201      	movs	r2, #1
 8005238:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	b29a      	uxth	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	b29a      	uxth	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e26c      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 8087 	beq.w	8005386 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005278:	4b92      	ldr	r3, [pc, #584]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 030c 	and.w	r3, r3, #12
 8005280:	2b04      	cmp	r3, #4
 8005282:	d00c      	beq.n	800529e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005284:	4b8f      	ldr	r3, [pc, #572]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 030c 	and.w	r3, r3, #12
 800528c:	2b08      	cmp	r3, #8
 800528e:	d112      	bne.n	80052b6 <HAL_RCC_OscConfig+0x5e>
 8005290:	4b8c      	ldr	r3, [pc, #560]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529c:	d10b      	bne.n	80052b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800529e:	4b89      	ldr	r3, [pc, #548]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d06c      	beq.n	8005384 <HAL_RCC_OscConfig+0x12c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d168      	bne.n	8005384 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e246      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052be:	d106      	bne.n	80052ce <HAL_RCC_OscConfig+0x76>
 80052c0:	4b80      	ldr	r3, [pc, #512]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a7f      	ldr	r2, [pc, #508]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	e02e      	b.n	800532c <HAL_RCC_OscConfig+0xd4>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10c      	bne.n	80052f0 <HAL_RCC_OscConfig+0x98>
 80052d6:	4b7b      	ldr	r3, [pc, #492]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a7a      	ldr	r2, [pc, #488]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	4b78      	ldr	r3, [pc, #480]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a77      	ldr	r2, [pc, #476]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e01d      	b.n	800532c <HAL_RCC_OscConfig+0xd4>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052f8:	d10c      	bne.n	8005314 <HAL_RCC_OscConfig+0xbc>
 80052fa:	4b72      	ldr	r3, [pc, #456]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a71      	ldr	r2, [pc, #452]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	4b6f      	ldr	r3, [pc, #444]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a6e      	ldr	r2, [pc, #440]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 800530c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e00b      	b.n	800532c <HAL_RCC_OscConfig+0xd4>
 8005314:	4b6b      	ldr	r3, [pc, #428]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a6a      	ldr	r2, [pc, #424]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 800531a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	4b68      	ldr	r3, [pc, #416]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a67      	ldr	r2, [pc, #412]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800532a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d013      	beq.n	800535c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005334:	f7fc fee0 	bl	80020f8 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800533c:	f7fc fedc 	bl	80020f8 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b64      	cmp	r3, #100	; 0x64
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e1fa      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534e:	4b5d      	ldr	r3, [pc, #372]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f0      	beq.n	800533c <HAL_RCC_OscConfig+0xe4>
 800535a:	e014      	b.n	8005386 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fc fecc 	bl	80020f8 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005364:	f7fc fec8 	bl	80020f8 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e1e6      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005376:	4b53      	ldr	r3, [pc, #332]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x10c>
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d063      	beq.n	800545a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005392:	4b4c      	ldr	r3, [pc, #304]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00b      	beq.n	80053b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800539e:	4b49      	ldr	r3, [pc, #292]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d11c      	bne.n	80053e4 <HAL_RCC_OscConfig+0x18c>
 80053aa:	4b46      	ldr	r3, [pc, #280]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d116      	bne.n	80053e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b6:	4b43      	ldr	r3, [pc, #268]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_RCC_OscConfig+0x176>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d001      	beq.n	80053ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e1ba      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ce:	4b3d      	ldr	r3, [pc, #244]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4939      	ldr	r1, [pc, #228]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053e2:	e03a      	b.n	800545a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d020      	beq.n	800542e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ec:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <HAL_RCC_OscConfig+0x270>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f2:	f7fc fe81 	bl	80020f8 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053fa:	f7fc fe7d 	bl	80020f8 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e19b      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540c:	4b2d      	ldr	r3, [pc, #180]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005418:	4b2a      	ldr	r3, [pc, #168]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4927      	ldr	r1, [pc, #156]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005428:	4313      	orrs	r3, r2
 800542a:	600b      	str	r3, [r1, #0]
 800542c:	e015      	b.n	800545a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800542e:	4b26      	ldr	r3, [pc, #152]	; (80054c8 <HAL_RCC_OscConfig+0x270>)
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7fc fe60 	bl	80020f8 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800543c:	f7fc fe5c 	bl	80020f8 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e17a      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d03a      	beq.n	80054dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d019      	beq.n	80054a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800546e:	4b17      	ldr	r3, [pc, #92]	; (80054cc <HAL_RCC_OscConfig+0x274>)
 8005470:	2201      	movs	r2, #1
 8005472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005474:	f7fc fe40 	bl	80020f8 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800547c:	f7fc fe3c 	bl	80020f8 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e15a      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548e:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800549a:	2001      	movs	r0, #1
 800549c:	f000 fac6 	bl	8005a2c <RCC_Delay>
 80054a0:	e01c      	b.n	80054dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <HAL_RCC_OscConfig+0x274>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a8:	f7fc fe26 	bl	80020f8 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ae:	e00f      	b.n	80054d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b0:	f7fc fe22 	bl	80020f8 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d908      	bls.n	80054d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e140      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000
 80054c8:	42420000 	.word	0x42420000
 80054cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d0:	4b9e      	ldr	r3, [pc, #632]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e9      	bne.n	80054b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80a6 	beq.w	8005636 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ee:	4b97      	ldr	r3, [pc, #604]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10d      	bne.n	8005516 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054fa:	4b94      	ldr	r3, [pc, #592]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	4a93      	ldr	r2, [pc, #588]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005504:	61d3      	str	r3, [r2, #28]
 8005506:	4b91      	ldr	r3, [pc, #580]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005512:	2301      	movs	r3, #1
 8005514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005516:	4b8e      	ldr	r3, [pc, #568]	; (8005750 <HAL_RCC_OscConfig+0x4f8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551e:	2b00      	cmp	r3, #0
 8005520:	d118      	bne.n	8005554 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005522:	4b8b      	ldr	r3, [pc, #556]	; (8005750 <HAL_RCC_OscConfig+0x4f8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a8a      	ldr	r2, [pc, #552]	; (8005750 <HAL_RCC_OscConfig+0x4f8>)
 8005528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800552e:	f7fc fde3 	bl	80020f8 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005536:	f7fc fddf 	bl	80020f8 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b64      	cmp	r3, #100	; 0x64
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e0fd      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005548:	4b81      	ldr	r3, [pc, #516]	; (8005750 <HAL_RCC_OscConfig+0x4f8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d106      	bne.n	800556a <HAL_RCC_OscConfig+0x312>
 800555c:	4b7b      	ldr	r3, [pc, #492]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	4a7a      	ldr	r2, [pc, #488]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	6213      	str	r3, [r2, #32]
 8005568:	e02d      	b.n	80055c6 <HAL_RCC_OscConfig+0x36e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10c      	bne.n	800558c <HAL_RCC_OscConfig+0x334>
 8005572:	4b76      	ldr	r3, [pc, #472]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	4a75      	ldr	r2, [pc, #468]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005578:	f023 0301 	bic.w	r3, r3, #1
 800557c:	6213      	str	r3, [r2, #32]
 800557e:	4b73      	ldr	r3, [pc, #460]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	4a72      	ldr	r2, [pc, #456]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005584:	f023 0304 	bic.w	r3, r3, #4
 8005588:	6213      	str	r3, [r2, #32]
 800558a:	e01c      	b.n	80055c6 <HAL_RCC_OscConfig+0x36e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b05      	cmp	r3, #5
 8005592:	d10c      	bne.n	80055ae <HAL_RCC_OscConfig+0x356>
 8005594:	4b6d      	ldr	r3, [pc, #436]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	4a6c      	ldr	r2, [pc, #432]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800559a:	f043 0304 	orr.w	r3, r3, #4
 800559e:	6213      	str	r3, [r2, #32]
 80055a0:	4b6a      	ldr	r3, [pc, #424]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	4a69      	ldr	r2, [pc, #420]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055a6:	f043 0301 	orr.w	r3, r3, #1
 80055aa:	6213      	str	r3, [r2, #32]
 80055ac:	e00b      	b.n	80055c6 <HAL_RCC_OscConfig+0x36e>
 80055ae:	4b67      	ldr	r3, [pc, #412]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	4a66      	ldr	r2, [pc, #408]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	6213      	str	r3, [r2, #32]
 80055ba:	4b64      	ldr	r3, [pc, #400]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	4a63      	ldr	r2, [pc, #396]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055c0:	f023 0304 	bic.w	r3, r3, #4
 80055c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d015      	beq.n	80055fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ce:	f7fc fd93 	bl	80020f8 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d4:	e00a      	b.n	80055ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d6:	f7fc fd8f 	bl	80020f8 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e0ab      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ec:	4b57      	ldr	r3, [pc, #348]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0ee      	beq.n	80055d6 <HAL_RCC_OscConfig+0x37e>
 80055f8:	e014      	b.n	8005624 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055fa:	f7fc fd7d 	bl	80020f8 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005600:	e00a      	b.n	8005618 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005602:	f7fc fd79 	bl	80020f8 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005610:	4293      	cmp	r3, r2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e095      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005618:	4b4c      	ldr	r3, [pc, #304]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1ee      	bne.n	8005602 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d105      	bne.n	8005636 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562a:	4b48      	ldr	r3, [pc, #288]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	4a47      	ldr	r2, [pc, #284]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005634:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 8081 	beq.w	8005742 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005640:	4b42      	ldr	r3, [pc, #264]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 030c 	and.w	r3, r3, #12
 8005648:	2b08      	cmp	r3, #8
 800564a:	d061      	beq.n	8005710 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d146      	bne.n	80056e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005654:	4b3f      	ldr	r3, [pc, #252]	; (8005754 <HAL_RCC_OscConfig+0x4fc>)
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565a:	f7fc fd4d 	bl	80020f8 <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005662:	f7fc fd49 	bl	80020f8 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e067      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005674:	4b35      	ldr	r3, [pc, #212]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f0      	bne.n	8005662 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005688:	d108      	bne.n	800569c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800568a:	4b30      	ldr	r3, [pc, #192]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	492d      	ldr	r1, [pc, #180]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005698:	4313      	orrs	r3, r2
 800569a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800569c:	4b2b      	ldr	r3, [pc, #172]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a19      	ldr	r1, [r3, #32]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	430b      	orrs	r3, r1
 80056ae:	4927      	ldr	r1, [pc, #156]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056b4:	4b27      	ldr	r3, [pc, #156]	; (8005754 <HAL_RCC_OscConfig+0x4fc>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fc fd1d 	bl	80020f8 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c2:	f7fc fd19 	bl	80020f8 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e037      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x46a>
 80056e0:	e02f      	b.n	8005742 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e2:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <HAL_RCC_OscConfig+0x4fc>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e8:	f7fc fd06 	bl	80020f8 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f0:	f7fc fd02 	bl	80020f8 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e020      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005702:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x498>
 800570e:	e018      	b.n	8005742 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e013      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	429a      	cmp	r2, r3
 800572e:	d106      	bne.n	800573e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40021000 	.word	0x40021000
 8005750:	40007000 	.word	0x40007000
 8005754:	42420060 	.word	0x42420060

08005758 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0d0      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800576c:	4b6a      	ldr	r3, [pc, #424]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d910      	bls.n	800579c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577a:	4b67      	ldr	r3, [pc, #412]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f023 0207 	bic.w	r2, r3, #7
 8005782:	4965      	ldr	r1, [pc, #404]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	4313      	orrs	r3, r2
 8005788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578a:	4b63      	ldr	r3, [pc, #396]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0b8      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d020      	beq.n	80057ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b4:	4b59      	ldr	r3, [pc, #356]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4a58      	ldr	r2, [pc, #352]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057cc:	4b53      	ldr	r3, [pc, #332]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4a52      	ldr	r2, [pc, #328]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80057d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d8:	4b50      	ldr	r3, [pc, #320]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	494d      	ldr	r1, [pc, #308]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d040      	beq.n	8005878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d107      	bne.n	800580e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	4b47      	ldr	r3, [pc, #284]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d115      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e07f      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d107      	bne.n	8005826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005816:	4b41      	ldr	r3, [pc, #260]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e073      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005826:	4b3d      	ldr	r3, [pc, #244]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e06b      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005836:	4b39      	ldr	r3, [pc, #228]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f023 0203 	bic.w	r2, r3, #3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4936      	ldr	r1, [pc, #216]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005844:	4313      	orrs	r3, r2
 8005846:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005848:	f7fc fc56 	bl	80020f8 <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584e:	e00a      	b.n	8005866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005850:	f7fc fc52 	bl	80020f8 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f241 3288 	movw	r2, #5000	; 0x1388
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e053      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	4b2d      	ldr	r3, [pc, #180]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f003 020c 	and.w	r2, r3, #12
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	429a      	cmp	r2, r3
 8005876:	d1eb      	bne.n	8005850 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005878:	4b27      	ldr	r3, [pc, #156]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d210      	bcs.n	80058a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005886:	4b24      	ldr	r3, [pc, #144]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 0207 	bic.w	r2, r3, #7
 800588e:	4922      	ldr	r1, [pc, #136]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	4313      	orrs	r3, r2
 8005894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b20      	ldr	r3, [pc, #128]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e032      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b4:	4b19      	ldr	r3, [pc, #100]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4916      	ldr	r1, [pc, #88]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	490e      	ldr	r1, [pc, #56]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058e6:	f000 f821 	bl	800592c <HAL_RCC_GetSysClockFreq>
 80058ea:	4601      	mov	r1, r0
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <HAL_RCC_ClockConfig+0x1c8>)
 80058f8:	5cd3      	ldrb	r3, [r2, r3]
 80058fa:	fa21 f303 	lsr.w	r3, r1, r3
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <HAL_RCC_ClockConfig+0x1cc>)
 8005900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <HAL_RCC_ClockConfig+0x1d0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fc fbb4 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40022000 	.word	0x40022000
 800591c:	40021000 	.word	0x40021000
 8005920:	08018d10 	.word	0x08018d10
 8005924:	20000004 	.word	0x20000004
 8005928:	20000008 	.word	0x20000008

0800592c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800592c:	b490      	push	{r4, r7}
 800592e:	b08a      	sub	sp, #40	; 0x28
 8005930:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005932:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005934:	1d3c      	adds	r4, r7, #4
 8005936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800593c:	4b28      	ldr	r3, [pc, #160]	; (80059e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	2300      	movs	r3, #0
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005956:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b04      	cmp	r3, #4
 8005964:	d002      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x40>
 8005966:	2b08      	cmp	r3, #8
 8005968:	d003      	beq.n	8005972 <HAL_RCC_GetSysClockFreq+0x46>
 800596a:	e02d      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800596c:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800596e:	623b      	str	r3, [r7, #32]
      break;
 8005970:	e02d      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	0c9b      	lsrs	r3, r3, #18
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800597e:	4413      	add	r3, r2
 8005980:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005984:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d013      	beq.n	80059b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005990:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	0c5b      	lsrs	r3, r3, #17
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800599e:	4413      	add	r3, r2
 80059a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80059a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	4a0f      	ldr	r2, [pc, #60]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059aa:	fb02 f203 	mul.w	r2, r2, r3
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
 80059b6:	e004      	b.n	80059c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4a0c      	ldr	r2, [pc, #48]	; (80059ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80059bc:	fb02 f303 	mul.w	r3, r2, r3
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	623b      	str	r3, [r7, #32]
      break;
 80059c6:	e002      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059c8:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059ca:	623b      	str	r3, [r7, #32]
      break;
 80059cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ce:	6a3b      	ldr	r3, [r7, #32]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3728      	adds	r7, #40	; 0x28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc90      	pop	{r4, r7}
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	08018818 	.word	0x08018818
 80059e0:	08018828 	.word	0x08018828
 80059e4:	40021000 	.word	0x40021000
 80059e8:	007a1200 	.word	0x007a1200
 80059ec:	003d0900 	.word	0x003d0900

080059f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059f4:	4b02      	ldr	r3, [pc, #8]	; (8005a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80059f6:	681b      	ldr	r3, [r3, #0]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr
 8005a00:	20000004 	.word	0x20000004

08005a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a08:	f7ff fff2 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8005a0c:	4601      	mov	r1, r0
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	0a1b      	lsrs	r3, r3, #8
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	4a03      	ldr	r2, [pc, #12]	; (8005a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a1a:	5cd3      	ldrb	r3, [r2, r3]
 8005a1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40021000 	.word	0x40021000
 8005a28:	08018d20 	.word	0x08018d20

08005a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <RCC_Delay+0x34>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <RCC_Delay+0x38>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	0a5b      	lsrs	r3, r3, #9
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a48:	bf00      	nop
  }
  while (Delay --);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1e5a      	subs	r2, r3, #1
 8005a4e:	60fa      	str	r2, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1f9      	bne.n	8005a48 <RCC_Delay+0x1c>
}
 8005a54:	bf00      	nop
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000004 	.word	0x20000004
 8005a64:	10624dd3 	.word	0x10624dd3

08005a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d07d      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005a84:	2300      	movs	r3, #0
 8005a86:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a88:	4b4f      	ldr	r3, [pc, #316]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10d      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a94:	4b4c      	ldr	r3, [pc, #304]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	4a4b      	ldr	r2, [pc, #300]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	61d3      	str	r3, [r2, #28]
 8005aa0:	4b49      	ldr	r3, [pc, #292]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aac:	2301      	movs	r3, #1
 8005aae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab0:	4b46      	ldr	r3, [pc, #280]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d118      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005abc:	4b43      	ldr	r3, [pc, #268]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a42      	ldr	r2, [pc, #264]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac8:	f7fc fb16 	bl	80020f8 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ace:	e008      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad0:	f7fc fb12 	bl	80020f8 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b64      	cmp	r3, #100	; 0x64
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e06d      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae2:	4b3a      	ldr	r3, [pc, #232]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005aee:	4b36      	ldr	r3, [pc, #216]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d02e      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d027      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b0c:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b16:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b1c:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b22:	4a29      	ldr	r2, [pc, #164]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d014      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b32:	f7fc fae1 	bl	80020f8 <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b38:	e00a      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b3a:	f7fc fadd 	bl	80020f8 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e036      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b50:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0ee      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4917      	ldr	r1, [pc, #92]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d105      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b74:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	490b      	ldr	r1, [pc, #44]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005baa:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	4904      	ldr	r1, [pc, #16]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	40007000 	.word	0x40007000
 8005bd0:	42420440 	.word	0x42420440

08005bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e01d      	b.n	8005c22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fb ffd0 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4619      	mov	r1, r3
 8005c12:	4610      	mov	r0, r2
 8005c14:	f000 fdb0 	bl	8006778 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0201 	orr.w	r2, r2, #1
 8005c40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b06      	cmp	r3, #6
 8005c52:	d007      	beq.n	8005c64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e01d      	b.n	8005cbe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f815 	bl	8005cc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f000 fd62 	bl	8006778 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 ffc4 	bl	8006c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a10      	ldr	r2, [pc, #64]	; (8005d38 <HAL_TIM_PWM_Start+0x60>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d107      	bne.n	8005d0a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b06      	cmp	r3, #6
 8005d1a:	d007      	beq.n	8005d2c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40012c00 	.word	0x40012c00

08005d3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 ff92 	bl	8006c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <HAL_TIM_PWM_Stop+0x94>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d117      	bne.n	8005d8e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a1a      	ldr	r2, [r3, #32]
 8005d64:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d68:	4013      	ands	r3, r2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10f      	bne.n	8005d8e <HAL_TIM_PWM_Stop+0x52>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a1a      	ldr	r2, [r3, #32]
 8005d74:	f240 4344 	movw	r3, #1092	; 0x444
 8005d78:	4013      	ands	r3, r2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d107      	bne.n	8005d8e <HAL_TIM_PWM_Stop+0x52>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10f      	bne.n	8005dbe <HAL_TIM_PWM_Stop+0x82>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	f240 4344 	movw	r3, #1092	; 0x444
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d107      	bne.n	8005dbe <HAL_TIM_PWM_Stop+0x82>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40012c00 	.word	0x40012c00

08005dd4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d101      	bne.n	8005df2 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8005dee:	2302      	movs	r3, #2
 8005df0:	e0e9      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d10b      	bne.n	8005e16 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Start_DMA+0x3a>
 8005e04:	887b      	ldrh	r3, [r7, #2]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e0db      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2202      	movs	r2, #2
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b0c      	cmp	r3, #12
 8005e1a:	f200 80ad 	bhi.w	8005f78 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8005e1e:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <HAL_TIM_PWM_Start_DMA+0x50>)
 8005e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e24:	08005e59 	.word	0x08005e59
 8005e28:	08005f79 	.word	0x08005f79
 8005e2c:	08005f79 	.word	0x08005f79
 8005e30:	08005f79 	.word	0x08005f79
 8005e34:	08005ea1 	.word	0x08005ea1
 8005e38:	08005f79 	.word	0x08005f79
 8005e3c:	08005f79 	.word	0x08005f79
 8005e40:	08005f79 	.word	0x08005f79
 8005e44:	08005ee9 	.word	0x08005ee9
 8005e48:	08005f79 	.word	0x08005f79
 8005e4c:	08005f79 	.word	0x08005f79
 8005e50:	08005f79 	.word	0x08005f79
 8005e54:	08005f31 	.word	0x08005f31
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	4a5c      	ldr	r2, [pc, #368]	; (8005fd0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	4a5b      	ldr	r2, [pc, #364]	; (8005fd4 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	4a5a      	ldr	r2, [pc, #360]	; (8005fd8 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3334      	adds	r3, #52	; 0x34
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	887b      	ldrh	r3, [r7, #2]
 8005e80:	f7fc fe5e 	bl	8002b40 <HAL_DMA_Start_IT>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e09b      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9c:	60da      	str	r2, [r3, #12]
      break;
 8005e9e:	e06c      	b.n	8005f7a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	4a4a      	ldr	r2, [pc, #296]	; (8005fd0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	4a49      	ldr	r2, [pc, #292]	; (8005fd4 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005eae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	4a48      	ldr	r2, [pc, #288]	; (8005fd8 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005eb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3338      	adds	r3, #56	; 0x38
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	887b      	ldrh	r3, [r7, #2]
 8005ec8:	f7fc fe3a 	bl	8002b40 <HAL_DMA_Start_IT>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e077      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ee4:	60da      	str	r2, [r3, #12]
      break;
 8005ee6:	e048      	b.n	8005f7a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	4a38      	ldr	r2, [pc, #224]	; (8005fd0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005eee:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	4a37      	ldr	r2, [pc, #220]	; (8005fd4 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005ef6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a36      	ldr	r2, [pc, #216]	; (8005fd8 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	333c      	adds	r3, #60	; 0x3c
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	887b      	ldrh	r3, [r7, #2]
 8005f10:	f7fc fe16 	bl	8002b40 <HAL_DMA_Start_IT>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e053      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f2c:	60da      	str	r2, [r3, #12]
      break;
 8005f2e:	e024      	b.n	8005f7a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	4a26      	ldr	r2, [pc, #152]	; (8005fd0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005f36:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	4a24      	ldr	r2, [pc, #144]	; (8005fd8 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3340      	adds	r3, #64	; 0x40
 8005f54:	461a      	mov	r2, r3
 8005f56:	887b      	ldrh	r3, [r7, #2]
 8005f58:	f7fc fdf2 	bl	8002b40 <HAL_DMA_Start_IT>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e02f      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f74:	60da      	str	r2, [r3, #12]
      break;
 8005f76:	e000      	b.n	8005f7a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8005f78:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fe78 	bl	8006c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <HAL_TIM_PWM_Start_DMA+0x208>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d107      	bne.n	8005fa2 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b06      	cmp	r3, #6
 8005fb2:	d007      	beq.n	8005fc4 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	08006697 	.word	0x08006697
 8005fd4:	08006707 	.word	0x08006707
 8005fd8:	08006673 	.word	0x08006673
 8005fdc:	40012c00 	.word	0x40012c00

08005fe0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e07f      	b.n	80060f4 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7fb fe3f 	bl	8001c8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6812      	ldr	r2, [r2, #0]
 8006020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006024:	f023 0307 	bic.w	r3, r3, #7
 8006028:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f000 fb9f 	bl	8006778 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006062:	f023 0303 	bic.w	r3, r3, #3
 8006066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	4313      	orrs	r3, r2
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006080:	f023 030c 	bic.w	r3, r3, #12
 8006084:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800608c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	4313      	orrs	r3, r2
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	011a      	lsls	r2, r3, #4
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	031b      	lsls	r3, r3, #12
 80060b0:	4313      	orrs	r3, r2
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	4313      	orrs	r3, r2
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b02      	cmp	r3, #2
 8006110:	d122      	bne.n	8006158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b02      	cmp	r3, #2
 800611e:	d11b      	bne.n	8006158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0202 	mvn.w	r2, #2
 8006128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa6a 	bl	8006618 <HAL_TIM_IC_CaptureCallback>
 8006144:	e005      	b.n	8006152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fa5d 	bl	8006606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fa6c 	bl	800662a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b04      	cmp	r3, #4
 8006164:	d122      	bne.n	80061ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b04      	cmp	r3, #4
 8006172:	d11b      	bne.n	80061ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0204 	mvn.w	r2, #4
 800617c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa40 	bl	8006618 <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fa33 	bl	8006606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fa42 	bl	800662a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d122      	bne.n	8006200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d11b      	bne.n	8006200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0208 	mvn.w	r2, #8
 80061d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2204      	movs	r2, #4
 80061d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa16 	bl	8006618 <HAL_TIM_IC_CaptureCallback>
 80061ec:	e005      	b.n	80061fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa09 	bl	8006606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fa18 	bl	800662a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	2b10      	cmp	r3, #16
 800620c:	d122      	bne.n	8006254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b10      	cmp	r3, #16
 800621a:	d11b      	bne.n	8006254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0210 	mvn.w	r2, #16
 8006224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2208      	movs	r2, #8
 800622a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f9ec 	bl	8006618 <HAL_TIM_IC_CaptureCallback>
 8006240:	e005      	b.n	800624e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f9df 	bl	8006606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f9ee 	bl	800662a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b01      	cmp	r3, #1
 8006260:	d10e      	bne.n	8006280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d107      	bne.n	8006280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0201 	mvn.w	r2, #1
 8006278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f00b ff36 	bl	80120ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628a:	2b80      	cmp	r3, #128	; 0x80
 800628c:	d10e      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006298:	2b80      	cmp	r3, #128	; 0x80
 800629a:	d107      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fda8 	bl	8006dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	d10e      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d107      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f9bb 	bl	800664e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d10e      	bne.n	8006304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d107      	bne.n	8006304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0220 	mvn.w	r2, #32
 80062fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fd73 	bl	8006dea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006322:	2302      	movs	r3, #2
 8006324:	e0b4      	b.n	8006490 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2202      	movs	r2, #2
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b0c      	cmp	r3, #12
 800633a:	f200 809f 	bhi.w	800647c <HAL_TIM_PWM_ConfigChannel+0x170>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	08006379 	.word	0x08006379
 8006348:	0800647d 	.word	0x0800647d
 800634c:	0800647d 	.word	0x0800647d
 8006350:	0800647d 	.word	0x0800647d
 8006354:	080063b9 	.word	0x080063b9
 8006358:	0800647d 	.word	0x0800647d
 800635c:	0800647d 	.word	0x0800647d
 8006360:	0800647d 	.word	0x0800647d
 8006364:	080063fb 	.word	0x080063fb
 8006368:	0800647d 	.word	0x0800647d
 800636c:	0800647d 	.word	0x0800647d
 8006370:	0800647d 	.word	0x0800647d
 8006374:	0800643b 	.word	0x0800643b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fa5c 	bl	800683c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0208 	orr.w	r2, r2, #8
 8006392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0204 	bic.w	r2, r2, #4
 80063a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6999      	ldr	r1, [r3, #24]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	619a      	str	r2, [r3, #24]
      break;
 80063b6:	e062      	b.n	800647e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 faa2 	bl	8006908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6999      	ldr	r1, [r3, #24]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	021a      	lsls	r2, r3, #8
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	619a      	str	r2, [r3, #24]
      break;
 80063f8:	e041      	b.n	800647e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	4618      	mov	r0, r3
 8006402:	f000 faeb 	bl	80069dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0208 	orr.w	r2, r2, #8
 8006414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0204 	bic.w	r2, r2, #4
 8006424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69d9      	ldr	r1, [r3, #28]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	691a      	ldr	r2, [r3, #16]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	61da      	str	r2, [r3, #28]
      break;
 8006438:	e021      	b.n	800647e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fb35 	bl	8006ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69d9      	ldr	r1, [r3, #28]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	021a      	lsls	r2, r3, #8
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	61da      	str	r2, [r3, #28]
      break;
 800647a:	e000      	b.n	800647e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800647c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIM_ConfigClockSource+0x18>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e0a6      	b.n	80065fe <HAL_TIM_ConfigClockSource+0x166>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b40      	cmp	r3, #64	; 0x40
 80064e6:	d067      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0x120>
 80064e8:	2b40      	cmp	r3, #64	; 0x40
 80064ea:	d80b      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x6c>
 80064ec:	2b10      	cmp	r3, #16
 80064ee:	d073      	beq.n	80065d8 <HAL_TIM_ConfigClockSource+0x140>
 80064f0:	2b10      	cmp	r3, #16
 80064f2:	d802      	bhi.n	80064fa <HAL_TIM_ConfigClockSource+0x62>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d06f      	beq.n	80065d8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80064f8:	e078      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d06c      	beq.n	80065d8 <HAL_TIM_ConfigClockSource+0x140>
 80064fe:	2b30      	cmp	r3, #48	; 0x30
 8006500:	d06a      	beq.n	80065d8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006502:	e073      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006504:	2b70      	cmp	r3, #112	; 0x70
 8006506:	d00d      	beq.n	8006524 <HAL_TIM_ConfigClockSource+0x8c>
 8006508:	2b70      	cmp	r3, #112	; 0x70
 800650a:	d804      	bhi.n	8006516 <HAL_TIM_ConfigClockSource+0x7e>
 800650c:	2b50      	cmp	r3, #80	; 0x50
 800650e:	d033      	beq.n	8006578 <HAL_TIM_ConfigClockSource+0xe0>
 8006510:	2b60      	cmp	r3, #96	; 0x60
 8006512:	d041      	beq.n	8006598 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006514:	e06a      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651a:	d066      	beq.n	80065ea <HAL_TIM_ConfigClockSource+0x152>
 800651c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006520:	d017      	beq.n	8006552 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006522:	e063      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	6899      	ldr	r1, [r3, #8]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f000 fb81 	bl	8006c3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006546:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	609a      	str	r2, [r3, #8]
      break;
 8006550:	e04c      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6899      	ldr	r1, [r3, #8]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f000 fb6a 	bl	8006c3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006574:	609a      	str	r2, [r3, #8]
      break;
 8006576:	e039      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	6859      	ldr	r1, [r3, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	461a      	mov	r2, r3
 8006586:	f000 fae1 	bl	8006b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2150      	movs	r1, #80	; 0x50
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fb38 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 8006596:	e029      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	6859      	ldr	r1, [r3, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	461a      	mov	r2, r3
 80065a6:	f000 faff 	bl	8006ba8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2160      	movs	r1, #96	; 0x60
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fb28 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80065b6:	e019      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	6859      	ldr	r1, [r3, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	461a      	mov	r2, r3
 80065c6:	f000 fac1 	bl	8006b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2140      	movs	r1, #64	; 0x40
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fb18 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80065d6:	e009      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f000 fb0f 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80065e8:	e000      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      break;
 80065ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr

08006618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr

0800662a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr

0800663c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr

0800664e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff ffe9 	bl	8006660 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d103      	bne.n	80066be <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	771a      	strb	r2, [r3, #28]
 80066bc:	e019      	b.n	80066f2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d103      	bne.n	80066d0 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2202      	movs	r2, #2
 80066cc:	771a      	strb	r2, [r3, #28]
 80066ce:	e010      	b.n	80066f2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d103      	bne.n	80066e2 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2204      	movs	r2, #4
 80066de:	771a      	strb	r2, [r3, #28]
 80066e0:	e007      	b.n	80066f2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d102      	bne.n	80066f2 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2208      	movs	r2, #8
 80066f0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ff99 	bl	800662a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	771a      	strb	r2, [r3, #28]
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d103      	bne.n	800672e <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	771a      	strb	r2, [r3, #28]
 800672c:	e019      	b.n	8006762 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d103      	bne.n	8006740 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2202      	movs	r2, #2
 800673c:	771a      	strb	r2, [r3, #28]
 800673e:	e010      	b.n	8006762 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	429a      	cmp	r2, r3
 8006748:	d103      	bne.n	8006752 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2204      	movs	r2, #4
 800674e:	771a      	strb	r2, [r3, #28]
 8006750:	e007      	b.n	8006762 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	429a      	cmp	r2, r3
 800675a:	d102      	bne.n	8006762 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2208      	movs	r2, #8
 8006760:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f7ff ff6a 	bl	800663c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	771a      	strb	r2, [r3, #28]
}
 800676e:	bf00      	nop
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a29      	ldr	r2, [pc, #164]	; (8006830 <TIM_Base_SetConfig+0xb8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00b      	beq.n	80067a8 <TIM_Base_SetConfig+0x30>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006796:	d007      	beq.n	80067a8 <TIM_Base_SetConfig+0x30>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a26      	ldr	r2, [pc, #152]	; (8006834 <TIM_Base_SetConfig+0xbc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d003      	beq.n	80067a8 <TIM_Base_SetConfig+0x30>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a25      	ldr	r2, [pc, #148]	; (8006838 <TIM_Base_SetConfig+0xc0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d108      	bne.n	80067ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <TIM_Base_SetConfig+0xb8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00b      	beq.n	80067da <TIM_Base_SetConfig+0x62>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c8:	d007      	beq.n	80067da <TIM_Base_SetConfig+0x62>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a19      	ldr	r2, [pc, #100]	; (8006834 <TIM_Base_SetConfig+0xbc>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_Base_SetConfig+0x62>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a18      	ldr	r2, [pc, #96]	; (8006838 <TIM_Base_SetConfig+0xc0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d108      	bne.n	80067ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a07      	ldr	r2, [pc, #28]	; (8006830 <TIM_Base_SetConfig+0xb8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d103      	bne.n	8006820 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	691a      	ldr	r2, [r3, #16]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	615a      	str	r2, [r3, #20]
}
 8006826:	bf00      	nop
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40000400 	.word	0x40000400
 8006838:	40000800 	.word	0x40000800

0800683c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f023 0201 	bic.w	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f023 0302 	bic.w	r3, r3, #2
 8006884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1c      	ldr	r2, [pc, #112]	; (8006904 <TIM_OC1_SetConfig+0xc8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d10c      	bne.n	80068b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0308 	bic.w	r3, r3, #8
 800689e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f023 0304 	bic.w	r3, r3, #4
 80068b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a13      	ldr	r2, [pc, #76]	; (8006904 <TIM_OC1_SetConfig+0xc8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d111      	bne.n	80068de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	621a      	str	r2, [r3, #32]
}
 80068f8:	bf00      	nop
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40012c00 	.word	0x40012c00

08006908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0210 	bic.w	r2, r3, #16
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0320 	bic.w	r3, r3, #32
 8006952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a1d      	ldr	r2, [pc, #116]	; (80069d8 <TIM_OC2_SetConfig+0xd0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d10d      	bne.n	8006984 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800696e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <TIM_OC2_SetConfig+0xd0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d113      	bne.n	80069b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr
 80069d8:	40012c00 	.word	0x40012c00

080069dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1d      	ldr	r2, [pc, #116]	; (8006aac <TIM_OC3_SetConfig+0xd0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d10d      	bne.n	8006a56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a14      	ldr	r2, [pc, #80]	; (8006aac <TIM_OC3_SetConfig+0xd0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d113      	bne.n	8006a86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	621a      	str	r2, [r3, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40012c00 	.word	0x40012c00

08006ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	031b      	lsls	r3, r3, #12
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a0f      	ldr	r2, [pc, #60]	; (8006b48 <TIM_OC4_SetConfig+0x98>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d109      	bne.n	8006b24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	019b      	lsls	r3, r3, #6
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr
 8006b48:	40012c00 	.word	0x40012c00

08006b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f023 0201 	bic.w	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f023 030a 	bic.w	r3, r3, #10
 8006b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f023 0210 	bic.w	r2, r3, #16
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	031b      	lsls	r3, r3, #12
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006be4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	621a      	str	r2, [r3, #32]
}
 8006bfc:	bf00      	nop
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr

08006c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f043 0307 	orr.w	r3, r3, #7
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
}
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr

08006c3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b087      	sub	sp, #28
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	021a      	lsls	r2, r3, #8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	609a      	str	r2, [r3, #8]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr

08006c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1a      	ldr	r2, [r3, #32]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	401a      	ands	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1a      	ldr	r2, [r3, #32]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e032      	b.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d10:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e03d      	b.n	8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr

08006dea <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bc80      	pop	{r7}
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr

08006e0e <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006e0e:	b084      	sub	sp, #16
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	f107 0014 	add.w	r0, r7, #20
 8006e1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	b004      	add	sp, #16
 8006e2c:	4770      	bx	lr

08006e2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b085      	sub	sp, #20
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e36:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006e3a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	89fb      	ldrh	r3, [r7, #14]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e64:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006e68:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	b21a      	sxth	r2, r3
 8006e74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e78:	43db      	mvns	r3, r3
 8006e7a:	b21b      	sxth	r3, r3
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	b21b      	sxth	r3, r3
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr

08006e94 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr

08006eac <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006eac:	b084      	sub	sp, #16
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	f107 0014 	add.w	r0, r7, #20
 8006eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff ffa5 	bl	8006e2e <USB_EnableGlobalInt>

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ef0:	b004      	add	sp, #16
 8006ef2:	4770      	bx	lr

08006ef4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ef4:	b490      	push	{r4, r7}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f18:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	78db      	ldrb	r3, [r3, #3]
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d819      	bhi.n	8006f56 <USB_ActivateEndpoint+0x62>
 8006f22:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <USB_ActivateEndpoint+0x34>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f39 	.word	0x08006f39
 8006f2c:	08006f4d 	.word	0x08006f4d
 8006f30:	08006f5d 	.word	0x08006f5d
 8006f34:	08006f43 	.word	0x08006f43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006f38:	89bb      	ldrh	r3, [r7, #12]
 8006f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f3e:	81bb      	strh	r3, [r7, #12]
      break;
 8006f40:	e00d      	b.n	8006f5e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006f42:	89bb      	ldrh	r3, [r7, #12]
 8006f44:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006f48:	81bb      	strh	r3, [r7, #12]
      break;
 8006f4a:	e008      	b.n	8006f5e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006f4c:	89bb      	ldrh	r3, [r7, #12]
 8006f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f52:	81bb      	strh	r3, [r7, #12]
      break;
 8006f54:	e003      	b.n	8006f5e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5a:	e000      	b.n	8006f5e <USB_ActivateEndpoint+0x6a>
      break;
 8006f5c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	441a      	add	r2, r3
 8006f68:	89bb      	ldrh	r3, [r7, #12]
 8006f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	b29c      	uxth	r4, r3
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	441a      	add	r2, r3
 8006faa:	4b8a      	ldr	r3, [pc, #552]	; (80071d4 <USB_ActivateEndpoint+0x2e0>)
 8006fac:	4323      	orrs	r3, r4
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	7b1b      	ldrb	r3, [r3, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f040 8112 	bne.w	80071e0 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d067      	beq.n	8007094 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006fc4:	687c      	ldr	r4, [r7, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	441c      	add	r4, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	4423      	add	r3, r4
 8006fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fdc:	461c      	mov	r4, r3
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	88db      	ldrh	r3, [r3, #6]
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29c      	uxth	r4, r3
 8006ffa:	4623      	mov	r3, r4
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d014      	beq.n	800702e <USB_ActivateEndpoint+0x13a>
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701a:	b29c      	uxth	r4, r3
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	441a      	add	r2, r3
 8007026:	4b6c      	ldr	r3, [pc, #432]	; (80071d8 <USB_ActivateEndpoint+0x2e4>)
 8007028:	4323      	orrs	r3, r4
 800702a:	b29b      	uxth	r3, r3
 800702c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	78db      	ldrb	r3, [r3, #3]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d018      	beq.n	8007068 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800704c:	b29c      	uxth	r4, r3
 800704e:	f084 0320 	eor.w	r3, r4, #32
 8007052:	b29c      	uxth	r4, r3
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	441a      	add	r2, r3
 800705e:	4b5d      	ldr	r3, [pc, #372]	; (80071d4 <USB_ActivateEndpoint+0x2e0>)
 8007060:	4323      	orrs	r3, r4
 8007062:	b29b      	uxth	r3, r3
 8007064:	8013      	strh	r3, [r2, #0]
 8007066:	e22b      	b.n	80074c0 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800707e:	b29c      	uxth	r4, r3
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	441a      	add	r2, r3
 800708a:	4b52      	ldr	r3, [pc, #328]	; (80071d4 <USB_ActivateEndpoint+0x2e0>)
 800708c:	4323      	orrs	r3, r4
 800708e:	b29b      	uxth	r3, r3
 8007090:	8013      	strh	r3, [r2, #0]
 8007092:	e215      	b.n	80074c0 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007094:	687c      	ldr	r4, [r7, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709c:	b29b      	uxth	r3, r3
 800709e:	441c      	add	r4, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	4423      	add	r3, r4
 80070a8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80070ac:	461c      	mov	r4, r3
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	88db      	ldrh	r3, [r3, #6]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80070bc:	687c      	ldr	r4, [r7, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	441c      	add	r4, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	4423      	add	r3, r4
 80070d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070d4:	461c      	mov	r4, r3
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10e      	bne.n	80070fc <USB_ActivateEndpoint+0x208>
 80070de:	8823      	ldrh	r3, [r4, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	8023      	strh	r3, [r4, #0]
 80070ea:	8823      	ldrh	r3, [r4, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8023      	strh	r3, [r4, #0]
 80070fa:	e02d      	b.n	8007158 <USB_ActivateEndpoint+0x264>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	2b3e      	cmp	r3, #62	; 0x3e
 8007102:	d812      	bhi.n	800712a <USB_ActivateEndpoint+0x236>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	085b      	lsrs	r3, r3, #1
 800710a:	60bb      	str	r3, [r7, #8]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <USB_ActivateEndpoint+0x22a>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	3301      	adds	r3, #1
 800711c:	60bb      	str	r3, [r7, #8]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	b29b      	uxth	r3, r3
 8007122:	029b      	lsls	r3, r3, #10
 8007124:	b29b      	uxth	r3, r3
 8007126:	8023      	strh	r3, [r4, #0]
 8007128:	e016      	b.n	8007158 <USB_ActivateEndpoint+0x264>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	60bb      	str	r3, [r7, #8]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <USB_ActivateEndpoint+0x250>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	3b01      	subs	r3, #1
 8007142:	60bb      	str	r3, [r7, #8]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	b29b      	uxth	r3, r3
 8007148:	029b      	lsls	r3, r3, #10
 800714a:	b29b      	uxth	r3, r3
 800714c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007154:	b29b      	uxth	r3, r3
 8007156:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29c      	uxth	r4, r3
 8007166:	4623      	mov	r3, r4
 8007168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d014      	beq.n	800719a <USB_ActivateEndpoint+0x2a6>
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007186:	b29c      	uxth	r4, r3
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	441a      	add	r2, r3
 8007192:	4b12      	ldr	r3, [pc, #72]	; (80071dc <USB_ActivateEndpoint+0x2e8>)
 8007194:	4323      	orrs	r3, r4
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b0:	b29c      	uxth	r4, r3
 80071b2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80071b6:	b29c      	uxth	r4, r3
 80071b8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80071bc:	b29c      	uxth	r4, r3
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	441a      	add	r2, r3
 80071c8:	4b02      	ldr	r3, [pc, #8]	; (80071d4 <USB_ActivateEndpoint+0x2e0>)
 80071ca:	4323      	orrs	r3, r4
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	8013      	strh	r3, [r2, #0]
 80071d0:	e176      	b.n	80074c0 <USB_ActivateEndpoint+0x5cc>
 80071d2:	bf00      	nop
 80071d4:	ffff8080 	.word	0xffff8080
 80071d8:	ffff80c0 	.word	0xffff80c0
 80071dc:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f6:	b29c      	uxth	r4, r3
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	441a      	add	r2, r3
 8007202:	4b96      	ldr	r3, [pc, #600]	; (800745c <USB_ActivateEndpoint+0x568>)
 8007204:	4323      	orrs	r3, r4
 8007206:	b29b      	uxth	r3, r3
 8007208:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800720a:	687c      	ldr	r4, [r7, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007212:	b29b      	uxth	r3, r3
 8007214:	441c      	add	r4, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	4423      	add	r3, r4
 800721e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007222:	461c      	mov	r4, r3
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	891b      	ldrh	r3, [r3, #8]
 8007228:	085b      	lsrs	r3, r3, #1
 800722a:	b29b      	uxth	r3, r3
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	b29b      	uxth	r3, r3
 8007230:	8023      	strh	r3, [r4, #0]
 8007232:	687c      	ldr	r4, [r7, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723a:	b29b      	uxth	r3, r3
 800723c:	441c      	add	r4, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	4423      	add	r3, r4
 8007246:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800724a:	461c      	mov	r4, r3
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	895b      	ldrh	r3, [r3, #10]
 8007250:	085b      	lsrs	r3, r3, #1
 8007252:	b29b      	uxth	r3, r3
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	b29b      	uxth	r3, r3
 8007258:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f040 8088 	bne.w	8007374 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29c      	uxth	r4, r3
 8007272:	4623      	mov	r3, r4
 8007274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d014      	beq.n	80072a6 <USB_ActivateEndpoint+0x3b2>
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29b      	uxth	r3, r3
 800728a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007292:	b29c      	uxth	r4, r3
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	441a      	add	r2, r3
 800729e:	4b70      	ldr	r3, [pc, #448]	; (8007460 <USB_ActivateEndpoint+0x56c>)
 80072a0:	4323      	orrs	r3, r4
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29c      	uxth	r4, r3
 80072b4:	4623      	mov	r3, r4
 80072b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d014      	beq.n	80072e8 <USB_ActivateEndpoint+0x3f4>
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d4:	b29c      	uxth	r4, r3
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	441a      	add	r2, r3
 80072e0:	4b60      	ldr	r3, [pc, #384]	; (8007464 <USB_ActivateEndpoint+0x570>)
 80072e2:	4323      	orrs	r3, r4
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	b29c      	uxth	r4, r3
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	4b56      	ldr	r3, [pc, #344]	; (8007464 <USB_ActivateEndpoint+0x570>)
 800730c:	4323      	orrs	r3, r4
 800730e:	b29b      	uxth	r3, r3
 8007310:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007328:	b29c      	uxth	r4, r3
 800732a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800732e:	b29c      	uxth	r4, r3
 8007330:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007334:	b29c      	uxth	r4, r3
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	441a      	add	r2, r3
 8007340:	4b49      	ldr	r3, [pc, #292]	; (8007468 <USB_ActivateEndpoint+0x574>)
 8007342:	4323      	orrs	r3, r4
 8007344:	b29b      	uxth	r3, r3
 8007346:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800735e:	b29c      	uxth	r4, r3
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	441a      	add	r2, r3
 800736a:	4b3f      	ldr	r3, [pc, #252]	; (8007468 <USB_ActivateEndpoint+0x574>)
 800736c:	4323      	orrs	r3, r4
 800736e:	b29b      	uxth	r3, r3
 8007370:	8013      	strh	r3, [r2, #0]
 8007372:	e0a5      	b.n	80074c0 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b29c      	uxth	r4, r3
 8007382:	4623      	mov	r3, r4
 8007384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d014      	beq.n	80073b6 <USB_ActivateEndpoint+0x4c2>
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	b29c      	uxth	r4, r3
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	4b2c      	ldr	r3, [pc, #176]	; (8007460 <USB_ActivateEndpoint+0x56c>)
 80073b0:	4323      	orrs	r3, r4
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29c      	uxth	r4, r3
 80073c4:	4623      	mov	r3, r4
 80073c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d014      	beq.n	80073f8 <USB_ActivateEndpoint+0x504>
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e4:	b29c      	uxth	r4, r3
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	441a      	add	r2, r3
 80073f0:	4b1c      	ldr	r3, [pc, #112]	; (8007464 <USB_ActivateEndpoint+0x570>)
 80073f2:	4323      	orrs	r3, r4
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800740a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740e:	b29c      	uxth	r4, r3
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	441a      	add	r2, r3
 800741a:	4b11      	ldr	r3, [pc, #68]	; (8007460 <USB_ActivateEndpoint+0x56c>)
 800741c:	4323      	orrs	r3, r4
 800741e:	b29b      	uxth	r3, r3
 8007420:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	78db      	ldrb	r3, [r3, #3]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d020      	beq.n	800746c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007440:	b29c      	uxth	r4, r3
 8007442:	f084 0320 	eor.w	r3, r4, #32
 8007446:	b29c      	uxth	r4, r3
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	441a      	add	r2, r3
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <USB_ActivateEndpoint+0x574>)
 8007454:	4323      	orrs	r3, r4
 8007456:	b29b      	uxth	r3, r3
 8007458:	8013      	strh	r3, [r2, #0]
 800745a:	e01c      	b.n	8007496 <USB_ActivateEndpoint+0x5a2>
 800745c:	ffff8180 	.word	0xffff8180
 8007460:	ffffc080 	.word	0xffffc080
 8007464:	ffff80c0 	.word	0xffff80c0
 8007468:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007482:	b29c      	uxth	r4, r3
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	441a      	add	r2, r3
 800748e:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <USB_ActivateEndpoint+0x5d8>)
 8007490:	4323      	orrs	r3, r4
 8007492:	b29b      	uxth	r3, r3
 8007494:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ac:	b29c      	uxth	r4, r3
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	441a      	add	r2, r3
 80074b8:	4b04      	ldr	r3, [pc, #16]	; (80074cc <USB_ActivateEndpoint+0x5d8>)
 80074ba:	4323      	orrs	r3, r4
 80074bc:	b29b      	uxth	r3, r3
 80074be:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bc90      	pop	{r4, r7}
 80074ca:	4770      	bx	lr
 80074cc:	ffff8080 	.word	0xffff8080

080074d0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074d0:	b490      	push	{r4, r7}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	7b1b      	ldrb	r3, [r3, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d171      	bne.n	80075c6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	785b      	ldrb	r3, [r3, #1]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d036      	beq.n	8007558 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29c      	uxth	r4, r3
 80074f8:	4623      	mov	r3, r4
 80074fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d014      	beq.n	800752c <USB_DeactivateEndpoint+0x5c>
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007518:	b29c      	uxth	r4, r3
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	441a      	add	r2, r3
 8007524:	4b6b      	ldr	r3, [pc, #428]	; (80076d4 <USB_DeactivateEndpoint+0x204>)
 8007526:	4323      	orrs	r3, r4
 8007528:	b29b      	uxth	r3, r3
 800752a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007542:	b29c      	uxth	r4, r3
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	441a      	add	r2, r3
 800754e:	4b62      	ldr	r3, [pc, #392]	; (80076d8 <USB_DeactivateEndpoint+0x208>)
 8007550:	4323      	orrs	r3, r4
 8007552:	b29b      	uxth	r3, r3
 8007554:	8013      	strh	r3, [r2, #0]
 8007556:	e144      	b.n	80077e2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29c      	uxth	r4, r3
 8007566:	4623      	mov	r3, r4
 8007568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d014      	beq.n	800759a <USB_DeactivateEndpoint+0xca>
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007586:	b29c      	uxth	r4, r3
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	441a      	add	r2, r3
 8007592:	4b52      	ldr	r3, [pc, #328]	; (80076dc <USB_DeactivateEndpoint+0x20c>)
 8007594:	4323      	orrs	r3, r4
 8007596:	b29b      	uxth	r3, r3
 8007598:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b0:	b29c      	uxth	r4, r3
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	441a      	add	r2, r3
 80075bc:	4b46      	ldr	r3, [pc, #280]	; (80076d8 <USB_DeactivateEndpoint+0x208>)
 80075be:	4323      	orrs	r3, r4
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	8013      	strh	r3, [r2, #0]
 80075c4:	e10d      	b.n	80077e2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 8088 	bne.w	80076e0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29c      	uxth	r4, r3
 80075de:	4623      	mov	r3, r4
 80075e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d014      	beq.n	8007612 <USB_DeactivateEndpoint+0x142>
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fe:	b29c      	uxth	r4, r3
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	441a      	add	r2, r3
 800760a:	4b34      	ldr	r3, [pc, #208]	; (80076dc <USB_DeactivateEndpoint+0x20c>)
 800760c:	4323      	orrs	r3, r4
 800760e:	b29b      	uxth	r3, r3
 8007610:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b29c      	uxth	r4, r3
 8007620:	4623      	mov	r3, r4
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d014      	beq.n	8007654 <USB_DeactivateEndpoint+0x184>
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	b29b      	uxth	r3, r3
 8007638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800763c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007640:	b29c      	uxth	r4, r3
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	441a      	add	r2, r3
 800764c:	4b21      	ldr	r3, [pc, #132]	; (80076d4 <USB_DeactivateEndpoint+0x204>)
 800764e:	4323      	orrs	r3, r4
 8007650:	b29b      	uxth	r3, r3
 8007652:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766a:	b29c      	uxth	r4, r3
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	441a      	add	r2, r3
 8007676:	4b17      	ldr	r3, [pc, #92]	; (80076d4 <USB_DeactivateEndpoint+0x204>)
 8007678:	4323      	orrs	r3, r4
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007694:	b29c      	uxth	r4, r3
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	441a      	add	r2, r3
 80076a0:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <USB_DeactivateEndpoint+0x208>)
 80076a2:	4323      	orrs	r3, r4
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076be:	b29c      	uxth	r4, r3
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	441a      	add	r2, r3
 80076ca:	4b03      	ldr	r3, [pc, #12]	; (80076d8 <USB_DeactivateEndpoint+0x208>)
 80076cc:	4323      	orrs	r3, r4
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	8013      	strh	r3, [r2, #0]
 80076d2:	e086      	b.n	80077e2 <USB_DeactivateEndpoint+0x312>
 80076d4:	ffff80c0 	.word	0xffff80c0
 80076d8:	ffff8080 	.word	0xffff8080
 80076dc:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29c      	uxth	r4, r3
 80076ee:	4623      	mov	r3, r4
 80076f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d014      	beq.n	8007722 <USB_DeactivateEndpoint+0x252>
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	b29b      	uxth	r3, r3
 8007706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	b29c      	uxth	r4, r3
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	441a      	add	r2, r3
 800771a:	4b35      	ldr	r3, [pc, #212]	; (80077f0 <USB_DeactivateEndpoint+0x320>)
 800771c:	4323      	orrs	r3, r4
 800771e:	b29b      	uxth	r3, r3
 8007720:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29c      	uxth	r4, r3
 8007730:	4623      	mov	r3, r4
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d014      	beq.n	8007764 <USB_DeactivateEndpoint+0x294>
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007750:	b29c      	uxth	r4, r3
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	441a      	add	r2, r3
 800775c:	4b25      	ldr	r3, [pc, #148]	; (80077f4 <USB_DeactivateEndpoint+0x324>)
 800775e:	4323      	orrs	r3, r4
 8007760:	b29b      	uxth	r3, r3
 8007762:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777a:	b29c      	uxth	r4, r3
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	441a      	add	r2, r3
 8007786:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <USB_DeactivateEndpoint+0x320>)
 8007788:	4323      	orrs	r3, r4
 800778a:	b29b      	uxth	r3, r3
 800778c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a4:	b29c      	uxth	r4, r3
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	441a      	add	r2, r3
 80077b0:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <USB_DeactivateEndpoint+0x328>)
 80077b2:	4323      	orrs	r3, r4
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ce:	b29c      	uxth	r4, r3
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	441a      	add	r2, r3
 80077da:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <USB_DeactivateEndpoint+0x328>)
 80077dc:	4323      	orrs	r3, r4
 80077de:	b29b      	uxth	r3, r3
 80077e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc90      	pop	{r4, r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	ffffc080 	.word	0xffffc080
 80077f4:	ffff80c0 	.word	0xffff80c0
 80077f8:	ffff8080 	.word	0xffff8080

080077fc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077fc:	b590      	push	{r4, r7, lr}
 80077fe:	b08d      	sub	sp, #52	; 0x34
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	2b01      	cmp	r3, #1
 800780c:	f040 8160 	bne.w	8007ad0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	699a      	ldr	r2, [r3, #24]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	429a      	cmp	r2, r3
 800781a:	d909      	bls.n	8007830 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	699a      	ldr	r2, [r3, #24]
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	1ad2      	subs	r2, r2, r3
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	619a      	str	r2, [r3, #24]
 800782e:	e005      	b.n	800783c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2200      	movs	r2, #0
 800783a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	7b1b      	ldrb	r3, [r3, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d119      	bne.n	8007878 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	6959      	ldr	r1, [r3, #20]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	88da      	ldrh	r2, [r3, #6]
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	b29b      	uxth	r3, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fba2 	bl	8007f9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007856:	687c      	ldr	r4, [r7, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785e:	b29b      	uxth	r3, r3
 8007860:	441c      	add	r4, r3
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	4423      	add	r3, r4
 800786a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800786e:	461c      	mov	r4, r3
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	b29b      	uxth	r3, r3
 8007874:	8023      	strh	r3, [r4, #0]
 8007876:	e10f      	b.n	8007a98 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d065      	beq.n	800795a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800788e:	687c      	ldr	r4, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	785b      	ldrb	r3, [r3, #1]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d148      	bne.n	800792a <USB_EPStartXfer+0x12e>
 8007898:	687c      	ldr	r4, [r7, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	441c      	add	r4, r3
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	4423      	add	r3, r4
 80078ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078b0:	461c      	mov	r4, r3
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10e      	bne.n	80078d6 <USB_EPStartXfer+0xda>
 80078b8:	8823      	ldrh	r3, [r4, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	8023      	strh	r3, [r4, #0]
 80078c4:	8823      	ldrh	r3, [r4, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	8023      	strh	r3, [r4, #0]
 80078d4:	e03d      	b.n	8007952 <USB_EPStartXfer+0x156>
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	2b3e      	cmp	r3, #62	; 0x3e
 80078da:	d810      	bhi.n	80078fe <USB_EPStartXfer+0x102>
 80078dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078de:	085b      	lsrs	r3, r3, #1
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <USB_EPStartXfer+0xf6>
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	3301      	adds	r3, #1
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	029b      	lsls	r3, r3, #10
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	8023      	strh	r3, [r4, #0]
 80078fc:	e029      	b.n	8007952 <USB_EPStartXfer+0x156>
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	095b      	lsrs	r3, r3, #5
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
 8007904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	2b00      	cmp	r3, #0
 800790c:	d102      	bne.n	8007914 <USB_EPStartXfer+0x118>
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	3b01      	subs	r3, #1
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	b29b      	uxth	r3, r3
 8007918:	029b      	lsls	r3, r3, #10
 800791a:	b29b      	uxth	r3, r3
 800791c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007924:	b29b      	uxth	r3, r3
 8007926:	8023      	strh	r3, [r4, #0]
 8007928:	e013      	b.n	8007952 <USB_EPStartXfer+0x156>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d10f      	bne.n	8007952 <USB_EPStartXfer+0x156>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007938:	b29b      	uxth	r3, r3
 800793a:	441c      	add	r4, r3
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	4423      	add	r3, r4
 8007944:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	895b      	ldrh	r3, [r3, #10]
 8007956:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007958:	e063      	b.n	8007a22 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d148      	bne.n	80079f4 <USB_EPStartXfer+0x1f8>
 8007962:	687c      	ldr	r4, [r7, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800796a:	b29b      	uxth	r3, r3
 800796c:	441c      	add	r4, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	4423      	add	r3, r4
 8007976:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800797a:	461c      	mov	r4, r3
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10e      	bne.n	80079a0 <USB_EPStartXfer+0x1a4>
 8007982:	8823      	ldrh	r3, [r4, #0]
 8007984:	b29b      	uxth	r3, r3
 8007986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800798a:	b29b      	uxth	r3, r3
 800798c:	8023      	strh	r3, [r4, #0]
 800798e:	8823      	ldrh	r3, [r4, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799a:	b29b      	uxth	r3, r3
 800799c:	8023      	strh	r3, [r4, #0]
 800799e:	e03d      	b.n	8007a1c <USB_EPStartXfer+0x220>
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	2b3e      	cmp	r3, #62	; 0x3e
 80079a4:	d810      	bhi.n	80079c8 <USB_EPStartXfer+0x1cc>
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	085b      	lsrs	r3, r3, #1
 80079aa:	623b      	str	r3, [r7, #32]
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <USB_EPStartXfer+0x1c0>
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	3301      	adds	r3, #1
 80079ba:	623b      	str	r3, [r7, #32]
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	029b      	lsls	r3, r3, #10
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	8023      	strh	r3, [r4, #0]
 80079c6:	e029      	b.n	8007a1c <USB_EPStartXfer+0x220>
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	623b      	str	r3, [r7, #32]
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <USB_EPStartXfer+0x1e2>
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	3b01      	subs	r3, #1
 80079dc:	623b      	str	r3, [r7, #32]
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	029b      	lsls	r3, r3, #10
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8023      	strh	r3, [r4, #0]
 80079f2:	e013      	b.n	8007a1c <USB_EPStartXfer+0x220>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d10f      	bne.n	8007a1c <USB_EPStartXfer+0x220>
 80079fc:	687c      	ldr	r4, [r7, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	441c      	add	r4, r3
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	4423      	add	r3, r4
 8007a10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a14:	461c      	mov	r4, r3
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	891b      	ldrh	r3, [r3, #8]
 8007a20:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6959      	ldr	r1, [r3, #20]
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fab4 	bl	8007f9a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d115      	bne.n	8007a66 <USB_EPStartXfer+0x26a>
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a50:	b29c      	uxth	r4, r3
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	441a      	add	r2, r3
 8007a5c:	4b9a      	ldr	r3, [pc, #616]	; (8007cc8 <USB_EPStartXfer+0x4cc>)
 8007a5e:	4323      	orrs	r3, r4
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	8013      	strh	r3, [r2, #0]
 8007a64:	e018      	b.n	8007a98 <USB_EPStartXfer+0x29c>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d114      	bne.n	8007a98 <USB_EPStartXfer+0x29c>
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a84:	b29c      	uxth	r4, r3
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	441a      	add	r2, r3
 8007a90:	4b8e      	ldr	r3, [pc, #568]	; (8007ccc <USB_EPStartXfer+0x4d0>)
 8007a92:	4323      	orrs	r3, r4
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aae:	b29c      	uxth	r4, r3
 8007ab0:	f084 0310 	eor.w	r3, r4, #16
 8007ab4:	b29c      	uxth	r4, r3
 8007ab6:	f084 0320 	eor.w	r3, r4, #32
 8007aba:	b29c      	uxth	r4, r3
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	441a      	add	r2, r3
 8007ac6:	4b82      	ldr	r3, [pc, #520]	; (8007cd0 <USB_EPStartXfer+0x4d4>)
 8007ac8:	4323      	orrs	r3, r4
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]
 8007ace:	e146      	b.n	8007d5e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	699a      	ldr	r2, [r3, #24]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d909      	bls.n	8007af0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	1ad2      	subs	r2, r2, r3
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	619a      	str	r2, [r3, #24]
 8007aee:	e005      	b.n	8007afc <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2200      	movs	r2, #0
 8007afa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	7b1b      	ldrb	r3, [r3, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d148      	bne.n	8007b96 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b04:	687c      	ldr	r4, [r7, #4]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	441c      	add	r4, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	4423      	add	r3, r4
 8007b18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b1c:	461c      	mov	r4, r3
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10e      	bne.n	8007b42 <USB_EPStartXfer+0x346>
 8007b24:	8823      	ldrh	r3, [r4, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	8023      	strh	r3, [r4, #0]
 8007b30:	8823      	ldrh	r3, [r4, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	8023      	strh	r3, [r4, #0]
 8007b40:	e0f2      	b.n	8007d28 <USB_EPStartXfer+0x52c>
 8007b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b44:	2b3e      	cmp	r3, #62	; 0x3e
 8007b46:	d810      	bhi.n	8007b6a <USB_EPStartXfer+0x36e>
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <USB_EPStartXfer+0x362>
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	029b      	lsls	r3, r3, #10
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	8023      	strh	r3, [r4, #0]
 8007b68:	e0de      	b.n	8007d28 <USB_EPStartXfer+0x52c>
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	61fb      	str	r3, [r7, #28]
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d102      	bne.n	8007b80 <USB_EPStartXfer+0x384>
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	61fb      	str	r3, [r7, #28]
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	029b      	lsls	r3, r3, #10
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	8023      	strh	r3, [r4, #0]
 8007b94:	e0c8      	b.n	8007d28 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d148      	bne.n	8007c30 <USB_EPStartXfer+0x434>
 8007b9e:	687c      	ldr	r4, [r7, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	441c      	add	r4, r3
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	4423      	add	r3, r4
 8007bb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bb6:	461c      	mov	r4, r3
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10e      	bne.n	8007bdc <USB_EPStartXfer+0x3e0>
 8007bbe:	8823      	ldrh	r3, [r4, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	8023      	strh	r3, [r4, #0]
 8007bca:	8823      	ldrh	r3, [r4, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	8023      	strh	r3, [r4, #0]
 8007bda:	e03d      	b.n	8007c58 <USB_EPStartXfer+0x45c>
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	2b3e      	cmp	r3, #62	; 0x3e
 8007be0:	d810      	bhi.n	8007c04 <USB_EPStartXfer+0x408>
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	085b      	lsrs	r3, r3, #1
 8007be6:	61bb      	str	r3, [r7, #24]
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <USB_EPStartXfer+0x3fc>
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	61bb      	str	r3, [r7, #24]
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	029b      	lsls	r3, r3, #10
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	8023      	strh	r3, [r4, #0]
 8007c02:	e029      	b.n	8007c58 <USB_EPStartXfer+0x45c>
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	095b      	lsrs	r3, r3, #5
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	f003 031f 	and.w	r3, r3, #31
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <USB_EPStartXfer+0x41e>
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	61bb      	str	r3, [r7, #24]
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	029b      	lsls	r3, r3, #10
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8023      	strh	r3, [r4, #0]
 8007c2e:	e013      	b.n	8007c58 <USB_EPStartXfer+0x45c>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	785b      	ldrb	r3, [r3, #1]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d10f      	bne.n	8007c58 <USB_EPStartXfer+0x45c>
 8007c38:	687c      	ldr	r4, [r7, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	441c      	add	r4, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	4423      	add	r3, r4
 8007c4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c50:	461c      	mov	r4, r3
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	8023      	strh	r3, [r4, #0]
 8007c58:	687c      	ldr	r4, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d14e      	bne.n	8007d00 <USB_EPStartXfer+0x504>
 8007c62:	687c      	ldr	r4, [r7, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	441c      	add	r4, r3
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	4423      	add	r3, r4
 8007c76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c7a:	461c      	mov	r4, r3
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10e      	bne.n	8007ca0 <USB_EPStartXfer+0x4a4>
 8007c82:	8823      	ldrh	r3, [r4, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	8023      	strh	r3, [r4, #0]
 8007c8e:	8823      	ldrh	r3, [r4, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	8023      	strh	r3, [r4, #0]
 8007c9e:	e043      	b.n	8007d28 <USB_EPStartXfer+0x52c>
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ca4:	d816      	bhi.n	8007cd4 <USB_EPStartXfer+0x4d8>
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	085b      	lsrs	r3, r3, #1
 8007caa:	617b      	str	r3, [r7, #20]
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <USB_EPStartXfer+0x4c0>
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	029b      	lsls	r3, r3, #10
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	8023      	strh	r3, [r4, #0]
 8007cc6:	e02f      	b.n	8007d28 <USB_EPStartXfer+0x52c>
 8007cc8:	ffff80c0 	.word	0xffff80c0
 8007ccc:	ffffc080 	.word	0xffffc080
 8007cd0:	ffff8080 	.word	0xffff8080
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	095b      	lsrs	r3, r3, #5
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	f003 031f 	and.w	r3, r3, #31
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <USB_EPStartXfer+0x4ee>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	617b      	str	r3, [r7, #20]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	029b      	lsls	r3, r3, #10
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	8023      	strh	r3, [r4, #0]
 8007cfe:	e013      	b.n	8007d28 <USB_EPStartXfer+0x52c>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	785b      	ldrb	r3, [r3, #1]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d10f      	bne.n	8007d28 <USB_EPStartXfer+0x52c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	441c      	add	r4, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	4423      	add	r3, r4
 8007d1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d1e:	613b      	str	r3, [r7, #16]
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3e:	b29c      	uxth	r4, r3
 8007d40:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007d44:	b29c      	uxth	r4, r3
 8007d46:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007d4a:	b29c      	uxth	r4, r3
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	441a      	add	r2, r3
 8007d56:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <USB_EPStartXfer+0x56c>)
 8007d58:	4323      	orrs	r3, r4
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3734      	adds	r7, #52	; 0x34
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd90      	pop	{r4, r7, pc}
 8007d68:	ffff8080 	.word	0xffff8080

08007d6c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d6c:	b490      	push	{r4, r7}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d018      	beq.n	8007db0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d94:	b29c      	uxth	r4, r3
 8007d96:	f084 0310 	eor.w	r3, r4, #16
 8007d9a:	b29c      	uxth	r4, r3
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	441a      	add	r2, r3
 8007da6:	4b11      	ldr	r3, [pc, #68]	; (8007dec <USB_EPSetStall+0x80>)
 8007da8:	4323      	orrs	r3, r4
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	8013      	strh	r3, [r2, #0]
 8007dae:	e017      	b.n	8007de0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc6:	b29c      	uxth	r4, r3
 8007dc8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007dcc:	b29c      	uxth	r4, r3
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	441a      	add	r2, r3
 8007dd8:	4b04      	ldr	r3, [pc, #16]	; (8007dec <USB_EPSetStall+0x80>)
 8007dda:	4323      	orrs	r3, r4
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bc90      	pop	{r4, r7}
 8007dea:	4770      	bx	lr
 8007dec:	ffff8080 	.word	0xffff8080

08007df0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007df0:	b490      	push	{r4, r7}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	7b1b      	ldrb	r3, [r3, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d17d      	bne.n	8007efe <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d03d      	beq.n	8007e86 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29c      	uxth	r4, r3
 8007e18:	4623      	mov	r3, r4
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d014      	beq.n	8007e4c <USB_EPClearStall+0x5c>
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e38:	b29c      	uxth	r4, r3
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	441a      	add	r2, r3
 8007e44:	4b31      	ldr	r3, [pc, #196]	; (8007f0c <USB_EPClearStall+0x11c>)
 8007e46:	4323      	orrs	r3, r4
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	78db      	ldrb	r3, [r3, #3]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d054      	beq.n	8007efe <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e6a:	b29c      	uxth	r4, r3
 8007e6c:	f084 0320 	eor.w	r3, r4, #32
 8007e70:	b29c      	uxth	r4, r3
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	441a      	add	r2, r3
 8007e7c:	4b24      	ldr	r3, [pc, #144]	; (8007f10 <USB_EPClearStall+0x120>)
 8007e7e:	4323      	orrs	r3, r4
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	8013      	strh	r3, [r2, #0]
 8007e84:	e03b      	b.n	8007efe <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29c      	uxth	r4, r3
 8007e94:	4623      	mov	r3, r4
 8007e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d014      	beq.n	8007ec8 <USB_EPClearStall+0xd8>
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb4:	b29c      	uxth	r4, r3
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	441a      	add	r2, r3
 8007ec0:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <USB_EPClearStall+0x124>)
 8007ec2:	4323      	orrs	r3, r4
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ede:	b29c      	uxth	r4, r3
 8007ee0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007ee4:	b29c      	uxth	r4, r3
 8007ee6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007eea:	b29c      	uxth	r4, r3
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	441a      	add	r2, r3
 8007ef6:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <USB_EPClearStall+0x120>)
 8007ef8:	4323      	orrs	r3, r4
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc90      	pop	{r4, r7}
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	ffff80c0 	.word	0xffff80c0
 8007f10:	ffff8080 	.word	0xffff8080
 8007f14:	ffffc080 	.word	0xffffc080

08007f18 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d103      	bne.n	8007f32 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2280      	movs	r2, #128	; 0x80
 8007f2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr

08007f52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr

08007f66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b085      	sub	sp, #20
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007f78:	68fb      	ldr	r3, [r7, #12]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc80      	pop	{r7}
 8007f82:	4770      	bx	lr

08007f84 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr

08007f9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b08d      	sub	sp, #52	; 0x34
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	460b      	mov	r3, r1
 8007faa:	80fb      	strh	r3, [r7, #6]
 8007fac:	4613      	mov	r3, r2
 8007fae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007fb0:	88bb      	ldrh	r3, [r7, #4]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fc0:	88fb      	ldrh	r3, [r7, #6]
 8007fc2:	005a      	lsls	r2, r3, #1
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd2:	e01e      	b.n	8008012 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	3301      	adds	r3, #1
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	461a      	mov	r2, r3
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	3302      	adds	r3, #2
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	3302      	adds	r3, #2
 8008004:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	3301      	adds	r3, #1
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	3b01      	subs	r3, #1
 8008010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1dd      	bne.n	8007fd4 <USB_WritePMA+0x3a>
  }
}
 8008018:	bf00      	nop
 800801a:	3734      	adds	r7, #52	; 0x34
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr

08008022 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008022:	b480      	push	{r7}
 8008024:	b08b      	sub	sp, #44	; 0x2c
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	4611      	mov	r1, r2
 800802e:	461a      	mov	r2, r3
 8008030:	460b      	mov	r3, r1
 8008032:	80fb      	strh	r3, [r7, #6]
 8008034:	4613      	mov	r3, r2
 8008036:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008038:	88bb      	ldrh	r3, [r7, #4]
 800803a:	085b      	lsrs	r3, r3, #1
 800803c:	b29b      	uxth	r3, r3
 800803e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008048:	88fb      	ldrh	r3, [r7, #6]
 800804a:	005a      	lsls	r2, r3, #1
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008054:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
 800805a:	e01b      	b.n	8008094 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	3302      	adds	r3, #2
 8008068:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	b2da      	uxtb	r2, r3
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	3301      	adds	r3, #1
 8008076:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	0a1b      	lsrs	r3, r3, #8
 800807c:	b2da      	uxtb	r2, r3
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	3301      	adds	r3, #1
 8008086:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	3302      	adds	r3, #2
 800808c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	3b01      	subs	r3, #1
 8008092:	627b      	str	r3, [r7, #36]	; 0x24
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e0      	bne.n	800805c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800809a:	88bb      	ldrh	r3, [r7, #4]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d007      	beq.n	80080b6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	701a      	strb	r2, [r3, #0]
  }
}
 80080b6:	bf00      	nop
 80080b8:	372c      	adds	r7, #44	; 0x2c
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr

080080c0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr
	...

080080d8 <_ZN10AdcHandlerC1Ev>:
#include "AdcHandler.h"


AdcHandler::AdcHandler() {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	4a07      	ldr	r2, [pc, #28]	; (8008100 <_ZN10AdcHandlerC1Ev+0x28>)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	601a      	str	r2, [r3, #0]
	extern std::vector<AdcHandler*> adcHandlers;
	adcHandlers.push_back(this);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	f107 030c 	add.w	r3, r7, #12
 80080ee:	4619      	mov	r1, r3
 80080f0:	4804      	ldr	r0, [pc, #16]	; (8008104 <_ZN10AdcHandlerC1Ev+0x2c>)
 80080f2:	f000 f879 	bl	80081e8 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE9push_backEOS1_>

}
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	08018d30 	.word	0x08018d30
 8008104:	20000b4c 	.word	0x20000b4c

08008108 <_ZN10AdcHandlerD1Ev>:

AdcHandler::~AdcHandler() {
 8008108:	b590      	push	{r4, r7, lr}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	4a21      	ldr	r2, [pc, #132]	; (8008198 <_ZN10AdcHandlerD1Ev+0x90>)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	601a      	str	r2, [r3, #0]
	extern std::vector<AdcHandler*> adcHandlers;
	for (uint8_t i = 0; i < adcHandlers.size(); i++){
 8008116:	2300      	movs	r3, #0
 8008118:	75fb      	strb	r3, [r7, #23]
 800811a:	7dfc      	ldrb	r4, [r7, #23]
 800811c:	481f      	ldr	r0, [pc, #124]	; (800819c <_ZN10AdcHandlerD1Ev+0x94>)
 800811e:	f000 f874 	bl	800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 8008122:	4603      	mov	r3, r0
 8008124:	429c      	cmp	r4, r3
 8008126:	bf34      	ite	cc
 8008128:	2301      	movcc	r3, #1
 800812a:	2300      	movcs	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d02d      	beq.n	800818e <_ZN10AdcHandlerD1Ev+0x86>
		if(adcHandlers[i] == this){
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	4619      	mov	r1, r3
 8008136:	4819      	ldr	r0, [pc, #100]	; (800819c <_ZN10AdcHandlerD1Ev+0x94>)
 8008138:	f000 f877 	bl	800822a <_ZNSt6vectorIP10AdcHandlerSaIS1_EEixEj>
 800813c:	4603      	mov	r3, r0
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	bf0c      	ite	eq
 8008146:	2301      	moveq	r3, #1
 8008148:	2300      	movne	r3, #0
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01a      	beq.n	8008186 <_ZN10AdcHandlerD1Ev+0x7e>
			adcHandlers.erase(adcHandlers.begin()+i);
 8008150:	4812      	ldr	r0, [pc, #72]	; (800819c <_ZN10AdcHandlerD1Ev+0x94>)
 8008152:	f000 f879 	bl	8008248 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 8008156:	4603      	mov	r3, r0
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	7dfa      	ldrb	r2, [r7, #23]
 800815c:	f107 0310 	add.w	r3, r7, #16
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f000 f880 	bl	8008268 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8008168:	4603      	mov	r3, r0
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	f107 020c 	add.w	r2, r7, #12
 8008170:	f107 0308 	add.w	r3, r7, #8
 8008174:	4611      	mov	r1, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f88e 	bl	8008298 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	4807      	ldr	r0, [pc, #28]	; (800819c <_ZN10AdcHandlerD1Ev+0x94>)
 8008180:	f000 f89b 	bl	80082ba <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 8008184:	e003      	b.n	800818e <_ZN10AdcHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < adcHandlers.size(); i++){
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	3301      	adds	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]
 800818c:	e7c5      	b.n	800811a <_ZN10AdcHandlerD1Ev+0x12>
		}
	}
}
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4618      	mov	r0, r3
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	bd90      	pop	{r4, r7, pc}
 8008198:	08018d30 	.word	0x08018d30
 800819c:	20000b4c 	.word	0x20000b4c

080081a0 <_ZN10AdcHandlerD0Ev>:
AdcHandler::~AdcHandler() {
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
}
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff ffad 	bl	8008108 <_ZN10AdcHandlerD1Ev>
 80081ae:	2104      	movs	r1, #4
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f00d f91d 	bl	80153f0 <_ZdlPvj>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <_ZN10AdcHandler6adcUpdEPVm>:

void AdcHandler::adcUpd(volatile uint32_t* ADC_BUF){
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]

}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr

080081d4 <_ZSt4moveIRP10AdcHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4618      	mov	r0, r3
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80081f2:	6838      	ldr	r0, [r7, #0]
 80081f4:	f7ff ffee 	bl	80081d4 <_ZSt4moveIRP10AdcHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80081f8:	4603      	mov	r3, r0
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f88d 	bl	800831c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	109b      	asrs	r3, r3, #2
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr

0800822a <_ZNSt6vectorIP10AdcHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
      }
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr

08008248 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	f107 030c 	add.w	r3, r7, #12
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f000 f88d 	bl	8008378 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      __normal_iterator&
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]
 800827e:	f107 020c 	add.w	r2, r7, #12
 8008282:	f107 0308 	add.w	r3, r7, #8
 8008286:	4611      	mov	r1, r2
 8008288:	4618      	mov	r0, r3
 800828a:	f000 f875 	bl	8008378 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 80082a2:	6838      	ldr	r0, [r7, #0]
 80082a4:	f000 f877 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80082a8:	4603      	mov	r3, r0
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff ffbf 	bl	8008248 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 80082ca:	4603      	mov	r3, r0
 80082cc:	60bb      	str	r3, [r7, #8]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f86b 	bl	80083aa <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE6cbeginEv>
 80082d4:	4603      	mov	r3, r0
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	f107 020c 	add.w	r2, r7, #12
 80082dc:	463b      	mov	r3, r7
 80082de:	4611      	mov	r1, r2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 f876 	bl	80083d2 <_ZN9__gnu_cxxmiIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 80082e6:	4602      	mov	r2, r0
 80082e8:	f107 0308 	add.w	r3, r7, #8
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff ffba 	bl	8008268 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 80082f4:	4603      	mov	r3, r0
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f880 	bl	80083fe <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 80082fe:	4603      	mov	r3, r0
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr

0800831c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800831c:	b5b0      	push	{r4, r5, r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	429a      	cmp	r2, r3
 8008330:	d011      	beq.n	8008356 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008332:	687c      	ldr	r4, [r7, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685d      	ldr	r5, [r3, #4]
 8008338:	6838      	ldr	r0, [r7, #0]
 800833a:	f7ff ffe5 	bl	8008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800833e:	4603      	mov	r3, r0
 8008340:	461a      	mov	r2, r3
 8008342:	4629      	mov	r1, r5
 8008344:	4620      	mov	r0, r4
 8008346:	f000 f896 	bl	8008476 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	1d1a      	adds	r2, r3, #4
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8008354:	e00c      	b.n	8008370 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f8a0 	bl	800849c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 800835c:	4604      	mov	r4, r0
 800835e:	6838      	ldr	r0, [r7, #0]
 8008360:	f7ff ffd2 	bl	8008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008364:	4603      	mov	r3, r0
 8008366:	461a      	mov	r2, r3
 8008368:	4621      	mov	r1, r4
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f8a8 	bl	80084c0 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bdb0      	pop	{r4, r5, r7, pc}

08008378 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr

08008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr

080083aa <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	f107 020c 	add.w	r2, r7, #12
 80083bc:	f107 0308 	add.w	r3, r7, #8
 80083c0:	4611      	mov	r1, r2
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f908 	bl	80085d8 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <_ZN9__gnu_cxxmiIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80083d2:	b590      	push	{r4, r7, lr}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f90a 	bl	80085f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80083e2:	4603      	mov	r3, r0
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	461c      	mov	r4, r3
 80083e8:	6838      	ldr	r0, [r7, #0]
 80083ea:	f000 f904 	bl	80085f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80083ee:	4603      	mov	r3, r0
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	1ae3      	subs	r3, r4, r3
 80083f4:	109b      	asrs	r3, r3, #2
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd90      	pop	{r4, r7, pc}

080083fe <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 80083fe:	b590      	push	{r4, r7, lr}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	6039      	str	r1, [r7, #0]
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 8008408:	463b      	mov	r3, r7
 800840a:	2101      	movs	r1, #1
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff ff2b 	bl	8008268 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8008412:	4603      	mov	r3, r0
 8008414:	60bb      	str	r3, [r7, #8]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f840 	bl	800849c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 800841c:	4603      	mov	r3, r0
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	f107 020c 	add.w	r2, r7, #12
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	4611      	mov	r1, r2
 800842a:	4618      	mov	r0, r3
 800842c:	f000 f8ed 	bl	800860a <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00e      	beq.n	8008454 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8008436:	463b      	mov	r3, r7
 8008438:	2101      	movs	r1, #1
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff ff14 	bl	8008268 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8008440:	4604      	mov	r4, r0
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f82a 	bl	800849c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 8008448:	4603      	mov	r3, r0
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	4619      	mov	r1, r3
 800844e:	4620      	mov	r0, r4
 8008450:	f000 f8f3 	bl	800863a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	1f1a      	subs	r2, r3, #4
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	4619      	mov	r1, r3
 8008466:	4610      	mov	r0, r2
 8008468:	f000 f8ff 	bl	800866a <_ZNSt16allocator_traitsISaIP10AdcHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 800846c:	683b      	ldr	r3, [r7, #0]
    }
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	bd90      	pop	{r4, r7, pc}

08008476 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff ff40 	bl	8008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008488:	4603      	mov	r3, r0
 800848a:	461a      	mov	r2, r3
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 f8f8 	bl	8008684 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 8008494:	bf00      	nop
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	1d1a      	adds	r2, r3, #4
 80084a8:	f107 030c 	add.w	r3, r7, #12
 80084ac:	4611      	mov	r1, r2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff ff62 	bl	8008378 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80084c0:	b5b0      	push	{r4, r5, r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80084cc:	4a41      	ldr	r2, [pc, #260]	; (80085d4 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 80084ce:	2101      	movs	r1, #1
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 f8ef 	bl	80086b4 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc>
 80084d6:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f7ff feb5 	bl	8008248 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 80084de:	4603      	mov	r3, r0
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	f107 0214 	add.w	r2, r7, #20
 80084e6:	f107 0308 	add.w	r3, r7, #8
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 f929 	bl	8008744 <_ZN9__gnu_cxxmiIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80084f2:	4603      	mov	r3, r0
 80084f4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f938 	bl	8008770 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj>
 8008500:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8008506:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800850c:	69fa      	ldr	r2, [r7, #28]
 800850e:	18d5      	adds	r5, r2, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff fef9 	bl	8008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008516:	4603      	mov	r3, r0
 8008518:	461a      	mov	r2, r3
 800851a:	4629      	mov	r1, r5
 800851c:	4620      	mov	r0, r4
 800851e:	f7ff ffaa 	bl	8008476 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8008522:	2300      	movs	r3, #0
 8008524:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681c      	ldr	r4, [r3, #0]
 800852a:	f107 0308 	add.w	r3, r7, #8
 800852e:	4618      	mov	r0, r3
 8008530:	f7ff ff31 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008534:	4603      	mov	r3, r0
 8008536:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f92c 	bl	8008798 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8008540:	4603      	mov	r3, r0
	  __new_finish
 8008542:	69fa      	ldr	r2, [r7, #28]
 8008544:	4629      	mov	r1, r5
 8008546:	4620      	mov	r0, r4
 8008548:	f000 f930 	bl	80087ac <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800854c:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	3304      	adds	r3, #4
 8008552:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8008554:	f107 0308 	add.w	r3, r7, #8
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff ff1c 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800855e:	4603      	mov	r3, r0
 8008560:	681c      	ldr	r4, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f915 	bl	8008798 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800856e:	4603      	mov	r3, r0
	  __new_finish
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	4629      	mov	r1, r5
 8008574:	4620      	mov	r0, r4
 8008576:	f000 f919 	bl	80087ac <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800857a:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681c      	ldr	r4, [r3, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f906 	bl	8008798 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800858c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800858e:	461a      	mov	r2, r3
 8008590:	4629      	mov	r1, r5
 8008592:	4620      	mov	r0, r4
 8008594:	f000 f923 	bl	80087de <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80085a2:	461a      	mov	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 80085ac:	461a      	mov	r2, r3
 80085ae:	f000 f924 	bl	80087fa <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	69fa      	ldr	r2, [r7, #28]
 80085c4:	441a      	add	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	609a      	str	r2, [r3, #8]
    }
 80085ca:	bf00      	nop
 80085cc:	3728      	adds	r7, #40	; 0x28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bdb0      	pop	{r4, r5, r7, pc}
 80085d2:	bf00      	nop
 80085d4:	0801882c 	.word	0x0801882c

080085d8 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc80      	pop	{r7}
 80085f4:	4770      	bx	lr

080085f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80085f6:	b480      	push	{r7}
 80085f8:	b083      	sub	sp, #12
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr

0800860a <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800860a:	b590      	push	{r4, r7, lr}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff febe 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800861a:	4603      	mov	r3, r0
 800861c:	681c      	ldr	r4, [r3, #0]
 800861e:	6838      	ldr	r0, [r7, #0]
 8008620:	f7ff feb9 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008624:	4603      	mov	r3, r0
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	429c      	cmp	r4, r3
 800862a:	bf14      	ite	ne
 800862c:	2301      	movne	r3, #1
 800862e:	2300      	moveq	r3, #0
 8008630:	b2db      	uxtb	r3, r3
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	bd90      	pop	{r4, r7, pc}

0800863a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
 800863a:	b590      	push	{r4, r7, lr}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f8ea 	bl	8008820 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800864c:	4604      	mov	r4, r0
 800864e:	68b8      	ldr	r0, [r7, #8]
 8008650:	f000 f8e6 	bl	8008820 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8008654:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	4619      	mov	r1, r3
 800865a:	4620      	mov	r0, r4
 800865c:	f000 f8ea 	bl	8008834 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8008660:	4603      	mov	r3, r0
    }
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	bd90      	pop	{r4, r7, pc}

0800866a <_ZNSt16allocator_traitsISaIP10AdcHandlerEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 800866a:	b580      	push	{r7, lr}
 800866c:	b082      	sub	sp, #8
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f902 	bl	8008880 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE7destroyIS2_EEvPT_>
 800867c:	bf00      	nop
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8008684:	b590      	push	{r4, r7, lr}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff fe39 	bl	8008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008696:	4603      	mov	r3, r0
 8008698:	681c      	ldr	r4, [r3, #0]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	4619      	mov	r1, r3
 800869e:	2004      	movs	r0, #4
 80086a0:	f7ff fd0e 	bl	80080c0 <_ZnwjPv>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d000      	beq.n	80086ac <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 80086aa:	601c      	str	r4, [r3, #0]
 80086ac:	bf00      	nop
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd90      	pop	{r4, r7, pc}

080086b4 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80086b4:	b590      	push	{r4, r7, lr}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f8e7 	bl	8008894 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 80086c6:	4604      	mov	r4, r0
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff fd9e 	bl	800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 80086ce:	4603      	mov	r3, r0
 80086d0:	1ae2      	subs	r2, r4, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	bf34      	ite	cc
 80086d8:	2301      	movcc	r3, #1
 80086da:	2300      	movcs	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f00c feac 	bl	8015442 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7ff fd8d 	bl	800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 80086f0:	4604      	mov	r4, r0
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fd89 	bl	800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 80086f8:	4603      	mov	r3, r0
 80086fa:	613b      	str	r3, [r7, #16]
 80086fc:	f107 0208 	add.w	r2, r7, #8
 8008700:	f107 0310 	add.w	r3, r7, #16
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f000 f8d5 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 800870c:	4603      	mov	r3, r0
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4423      	add	r3, r4
 8008712:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f7ff fd78 	bl	800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 800871a:	4602      	mov	r2, r0
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	4293      	cmp	r3, r2
 8008720:	d306      	bcc.n	8008730 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f8b6 	bl	8008894 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 8008728:	4602      	mov	r2, r0
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	4293      	cmp	r3, r2
 800872e:	d904      	bls.n	800873a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 f8af 	bl	8008894 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 8008736:	4603      	mov	r3, r0
 8008738:	e000      	b.n	800873c <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 800873a:	697b      	ldr	r3, [r7, #20]
      }
 800873c:	4618      	mov	r0, r3
 800873e:	371c      	adds	r7, #28
 8008740:	46bd      	mov	sp, r7
 8008742:	bd90      	pop	{r4, r7, pc}

08008744 <_ZN9__gnu_cxxmiIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008744:	b590      	push	{r4, r7, lr}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff fe21 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008754:	4603      	mov	r3, r0
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	461c      	mov	r4, r3
 800875a:	6838      	ldr	r0, [r7, #0]
 800875c:	f7ff fe1b 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008760:	4603      	mov	r3, r0
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	1ae3      	subs	r3, r4, r3
 8008766:	109b      	asrs	r3, r3, #2
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	bd90      	pop	{r4, r7, pc}

08008770 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d006      	beq.n	800878e <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj+0x1e>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	4618      	mov	r0, r3
 8008786:	f000 f8a9 	bl	80088dc <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8allocateERS2_j>
 800878a:	4603      	mov	r3, r0
 800878c:	e000      	b.n	8008790 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj+0x20>
 800878e:	2300      	movs	r3, #0
      }
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4618      	mov	r0, r3
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80087ac:	b590      	push	{r4, r7, lr}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 f89d 	bl	80088fa <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>
 80087c0:	4604      	mov	r4, r0
 80087c2:	68b8      	ldr	r0, [r7, #8]
 80087c4:	f000 f899 	bl	80088fa <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>
 80087c8:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 f8a2 	bl	8008918 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP10AdcHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80087d4:	4603      	mov	r3, r0
    }
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd90      	pop	{r4, r7, pc}

080087de <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f8a4 	bl	800893a <_ZSt8_DestroyIPP10AdcHandlerEvT_S3_>
    }
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	607a      	str	r2, [r7, #4]
	if (__p)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f89e 	bl	8008954 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE10deallocateERS2_PS1_j>
      }
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	bc80      	pop	{r7}
 8008832:	4770      	bx	lr

08008834 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008834:	b5b0      	push	{r4, r5, r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f896 	bl	8008972 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8008846:	4604      	mov	r4, r0
 8008848:	68b8      	ldr	r0, [r7, #8]
 800884a:	f000 f892 	bl	8008972 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800884e:	4605      	mov	r5, r0
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f88e 	bl	8008972 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	4629      	mov	r1, r5
 800885c:	4620      	mov	r0, r4
 800885e:	f000 f896 	bl	800898e <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 8008862:	4603      	mov	r3, r0
 8008864:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8008866:	f107 0214 	add.w	r2, r7, #20
 800886a:	f107 0310 	add.w	r3, r7, #16
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fd81 	bl	8008378 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008876:	693b      	ldr	r3, [r7, #16]
    }
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bdb0      	pop	{r4, r5, r7, pc}

08008880 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	bf00      	nop
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	bc80      	pop	{r7}
 8008892:	4770      	bx	lr

08008894 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 f893 	bl	80089ca <_ZNKSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80088a4:	4603      	mov	r3, r0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 f883 	bl	80089b2 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8max_sizeERKS2_>
 80088ac:	4603      	mov	r3, r0
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d201      	bcs.n	80088d0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	e000      	b.n	80088d2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80088d0:	687b      	ldr	r3, [r7, #4]
    }
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr

080088dc <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80088e6:	2200      	movs	r2, #0
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f877 	bl	80089de <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv>
 80088f0:	4603      	mov	r3, r0
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8008902:	f107 030c 	add.w	r3, r7, #12
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	f000 f886 	bl	8008a1a <_ZNSt13move_iteratorIPP10AdcHandlerEC1ES2_>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP10AdcHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f883 	bl	8008a36 <_ZSt18uninitialized_copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>
 8008930:	4603      	mov	r3, r0
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <_ZSt8_DestroyIPP10AdcHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f887 	bl	8008a5a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10AdcHandlerEEvT_S5_>
    }
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 f882 	bl	8008a6e <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE10deallocateEPS2_j>
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800897a:	1d3b      	adds	r3, r7, #4
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff fd0a 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008982:	4603      	mov	r3, r0
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800899a:	2301      	movs	r3, #1
 800899c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 f870 	bl	8008a88 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_>
 80089a8:	4603      	mov	r3, r0
    }
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f881 	bl	8008ac2 <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>
 80089c0:	4603      	mov	r3, r0
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <_ZNKSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr

080089de <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f869 	bl	8008ac2 <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>
 80089f0:	4602      	mov	r2, r0
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	bf8c      	ite	hi
 80089f8:	2301      	movhi	r3, #1
 80089fa:	2300      	movls	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008a02:	f00c fd15 	bl	8015430 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f00c fcf2 	bl	80153f4 <_Znwj>
 8008a10:	4603      	mov	r3, r0
      }
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <_ZNSt13move_iteratorIPP10AdcHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr

08008a36 <_ZSt18uninitialized_copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b086      	sub	sp, #24
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008a42:	2301      	movs	r3, #1
 8008a44:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 f844 	bl	8008ad8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP10AdcHandlerES5_EET0_T_S8_S7_>
 8008a50:	4603      	mov	r3, r0
    }
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10AdcHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr

08008a6e <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8008a7a:	68b8      	ldr	r0, [r7, #8]
 8008a7c:	f00c fcd4 	bl	8015428 <_ZdlPv>
      }
 8008a80:	bf00      	nop
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	109b      	asrs	r3, r3, #2
 8008a9c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d006      	beq.n	8008ab2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	68f9      	ldr	r1, [r7, #12]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f00f f991 	bl	8017dd4 <memmove>
	  return __result + _Num;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	4413      	add	r3, r2
	}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008aca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bc80      	pop	{r7}
 8008ad6:	4770      	bx	lr

08008ad8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP10AdcHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	68b9      	ldr	r1, [r7, #8]
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 f805 	bl	8008af8 <_ZSt4copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>
 8008aee:	4603      	mov	r3, r0
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <_ZSt4copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8008af8:	b590      	push	{r4, r7, lr}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 f80f 	bl	8008b28 <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	68b8      	ldr	r0, [r7, #8]
 8008b0e:	f000 f80b 	bl	8008b28 <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008b12:	4603      	mov	r3, r0
	       __result));
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	4619      	mov	r1, r3
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 f816 	bl	8008b4a <_ZSt14__copy_move_a2ILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 8008b1e:	4603      	mov	r3, r0
    }
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd90      	pop	{r4, r7, pc}

08008b28 <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8008b30:	1d3b      	adds	r3, r7, #4
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f825 	bl	8008b82 <_ZNKSt13move_iteratorIPP10AdcHandlerE4baseEv>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f82c 	bl	8008b98 <_ZSt12__miter_baseIPP10AdcHandlerET_S3_>
 8008b40:	4603      	mov	r3, r0
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <_ZSt14__copy_move_a2ILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008b4a:	b5b0      	push	{r4, r5, r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 f828 	bl	8008bac <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	68b8      	ldr	r0, [r7, #8]
 8008b60:	f000 f824 	bl	8008bac <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8008b64:	4605      	mov	r5, r0
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f820 	bl	8008bac <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8008b6c:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8008b6e:	461a      	mov	r2, r3
 8008b70:	4629      	mov	r1, r5
 8008b72:	4620      	mov	r0, r4
 8008b74:	f7ff ff0b 	bl	800898e <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 8008b78:	4603      	mov	r3, r0
    }
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bdb0      	pop	{r4, r5, r7, pc}

08008b82 <_ZNKSt13move_iteratorIPP10AdcHandlerE4baseEv>:
      base() const
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bc80      	pop	{r7}
 8008b96:	4770      	bx	lr

08008b98 <_ZSt12__miter_baseIPP10AdcHandlerET_S3_>:
    __miter_base(_Iterator __it)
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bc80      	pop	{r7}
 8008baa:	4770      	bx	lr

08008bac <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>:
    __niter_base(_Iterator __it)
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bc80      	pop	{r7}
 8008bbe:	4770      	bx	lr

08008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
					__idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f00c fe0b 	bl	80157e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008bd2:	4602      	mov	r2, r0
			     __idx, __base); }
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4904      	ldr	r1, [pc, #16]	; (8008bec <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8008bdc:	4804      	ldr	r0, [pc, #16]	; (8008bf0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8008bde:	f000 fc3f 	bl	8009460 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8008be2:	4603      	mov	r3, r0
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	08018848 	.word	0x08018848
 8008bf0:	08018105 	.word	0x08018105

08008bf4 <_ZN9CmdParserC1Ev>:
 */

#include <CmdParser.h>


CmdParser::CmdParser() {
 8008bf4:	b590      	push	{r4, r7, lr}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	4a10      	ldr	r2, [pc, #64]	; (8008c40 <_ZN9CmdParserC1Ev+0x4c>)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3304      	adds	r3, #4
 8008c06:	4618      	mov	r0, r3
 8008c08:	f00c fd10 	bl	801562c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f103 041c 	add.w	r4, r3, #28
 8008c12:	f107 030c 	add.w	r3, r7, #12
 8008c16:	4618      	mov	r0, r3
 8008c18:	f00c fc08 	bl	801542c <_ZNSaIcEC1Ev>
 8008c1c:	f107 030c 	add.w	r3, r7, #12
 8008c20:	461a      	mov	r2, r3
 8008c22:	4908      	ldr	r1, [pc, #32]	; (8008c44 <_ZN9CmdParserC1Ev+0x50>)
 8008c24:	4620      	mov	r0, r4
 8008c26:	f00c fe3d 	bl	80158a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008c2a:	f107 030c 	add.w	r3, r7, #12
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f00c fbfd 	bl	801542e <_ZNSaIcED1Ev>
	// TODO Auto-generated constructor stub

}
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd90      	pop	{r4, r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	08018d44 	.word	0x08018d44
 8008c44:	08018850 	.word	0x08018850

08008c48 <_ZN9CmdParserD1Ev>:

CmdParser::~CmdParser() {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	4a08      	ldr	r2, [pc, #32]	; (8008c74 <_ZN9CmdParserD1Ev+0x2c>)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	331c      	adds	r3, #28
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f00c fd07 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4618      	mov	r0, r3
 8008c66:	f00c fd02 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	// TODO Auto-generated destructor stub
}
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	08018d44 	.word	0x08018d44

08008c78 <_ZN9CmdParserD0Ev>:
CmdParser::~CmdParser() {
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
}
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff ffe1 	bl	8008c48 <_ZN9CmdParserD1Ev>
 8008c86:	2134      	movs	r1, #52	; 0x34
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f00c fbb1 	bl	80153f0 <_ZdlPvj>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <_ZN9CmdParser3addEPcPm>:
void CmdParser::clear(){
	buffer.clear();
}


bool CmdParser::add(char* Buf, uint32_t *Len){
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
	bool flag = false;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i=0;i<*Len;i++){
 8008ca8:	2300      	movs	r3, #0
 8008caa:	613b      	str	r3, [r7, #16]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d222      	bcs.n	8008cfc <_ZN9CmdParser3addEPcPm+0x64>
		// Replace end markers
		if(*(Buf+i) == '\n' || *(Buf+i) == '\r' || *(Buf+i) == ';'|| *(Buf+i) == ' '){
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	4413      	add	r3, r2
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2b0a      	cmp	r3, #10
 8008cc0:	d011      	beq.n	8008ce6 <_ZN9CmdParser3addEPcPm+0x4e>
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b0d      	cmp	r3, #13
 8008ccc:	d00b      	beq.n	8008ce6 <_ZN9CmdParser3addEPcPm+0x4e>
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b3b      	cmp	r3, #59	; 0x3b
 8008cd8:	d005      	beq.n	8008ce6 <_ZN9CmdParser3addEPcPm+0x4e>
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	4413      	add	r3, r2
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	d106      	bne.n	8008cf4 <_ZN9CmdParser3addEPcPm+0x5c>
			*(Buf+i) = (uint8_t)';';
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	4413      	add	r3, r2
 8008cec:	223b      	movs	r2, #59	; 0x3b
 8008cee:	701a      	strb	r2, [r3, #0]
			flag = true;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i=0;i<*Len;i++){
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	613b      	str	r3, [r7, #16]
 8008cfa:	e7d7      	b.n	8008cac <_ZN9CmdParser3addEPcPm+0x14>
		}
	}

	this->buffer.append((char*)Buf,*Len);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	1d18      	adds	r0, r3, #4
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	f00c fd44 	bl	8015794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>

	return flag;
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <_ZN13ParsedCommandC1Ev>:


enum class CMDtype{
	set,setat,get,getat,none,help,err, dash
};
struct ParsedCommand
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f00c fc83 	bl	801562c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	831a      	strh	r2, [r3, #24]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	61da      	str	r2, [r3, #28]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2204      	movs	r2, #4
 8008d36:	621a      	str	r2, [r3, #32]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <_ZN13ParsedCommandD1Ev>:
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f00c fc8e 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <_ZN9CmdParser5parseEv>:



std::vector<ParsedCommand> CmdParser::parse(){
 8008d5c:	b590      	push	{r4, r7, lr}
 8008d5e:	b0e9      	sub	sp, #420	; 0x1a4
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	1d3b      	adds	r3, r7, #4
 8008d64:	6018      	str	r0, [r3, #0]
 8008d66:	463b      	mov	r3, r7
 8008d68:	6019      	str	r1, [r3, #0]

	std::vector<ParsedCommand> commands;
 8008d6a:	1d3b      	adds	r3, r7, #4
 8008d6c:	6818      	ldr	r0, [r3, #0]
 8008d6e:	f000 fbbd 	bl	80094ec <_ZNSt6vectorI13ParsedCommandSaIS0_EEC1Ev>
	std::vector<std::string> tokens;
 8008d72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fbc5 	bl	8009506 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>

	const char* test = buffer.c_str();
 8008d7c:	463b      	mov	r3, r7
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4618      	mov	r0, r3
 8008d84:	f00c fd30 	bl	80157e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008d88:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
	if((uint8_t)test[0] == 0x86)
 8008d8c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2b86      	cmp	r3, #134	; 0x86
 8008d94:	d125      	bne.n	8008de2 <_ZN9CmdParser5parseEv+0x86>
	{
		ParsedCommand cmd;
 8008d96:	f107 0308 	add.w	r3, r7, #8
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff ffbb 	bl	8008d16 <_ZN13ParsedCommandC1Ev>
		cmd.type = CMDtype::dash;
 8008da0:	f107 0308 	add.w	r3, r7, #8
 8008da4:	2207      	movs	r2, #7
 8008da6:	621a      	str	r2, [r3, #32]
		cmd.cmd = buffer;
 8008da8:	463b      	mov	r3, r7
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	1d1a      	adds	r2, r3, #4
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	4611      	mov	r1, r2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f00c fc60 	bl	801567a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		buffer.clear();
 8008dba:	463b      	mov	r3, r7
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f00c fc87 	bl	80156d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		commands.push_back(cmd);
 8008dc6:	f107 0208 	add.w	r2, r7, #8
 8008dca:	1d3b      	adds	r3, r7, #4
 8008dcc:	4611      	mov	r1, r2
 8008dce:	6818      	ldr	r0, [r3, #0]
 8008dd0:	f000 fbc1 	bl	8009556 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>
		return commands;
 8008dd4:	bf00      	nop
		ParsedCommand cmd;
 8008dd6:	f107 0308 	add.w	r3, r7, #8
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff ffb1 	bl	8008d42 <_ZN13ParsedCommandD1Ev>
 8008de0:	e2f6      	b.n	80093d0 <_ZN9CmdParser5parseEv+0x674>
	}

    uint16_t pos = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
    uint16_t lpos = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
	while(pos < buffer.length()-1){
 8008dee:	f8b7 419e 	ldrh.w	r4, [r7, #414]	; 0x19e
 8008df2:	463b      	mov	r3, r7
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3304      	adds	r3, #4
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f00c fc69 	bl	80156d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	3b01      	subs	r3, #1
 8008e02:	429c      	cmp	r4, r3
 8008e04:	bf34      	ite	cc
 8008e06:	2301      	movcc	r3, #1
 8008e08:	2300      	movcs	r3, #0
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d02d      	beq.n	8008e6c <_ZN9CmdParser5parseEv+0x110>
		pos = buffer.find(';',lpos);
 8008e10:	463b      	mov	r3, r7
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3304      	adds	r3, #4
 8008e16:	f8b7 219c 	ldrh.w	r2, [r7, #412]	; 0x19c
 8008e1a:	213b      	movs	r1, #59	; 0x3b
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f00c fce5 	bl	80157ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
		std::string token = buffer.substr(lpos,pos-lpos);
 8008e28:	463b      	mov	r3, r7
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	1d19      	adds	r1, r3, #4
 8008e2e:	f8b7 419c 	ldrh.w	r4, [r7, #412]	; 0x19c
 8008e32:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 8008e36:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8008e40:	4622      	mov	r2, r4
 8008e42:	f00c fd63 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
		lpos = pos+1;
 8008e46:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
		tokens.push_back(token);
 8008e50:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008e54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fba1 	bl	80095a2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
		std::string token = buffer.substr(lpos,pos-lpos);
 8008e60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008e64:	4618      	mov	r0, r3
 8008e66:	f00c fc02 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(pos < buffer.length()-1){
 8008e6a:	e7c0      	b.n	8008dee <_ZN9CmdParser5parseEv+0x92>
	}

	for(std::string word : tokens){
 8008e6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e70:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8008e74:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8008e78:	f000 fbb9 	bl	80095ee <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8008e88:	f000 fbc1 	bl	800960e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008e98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fbc6 	bl	8009630 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 828b 	beq.w	80093c2 <_ZN9CmdParser5parseEv+0x666>
 8008eac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fbe5 	bl	8009680 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f00c fcbe 	bl	8015840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>

		ParsedCommand cmd;
 8008ec4:	f107 0308 	add.w	r3, r7, #8
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff ff24 	bl	8008d16 <_ZN13ParsedCommandC1Ev>

		if(word.back() == '?'){ // <cmd>?
 8008ece:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f00c fc0b 	bl	80156ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b3f      	cmp	r3, #63	; 0x3f
 8008ede:	bf0c      	ite	eq
 8008ee0:	2301      	moveq	r3, #1
 8008ee2:	2300      	movne	r3, #0
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d01f      	beq.n	8008f2a <_ZN9CmdParser5parseEv+0x1ce>
			cmd.type = CMDtype::get;
 8008eea:	f107 0308 	add.w	r3, r7, #8
 8008eee:	2202      	movs	r2, #2
 8008ef0:	621a      	str	r2, [r3, #32]
			cmd.cmd = word.substr(0, word.length()-1);
 8008ef2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f00c fbea 	bl	80156d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8008efc:	4603      	mov	r3, r0
 8008efe:	3b01      	subs	r3, #1
 8008f00:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8008f04:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f00c fcff 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8008f0e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008f12:	f107 0308 	add.w	r3, r7, #8
 8008f16:	4611      	mov	r1, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f00c fbb4 	bl	8015686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008f1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f22:	4618      	mov	r0, r3
 8008f24:	f00c fba3 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008f28:	e234      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>

		}else if(word.back() == '!'){
 8008f2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f00c fbdd 	bl	80156ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8008f34:	4603      	mov	r3, r0
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b21      	cmp	r3, #33	; 0x21
 8008f3a:	bf0c      	ite	eq
 8008f3c:	2301      	moveq	r3, #1
 8008f3e:	2300      	movne	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d01f      	beq.n	8008f86 <_ZN9CmdParser5parseEv+0x22a>
			cmd.cmd = word.substr(0, word.length()-1);
 8008f46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f00c fbc0 	bl	80156d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8008f50:	4603      	mov	r3, r0
 8008f52:	3b01      	subs	r3, #1
 8008f54:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8008f58:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f00c fcd5 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8008f62:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f00c fb8a 	bl	8015686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008f72:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008f76:	4618      	mov	r0, r3
 8008f78:	f00c fb79 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			cmd.type = CMDtype::help;
 8008f7c:	f107 0308 	add.w	r3, r7, #8
 8008f80:	2205      	movs	r2, #5
 8008f82:	621a      	str	r2, [r3, #32]
 8008f84:	e206      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>

		}else if(word.back() == '='){
 8008f86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f00c fbaf 	bl	80156ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8008f90:	4603      	mov	r3, r0
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b3d      	cmp	r3, #61	; 0x3d
 8008f96:	bf0c      	ite	eq
 8008f98:	2301      	moveq	r3, #1
 8008f9a:	2300      	movne	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00c      	beq.n	8008fbc <_ZN9CmdParser5parseEv+0x260>
			cmd.cmd = word;
 8008fa2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008fa6:	f107 0308 	add.w	r3, r7, #8
 8008faa:	4611      	mov	r1, r2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f00c fb64 	bl	801567a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
			cmd.type = CMDtype::err;
 8008fb2:	f107 0308 	add.w	r3, r7, #8
 8008fb6:	2206      	movs	r2, #6
 8008fb8:	621a      	str	r2, [r3, #32]
 8008fba:	e1eb      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>

		}else{ // More complex
			uint32_t peq = word.find('=', 0); // set
 8008fbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	213d      	movs	r1, #61	; 0x3d
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f00c fc11 	bl	80157ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8008fca:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
			//uint32_t pex = word.find('!', 0); // dual val
			uint32_t pqm = word.find('?', 0); // read with var
 8008fce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	213f      	movs	r1, #63	; 0x3f
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f00c fc08 	bl	80157ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8008fdc:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
			if(pqm!=std::string::npos && pqm < peq && peq != std::string::npos){ // <cmd>?<int>=<int>
 8008fe0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe8:	d066      	beq.n	80090b8 <_ZN9CmdParser5parseEv+0x35c>
 8008fea:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8008fee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d260      	bcs.n	80090b8 <_ZN9CmdParser5parseEv+0x35c>
 8008ff6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	d05b      	beq.n	80090b8 <_ZN9CmdParser5parseEv+0x35c>
				// Dual
				int32_t val = (int32_t)std::stol(word.substr(pqm+1, peq-pqm));
 8009000:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009004:	1c5c      	adds	r4, r3, #1
 8009006:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800900a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8009014:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009018:	4622      	mov	r2, r4
 800901a:	f00c fc77 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800901e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009022:	220a      	movs	r2, #10
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff fdca 	bl	8008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800902c:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 8009030:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009034:	4618      	mov	r0, r3
 8009036:	f00c fb1a 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				int32_t val2 = (int32_t)std::stol(word.substr(peq+1, word.npos));
 800903a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8009044:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009048:	f04f 33ff 	mov.w	r3, #4294967295
 800904c:	f00c fc5e 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8009050:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009054:	220a      	movs	r2, #10
 8009056:	2100      	movs	r1, #0
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff fdb1 	bl	8008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800905e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8009062:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009066:	4618      	mov	r0, r3
 8009068:	f00c fb01 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.cmd = word.substr(0, pqm);
 800906c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8009070:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009074:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009078:	2200      	movs	r2, #0
 800907a:	f00c fc47 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800907e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f00c fafc 	bl	8015686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800908e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009092:	4618      	mov	r0, r3
 8009094:	f00c faeb 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.type = CMDtype::setat;
 8009098:	f107 0308 	add.w	r3, r7, #8
 800909c:	2201      	movs	r2, #1
 800909e:	621a      	str	r2, [r3, #32]
				cmd.val = val2;
 80090a0:	f107 0308 	add.w	r3, r7, #8
 80090a4:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80090a8:	61da      	str	r2, [r3, #28]
				cmd.adr = val;
 80090aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	f107 0308 	add.w	r3, r7, #8
 80090b4:	831a      	strh	r2, [r3, #24]
 80090b6:	e16d      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>

			}else if(pqm != std::string::npos && (std::isdigit(word[pqm+1]) || (std::isdigit(word[pqm+2]) && (word[pqm+1] == '-' || word[pqm+1] == '+')))){ // <cmd>?<int>
 80090b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80090bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c0:	d037      	beq.n	8009132 <_ZN9CmdParser5parseEv+0x3d6>
 80090c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090cc:	4611      	mov	r1, r2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f00c fb0a 	bl	80156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80090d4:	4603      	mov	r3, r0
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	3b30      	subs	r3, #48	; 0x30
 80090da:	2b09      	cmp	r3, #9
 80090dc:	d927      	bls.n	800912e <_ZN9CmdParser5parseEv+0x3d2>
 80090de:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80090e2:	1c9a      	adds	r2, r3, #2
 80090e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090e8:	4611      	mov	r1, r2
 80090ea:	4618      	mov	r0, r3
 80090ec:	f00c fafc 	bl	80156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80090f0:	4603      	mov	r3, r0
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	3b30      	subs	r3, #48	; 0x30
 80090f6:	2b09      	cmp	r3, #9
 80090f8:	d81b      	bhi.n	8009132 <_ZN9CmdParser5parseEv+0x3d6>
 80090fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80090fe:	1c5a      	adds	r2, r3, #1
 8009100:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f00c faee 	bl	80156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800910c:	4603      	mov	r3, r0
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b2d      	cmp	r3, #45	; 0x2d
 8009112:	d00c      	beq.n	800912e <_ZN9CmdParser5parseEv+0x3d2>
 8009114:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f00c fae1 	bl	80156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8009126:	4603      	mov	r3, r0
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b2b      	cmp	r3, #43	; 0x2b
 800912c:	d101      	bne.n	8009132 <_ZN9CmdParser5parseEv+0x3d6>
 800912e:	2301      	movs	r3, #1
 8009130:	e000      	b.n	8009134 <_ZN9CmdParser5parseEv+0x3d8>
 8009132:	2300      	movs	r3, #0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d03e      	beq.n	80091b6 <_ZN9CmdParser5parseEv+0x45a>
				int32_t val = (int32_t)std::stol(word.substr(pqm+1, word.npos));
 8009138:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8009142:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009146:	f04f 33ff 	mov.w	r3, #4294967295
 800914a:	f00c fbdf 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800914e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009152:	220a      	movs	r2, #10
 8009154:	2100      	movs	r1, #0
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff fd32 	bl	8008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800915c:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8009160:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009164:	4618      	mov	r0, r3
 8009166:	f00c fa82 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 800916a:	f107 0308 	add.w	r3, r7, #8
 800916e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8009172:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::getat;
 8009174:	f107 0308 	add.w	r3, r7, #8
 8009178:	2203      	movs	r2, #3
 800917a:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, pqm);
 800917c:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8009180:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009184:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009188:	2200      	movs	r2, #0
 800918a:	f00c fbbf 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800918e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8009192:	f107 0308 	add.w	r3, r7, #8
 8009196:	4611      	mov	r1, r2
 8009198:	4618      	mov	r0, r3
 800919a:	f00c fa74 	bl	8015686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800919e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80091a2:	4618      	mov	r0, r3
 80091a4:	f00c fa63 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.adr = val;
 80091a8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	f107 0308 	add.w	r3, r7, #8
 80091b2:	831a      	strh	r2, [r3, #24]
 80091b4:	e0ee      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>
			}else if(peq != std::string::npos && (std::isdigit(word[peq+1]) || (std::isdigit(word[peq+2]) && (word[peq+1] == '-' || word[peq+1] == '+')))){ // <cmd>=<int>
 80091b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091be:	d037      	beq.n	8009230 <_ZN9CmdParser5parseEv+0x4d4>
 80091c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091ca:	4611      	mov	r1, r2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f00c fa8b 	bl	80156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80091d2:	4603      	mov	r3, r0
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	3b30      	subs	r3, #48	; 0x30
 80091d8:	2b09      	cmp	r3, #9
 80091da:	d927      	bls.n	800922c <_ZN9CmdParser5parseEv+0x4d0>
 80091dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80091e0:	1c9a      	adds	r2, r3, #2
 80091e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091e6:	4611      	mov	r1, r2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f00c fa7d 	bl	80156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80091ee:	4603      	mov	r3, r0
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	3b30      	subs	r3, #48	; 0x30
 80091f4:	2b09      	cmp	r3, #9
 80091f6:	d81b      	bhi.n	8009230 <_ZN9CmdParser5parseEv+0x4d4>
 80091f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009202:	4611      	mov	r1, r2
 8009204:	4618      	mov	r0, r3
 8009206:	f00c fa6f 	bl	80156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800920a:	4603      	mov	r3, r0
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b2d      	cmp	r3, #45	; 0x2d
 8009210:	d00c      	beq.n	800922c <_ZN9CmdParser5parseEv+0x4d0>
 8009212:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009216:	1c5a      	adds	r2, r3, #1
 8009218:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800921c:	4611      	mov	r1, r2
 800921e:	4618      	mov	r0, r3
 8009220:	f00c fa62 	bl	80156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8009224:	4603      	mov	r3, r0
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b2b      	cmp	r3, #43	; 0x2b
 800922a:	d101      	bne.n	8009230 <_ZN9CmdParser5parseEv+0x4d4>
 800922c:	2301      	movs	r3, #1
 800922e:	e000      	b.n	8009232 <_ZN9CmdParser5parseEv+0x4d6>
 8009230:	2300      	movs	r3, #0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d038      	beq.n	80092a8 <_ZN9CmdParser5parseEv+0x54c>
				int32_t val = (int32_t)std::stol(word.substr(peq+1, word.npos));
 8009236:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8009240:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009244:	f04f 33ff 	mov.w	r3, #4294967295
 8009248:	f00c fb60 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800924c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009250:	220a      	movs	r2, #10
 8009252:	2100      	movs	r1, #0
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff fcb3 	bl	8008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800925a:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
 800925e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009262:	4618      	mov	r0, r3
 8009264:	f00c fa03 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 8009268:	f107 0308 	add.w	r3, r7, #8
 800926c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8009270:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::set;
 8009272:	f107 0308 	add.w	r3, r7, #8
 8009276:	2200      	movs	r2, #0
 8009278:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, peq);
 800927a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800927e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009282:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009286:	2200      	movs	r2, #0
 8009288:	f00c fb40 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800928c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009290:	f107 0308 	add.w	r3, r7, #8
 8009294:	4611      	mov	r1, r2
 8009296:	4618      	mov	r0, r3
 8009298:	f00c f9f5 	bl	8015686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800929c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a0:	4618      	mov	r0, r3
 80092a2:	f00c f9e4 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80092a6:	e075      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>
			}else if(peq != std::string::npos && (word[peq+1] == 'R' || word[peq+1] == 'G' || word[peq+1] == 'B')){ // <cmd>=RGB
 80092a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b0:	d028      	beq.n	8009304 <_ZN9CmdParser5parseEv+0x5a8>
 80092b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092bc:	4611      	mov	r1, r2
 80092be:	4618      	mov	r0, r3
 80092c0:	f00c fa12 	bl	80156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80092c4:	4603      	mov	r3, r0
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b52      	cmp	r3, #82	; 0x52
 80092ca:	d019      	beq.n	8009300 <_ZN9CmdParser5parseEv+0x5a4>
 80092cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092d6:	4611      	mov	r1, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f00c fa05 	bl	80156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80092de:	4603      	mov	r3, r0
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	2b47      	cmp	r3, #71	; 0x47
 80092e4:	d00c      	beq.n	8009300 <_ZN9CmdParser5parseEv+0x5a4>
 80092e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092ea:	1c5a      	adds	r2, r3, #1
 80092ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092f0:	4611      	mov	r1, r2
 80092f2:	4618      	mov	r0, r3
 80092f4:	f00c f9f8 	bl	80156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80092f8:	4603      	mov	r3, r0
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b42      	cmp	r3, #66	; 0x42
 80092fe:	d101      	bne.n	8009304 <_ZN9CmdParser5parseEv+0x5a8>
 8009300:	2301      	movs	r3, #1
 8009302:	e000      	b.n	8009306 <_ZN9CmdParser5parseEv+0x5aa>
 8009304:	2300      	movs	r3, #0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d038      	beq.n	800937c <_ZN9CmdParser5parseEv+0x620>
				int32_t val = (int32_t)std::stol(word.substr(peq+1, word.npos));
 800930a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8009314:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009318:	f04f 33ff 	mov.w	r3, #4294967295
 800931c:	f00c faf6 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8009320:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009324:	220a      	movs	r2, #10
 8009326:	2100      	movs	r1, #0
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff fc49 	bl	8008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800932e:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 8009332:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009336:	4618      	mov	r0, r3
 8009338:	f00c f999 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 800933c:	f107 0308 	add.w	r3, r7, #8
 8009340:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8009344:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::set;
 8009346:	f107 0308 	add.w	r3, r7, #8
 800934a:	2200      	movs	r2, #0
 800934c:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, peq);
 800934e:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8009352:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009356:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800935a:	2200      	movs	r2, #0
 800935c:	f00c fad6 	bl	801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8009360:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8009364:	f107 0308 	add.w	r3, r7, #8
 8009368:	4611      	mov	r1, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f00c f98b 	bl	8015686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009370:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009374:	4618      	mov	r0, r3
 8009376:	f00c f97a 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800937a:	e00b      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>
			}else{
				cmd.cmd = word;
 800937c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009380:	f107 0308 	add.w	r3, r7, #8
 8009384:	4611      	mov	r1, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f00c f977 	bl	801567a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
				cmd.type = CMDtype::get;
 800938c:	f107 0308 	add.w	r3, r7, #8
 8009390:	2202      	movs	r2, #2
 8009392:	621a      	str	r2, [r3, #32]
			}

		}

		commands.push_back(cmd);
 8009394:	f107 0208 	add.w	r2, r7, #8
 8009398:	1d3b      	adds	r3, r7, #4
 800939a:	4611      	mov	r1, r2
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	f000 f8da 	bl	8009556 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>
		ParsedCommand cmd;
 80093a2:	f107 0308 	add.w	r3, r7, #8
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff fccb 	bl	8008d42 <_ZN13ParsedCommandD1Ev>
	for(std::string word : tokens){
 80093ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80093b0:	4618      	mov	r0, r3
 80093b2:	f00c f95c 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80093b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 f950 	bl	8009660 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 80093c0:	e568      	b.n	8008e94 <_ZN9CmdParser5parseEv+0x138>
	}
	buffer.clear();
 80093c2:	463b      	mov	r3, r7
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4618      	mov	r0, r3
 80093ca:	f00c f983 	bl	80156d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	return commands;
 80093ce:	bf00      	nop
	std::vector<std::string> tokens;
 80093d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 f8a3 	bl	8009520 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80093da:	1d3b      	adds	r3, r7, #4
 80093dc:	1d3a      	adds	r2, r7, #4
 80093de:	6812      	ldr	r2, [r2, #0]
 80093e0:	601a      	str	r2, [r3, #0]
}
 80093e2:	1d3b      	adds	r3, r7, #4
 80093e4:	6818      	ldr	r0, [r3, #0]
 80093e6:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd90      	pop	{r4, r7, pc}

080093ee <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	f00e fc8b 	bl	8017d10 <__errno>
 80093fa:	4603      	mov	r3, r0
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	f00e fc85 	bl	8017d10 <__errno>
 8009406:	4602      	mov	r2, r0
 8009408:	2300      	movs	r3, #0
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4618      	mov	r0, r3
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	f00e fc77 	bl	8017d10 <__errno>
 8009422:	4603      	mov	r3, r0
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	bf0c      	ite	eq
 800942a:	2301      	moveq	r3, #1
 800942c:	2300      	movne	r3, #0
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d005      	beq.n	8009440 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8009434:	f00e fc6c 	bl	8017d10 <__errno>
 8009438:	4602      	mov	r2, r0
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE>:
	int _M_errno;
      } const __save_errno;

      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	7039      	strb	r1, [r7, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	4618      	mov	r0, r3
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	bc80      	pop	{r7}
 800945e:	4770      	bx	lr

08009460 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8009460:	b590      	push	{r4, r7, lr}
 8009462:	b08b      	sub	sp, #44	; 0x2c
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800946e:	f107 0314 	add.w	r3, r7, #20
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff ffbb 	bl	80093ee <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8009478:	f107 0118 	add.w	r1, r7, #24
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
 8009484:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	429a      	cmp	r2, r3
 800948c:	d102      	bne.n	8009494 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 800948e:	68b8      	ldr	r0, [r7, #8]
 8009490:	f00b ffd4 	bl	801543c <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8009494:	f00e fc3c 	bl	8017d10 <__errno>
 8009498:	4603      	mov	r3, r0
 800949a:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800949c:	2b22      	cmp	r3, #34	; 0x22
 800949e:	d006      	beq.n	80094ae <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 80094a0:	4621      	mov	r1, r4
 80094a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094a4:	f7ff ffd1 	bl	800944a <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 80094ae:	2301      	movs	r3, #1
 80094b0:	e000      	b.n	80094b4 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 80094b2:	2300      	movs	r3, #0
      else if (errno == ERANGE
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 80094b8:	68b8      	ldr	r0, [r7, #8]
 80094ba:	f00b ffc5 	bl	8015448 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	623b      	str	r3, [r7, #32]

      if (__idx)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d006      	beq.n	80094d6 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x76>
	*__idx = __endptr - __str;
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	461a      	mov	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	461a      	mov	r2, r3
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	601a      	str	r2, [r3, #0]

      return __ret;
 80094d6:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 80094d8:	f107 0314 	add.w	r3, r7, #20
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff ff9a 	bl	8009416 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 80094e2:	4623      	mov	r3, r4
    }
 80094e4:	4618      	mov	r0, r3
 80094e6:	372c      	adds	r7, #44	; 0x2c
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd90      	pop	{r4, r7, pc}

080094ec <_ZNSt6vectorI13ParsedCommandSaIS0_EEC1Ev>:
      vector()
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 f8cd 	bl	8009696 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EEC1Ev>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      vector()
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4618      	mov	r0, r3
 8009512:	f000 f8f1 	bl	80096f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009520:	b5b0      	push	{r4, r5, r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681c      	ldr	r4, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f90e 	bl	8009754 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009538:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800953a:	461a      	mov	r2, r3
 800953c:	4629      	mov	r1, r5
 800953e:	4620      	mov	r0, r4
 8009540:	f000 f912 	bl	8009768 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 f8e4 	bl	8009714 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bdb0      	pop	{r4, r5, r7, pc}

08009556 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	429a      	cmp	r2, r3
 800956a:	d00d      	beq.n	8009588 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	4619      	mov	r1, r3
 8009576:	f000 f90f 	bl	8009798 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	605a      	str	r2, [r3, #4]
      }
 8009586:	e008      	b.n	800959a <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f918 	bl	80097be <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>
 800958e:	4603      	mov	r3, r0
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f923 	bl	80097e0 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
      push_back(const value_type& __x)
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b082      	sub	sp, #8
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d00d      	beq.n	80095d4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4619      	mov	r1, r3
 80095c2:	f000 f9af 	bl	8009924 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f103 0218 	add.w	r2, r3, #24
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	605a      	str	r2, [r3, #4]
      }
 80095d2:	e008      	b.n	80095e6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x44>
	  _M_realloc_insert(end(), __x);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f81a 	bl	800960e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 80095da:	4603      	mov	r3, r0
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f9b3 	bl	800994c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 80095e6:	bf00      	nop
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	f107 030c 	add.w	r3, r7, #12
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 fa3c 	bl	8009a7c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	1d1a      	adds	r2, r3, #4
 800961a:	f107 030c 	add.w	r3, r7, #12
 800961e:	4611      	mov	r1, r2
 8009620:	4618      	mov	r0, r3
 8009622:	f000 fa2b 	bl	8009a7c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009630:	b590      	push	{r4, r7, lr}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fa2d 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009640:	4603      	mov	r3, r0
 8009642:	681c      	ldr	r4, [r3, #0]
 8009644:	6838      	ldr	r0, [r7, #0]
 8009646:	f000 fa28 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800964a:	4603      	mov	r3, r0
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	429c      	cmp	r4, r3
 8009650:	bf14      	ite	ne
 8009652:	2301      	movne	r3, #1
 8009654:	2300      	moveq	r3, #0
 8009656:	b2db      	uxtb	r3, r3
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	bd90      	pop	{r4, r7, pc}

08009660 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f103 0218 	add.w	r2, r3, #24
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	601a      	str	r2, [r3, #0]
	return *this;
 8009674:	687b      	ldr	r3, [r7, #4]
      }
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	bc80      	pop	{r7}
 800967e:	4770      	bx	lr

08009680 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	bc80      	pop	{r7}
 8009694:	4770      	bx	lr

08009696 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EEC1Ev>:
      _Vector_base()
 8009696:	b580      	push	{r7, lr}
 8009698:	b082      	sub	sp, #8
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 fa04 	bl	8009aae <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implC1Ev>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4618      	mov	r0, r3
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	bc80      	pop	{r7}
 80096c2:	4770      	bx	lr

080096c4 <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 fa13 	bl	8009afe <_ZSt8_DestroyIP13ParsedCommandEvT_S2_>
    }
 80096d8:	bf00      	nop
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fa2a 	bl	8009b42 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4618      	mov	r0, r3
 8009704:	f000 fa08 	bl	8009b18 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6819      	ldr	r1, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8009724:	461a      	mov	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	10db      	asrs	r3, r3, #3
 800972e:	4a08      	ldr	r2, [pc, #32]	; (8009750 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x3c>)
 8009730:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8009734:	461a      	mov	r2, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fa0f 	bl	8009b5a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
		      - this->_M_impl._M_start); }
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff ffce 	bl	80096e0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	aaaaaaab 	.word	0xaaaaaaab

08009754 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	bc80      	pop	{r7}
 8009766:	4770      	bx	lr

08009768 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8009774:	68b9      	ldr	r1, [r7, #8]
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 fa02 	bl	8009b80 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800977c:	bf00      	nop
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4618      	mov	r0, r3
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	bc80      	pop	{r7}
 8009796:	4770      	bx	lr

08009798 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7ff ffed 	bl	8009784 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 80097aa:	4603      	mov	r3, r0
 80097ac:	461a      	mov	r2, r3
 80097ae:	68b9      	ldr	r1, [r7, #8]
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fa0e 	bl	8009bd2 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	1d1a      	adds	r2, r3, #4
 80097ca:	f107 030c 	add.w	r3, r7, #12
 80097ce:	4611      	mov	r1, r2
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fa18 	bl	8009c06 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80097e0:	b5b0      	push	{r4, r5, r7, lr}
 80097e2:	b08a      	sub	sp, #40	; 0x28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80097ec:	4a46      	ldr	r2, [pc, #280]	; (8009908 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x128>)
 80097ee:	2101      	movs	r1, #1
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 fa17 	bl	8009c24 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc>
 80097f6:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 fa5b 	bl	8009cb4 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>
 80097fe:	4603      	mov	r3, r0
 8009800:	617b      	str	r3, [r7, #20]
 8009802:	f107 0214 	add.w	r2, r7, #20
 8009806:	f107 0308 	add.w	r3, r7, #8
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f000 fa61 	bl	8009cd4 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8009812:	4603      	mov	r3, r0
 8009814:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fa76 	bl	8009d0c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj>
 8009820:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009826:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009828:	6a3a      	ldr	r2, [r7, #32]
 800982a:	4613      	mov	r3, r2
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	4413      	add	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	189d      	adds	r5, r3, r2
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff ffa3 	bl	8009784 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 800983e:	4603      	mov	r3, r0
 8009840:	461a      	mov	r2, r3
 8009842:	4629      	mov	r1, r5
 8009844:	4620      	mov	r0, r4
 8009846:	f7ff ffa7 	bl	8009798 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 800984a:	2300      	movs	r3, #0
 800984c:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681c      	ldr	r4, [r3, #0]
 8009852:	f107 0308 	add.w	r3, r7, #8
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fa6c 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800985c:	4603      	mov	r3, r0
 800985e:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff ff24 	bl	80096b0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 8009868:	4603      	mov	r3, r0
	  __new_finish
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	4629      	mov	r1, r5
 800986e:	4620      	mov	r0, r4
 8009870:	f000 fa6a 	bl	8009d48 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>
 8009874:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	3324      	adds	r3, #36	; 0x24
 800987a:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 800987c:	f107 0308 	add.w	r3, r7, #8
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fa57 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 8009886:	4603      	mov	r3, r0
 8009888:	681c      	ldr	r4, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4618      	mov	r0, r3
 8009892:	f7ff ff0d 	bl	80096b0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 8009896:	4603      	mov	r3, r0
	  __new_finish
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	4629      	mov	r1, r5
 800989c:	4620      	mov	r0, r4
 800989e:	f000 fa53 	bl	8009d48 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>
 80098a2:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681c      	ldr	r4, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7ff fefe 	bl	80096b0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 80098b4:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80098b6:	461a      	mov	r2, r3
 80098b8:	4629      	mov	r1, r5
 80098ba:	4620      	mov	r0, r4
 80098bc:	f7ff ff02 	bl	80096c4 <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80098ca:	461a      	mov	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	109b      	asrs	r3, r3, #2
 80098d4:	4a0d      	ldr	r2, [pc, #52]	; (800990c <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12c>)
 80098d6:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 80098da:	461a      	mov	r2, r3
 80098dc:	f000 f8fc 	bl	8009ad8 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80098ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ee:	4613      	mov	r3, r2
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	461a      	mov	r2, r3
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	441a      	add	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	609a      	str	r2, [r3, #8]
    }
 8009900:	bf00      	nop
 8009902:	3728      	adds	r7, #40	; 0x28
 8009904:	46bd      	mov	sp, r7
 8009906:	bdb0      	pop	{r4, r5, r7, pc}
 8009908:	080188c0 	.word	0x080188c0
 800990c:	38e38e39 	.word	0x38e38e39

08009910 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	bc80      	pop	{r7}
 8009922:	4770      	bx	lr

08009924 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff ffed 	bl	8009910 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8009936:	4603      	mov	r3, r0
 8009938:	461a      	mov	r2, r3
 800993a:	68b9      	ldr	r1, [r7, #8]
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 fa1c 	bl	8009d7a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
 8009942:	bf00      	nop
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800994c:	b5b0      	push	{r4, r5, r7, lr}
 800994e:	b08a      	sub	sp, #40	; 0x28
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8009958:	4a46      	ldr	r2, [pc, #280]	; (8009a74 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 800995a:	2101      	movs	r1, #1
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 fa26 	bl	8009dae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8009962:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f7ff fe42 	bl	80095ee <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800996a:	4603      	mov	r3, r0
 800996c:	617b      	str	r3, [r7, #20]
 800996e:	f107 0214 	add.w	r2, r7, #20
 8009972:	f107 0308 	add.w	r3, r7, #8
 8009976:	4611      	mov	r1, r2
 8009978:	4618      	mov	r0, r3
 800997a:	f000 fa61 	bl	8009e40 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 800997e:	4603      	mov	r3, r0
 8009980:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fa76 	bl	8009e78 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800998c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009992:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009994:	6a3a      	ldr	r2, [r7, #32]
 8009996:	4613      	mov	r3, r2
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	4413      	add	r3, r2
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	189d      	adds	r5, r3, r2
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff ffb3 	bl	8009910 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80099aa:	4603      	mov	r3, r0
 80099ac:	461a      	mov	r2, r3
 80099ae:	4629      	mov	r1, r5
 80099b0:	4620      	mov	r0, r4
 80099b2:	f7ff ffb7 	bl	8009924 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	  __new_finish = pointer();
 80099b6:	2300      	movs	r3, #0
 80099b8:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681c      	ldr	r4, [r3, #0]
 80099be:	f107 0308 	add.w	r3, r7, #8
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f869 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80099c8:	4603      	mov	r3, r0
 80099ca:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff fec0 	bl	8009754 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80099d4:	4603      	mov	r3, r0
	  __new_finish
 80099d6:	69fa      	ldr	r2, [r7, #28]
 80099d8:	4629      	mov	r1, r5
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 fa60 	bl	8009ea0 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80099e0:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	3318      	adds	r3, #24
 80099e6:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 80099e8:	f107 0308 	add.w	r3, r7, #8
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f854 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80099f2:	4603      	mov	r3, r0
 80099f4:	681c      	ldr	r4, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff fea9 	bl	8009754 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009a02:	4603      	mov	r3, r0
	  __new_finish
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	4629      	mov	r1, r5
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f000 fa49 	bl	8009ea0 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009a0e:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681c      	ldr	r4, [r3, #0]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff fe9a 	bl	8009754 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009a20:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009a22:	461a      	mov	r2, r3
 8009a24:	4629      	mov	r1, r5
 8009a26:	4620      	mov	r0, r4
 8009a28:	f7ff fe9e 	bl	8009768 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8009a36:	461a      	mov	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	10db      	asrs	r3, r3, #3
 8009a40:	4a0d      	ldr	r2, [pc, #52]	; (8009a78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 8009a42:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8009a46:	461a      	mov	r2, r3
 8009a48:	f000 f887 	bl	8009b5a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	4413      	add	r3, r2
 8009a60:	00db      	lsls	r3, r3, #3
 8009a62:	461a      	mov	r2, r3
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	441a      	add	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	609a      	str	r2, [r3, #8]
    }
 8009a6c:	bf00      	nop
 8009a6e:	3728      	adds	r7, #40	; 0x28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bdb0      	pop	{r4, r5, r7, pc}
 8009a74:	080188c0 	.word	0x080188c0
 8009a78:	aaaaaaab 	.word	0xaaaaaaab

08009a7c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bc80      	pop	{r7}
 8009a98:	4770      	bx	lr

08009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bc80      	pop	{r7}
 8009aac:	4770      	bx	lr

08009aae <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa0b 	bl	8009ed2 <_ZNSaI13ParsedCommandEC1Ev>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	605a      	str	r2, [r3, #4]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	609a      	str	r2, [r3, #8]
	{ }
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
	if (__p)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d005      	beq.n	8009af6 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 f9fa 	bl	8009eea <_ZNSt16allocator_traitsISaI13ParsedCommandEE10deallocateERS1_PS0_j>
      }
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <_ZSt8_DestroyIP13ParsedCommandEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fa06 	bl	8009f1c <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_>
    }
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fa13 	bl	8009f4c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	605a      	str	r2, [r3, #4]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	609a      	str	r2, [r3, #8]
	{ }
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fa0a 	bl	8009f64 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
	if (__p)
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d005      	beq.n	8009b78 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	68b9      	ldr	r1, [r7, #8]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 fa00 	bl	8009f78 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fa0c 	bl	8009faa <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <_ZN13ParsedCommandC1ERKS_>:
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f00b fe48 	bl	8015840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	8b1a      	ldrh	r2, [r3, #24]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	831a      	strh	r2, [r3, #24]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	69da      	ldr	r2, [r3, #28]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	61da      	str	r2, [r3, #28]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	6a1a      	ldr	r2, [r3, #32]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	621a      	str	r2, [r3, #32]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009bd2:	b590      	push	{r4, r7, lr}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff fdd0 	bl	8009784 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 8009be4:	4604      	mov	r4, r0
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	4619      	mov	r1, r3
 8009bea:	2024      	movs	r0, #36	; 0x24
 8009bec:	f7fe fa68 	bl	80080c0 <_ZnwjPv>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JRKS1_EEEvPT_DpOT0_+0x2c>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff ffce 	bl	8009b9a <_ZN13ParsedCommandC1ERKS_>
 8009bfe:	bf00      	nop
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd90      	pop	{r4, r7, pc}

08009c06 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bc80      	pop	{r7}
 8009c22:	4770      	bx	lr

08009c24 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009c24:	b590      	push	{r4, r7, lr}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 f9d2 	bl	8009fda <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 8009c36:	4604      	mov	r4, r0
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f9df 	bl	8009ffc <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	1ae2      	subs	r2, r4, r3
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	bf34      	ite	cc
 8009c48:	2301      	movcc	r3, #1
 8009c4a:	2300      	movcs	r3, #0
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d003      	beq.n	8009c5a <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f00b fbf4 	bl	8015442 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f9ce 	bl	8009ffc <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009c60:	4604      	mov	r4, r0
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 f9ca 	bl	8009ffc <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	613b      	str	r3, [r7, #16]
 8009c6c:	f107 0208 	add.w	r2, r7, #8
 8009c70:	f107 0310 	add.w	r3, r7, #16
 8009c74:	4611      	mov	r1, r2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fe1d 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4423      	add	r3, r4
 8009c82:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 f9b9 	bl	8009ffc <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d306      	bcc.n	8009ca0 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x7c>
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 f9a1 	bl	8009fda <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d904      	bls.n	8009caa <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x86>
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 f99a 	bl	8009fda <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	e000      	b.n	8009cac <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x88>
 8009caa:	697b      	ldr	r3, [r7, #20]
      }
 8009cac:	4618      	mov	r0, r3
 8009cae:	371c      	adds	r7, #28
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd90      	pop	{r4, r7, pc}

08009cb4 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	f107 030c 	add.w	r3, r7, #12
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7ff ff9e 	bl	8009c06 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009cd4:	b590      	push	{r4, r7, lr}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f828 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	461c      	mov	r4, r3
 8009cea:	6838      	ldr	r0, [r7, #0]
 8009cec:	f000 f822 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	1ae3      	subs	r3, r4, r3
 8009cf6:	109b      	asrs	r3, r3, #2
 8009cf8:	4a03      	ldr	r2, [pc, #12]	; (8009d08 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x34>)
 8009cfa:	fb02 f303 	mul.w	r3, r2, r3
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd90      	pop	{r4, r7, pc}
 8009d06:	bf00      	nop
 8009d08:	38e38e39 	.word	0x38e38e39

08009d0c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d006      	beq.n	8009d2a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj+0x1e>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 f981 	bl	800a028 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8allocateERS1_j>
 8009d26:	4603      	mov	r3, r0
 8009d28:	e000      	b.n	8009d2c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj+0x20>
 8009d2a:	2300      	movs	r3, #0
      }
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bc80      	pop	{r7}
 8009d46:	4770      	bx	lr

08009d48 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009d48:	b590      	push	{r4, r7, lr}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 f975 	bl	800a046 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	68b8      	ldr	r0, [r7, #8]
 8009d60:	f000 f971 	bl	800a046 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>
 8009d64:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f000 f97a 	bl	800a064 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP13ParsedCommandES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8009d70:	4603      	mov	r3, r0
    }
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd90      	pop	{r4, r7, pc}

08009d7a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009d7a:	b590      	push	{r4, r7, lr}
 8009d7c:	b085      	sub	sp, #20
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff fdc2 	bl	8009910 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	4619      	mov	r1, r3
 8009d92:	2018      	movs	r0, #24
 8009d94:	f7fe f994 	bl	80080c0 <_ZnwjPv>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_+0x2c>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4618      	mov	r0, r3
 8009da2:	f00b fd4d 	bl	8015840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009da6:	bf00      	nop
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd90      	pop	{r4, r7, pc}

08009dae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009dae:	b590      	push	{r4, r7, lr}
 8009db0:	b087      	sub	sp, #28
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 f963 	bl	800a086 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f000 f970 	bl	800a0a8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	1ae2      	subs	r2, r4, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	bf34      	ite	cc
 8009dd2:	2301      	movcc	r3, #1
 8009dd4:	2300      	movcs	r3, #0
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f00b fb2f 	bl	8015442 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 f95f 	bl	800a0a8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009dea:	4604      	mov	r4, r0
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 f95b 	bl	800a0a8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009df2:	4603      	mov	r3, r0
 8009df4:	613b      	str	r3, [r7, #16]
 8009df6:	f107 0208 	add.w	r2, r7, #8
 8009dfa:	f107 0310 	add.w	r3, r7, #16
 8009dfe:	4611      	mov	r1, r2
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe fd58 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 8009e06:	4603      	mov	r3, r0
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4423      	add	r3, r4
 8009e0c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f000 f94a 	bl	800a0a8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009e14:	4602      	mov	r2, r0
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d306      	bcc.n	8009e2a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 f932 	bl	800a086 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009e22:	4602      	mov	r2, r0
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d904      	bls.n	8009e34 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 f92b 	bl	800a086 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009e30:	4603      	mov	r3, r0
 8009e32:	e000      	b.n	8009e36 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 8009e34:	697b      	ldr	r3, [r7, #20]
      }
 8009e36:	4618      	mov	r0, r3
 8009e38:	371c      	adds	r7, #28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd90      	pop	{r4, r7, pc}
	...

08009e40 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff fe25 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009e50:	4603      	mov	r3, r0
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	461c      	mov	r4, r3
 8009e56:	6838      	ldr	r0, [r7, #0]
 8009e58:	f7ff fe1f 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	1ae3      	subs	r3, r4, r3
 8009e62:	10db      	asrs	r3, r3, #3
 8009e64:	4a03      	ldr	r2, [pc, #12]	; (8009e74 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 8009e66:	fb02 f303 	mul.w	r3, r2, r3
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd90      	pop	{r4, r7, pc}
 8009e72:	bf00      	nop
 8009e74:	aaaaaaab 	.word	0xaaaaaaab

08009e78 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d006      	beq.n	8009e96 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 f921 	bl	800a0d4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8009e92:	4603      	mov	r3, r0
 8009e94:	e000      	b.n	8009e98 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8009e96:	2300      	movs	r3, #0
      }
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009ea0:	b590      	push	{r4, r7, lr}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f000 f91f 	bl	800a0f2 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	68b8      	ldr	r0, [r7, #8]
 8009eb8:	f000 f91b 	bl	800a0f2 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009ebc:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 f924 	bl	800a110 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 8009ec8:	4603      	mov	r3, r0
    }
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd90      	pop	{r4, r7, pc}

08009ed2 <_ZNSaI13ParsedCommandEC1Ev>:
      allocator() throw() { }
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f929 	bl	800a132 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandEC1Ev>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <_ZNSt16allocator_traitsISaI13ParsedCommandEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	68b9      	ldr	r1, [r7, #8]
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 f923 	bl	800a146 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE10deallocateEPS1_j>
 8009f00:	bf00      	nop
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <_ZSt11__addressofI13ParsedCommandEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4618      	mov	r0, r3
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bc80      	pop	{r7}
 8009f1a:	4770      	bx	lr

08009f1c <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d00a      	beq.n	8009f44 <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7ff ffea 	bl	8009f08 <_ZSt11__addressofI13ParsedCommandEPT_RS1_>
 8009f34:	4603      	mov	r3, r0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 f912 	bl	800a160 <_ZSt8_DestroyI13ParsedCommandEvPT_>
	  for (; __first != __last; ++__first)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3324      	adds	r3, #36	; 0x24
 8009f40:	607b      	str	r3, [r7, #4]
 8009f42:	e7f0      	b.n	8009f26 <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_+0xa>
	}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f90e 	bl	800a176 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bc80      	pop	{r7}
 8009f76:	4770      	bx	lr

08009f78 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	68b9      	ldr	r1, [r7, #8]
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f8fe 	bl	800a18a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8009f8e:	bf00      	nop
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bc80      	pop	{r7}
 8009fa8:	4770      	bx	lr

08009faa <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b082      	sub	sp, #8
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d00a      	beq.n	8009fd2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff ffea 	bl	8009f96 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 f8ed 	bl	800a1a4 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	3318      	adds	r3, #24
 8009fce:	607b      	str	r3, [r7, #4]
 8009fd0:	e7f0      	b.n	8009fb4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 f8f4 	bl	800a1d2 <_ZNKSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 8009fea:	4603      	mov	r3, r0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 f8e4 	bl	800a1ba <_ZNSt16allocator_traitsISaI13ParsedCommandEE8max_sizeERKS1_>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	461a      	mov	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	109b      	asrs	r3, r3, #2
 800a012:	4a04      	ldr	r2, [pc, #16]	; (800a024 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv+0x28>)
 800a014:	fb02 f303 	mul.w	r3, r2, r3
 800a018:	4618      	mov	r0, r3
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bc80      	pop	{r7}
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	38e38e39 	.word	0x38e38e39

0800a028 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a032:	2200      	movs	r2, #0
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f8d5 	bl	800a1e6 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv>
 800a03c:	4603      	mov	r3, r0
 800a03e:	4618      	mov	r0, r3
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800a04e:	f107 030c 	add.w	r3, r7, #12
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	4618      	mov	r0, r3
 800a056:	f000 f8e7 	bl	800a228 <_ZNSt13move_iteratorIP13ParsedCommandEC1ES1_>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP13ParsedCommandES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 f8e4 	bl	800a244 <_ZSt18uninitialized_copyISt13move_iteratorIP13ParsedCommandES2_ET0_T_S5_S4_>
 800a07c:	4603      	mov	r3, r0
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a086:	b580      	push	{r7, lr}
 800a088:	b082      	sub	sp, #8
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4618      	mov	r0, r3
 800a092:	f000 f8f5 	bl	800a280 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800a096:	4603      	mov	r3, r0
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 f8e5 	bl	800a268 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	10db      	asrs	r3, r3, #3
 800a0be:	4a04      	ldr	r2, [pc, #16]	; (800a0d0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800a0c0:	fb02 f303 	mul.w	r3, r2, r3
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bc80      	pop	{r7}
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	aaaaaaab 	.word	0xaaaaaaab

0800a0d4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a0de:	2200      	movs	r2, #0
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f8d6 	bl	800a294 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b084      	sub	sp, #16
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800a0fa:	f107 030c 	add.w	r3, r7, #12
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	4618      	mov	r0, r3
 800a102:	f000 f8e8 	bl	800a2d6 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
 800a11c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	68b9      	ldr	r1, [r7, #8]
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 f8e5 	bl	800a2f2 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800a128:	4603      	mov	r3, r0
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4618      	mov	r0, r3
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	bc80      	pop	{r7}
 800a144:	4770      	bx	lr

0800a146 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800a152:	68b8      	ldr	r0, [r7, #8]
 800a154:	f00b f968 	bl	8015428 <_ZdlPv>
      }
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <_ZSt8_DestroyI13ParsedCommandEvPT_>:
    _Destroy(_Tp* __pointer)
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7fe fdea 	bl	8008d42 <_ZN13ParsedCommandD1Ev>
 800a16e:	bf00      	nop
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4618      	mov	r0, r3
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	bc80      	pop	{r7}
 800a188:	4770      	bx	lr

0800a18a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800a196:	68b8      	ldr	r0, [r7, #8]
 800a198:	f00b f946 	bl	8015428 <_ZdlPv>
      }
 800a19c:	bf00      	nop
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f00b fa5e 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <_ZNSt16allocator_traitsISaI13ParsedCommandEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f8a8 	bl	800a318 <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <_ZNKSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800a1d2:	b480      	push	{r7}
 800a1d4:	b083      	sub	sp, #12
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bc80      	pop	{r7}
 800a1e4:	4770      	bx	lr

0800a1e6 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 f890 	bl	800a318 <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	bf8c      	ite	hi
 800a200:	2301      	movhi	r3, #1
 800a202:	2300      	movls	r3, #0
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a20a:	f00b f911 	bl	8015430 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	4613      	mov	r3, r2
 800a212:	00db      	lsls	r3, r3, #3
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4618      	mov	r0, r3
 800a21a:	f00b f8eb 	bl	80153f4 <_Znwj>
 800a21e:	4603      	mov	r3, r0
      }
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <_ZNSt13move_iteratorIP13ParsedCommandEC1ES1_>:
      move_iterator(iterator_type __i)
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4618      	mov	r0, r3
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	bc80      	pop	{r7}
 800a242:	4770      	bx	lr

0800a244 <_ZSt18uninitialized_copyISt13move_iteratorIP13ParsedCommandES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a250:	2301      	movs	r3, #1
 800a252:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	68b9      	ldr	r1, [r7, #8]
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 f869 	bl	800a330 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_>
 800a25e:	4603      	mov	r3, r0
    }
 800a260:	4618      	mov	r0, r3
 800a262:	3718      	adds	r7, #24
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a) noexcept
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f88d 	bl	800a390 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800a276:	4603      	mov	r3, r0
 800a278:	4618      	mov	r0, r3
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4618      	mov	r0, r3
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	bc80      	pop	{r7}
 800a292:	4770      	bx	lr

0800a294 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 f875 	bl	800a390 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	bf8c      	ite	hi
 800a2ae:	2301      	movhi	r3, #1
 800a2b0:	2300      	movls	r3, #0
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a2b8:	f00b f8ba 	bl	8015430 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	4413      	add	r3, r2
 800a2c4:	00db      	lsls	r3, r3, #3
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f00b f894 	bl	80153f4 <_Znwj>
 800a2cc:	4603      	mov	r3, r0
      }
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bc80      	pop	{r7}
 800a2f0:	4770      	bx	lr

0800a2f2 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b086      	sub	sp, #24
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	60b9      	str	r1, [r7, #8]
 800a2fc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a2fe:	2301      	movs	r3, #1
 800a300:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	68b9      	ldr	r1, [r7, #8]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 f84e 	bl	800a3a8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800a30c:	4603      	mov	r3, r0
    }
 800a30e:	4618      	mov	r0, r3
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800a320:	4b02      	ldr	r3, [pc, #8]	; (800a32c <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv+0x14>)
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	bc80      	pop	{r7}
 800a32a:	4770      	bx	lr
 800a32c:	071c71c7 	.word	0x071c71c7

0800a330 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a330:	b590      	push	{r4, r7, lr}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800a340:	f107 0208 	add.w	r2, r7, #8
 800a344:	f107 030c 	add.w	r3, r7, #12
 800a348:	4611      	mov	r1, r2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f85b 	bl	800a406 <_ZStneIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d016      	beq.n	800a384 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800a356:	6978      	ldr	r0, [r7, #20]
 800a358:	f7ff fdd6 	bl	8009f08 <_ZSt11__addressofI13ParsedCommandEPT_RS1_>
 800a35c:	4604      	mov	r4, r0
 800a35e:	f107 030c 	add.w	r3, r7, #12
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f870 	bl	800a448 <_ZNKSt13move_iteratorIP13ParsedCommandEdeEv>
 800a368:	4603      	mov	r3, r0
 800a36a:	4619      	mov	r1, r3
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 f89c 	bl	800a4aa <_ZSt10_ConstructI13ParsedCommandJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800a372:	f107 030c 	add.w	r3, r7, #12
 800a376:	4618      	mov	r0, r3
 800a378:	f000 f856 	bl	800a428 <_ZNSt13move_iteratorIP13ParsedCommandEppEv>
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	3324      	adds	r3, #36	; 0x24
 800a380:	617b      	str	r3, [r7, #20]
 800a382:	e7dd      	b.n	800a340 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 800a384:	697b      	ldr	r3, [r7, #20]
	}
 800a386:	4618      	mov	r0, r3
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd90      	pop	{r4, r7, pc}
	...

0800a390 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800a398:	4b02      	ldr	r3, [pc, #8]	; (800a3a4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bc80      	pop	{r7}
 800a3a2:	4770      	bx	lr
 800a3a4:	0aaaaaaa 	.word	0x0aaaaaaa

0800a3a8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a3a8:	b590      	push	{r4, r7, lr}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800a3b8:	f107 0208 	add.w	r2, r7, #8
 800a3bc:	f107 030c 	add.w	r3, r7, #12
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 f88a 	bl	800a4dc <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d016      	beq.n	800a3fc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800a3ce:	6978      	ldr	r0, [r7, #20]
 800a3d0:	f7ff fde1 	bl	8009f96 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	f107 030c 	add.w	r3, r7, #12
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 f89f 	bl	800a51e <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f000 f8af 	bl	800a548 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800a3ea:	f107 030c 	add.w	r3, r7, #12
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 f885 	bl	800a4fe <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	3318      	adds	r3, #24
 800a3f8:	617b      	str	r3, [r7, #20]
 800a3fa:	e7dd      	b.n	800a3b8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800a3fc:	697b      	ldr	r3, [r7, #20]
	}
 800a3fe:	4618      	mov	r0, r3
 800a400:	371c      	adds	r7, #28
 800a402:	46bd      	mov	sp, r7
 800a404:	bd90      	pop	{r4, r7, pc}

0800a406 <_ZStneIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f8b1 	bl	800a57a <_ZSteqIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>
 800a418:	4603      	mov	r3, r0
 800a41a:	f083 0301 	eor.w	r3, r3, #1
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	4618      	mov	r0, r3
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <_ZNSt13move_iteratorIP13ParsedCommandEppEv>:
      operator++()
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	601a      	str	r2, [r3, #0]
	return *this;
 800a43c:	687b      	ldr	r3, [r7, #4]
      }
 800a43e:	4618      	mov	r0, r3
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	bc80      	pop	{r7}
 800a446:	4770      	bx	lr

0800a448 <_ZNKSt13move_iteratorIP13ParsedCommandEdeEv>:
      operator*() const
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	bc80      	pop	{r7}
 800a45c:	4770      	bx	lr

0800a45e <_ZSt7forwardI13ParsedCommandEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bc80      	pop	{r7}
 800a470:	4770      	bx	lr

0800a472 <_ZN13ParsedCommandC1EOS_>:
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	4611      	mov	r1, r2
 800a482:	4618      	mov	r0, r3
 800a484:	f00b f8d9 	bl	801563a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	8b1a      	ldrh	r2, [r3, #24]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	831a      	strh	r2, [r3, #24]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	69da      	ldr	r2, [r3, #28]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	61da      	str	r2, [r3, #28]
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	6a1a      	ldr	r2, [r3, #32]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	621a      	str	r2, [r3, #32]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <_ZSt10_ConstructI13ParsedCommandJS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800a4aa:	b590      	push	{r4, r7, lr}
 800a4ac:	b083      	sub	sp, #12
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800a4b4:	6838      	ldr	r0, [r7, #0]
 800a4b6:	f7ff ffd2 	bl	800a45e <_ZSt7forwardI13ParsedCommandEOT_RNSt16remove_referenceIS1_E4typeE>
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4619      	mov	r1, r3
 800a4c0:	2024      	movs	r0, #36	; 0x24
 800a4c2:	f7fd fdfd 	bl	80080c0 <_ZnwjPv>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d003      	beq.n	800a4d4 <_ZSt10_ConstructI13ParsedCommandJS0_EEvPT_DpOT0_+0x2a>
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff ffcf 	bl	800a472 <_ZN13ParsedCommandC1EOS_>
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd90      	pop	{r4, r7, pc}

0800a4dc <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800a4e6:	6839      	ldr	r1, [r7, #0]
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f85c 	bl	800a5a6 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	f083 0301 	eor.w	r3, r3, #1
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
	++_M_current;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f103 0218 	add.w	r2, r3, #24
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	601a      	str	r2, [r3, #0]
	return *this;
 800a512:	687b      	ldr	r3, [r7, #4]
      }
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	bc80      	pop	{r7}
 800a51c:	4770      	bx	lr

0800a51e <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800a51e:	b480      	push	{r7}
 800a520:	b083      	sub	sp, #12
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	bc80      	pop	{r7}
 800a532:	4770      	bx	lr

0800a534 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	bc80      	pop	{r7}
 800a546:	4770      	bx	lr

0800a548 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800a548:	b590      	push	{r4, r7, lr}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800a552:	6838      	ldr	r0, [r7, #0]
 800a554:	f7ff ffee 	bl	800a534 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a558:	4604      	mov	r4, r0
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4619      	mov	r1, r3
 800a55e:	2018      	movs	r0, #24
 800a560:	f7fd fdae 	bl	80080c0 <_ZnwjPv>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800a56a:	4621      	mov	r1, r4
 800a56c:	4618      	mov	r0, r3
 800a56e:	f00b f864 	bl	801563a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	bd90      	pop	{r4, r7, pc}

0800a57a <_ZSteqIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 800a57a:	b590      	push	{r4, r7, lr}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f824 	bl	800a5d2 <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>
 800a58a:	4604      	mov	r4, r0
 800a58c:	6838      	ldr	r0, [r7, #0]
 800a58e:	f000 f820 	bl	800a5d2 <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>
 800a592:	4603      	mov	r3, r0
 800a594:	429c      	cmp	r4, r3
 800a596:	bf0c      	ite	eq
 800a598:	2301      	moveq	r3, #1
 800a59a:	2300      	movne	r3, #0
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd90      	pop	{r4, r7, pc}

0800a5a6 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800a5a6:	b590      	push	{r4, r7, lr}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f819 	bl	800a5e8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	6838      	ldr	r0, [r7, #0]
 800a5ba:	f000 f815 	bl	800a5e8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	429c      	cmp	r4, r3
 800a5c2:	bf0c      	ite	eq
 800a5c4:	2301      	moveq	r3, #1
 800a5c6:	2300      	movne	r3, #0
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd90      	pop	{r4, r7, pc}

0800a5d2 <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>:
      base() const
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bc80      	pop	{r7}
 800a5e6:	4770      	bx	lr

0800a5e8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bc80      	pop	{r7}
 800a5fc:	4770      	bx	lr
	...

0800a600 <_ZN14CommandHandlerC1Ev>:

#include "CommandHandler.h"
#include "global_callbacks.h"
//#include "FFBoardMain.h"

CommandHandler::CommandHandler() {
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	4a06      	ldr	r2, [pc, #24]	; (800a624 <_ZN14CommandHandlerC1Ev+0x24>)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	711a      	strb	r2, [r3, #4]
	addCommandHandler();
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f857 	bl	800a6c8 <_ZN14CommandHandler17addCommandHandlerEv>
}
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4618      	mov	r0, r3
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	08018d54 	.word	0x08018d54

0800a628 <_ZN14CommandHandlerD1Ev>:

CommandHandler::~CommandHandler() {
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	4a05      	ldr	r2, [pc, #20]	; (800a648 <_ZN14CommandHandlerD1Ev+0x20>)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	601a      	str	r2, [r3, #0]
	// Remove from global list when deleted
	removeCommandHandler();
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f87a 	bl	800a730 <_ZN14CommandHandler20removeCommandHandlerEv>
}
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4618      	mov	r0, r3
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	08018d54 	.word	0x08018d54

0800a64c <_ZN14CommandHandlerD0Ev>:
CommandHandler::~CommandHandler() {
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
}
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff ffe7 	bl	800a628 <_ZN14CommandHandlerD1Ev>
 800a65a:	2108      	movs	r1, #8
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f00a fec7 	bl	80153f0 <_ZdlPvj>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4618      	mov	r0, r3
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <_ZN14CommandHandler11hasCommandsEv>:

bool CommandHandler::hasCommands(){
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
	return this->commandsEnabled;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	791b      	ldrb	r3, [r3, #4]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bc80      	pop	{r7}
 800a680:	4770      	bx	lr

0800a682 <_ZN14CommandHandler18setCommandsEnabledEb>:
void CommandHandler::setCommandsEnabled(bool enable){
 800a682:	b480      	push	{r7}
 800a684:	b083      	sub	sp, #12
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
	this->commandsEnabled = enable;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	78fa      	ldrb	r2, [r7, #3]
 800a692:	711a      	strb	r2, [r3, #4]
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	bc80      	pop	{r7}
 800a69c:	4770      	bx	lr

0800a69e <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/*
 * Implement this function
 * MUST return false when no valid command was found or if a help command or similar was parsed
 * When it returns true parsing is normally stopped after this class and not sent to others
 */
bool CommandHandler::command(ParsedCommand* cmd,std::string* reply){
 800a69e:	b480      	push	{r7}
 800a6a0:	b085      	sub	sp, #20
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	607a      	str	r2, [r7, #4]
	if(!this->commandsEnabled){
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	791b      	ldrb	r3, [r3, #4]
 800a6ae:	f083 0301 	eor.w	r3, r3, #1
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e>
		return false;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	e000      	b.n	800a6be <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20>
	}
	return false;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bc80      	pop	{r7}
 800a6c6:	4770      	bx	lr

0800a6c8 <_ZN14CommandHandler17addCommandHandlerEv>:


void CommandHandler::addCommandHandler(){
 800a6c8:	b590      	push	{r4, r7, lr}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	// If already added return
	extern std::vector<CommandHandler*> cmdHandlers;
	for(uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]
 800a6d4:	7bfc      	ldrb	r4, [r7, #15]
 800a6d6:	4815      	ldr	r0, [pc, #84]	; (800a72c <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800a6d8:	f000 f872 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	429c      	cmp	r4, r3
 800a6e0:	bf34      	ite	cc
 800a6e2:	2301      	movcc	r3, #1
 800a6e4:	2300      	movcs	r3, #0
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d012      	beq.n	800a712 <_ZN14CommandHandler17addCommandHandlerEv+0x4a>
		if(cmdHandlers[i] == this)
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	480e      	ldr	r0, [pc, #56]	; (800a72c <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800a6f2:	f000 f875 	bl	800a7e0 <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	bf0c      	ite	eq
 800a700:	2301      	moveq	r3, #1
 800a702:	2300      	movne	r3, #0
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10c      	bne.n	800a724 <_ZN14CommandHandler17addCommandHandlerEv+0x5c>
	for(uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
 800a70c:	3301      	adds	r3, #1
 800a70e:	73fb      	strb	r3, [r7, #15]
 800a710:	e7e0      	b.n	800a6d4 <_ZN14CommandHandler17addCommandHandlerEv+0xc>
			return;
	}
	cmdHandlers.push_back(this);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60bb      	str	r3, [r7, #8]
 800a716:	f107 0308 	add.w	r3, r7, #8
 800a71a:	4619      	mov	r1, r3
 800a71c:	4803      	ldr	r0, [pc, #12]	; (800a72c <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800a71e:	f000 f878 	bl	800a812 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE9push_backEOS1_>
 800a722:	e000      	b.n	800a726 <_ZN14CommandHandler17addCommandHandlerEv+0x5e>
			return;
 800a724:	bf00      	nop
}
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd90      	pop	{r4, r7, pc}
 800a72c:	20000b58 	.word	0x20000b58

0800a730 <_ZN14CommandHandler20removeCommandHandlerEv>:

void CommandHandler::removeCommandHandler(){
 800a730:	b590      	push	{r4, r7, lr}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
	extern std::vector<CommandHandler*> cmdHandlers;
	for (uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a738:	2300      	movs	r3, #0
 800a73a:	75fb      	strb	r3, [r7, #23]
 800a73c:	7dfc      	ldrb	r4, [r7, #23]
 800a73e:	481f      	ldr	r0, [pc, #124]	; (800a7bc <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a740:	f000 f83e 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800a744:	4603      	mov	r3, r0
 800a746:	429c      	cmp	r4, r3
 800a748:	bf34      	ite	cc
 800a74a:	2301      	movcc	r3, #1
 800a74c:	2300      	movcs	r3, #0
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	d02e      	beq.n	800a7b2 <_ZN14CommandHandler20removeCommandHandlerEv+0x82>
		if(cmdHandlers[i] == this){
 800a754:	7dfb      	ldrb	r3, [r7, #23]
 800a756:	4619      	mov	r1, r3
 800a758:	4818      	ldr	r0, [pc, #96]	; (800a7bc <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a75a:	f000 f841 	bl	800a7e0 <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>
 800a75e:	4603      	mov	r3, r0
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	429a      	cmp	r2, r3
 800a766:	bf0c      	ite	eq
 800a768:	2301      	moveq	r3, #1
 800a76a:	2300      	movne	r3, #0
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d01b      	beq.n	800a7aa <_ZN14CommandHandler20removeCommandHandlerEv+0x7a>
			cmdHandlers.erase(cmdHandlers.begin()+i);
 800a772:	4812      	ldr	r0, [pc, #72]	; (800a7bc <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a774:	f000 f85e 	bl	800a834 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800a778:	4603      	mov	r3, r0
 800a77a:	613b      	str	r3, [r7, #16]
 800a77c:	7dfa      	ldrb	r2, [r7, #23]
 800a77e:	f107 0310 	add.w	r3, r7, #16
 800a782:	4611      	mov	r1, r2
 800a784:	4618      	mov	r0, r3
 800a786:	f000 f865 	bl	800a854 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800a78a:	4603      	mov	r3, r0
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	f107 020c 	add.w	r2, r7, #12
 800a792:	f107 0308 	add.w	r3, r7, #8
 800a796:	4611      	mov	r1, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f000 f873 	bl	800a884 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800a79e:	68b9      	ldr	r1, [r7, #8]
 800a7a0:	4806      	ldr	r0, [pc, #24]	; (800a7bc <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a7a2:	f000 f880 	bl	800a8a6 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 800a7a6:	bf00      	nop
		}
	}
}
 800a7a8:	e003      	b.n	800a7b2 <_ZN14CommandHandler20removeCommandHandlerEv+0x82>
	for (uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	75fb      	strb	r3, [r7, #23]
 800a7b0:	e7c4      	b.n	800a73c <_ZN14CommandHandler20removeCommandHandlerEv+0xc>
}
 800a7b2:	bf00      	nop
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd90      	pop	{r4, r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000b58 	.word	0x20000b58

0800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	109b      	asrs	r3, r3, #2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bc80      	pop	{r7}
 800a7de:	4770      	bx	lr

0800a7e0 <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
      }
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bc80      	pop	{r7}
 800a7fc:	4770      	bx	lr

0800a7fe <_ZSt4moveIRP14CommandHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4618      	mov	r0, r3
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bc80      	pop	{r7}
 800a810:	4770      	bx	lr

0800a812 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800a81c:	6838      	ldr	r0, [r7, #0]
 800a81e:	f7ff ffee 	bl	800a7fe <_ZSt4moveIRP14CommandHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a822:	4603      	mov	r3, r0
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 f86e 	bl	800a908 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 800a82c:	bf00      	nop
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	f107 030c 	add.w	r3, r7, #12
 800a842:	4611      	mov	r1, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f000 f88d 	bl	800a964 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	f107 020c 	add.w	r2, r7, #12
 800a86e:	f107 0308 	add.w	r3, r7, #8
 800a872:	4611      	mov	r1, r2
 800a874:	4618      	mov	r0, r3
 800a876:	f000 f875 	bl	800a964 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800a88e:	6838      	ldr	r0, [r7, #0]
 800a890:	f000 f877 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800a894:	4603      	mov	r3, r0
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7ff ffbf 	bl	800a834 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	60bb      	str	r3, [r7, #8]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f86b 	bl	800a996 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE6cbeginEv>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	60fb      	str	r3, [r7, #12]
 800a8c4:	f107 020c 	add.w	r2, r7, #12
 800a8c8:	463b      	mov	r3, r7
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 f876 	bl	800a9be <_ZN9__gnu_cxxmiIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	f107 0308 	add.w	r3, r7, #8
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7ff ffba 	bl	800a854 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f880 	bl	800a9ea <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4618      	mov	r0, r3
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	bc80      	pop	{r7}
 800a906:	4770      	bx	lr

0800a908 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800a908:	b5b0      	push	{r4, r5, r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	685a      	ldr	r2, [r3, #4]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d011      	beq.n	800a942 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a91e:	687c      	ldr	r4, [r7, #4]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685d      	ldr	r5, [r3, #4]
 800a924:	6838      	ldr	r0, [r7, #0]
 800a926:	f7ff ffe5 	bl	800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800a92a:	4603      	mov	r3, r0
 800a92c:	461a      	mov	r2, r3
 800a92e:	4629      	mov	r1, r5
 800a930:	4620      	mov	r0, r4
 800a932:	f000 f896 	bl	800aa62 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	1d1a      	adds	r2, r3, #4
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	605a      	str	r2, [r3, #4]
      }
 800a940:	e00c      	b.n	800a95c <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f8a0 	bl	800aa88 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800a948:	4604      	mov	r4, r0
 800a94a:	6838      	ldr	r0, [r7, #0]
 800a94c:	f7ff ffd2 	bl	800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800a950:	4603      	mov	r3, r0
 800a952:	461a      	mov	r2, r3
 800a954:	4621      	mov	r1, r4
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f8a8 	bl	800aaac <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800a95c:	bf00      	nop
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bdb0      	pop	{r4, r5, r7, pc}

0800a964 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	601a      	str	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bc80      	pop	{r7}
 800a980:	4770      	bx	lr

0800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4618      	mov	r0, r3
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	bc80      	pop	{r7}
 800a994:	4770      	bx	lr

0800a996 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 800a996:	b580      	push	{r7, lr}
 800a998:	b084      	sub	sp, #16
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	f107 020c 	add.w	r2, r7, #12
 800a9a8:	f107 0308 	add.w	r3, r7, #8
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 f908 	bl	800abc4 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <_ZN9__gnu_cxxmiIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a9be:	b590      	push	{r4, r7, lr}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f90a 	bl	800abe2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	461c      	mov	r4, r3
 800a9d4:	6838      	ldr	r0, [r7, #0]
 800a9d6:	f000 f904 	bl	800abe2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	1ae3      	subs	r3, r4, r3
 800a9e0:	109b      	asrs	r3, r3, #2
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd90      	pop	{r4, r7, pc}

0800a9ea <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 800a9ea:	b590      	push	{r4, r7, lr}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800a9f4:	463b      	mov	r3, r7
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7ff ff2b 	bl	800a854 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	60bb      	str	r3, [r7, #8]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f840 	bl	800aa88 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	f107 020c 	add.w	r2, r7, #12
 800aa10:	f107 0308 	add.w	r3, r7, #8
 800aa14:	4611      	mov	r1, r2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 f8ed 	bl	800abf6 <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00e      	beq.n	800aa40 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 800aa22:	463b      	mov	r3, r7
 800aa24:	2101      	movs	r1, #1
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7ff ff14 	bl	800a854 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f82a 	bl	800aa88 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800aa34:	4603      	mov	r3, r0
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 f8f3 	bl	800ac26 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	1f1a      	subs	r2, r3, #4
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	4619      	mov	r1, r3
 800aa52:	4610      	mov	r0, r2
 800aa54:	f000 f8ff 	bl	800ac56 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 800aa58:	683b      	ldr	r3, [r7, #0]
    }
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd90      	pop	{r4, r7, pc}

0800aa62 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	60f8      	str	r0, [r7, #12]
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff ff40 	bl	800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800aa74:	4603      	mov	r3, r0
 800aa76:	461a      	mov	r2, r3
 800aa78:	68b9      	ldr	r1, [r7, #8]
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 f8f8 	bl	800ac70 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	1d1a      	adds	r2, r3, #4
 800aa94:	f107 030c 	add.w	r3, r7, #12
 800aa98:	4611      	mov	r1, r2
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff ff62 	bl	800a964 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800aaac:	b5b0      	push	{r4, r5, r7, lr}
 800aaae:	b08a      	sub	sp, #40	; 0x28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800aab8:	4a41      	ldr	r2, [pc, #260]	; (800abc0 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 800aaba:	2101      	movs	r1, #1
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 f8ef 	bl	800aca0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc>
 800aac2:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f7ff feb5 	bl	800a834 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800aaca:	4603      	mov	r3, r0
 800aacc:	617b      	str	r3, [r7, #20]
 800aace:	f107 0214 	add.w	r2, r7, #20
 800aad2:	f107 0308 	add.w	r3, r7, #8
 800aad6:	4611      	mov	r1, r2
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 f929 	bl	800ad30 <_ZN9__gnu_cxxmiIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800aade:	4603      	mov	r3, r0
 800aae0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 f938 	bl	800ad5c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj>
 800aaec:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800aaf2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800aaf8:	69fa      	ldr	r2, [r7, #28]
 800aafa:	18d5      	adds	r5, r2, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff fef9 	bl	800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800ab02:	4603      	mov	r3, r0
 800ab04:	461a      	mov	r2, r3
 800ab06:	4629      	mov	r1, r5
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f7ff ffaa 	bl	800aa62 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800ab0e:	2300      	movs	r3, #0
 800ab10:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681c      	ldr	r4, [r3, #0]
 800ab16:	f107 0308 	add.w	r3, r7, #8
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7ff ff31 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ab20:	4603      	mov	r3, r0
 800ab22:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 f92c 	bl	800ad84 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800ab2c:	4603      	mov	r3, r0
	  __new_finish
 800ab2e:	69fa      	ldr	r2, [r7, #28]
 800ab30:	4629      	mov	r1, r5
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 f930 	bl	800ad98 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800ab38:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 800ab40:	f107 0308 	add.w	r3, r7, #8
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff ff1c 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	681c      	ldr	r4, [r3, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 f915 	bl	800ad84 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800ab5a:	4603      	mov	r3, r0
	  __new_finish
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	4629      	mov	r1, r5
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 f919 	bl	800ad98 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800ab66:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681c      	ldr	r4, [r3, #0]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 f906 	bl	800ad84 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800ab78:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 f923 	bl	800adca <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800ab8e:	461a      	mov	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 800ab98:	461a      	mov	r2, r3
 800ab9a:	f000 f924 	bl	800ade6 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	69ba      	ldr	r2, [r7, #24]
 800aba8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800abaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	69fa      	ldr	r2, [r7, #28]
 800abb0:	441a      	add	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	609a      	str	r2, [r3, #8]
    }
 800abb6:	bf00      	nop
 800abb8:	3728      	adds	r7, #40	; 0x28
 800abba:	46bd      	mov	sp, r7
 800abbc:	bdb0      	pop	{r4, r5, r7, pc}
 800abbe:	bf00      	nop
 800abc0:	080188dc 	.word	0x080188dc

0800abc4 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	bc80      	pop	{r7}
 800abe0:	4770      	bx	lr

0800abe2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800abe2:	b480      	push	{r7}
 800abe4:	b083      	sub	sp, #12
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4618      	mov	r0, r3
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bc80      	pop	{r7}
 800abf4:	4770      	bx	lr

0800abf6 <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800abf6:	b590      	push	{r4, r7, lr}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff febe 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ac06:	4603      	mov	r3, r0
 800ac08:	681c      	ldr	r4, [r3, #0]
 800ac0a:	6838      	ldr	r0, [r7, #0]
 800ac0c:	f7ff feb9 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ac10:	4603      	mov	r3, r0
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	429c      	cmp	r4, r3
 800ac16:	bf14      	ite	ne
 800ac18:	2301      	movne	r3, #1
 800ac1a:	2300      	moveq	r3, #0
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	4618      	mov	r0, r3
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd90      	pop	{r4, r7, pc}

0800ac26 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 800ac26:	b590      	push	{r4, r7, lr}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 f8ea 	bl	800ae0c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800ac38:	4604      	mov	r4, r0
 800ac3a:	68b8      	ldr	r0, [r7, #8]
 800ac3c:	f000 f8e6 	bl	800ae0c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800ac40:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	4619      	mov	r1, r3
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 f8ea 	bl	800ae20 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 800ac4c:	4603      	mov	r3, r0
    }
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd90      	pop	{r4, r7, pc}

0800ac56 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b082      	sub	sp, #8
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f902 	bl	800ae6c <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE7destroyIS2_EEvPT_>
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ac70:	b590      	push	{r4, r7, lr}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7ff fe39 	bl	800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800ac82:	4603      	mov	r3, r0
 800ac84:	681c      	ldr	r4, [r3, #0]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	4619      	mov	r1, r3
 800ac8a:	2004      	movs	r0, #4
 800ac8c:	f7fd fa18 	bl	80080c0 <_ZnwjPv>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d000      	beq.n	800ac98 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 800ac96:	601c      	str	r4, [r3, #0]
 800ac98:	bf00      	nop
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd90      	pop	{r4, r7, pc}

0800aca0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800aca0:	b590      	push	{r4, r7, lr}
 800aca2:	b087      	sub	sp, #28
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f000 f8e7 	bl	800ae80 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800acb2:	4604      	mov	r4, r0
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f7ff fd83 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800acba:	4603      	mov	r3, r0
 800acbc:	1ae2      	subs	r2, r4, r3
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	bf34      	ite	cc
 800acc4:	2301      	movcc	r3, #1
 800acc6:	2300      	movcs	r3, #0
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f00a fbb6 	bl	8015442 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f7ff fd72 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800acdc:	4604      	mov	r4, r0
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f7ff fd6e 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800ace4:	4603      	mov	r3, r0
 800ace6:	613b      	str	r3, [r7, #16]
 800ace8:	f107 0208 	add.w	r2, r7, #8
 800acec:	f107 0310 	add.w	r3, r7, #16
 800acf0:	4611      	mov	r1, r2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fd fddf 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 800acf8:	4603      	mov	r3, r0
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4423      	add	r3, r4
 800acfe:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f7ff fd5d 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800ad06:	4602      	mov	r2, r0
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d306      	bcc.n	800ad1c <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f000 f8b6 	bl	800ae80 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800ad14:	4602      	mov	r2, r0
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d904      	bls.n	800ad26 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 f8af 	bl	800ae80 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800ad22:	4603      	mov	r3, r0
 800ad24:	e000      	b.n	800ad28 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 800ad26:	697b      	ldr	r3, [r7, #20]
      }
 800ad28:	4618      	mov	r0, r3
 800ad2a:	371c      	adds	r7, #28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd90      	pop	{r4, r7, pc}

0800ad30 <_ZN9__gnu_cxxmiIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ad30:	b590      	push	{r4, r7, lr}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff fe21 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ad40:	4603      	mov	r3, r0
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	461c      	mov	r4, r3
 800ad46:	6838      	ldr	r0, [r7, #0]
 800ad48:	f7ff fe1b 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	1ae3      	subs	r3, r4, r3
 800ad52:	109b      	asrs	r3, r3, #2
 800ad54:	4618      	mov	r0, r3
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd90      	pop	{r4, r7, pc}

0800ad5c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d006      	beq.n	800ad7a <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj+0x1e>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 f896 	bl	800aea2 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8allocateERS2_j>
 800ad76:	4603      	mov	r3, r0
 800ad78:	e000      	b.n	800ad7c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj+0x20>
 800ad7a:	2300      	movs	r3, #0
      }
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bc80      	pop	{r7}
 800ad96:	4770      	bx	lr

0800ad98 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800ad98:	b590      	push	{r4, r7, lr}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
 800ada4:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 f88a 	bl	800aec0 <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>
 800adac:	4604      	mov	r4, r0
 800adae:	68b8      	ldr	r0, [r7, #8]
 800adb0:	f000 f886 	bl	800aec0 <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>
 800adb4:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 f88f 	bl	800aede <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14CommandHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800adc0:	4603      	mov	r3, r0
    }
 800adc2:	4618      	mov	r0, r3
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd90      	pop	{r4, r7, pc}

0800adca <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	60f8      	str	r0, [r7, #12]
 800add2:	60b9      	str	r1, [r7, #8]
 800add4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 f891 	bl	800af00 <_ZSt8_DestroyIPP14CommandHandlerEvT_S3_>
    }
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	607a      	str	r2, [r7, #4]
	if (__p)
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	68b9      	ldr	r1, [r7, #8]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 f88b 	bl	800af1a <_ZNSt16allocator_traitsISaIP14CommandHandlerEE10deallocateERS2_PS1_j>
      }
 800ae04:	bf00      	nop
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4618      	mov	r0, r3
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bc80      	pop	{r7}
 800ae1e:	4770      	bx	lr

0800ae20 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ae20:	b5b0      	push	{r4, r5, r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f000 f883 	bl	800af38 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800ae32:	4604      	mov	r4, r0
 800ae34:	68b8      	ldr	r0, [r7, #8]
 800ae36:	f000 f87f 	bl	800af38 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f87b 	bl	800af38 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800ae42:	4603      	mov	r3, r0
 800ae44:	461a      	mov	r2, r3
 800ae46:	4629      	mov	r1, r5
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f000 f883 	bl	800af54 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800ae52:	f107 0214 	add.w	r2, r7, #20
 800ae56:	f107 0310 	add.w	r3, r7, #16
 800ae5a:	4611      	mov	r1, r2
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7ff fd81 	bl	800a964 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ae62:	693b      	ldr	r3, [r7, #16]
    }
 800ae64:	4618      	mov	r0, r3
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bdb0      	pop	{r4, r5, r7, pc}

0800ae6c <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
 800ae76:	bf00      	nop
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bc80      	pop	{r7}
 800ae7e:	4770      	bx	lr

0800ae80 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 f880 	bl	800af90 <_ZNKSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800ae90:	4603      	mov	r3, r0
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 f870 	bl	800af78 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8max_sizeERKS2_>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800aeac:	2200      	movs	r2, #0
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f877 	bl	800afa4 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800aec8:	f107 030c 	add.w	r3, r7, #12
 800aecc:	6879      	ldr	r1, [r7, #4]
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 f886 	bl	800afe0 <_ZNSt13move_iteratorIPP14CommandHandlerEC1ES2_>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14CommandHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800aede:	b580      	push	{r7, lr}
 800aee0:	b084      	sub	sp, #16
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	60f8      	str	r0, [r7, #12]
 800aee6:	60b9      	str	r1, [r7, #8]
 800aee8:	607a      	str	r2, [r7, #4]
 800aeea:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	68b9      	ldr	r1, [r7, #8]
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 f883 	bl	800affc <_ZSt18uninitialized_copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>
 800aef6:	4603      	mov	r3, r0
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <_ZSt8_DestroyIPP14CommandHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f887 	bl	800b020 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14CommandHandlerEEvT_S5_>
    }
 800af12:	bf00      	nop
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <_ZNSt16allocator_traitsISaIP14CommandHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60f8      	str	r0, [r7, #12]
 800af22:	60b9      	str	r1, [r7, #8]
 800af24:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f000 f882 	bl	800b034 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE10deallocateEPS2_j>
 800af30:	bf00      	nop
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800af40:	1d3b      	adds	r3, r7, #4
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff fd1d 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800af48:	4603      	mov	r3, r0
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4618      	mov	r0, r3
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800af60:	2301      	movs	r3, #1
 800af62:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 f870 	bl	800b04e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_>
 800af6e:	4603      	mov	r3, r0
    }
 800af70:	4618      	mov	r0, r3
 800af72:	3718      	adds	r7, #24
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f881 	bl	800b088 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>
 800af86:	4603      	mov	r3, r0
 800af88:	4618      	mov	r0, r3
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <_ZNKSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4618      	mov	r0, r3
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bc80      	pop	{r7}
 800afa2:	4770      	bx	lr

0800afa4 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f000 f869 	bl	800b088 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>
 800afb6:	4602      	mov	r2, r0
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	4293      	cmp	r3, r2
 800afbc:	bf8c      	ite	hi
 800afbe:	2301      	movhi	r3, #1
 800afc0:	2300      	movls	r3, #0
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800afc8:	f00a fa32 	bl	8015430 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f00a fa0f 	bl	80153f4 <_Znwj>
 800afd6:	4603      	mov	r3, r0
      }
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <_ZNSt13move_iteratorIPP14CommandHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	683a      	ldr	r2, [r7, #0]
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4618      	mov	r0, r3
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bc80      	pop	{r7}
 800affa:	4770      	bx	lr

0800affc <_ZSt18uninitialized_copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b008:	2301      	movs	r3, #1
 800b00a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	68b9      	ldr	r1, [r7, #8]
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f000 f844 	bl	800b09e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14CommandHandlerES5_EET0_T_S8_S7_>
 800b016:	4603      	mov	r3, r0
    }
 800b018:	4618      	mov	r0, r3
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14CommandHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
 800b02a:	bf00      	nop
 800b02c:	370c      	adds	r7, #12
 800b02e:	46bd      	mov	sp, r7
 800b030:	bc80      	pop	{r7}
 800b032:	4770      	bx	lr

0800b034 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800b040:	68b8      	ldr	r0, [r7, #8]
 800b042:	f00a f9f1 	bl	8015428 <_ZdlPv>
      }
 800b046:	bf00      	nop
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800b04e:	b580      	push	{r7, lr}
 800b050:	b086      	sub	sp, #24
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	109b      	asrs	r3, r3, #2
 800b062:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d006      	beq.n	800b078 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	461a      	mov	r2, r3
 800b070:	68f9      	ldr	r1, [r7, #12]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f00c feae 	bl	8017dd4 <memmove>
	  return __result + _Num;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	4413      	add	r3, r2
	}
 800b080:	4618      	mov	r0, r3
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800b090:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b094:	4618      	mov	r0, r3
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	bc80      	pop	{r7}
 800b09c:	4770      	bx	lr

0800b09e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14CommandHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	60f8      	str	r0, [r7, #12]
 800b0a6:	60b9      	str	r1, [r7, #8]
 800b0a8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	68b9      	ldr	r1, [r7, #8]
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f000 f805 	bl	800b0be <_ZSt4copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <_ZSt4copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 800b0be:	b590      	push	{r4, r7, lr}
 800b0c0:	b085      	sub	sp, #20
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	60f8      	str	r0, [r7, #12]
 800b0c6:	60b9      	str	r1, [r7, #8]
 800b0c8:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f000 f80f 	bl	800b0ee <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	68b8      	ldr	r0, [r7, #8]
 800b0d4:	f000 f80b 	bl	800b0ee <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800b0d8:	4603      	mov	r3, r0
	       __result));
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f000 f816 	bl	800b110 <_ZSt14__copy_move_a2ILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800b0e4:	4603      	mov	r3, r0
    }
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3714      	adds	r7, #20
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd90      	pop	{r4, r7, pc}

0800b0ee <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b082      	sub	sp, #8
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 800b0f6:	1d3b      	adds	r3, r7, #4
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 f825 	bl	800b148 <_ZNKSt13move_iteratorIPP14CommandHandlerE4baseEv>
 800b0fe:	4603      	mov	r3, r0
 800b100:	4618      	mov	r0, r3
 800b102:	f000 f82c 	bl	800b15e <_ZSt12__miter_baseIPP14CommandHandlerET_S3_>
 800b106:	4603      	mov	r3, r0
 800b108:	4618      	mov	r0, r3
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <_ZSt14__copy_move_a2ILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800b110:	b5b0      	push	{r4, r5, r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f000 f828 	bl	800b172 <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800b122:	4604      	mov	r4, r0
 800b124:	68b8      	ldr	r0, [r7, #8]
 800b126:	f000 f824 	bl	800b172 <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800b12a:	4605      	mov	r5, r0
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 f820 	bl	800b172 <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800b132:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800b134:	461a      	mov	r2, r3
 800b136:	4629      	mov	r1, r5
 800b138:	4620      	mov	r0, r4
 800b13a:	f7ff ff0b 	bl	800af54 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800b13e:	4603      	mov	r3, r0
    }
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bdb0      	pop	{r4, r5, r7, pc}

0800b148 <_ZNKSt13move_iteratorIPP14CommandHandlerE4baseEv>:
      base() const
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	bc80      	pop	{r7}
 800b15c:	4770      	bx	lr

0800b15e <_ZSt12__miter_baseIPP14CommandHandlerET_S3_>:
    __miter_base(_Iterator __it)
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4618      	mov	r0, r3
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bc80      	pop	{r7}
 800b170:	4770      	bx	lr

0800b172 <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>:
    __niter_base(_Iterator __it)
 800b172:	b480      	push	{r7}
 800b174:	b083      	sub	sp, #12
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4618      	mov	r0, r3
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	bc80      	pop	{r7}
 800b184:	4770      	bx	lr
	...

0800b188 <_ZN12EncoderLocalC1Ev>:
 *      Author: Yannick
 */

#include "EncoderLocal.h"

EncoderLocal::EncoderLocal() {
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4618      	mov	r0, r3
 800b194:	f000 f910 	bl	800b3b8 <_ZN11ExtiHandlerC1Ev>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3304      	adds	r3, #4
 800b19c:	4618      	mov	r0, r3
 800b19e:	f006 f9b5 	bl	801150c <_ZN12TimerHandlerC1Ev>
 800b1a2:	4a13      	ldr	r2, [pc, #76]	; (800b1f0 <_ZN12EncoderLocalC1Ev+0x68>)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	601a      	str	r2, [r3, #0]
 800b1a8:	4a12      	ldr	r2, [pc, #72]	; (800b1f4 <_ZN12EncoderLocalC1Ev+0x6c>)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	605a      	str	r2, [r3, #4]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b1b4:	609a      	str	r2, [r3, #8]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	this->htim = &TIM_ENC;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a0d      	ldr	r2, [pc, #52]	; (800b1f8 <_ZN12EncoderLocalC1Ev+0x70>)
 800b1c2:	649a      	str	r2, [r3, #72]	; 0x48
	setPos(0);
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f867 	bl	800b29a <_ZN12EncoderLocal6setPosEl>

	this->htim->Instance->CR1 = 1;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fa fd25 	bl	8005c2a <HAL_TIM_Base_Start_IT>
	offset = 0;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	60da      	str	r2, [r3, #12]

}
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	08018d78 	.word	0x08018d78
 800b1f4:	08018d90 	.word	0x08018d90
 800b1f8:	20001554 	.word	0x20001554

0800b1fc <_ZN12EncoderLocalD1Ev>:

EncoderLocal::~EncoderLocal() {
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	4a0c      	ldr	r2, [pc, #48]	; (800b238 <_ZN12EncoderLocalD1Ev+0x3c>)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	4a0c      	ldr	r2, [pc, #48]	; (800b23c <_ZN12EncoderLocalD1Ev+0x40>)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	605a      	str	r2, [r3, #4]
	this->htim->Instance->CR1 = 0;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]
EncoderLocal::~EncoderLocal() {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3304      	adds	r3, #4
 800b21e:	4618      	mov	r0, r3
 800b220:	f006 f98c 	bl	801153c <_ZN12TimerHandlerD1Ev>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4618      	mov	r0, r3
 800b228:	f000 f8de 	bl	800b3e8 <_ZN11ExtiHandlerD1Ev>
}
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4618      	mov	r0, r3
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	08018d78 	.word	0x08018d78
 800b23c:	08018d90 	.word	0x08018d90

0800b240 <_ZThn4_N12EncoderLocalD1Ev>:

class EncoderLocal: public ExtiHandler, TimerHandler {
public:

	EncoderLocal();
	virtual ~EncoderLocal();
 800b240:	f1a0 0004 	sub.w	r0, r0, #4
 800b244:	f7ff bfda 	b.w	800b1fc <_ZN12EncoderLocalD1Ev>

0800b248 <_ZN12EncoderLocalD0Ev>:
EncoderLocal::~EncoderLocal() {
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
}
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7ff ffd3 	bl	800b1fc <_ZN12EncoderLocalD1Ev>
 800b256:	2150      	movs	r1, #80	; 0x50
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f00a f8c9 	bl	80153f0 <_ZdlPvj>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <_ZThn4_N12EncoderLocalD0Ev>:
 800b268:	f1a0 0004 	sub.w	r0, r0, #4
 800b26c:	f7ff bfec 	b.w	800b248 <_ZN12EncoderLocalD0Ev>

0800b270 <_ZN12EncoderLocal6getPosEv>:


int32_t EncoderLocal::getPos(){
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
	int32_t timpos = htim->Instance->CNT - 0x7fff;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b280:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800b284:	3b7f      	subs	r3, #127	; 0x7f
 800b286:	60fb      	str	r3, [r7, #12]
	return timpos + offset;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68da      	ldr	r2, [r3, #12]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4413      	add	r3, r2
}
 800b290:	4618      	mov	r0, r3
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	bc80      	pop	{r7}
 800b298:	4770      	bx	lr

0800b29a <_ZN12EncoderLocal6setPosEl>:
void EncoderLocal::setPos(int32_t pos){
 800b29a:	b480      	push	{r7}
 800b29c:	b083      	sub	sp, #12
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
	this->currentPosition = pos;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	61da      	str	r2, [r3, #28]
	htim->Instance->CNT = pos+0x7fff;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800b2b0:	337f      	adds	r3, #127	; 0x7f
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b2b6:	6812      	ldr	r2, [r2, #0]
 800b2b8:	6253      	str	r3, [r2, #36]	; 0x24
}
 800b2ba:	bf00      	nop
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bc80      	pop	{r7}
 800b2c2:	4770      	bx	lr

0800b2c4 <_ZN12EncoderLocal4extiEt>:

void EncoderLocal::setPeriod(uint32_t period){
	this->htim->Instance->ARR = period-1;
}

void EncoderLocal::exti(uint16_t GPIO_Pin){
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	807b      	strh	r3, [r7, #2]
	if(GPIO_Pin == ENCODER_Z_Pin){
		// Encoder Z pin activated
	}
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bc80      	pop	{r7}
 800b2d8:	4770      	bx	lr

0800b2da <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>:

void EncoderLocal::timerElapsed(TIM_HandleTypeDef* htim){
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b082      	sub	sp, #8
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	6039      	str	r1, [r7, #0]
	if(htim == this->htim){
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d102      	bne.n	800b2f4 <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef+0x1a>
		overflowCallback();
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f808 	bl	800b304 <_ZN12EncoderLocal16overflowCallbackEv>
	}
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <_ZThn4_N12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>:
	uint32_t getPosCpr();
	void setPos(int32_t pos);
	void setPeriod(uint32_t period);
	void overflowCallback();
	void exti(uint16_t GPIO_Pin);
	void timerElapsed(TIM_HandleTypeDef* htim);
 800b2fc:	f1a0 0004 	sub.w	r0, r0, #4
 800b300:	f7ff bfeb 	b.w	800b2da <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>

0800b304 <_ZN12EncoderLocal16overflowCallbackEv>:

void EncoderLocal::overflowCallback(){
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
	if(first)					//TODO: figure it out
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b312:	2b00      	cmp	r3, #0
 800b314:	d004      	beq.n	800b320 <_ZN12EncoderLocal16overflowCallbackEv+0x1c>
	{
		first = false;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		return;
 800b31e:	e024      	b.n	800b36a <_ZN12EncoderLocal16overflowCallbackEv+0x66>
	}
	if(htim->Instance->CNT > this->htim->Instance->ARR/2){
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	085b      	lsrs	r3, r3, #1
 800b332:	429a      	cmp	r2, r3
 800b334:	bf8c      	ite	hi
 800b336:	2301      	movhi	r3, #1
 800b338:	2300      	movls	r3, #0
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00a      	beq.n	800b356 <_ZN12EncoderLocal16overflowCallbackEv+0x52>
		offset -= htim->Instance->ARR+1;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b348:	3301      	adds	r3, #1
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	68d2      	ldr	r2, [r2, #12]
 800b34e:	1ad2      	subs	r2, r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60da      	str	r2, [r3, #12]
 800b354:	e009      	b.n	800b36a <_ZN12EncoderLocal16overflowCallbackEv+0x66>
	}else{
		offset += htim->Instance->ARR+1;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35e:	1c5a      	adds	r2, r3, #1
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	441a      	add	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60da      	str	r2, [r3, #12]
	}
}
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bc80      	pop	{r7}
 800b370:	4770      	bx	lr

0800b372 <_ZN12EncoderLocal6getPprEv>:

uint32_t EncoderLocal::getPpr(){
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
	return this->ppr;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	689b      	ldr	r3, [r3, #8]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	bc80      	pop	{r7}
 800b386:	4770      	bx	lr

0800b388 <_ZN12EncoderLocal9getPosCprEv>:

uint32_t EncoderLocal::getPosCpr(){
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
	return this->ppr;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	689b      	ldr	r3, [r3, #8]
}
 800b394:	4618      	mov	r0, r3
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	bc80      	pop	{r7}
 800b39c:	4770      	bx	lr

0800b39e <_ZN12EncoderLocal6setPprEm>:

void EncoderLocal::setPpr(uint32_t ppr){
 800b39e:	b480      	push	{r7}
 800b3a0:	b083      	sub	sp, #12
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	6039      	str	r1, [r7, #0]
	this->ppr = ppr;
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	609a      	str	r2, [r3, #8]
}
 800b3ae:	bf00      	nop
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bc80      	pop	{r7}
 800b3b6:	4770      	bx	lr

0800b3b8 <_ZN11ExtiHandlerC1Ev>:

#include "ExtiHandler.h"
#include "global_callbacks.h"
#include "vector"

ExtiHandler::ExtiHandler() {
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	4a07      	ldr	r2, [pc, #28]	; (800b3e0 <_ZN11ExtiHandlerC1Ev+0x28>)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	601a      	str	r2, [r3, #0]
	extern std::vector<ExtiHandler*> extiHandlers;
	extiHandlers.push_back(this);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	60fb      	str	r3, [r7, #12]
 800b3ca:	f107 030c 	add.w	r3, r7, #12
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4804      	ldr	r0, [pc, #16]	; (800b3e4 <_ZN11ExtiHandlerC1Ev+0x2c>)
 800b3d2:	f000 f87a 	bl	800b4ca <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE9push_backEOS1_>
}
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	08018da4 	.word	0x08018da4
 800b3e4:	20000b78 	.word	0x20000b78

0800b3e8 <_ZN11ExtiHandlerD1Ev>:

ExtiHandler::~ExtiHandler() {
 800b3e8:	b590      	push	{r4, r7, lr}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	4a21      	ldr	r2, [pc, #132]	; (800b478 <_ZN11ExtiHandlerD1Ev+0x90>)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	601a      	str	r2, [r3, #0]
	extern std::vector<ExtiHandler*> extiHandlers;
	for (uint8_t i = 0; i < extiHandlers.size(); i++){
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	75fb      	strb	r3, [r7, #23]
 800b3fa:	7dfc      	ldrb	r4, [r7, #23]
 800b3fc:	481f      	ldr	r0, [pc, #124]	; (800b47c <_ZN11ExtiHandlerD1Ev+0x94>)
 800b3fe:	f000 f875 	bl	800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800b402:	4603      	mov	r3, r0
 800b404:	429c      	cmp	r4, r3
 800b406:	bf34      	ite	cc
 800b408:	2301      	movcc	r3, #1
 800b40a:	2300      	movcs	r3, #0
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d02d      	beq.n	800b46e <_ZN11ExtiHandlerD1Ev+0x86>
		if(extiHandlers[i] == this){
 800b412:	7dfb      	ldrb	r3, [r7, #23]
 800b414:	4619      	mov	r1, r3
 800b416:	4819      	ldr	r0, [pc, #100]	; (800b47c <_ZN11ExtiHandlerD1Ev+0x94>)
 800b418:	f000 f878 	bl	800b50c <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEixEj>
 800b41c:	4603      	mov	r3, r0
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	429a      	cmp	r2, r3
 800b424:	bf0c      	ite	eq
 800b426:	2301      	moveq	r3, #1
 800b428:	2300      	movne	r3, #0
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01a      	beq.n	800b466 <_ZN11ExtiHandlerD1Ev+0x7e>
			extiHandlers.erase(extiHandlers.begin()+i);
 800b430:	4812      	ldr	r0, [pc, #72]	; (800b47c <_ZN11ExtiHandlerD1Ev+0x94>)
 800b432:	f000 f87a 	bl	800b52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800b436:	4603      	mov	r3, r0
 800b438:	613b      	str	r3, [r7, #16]
 800b43a:	7dfa      	ldrb	r2, [r7, #23]
 800b43c:	f107 0310 	add.w	r3, r7, #16
 800b440:	4611      	mov	r1, r2
 800b442:	4618      	mov	r0, r3
 800b444:	f000 f881 	bl	800b54a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b448:	4603      	mov	r3, r0
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	f107 020c 	add.w	r2, r7, #12
 800b450:	f107 0308 	add.w	r3, r7, #8
 800b454:	4611      	mov	r1, r2
 800b456:	4618      	mov	r0, r3
 800b458:	f000 f88f 	bl	800b57a <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800b45c:	68b9      	ldr	r1, [r7, #8]
 800b45e:	4807      	ldr	r0, [pc, #28]	; (800b47c <_ZN11ExtiHandlerD1Ev+0x94>)
 800b460:	f000 f89c 	bl	800b59c <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 800b464:	e003      	b.n	800b46e <_ZN11ExtiHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < extiHandlers.size(); i++){
 800b466:	7dfb      	ldrb	r3, [r7, #23]
 800b468:	3301      	adds	r3, #1
 800b46a:	75fb      	strb	r3, [r7, #23]
 800b46c:	e7c5      	b.n	800b3fa <_ZN11ExtiHandlerD1Ev+0x12>
		}
	}
}
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4618      	mov	r0, r3
 800b472:	371c      	adds	r7, #28
 800b474:	46bd      	mov	sp, r7
 800b476:	bd90      	pop	{r4, r7, pc}
 800b478:	08018da4 	.word	0x08018da4
 800b47c:	20000b78 	.word	0x20000b78

0800b480 <_ZN11ExtiHandlerD0Ev>:
ExtiHandler::~ExtiHandler() {
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
}
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7ff ffad 	bl	800b3e8 <_ZN11ExtiHandlerD1Ev>
 800b48e:	2104      	movs	r1, #4
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f009 ffad 	bl	80153f0 <_ZdlPvj>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <_ZN11ExtiHandler4extiEt>:

void ExtiHandler::exti(uint16_t GPIO_Pin){
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	807b      	strh	r3, [r7, #2]

}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bc80      	pop	{r7}
 800b4b4:	4770      	bx	lr

0800b4b6 <_ZSt4moveIRP11ExtiHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b4b6:	b480      	push	{r7}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bc80      	pop	{r7}
 800b4c8:	4770      	bx	lr

0800b4ca <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b082      	sub	sp, #8
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800b4d4:	6838      	ldr	r0, [r7, #0]
 800b4d6:	f7ff ffee 	bl	800b4b6 <_ZSt4moveIRP11ExtiHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f88d 	bl	800b5fe <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 800b4e4:	bf00      	nop
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	109b      	asrs	r3, r3, #2
 800b502:	4618      	mov	r0, r3
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	bc80      	pop	{r7}
 800b50a:	4770      	bx	lr

0800b50c <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4413      	add	r3, r2
      }
 800b520:	4618      	mov	r0, r3
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	bc80      	pop	{r7}
 800b528:	4770      	bx	lr

0800b52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	f107 030c 	add.w	r3, r7, #12
 800b538:	4611      	mov	r1, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 f88d 	bl	800b65a <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b084      	sub	sp, #16
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
 800b552:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
 800b560:	f107 020c 	add.w	r2, r7, #12
 800b564:	f107 0308 	add.w	r3, r7, #8
 800b568:	4611      	mov	r1, r2
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 f875 	bl	800b65a <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800b584:	6838      	ldr	r0, [r7, #0]
 800b586:	f000 f877 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b58a:	4603      	mov	r3, r0
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	601a      	str	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4618      	mov	r0, r3
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7ff ffbf 	bl	800b52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	60bb      	str	r3, [r7, #8]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f86b 	bl	800b68c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE6cbeginEv>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	60fb      	str	r3, [r7, #12]
 800b5ba:	f107 020c 	add.w	r2, r7, #12
 800b5be:	463b      	mov	r3, r7
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 f876 	bl	800b6b4 <_ZN9__gnu_cxxmiIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	f107 0308 	add.w	r3, r7, #8
 800b5ce:	4611      	mov	r1, r2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7ff ffba 	bl	800b54a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f880 	bl	800b6e0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bc80      	pop	{r7}
 800b5fc:	4770      	bx	lr

0800b5fe <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800b5fe:	b5b0      	push	{r4, r5, r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	429a      	cmp	r2, r3
 800b612:	d011      	beq.n	800b638 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b614:	687c      	ldr	r4, [r7, #4]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	685d      	ldr	r5, [r3, #4]
 800b61a:	6838      	ldr	r0, [r7, #0]
 800b61c:	f7ff ffe5 	bl	800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b620:	4603      	mov	r3, r0
 800b622:	461a      	mov	r2, r3
 800b624:	4629      	mov	r1, r5
 800b626:	4620      	mov	r0, r4
 800b628:	f000 f896 	bl	800b758 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	1d1a      	adds	r2, r3, #4
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	605a      	str	r2, [r3, #4]
      }
 800b636:	e00c      	b.n	800b652 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f8a0 	bl	800b77e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800b63e:	4604      	mov	r4, r0
 800b640:	6838      	ldr	r0, [r7, #0]
 800b642:	f7ff ffd2 	bl	800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b646:	4603      	mov	r3, r0
 800b648:	461a      	mov	r2, r3
 800b64a:	4621      	mov	r1, r4
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f8a7 	bl	800b7a0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800b652:	bf00      	nop
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bdb0      	pop	{r4, r5, r7, pc}

0800b65a <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b65a:	b480      	push	{r7}
 800b65c:	b083      	sub	sp, #12
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	601a      	str	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4618      	mov	r0, r3
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	bc80      	pop	{r7}
 800b676:	4770      	bx	lr

0800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4618      	mov	r0, r3
 800b684:	370c      	adds	r7, #12
 800b686:	46bd      	mov	sp, r7
 800b688:	bc80      	pop	{r7}
 800b68a:	4770      	bx	lr

0800b68c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	60fb      	str	r3, [r7, #12]
 800b69a:	f107 020c 	add.w	r2, r7, #12
 800b69e:	f107 0308 	add.w	r3, r7, #8
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 f907 	bl	800b8b8 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <_ZN9__gnu_cxxmiIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b6b4:	b590      	push	{r4, r7, lr}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f909 	bl	800b8d6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	461c      	mov	r4, r3
 800b6ca:	6838      	ldr	r0, [r7, #0]
 800b6cc:	f000 f903 	bl	800b8d6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	1ae3      	subs	r3, r4, r3
 800b6d6:	109b      	asrs	r3, r3, #2
 800b6d8:	4618      	mov	r0, r3
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd90      	pop	{r4, r7, pc}

0800b6e0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 800b6e0:	b590      	push	{r4, r7, lr}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800b6ea:	463b      	mov	r3, r7
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7ff ff2b 	bl	800b54a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	60bb      	str	r3, [r7, #8]
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f840 	bl	800b77e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800b6fe:	4603      	mov	r3, r0
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	f107 020c 	add.w	r2, r7, #12
 800b706:	f107 0308 	add.w	r3, r7, #8
 800b70a:	4611      	mov	r1, r2
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 f8ec 	bl	800b8ea <_ZN9__gnu_cxxneIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00e      	beq.n	800b736 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 800b718:	463b      	mov	r3, r7
 800b71a:	2101      	movs	r1, #1
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff ff14 	bl	800b54a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b722:	4604      	mov	r4, r0
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f82a 	bl	800b77e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800b72a:	4603      	mov	r3, r0
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	4619      	mov	r1, r3
 800b730:	4620      	mov	r0, r4
 800b732:	f000 f8f2 	bl	800b91a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	1f1a      	subs	r2, r3, #4
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	4619      	mov	r1, r3
 800b748:	4610      	mov	r0, r2
 800b74a:	f000 f8fe 	bl	800b94a <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 800b74e:	683b      	ldr	r3, [r7, #0]
    }
 800b750:	4618      	mov	r0, r3
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	bd90      	pop	{r4, r7, pc}

0800b758 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7ff ff40 	bl	800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b76a:	4603      	mov	r3, r0
 800b76c:	461a      	mov	r2, r3
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f000 f8f7 	bl	800b964 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 800b776:	bf00      	nop
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	1d1a      	adds	r2, r3, #4
 800b78a:	f107 030c 	add.w	r3, r7, #12
 800b78e:	4611      	mov	r1, r2
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff ff62 	bl	800b65a <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800b7a0:	b5b0      	push	{r4, r5, r7, lr}
 800b7a2:	b08a      	sub	sp, #40	; 0x28
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800b7ac:	4a41      	ldr	r2, [pc, #260]	; (800b8b4 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f000 f8ef 	bl	800b994 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc>
 800b7b6:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f7ff feb6 	bl	800b52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	617b      	str	r3, [r7, #20]
 800b7c2:	f107 0214 	add.w	r2, r7, #20
 800b7c6:	f107 0308 	add.w	r3, r7, #8
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f000 f929 	bl	800ba24 <_ZN9__gnu_cxxmiIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 f938 	bl	800ba50 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj>
 800b7e0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800b7e6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b7e8:	6a3b      	ldr	r3, [r7, #32]
 800b7ea:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800b7ec:	69fa      	ldr	r2, [r7, #28]
 800b7ee:	18d5      	adds	r5, r2, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7ff fefa 	bl	800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f7ff ffab 	bl	800b758 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800b802:	2300      	movs	r3, #0
 800b804:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681c      	ldr	r4, [r3, #0]
 800b80a:	f107 0308 	add.w	r3, r7, #8
 800b80e:	4618      	mov	r0, r3
 800b810:	f7ff ff32 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b814:	4603      	mov	r3, r0
 800b816:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 f92c 	bl	800ba78 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800b820:	4603      	mov	r3, r0
	  __new_finish
 800b822:	69fa      	ldr	r2, [r7, #28]
 800b824:	4629      	mov	r1, r5
 800b826:	4620      	mov	r0, r4
 800b828:	f000 f930 	bl	800ba8c <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800b82c:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	3304      	adds	r3, #4
 800b832:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 800b834:	f107 0308 	add.w	r3, r7, #8
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff ff1d 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b83e:	4603      	mov	r3, r0
 800b840:	681c      	ldr	r4, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 f915 	bl	800ba78 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800b84e:	4603      	mov	r3, r0
	  __new_finish
 800b850:	69ba      	ldr	r2, [r7, #24]
 800b852:	4629      	mov	r1, r5
 800b854:	4620      	mov	r0, r4
 800b856:	f000 f919 	bl	800ba8c <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800b85a:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681c      	ldr	r4, [r3, #0]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	4618      	mov	r0, r3
 800b868:	f000 f906 	bl	800ba78 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800b86c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b86e:	461a      	mov	r2, r3
 800b870:	4629      	mov	r1, r5
 800b872:	4620      	mov	r0, r4
 800b874:	f000 f923 	bl	800babe <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800b882:	461a      	mov	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 800b88c:	461a      	mov	r2, r3
 800b88e:	f000 f924 	bl	800bada <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	69fa      	ldr	r2, [r7, #28]
 800b896:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	69fa      	ldr	r2, [r7, #28]
 800b8a4:	441a      	add	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	609a      	str	r2, [r3, #8]
    }
 800b8aa:	bf00      	nop
 800b8ac:	3728      	adds	r7, #40	; 0x28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	080188f8 	.word	0x080188f8

0800b8b8 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bc80      	pop	{r7}
 800b8d4:	4770      	bx	lr

0800b8d6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b8d6:	b480      	push	{r7}
 800b8d8:	b083      	sub	sp, #12
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bc80      	pop	{r7}
 800b8e8:	4770      	bx	lr

0800b8ea <_ZN9__gnu_cxxneIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b8ea:	b590      	push	{r4, r7, lr}
 800b8ec:	b083      	sub	sp, #12
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff febf 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	681c      	ldr	r4, [r3, #0]
 800b8fe:	6838      	ldr	r0, [r7, #0]
 800b900:	f7ff feba 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b904:	4603      	mov	r3, r0
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	429c      	cmp	r4, r3
 800b90a:	bf14      	ite	ne
 800b90c:	2301      	movne	r3, #1
 800b90e:	2300      	moveq	r3, #0
 800b910:	b2db      	uxtb	r3, r3
 800b912:	4618      	mov	r0, r3
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	bd90      	pop	{r4, r7, pc}

0800b91a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 800b91a:	b590      	push	{r4, r7, lr}
 800b91c:	b085      	sub	sp, #20
 800b91e:	af00      	add	r7, sp, #0
 800b920:	60f8      	str	r0, [r7, #12]
 800b922:	60b9      	str	r1, [r7, #8]
 800b924:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f000 f8ea 	bl	800bb00 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800b92c:	4604      	mov	r4, r0
 800b92e:	68b8      	ldr	r0, [r7, #8]
 800b930:	f000 f8e6 	bl	800bb00 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800b934:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	4619      	mov	r1, r3
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 f8ea 	bl	800bb14 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 800b940:	4603      	mov	r3, r0
    }
 800b942:	4618      	mov	r0, r3
 800b944:	3714      	adds	r7, #20
 800b946:	46bd      	mov	sp, r7
 800b948:	bd90      	pop	{r4, r7, pc}

0800b94a <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f902 	bl	800bb60 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE7destroyIS2_EEvPT_>
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800b964:	b590      	push	{r4, r7, lr}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff fe3a 	bl	800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b976:	4603      	mov	r3, r0
 800b978:	681c      	ldr	r4, [r3, #0]
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	4619      	mov	r1, r3
 800b97e:	2004      	movs	r0, #4
 800b980:	f7fc fb9e 	bl	80080c0 <_ZnwjPv>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d000      	beq.n	800b98c <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 800b98a:	601c      	str	r4, [r3, #0]
 800b98c:	bf00      	nop
 800b98e:	3714      	adds	r7, #20
 800b990:	46bd      	mov	sp, r7
 800b992:	bd90      	pop	{r4, r7, pc}

0800b994 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800b994:	b590      	push	{r4, r7, lr}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 f8e7 	bl	800bb74 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f7ff fd9f 	bl	800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	1ae2      	subs	r2, r4, r3
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	bf34      	ite	cc
 800b9b8:	2301      	movcc	r3, #1
 800b9ba:	2300      	movcs	r3, #0
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d003      	beq.n	800b9ca <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f009 fd3c 	bl	8015442 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f7ff fd8e 	bl	800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f7ff fd8a 	bl	800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	613b      	str	r3, [r7, #16]
 800b9dc:	f107 0208 	add.w	r2, r7, #8
 800b9e0:	f107 0310 	add.w	r3, r7, #16
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fc ff65 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4423      	add	r3, r4
 800b9f2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f7ff fd79 	bl	800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d306      	bcc.n	800ba10 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f000 f8b6 	bl	800bb74 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d904      	bls.n	800ba1a <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 f8af 	bl	800bb74 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800ba16:	4603      	mov	r3, r0
 800ba18:	e000      	b.n	800ba1c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 800ba1a:	697b      	ldr	r3, [r7, #20]
      }
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	371c      	adds	r7, #28
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd90      	pop	{r4, r7, pc}

0800ba24 <_ZN9__gnu_cxxmiIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ba24:	b590      	push	{r4, r7, lr}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7ff fe22 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ba34:	4603      	mov	r3, r0
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	461c      	mov	r4, r3
 800ba3a:	6838      	ldr	r0, [r7, #0]
 800ba3c:	f7ff fe1c 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ba40:	4603      	mov	r3, r0
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	1ae3      	subs	r3, r4, r3
 800ba46:	109b      	asrs	r3, r3, #2
 800ba48:	4618      	mov	r0, r3
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd90      	pop	{r4, r7, pc}

0800ba50 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d006      	beq.n	800ba6e <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj+0x1e>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 f896 	bl	800bb96 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8allocateERS2_j>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	e000      	b.n	800ba70 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj+0x20>
 800ba6e:	2300      	movs	r3, #0
      }
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4618      	mov	r0, r3
 800ba84:	370c      	adds	r7, #12
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bc80      	pop	{r7}
 800ba8a:	4770      	bx	lr

0800ba8c <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800ba8c:	b590      	push	{r4, r7, lr}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
 800ba98:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f000 f88a 	bl	800bbb4 <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>
 800baa0:	4604      	mov	r4, r0
 800baa2:	68b8      	ldr	r0, [r7, #8]
 800baa4:	f000 f886 	bl	800bbb4 <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>
 800baa8:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 f88f 	bl	800bbd2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP11ExtiHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800bab4:	4603      	mov	r3, r0
    }
 800bab6:	4618      	mov	r0, r3
 800bab8:	3714      	adds	r7, #20
 800baba:	46bd      	mov	sp, r7
 800babc:	bd90      	pop	{r4, r7, pc}

0800babe <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	60f8      	str	r0, [r7, #12]
 800bac6:	60b9      	str	r1, [r7, #8]
 800bac8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800baca:	68b9      	ldr	r1, [r7, #8]
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f000 f891 	bl	800bbf4 <_ZSt8_DestroyIPP11ExtiHandlerEvT_S3_>
    }
 800bad2:	bf00      	nop
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	607a      	str	r2, [r7, #4]
	if (__p)
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	68b9      	ldr	r1, [r7, #8]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 f88b 	bl	800bc0e <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE10deallocateERS2_PS1_j>
      }
 800baf8:	bf00      	nop
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
    { return __it; }
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bc80      	pop	{r7}
 800bb12:	4770      	bx	lr

0800bb14 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800bb14:	b5b0      	push	{r4, r5, r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f000 f883 	bl	800bc2c <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800bb26:	4604      	mov	r4, r0
 800bb28:	68b8      	ldr	r0, [r7, #8]
 800bb2a:	f000 f87f 	bl	800bc2c <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800bb2e:	4605      	mov	r5, r0
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f87b 	bl	800bc2c <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800bb36:	4603      	mov	r3, r0
 800bb38:	461a      	mov	r2, r3
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f000 f883 	bl	800bc48 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800bb42:	4603      	mov	r3, r0
 800bb44:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800bb46:	f107 0214 	add.w	r2, r7, #20
 800bb4a:	f107 0310 	add.w	r3, r7, #16
 800bb4e:	4611      	mov	r1, r2
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff fd82 	bl	800b65a <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bb56:	693b      	ldr	r3, [r7, #16]
    }
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3718      	adds	r7, #24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bdb0      	pop	{r4, r5, r7, pc}

0800bb60 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
 800bb6a:	bf00      	nop
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bc80      	pop	{r7}
 800bb72:	4770      	bx	lr

0800bb74 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 f880 	bl	800bc84 <_ZNKSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800bb84:	4603      	mov	r3, r0
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 f870 	bl	800bc6c <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8max_sizeERKS2_>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b082      	sub	sp, #8
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800bba0:	2200      	movs	r2, #0
 800bba2:	6839      	ldr	r1, [r7, #0]
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f877 	bl	800bc98 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	4618      	mov	r0, r3
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800bbbc:	f107 030c 	add.w	r3, r7, #12
 800bbc0:	6879      	ldr	r1, [r7, #4]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 f886 	bl	800bcd4 <_ZNSt13move_iteratorIPP11ExtiHandlerEC1ES2_>
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP11ExtiHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	607a      	str	r2, [r7, #4]
 800bbde:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	68b9      	ldr	r1, [r7, #8]
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 f883 	bl	800bcf0 <_ZSt18uninitialized_copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>
 800bbea:	4603      	mov	r3, r0
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <_ZSt8_DestroyIPP11ExtiHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f887 	bl	800bd14 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ExtiHandlerEEvT_S5_>
    }
 800bc06:	bf00      	nop
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	60f8      	str	r0, [r7, #12]
 800bc16:	60b9      	str	r1, [r7, #8]
 800bc18:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	68b9      	ldr	r1, [r7, #8]
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f000 f882 	bl	800bd28 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE10deallocateEPS2_j>
 800bc24:	bf00      	nop
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800bc34:	1d3b      	adds	r3, r7, #4
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7ff fd1e 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800bc54:	2301      	movs	r3, #1
 800bc56:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	68b9      	ldr	r1, [r7, #8]
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f000 f870 	bl	800bd42 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_>
 800bc62:	4603      	mov	r3, r0
    }
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f881 	bl	800bd7c <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <_ZNKSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bc80      	pop	{r7}
 800bc96:	4770      	bx	lr

0800bc98 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f000 f869 	bl	800bd7c <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	bf8c      	ite	hi
 800bcb2:	2301      	movhi	r3, #1
 800bcb4:	2300      	movls	r3, #0
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bcbc:	f009 fbb8 	bl	8015430 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f009 fb95 	bl	80153f4 <_Znwj>
 800bcca:	4603      	mov	r3, r0
      }
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <_ZNSt13move_iteratorIPP11ExtiHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4618      	mov	r0, r3
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bc80      	pop	{r7}
 800bcee:	4770      	bx	lr

0800bcf0 <_ZSt18uninitialized_copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	68b9      	ldr	r1, [r7, #8]
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 f844 	bl	800bd92 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP11ExtiHandlerES5_EET0_T_S8_S7_>
 800bd0a:	4603      	mov	r3, r0
    }
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ExtiHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
 800bd1e:	bf00      	nop
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bc80      	pop	{r7}
 800bd26:	4770      	bx	lr

0800bd28 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800bd34:	68b8      	ldr	r0, [r7, #8]
 800bd36:	f009 fb77 	bl	8015428 <_ZdlPv>
      }
 800bd3a:	bf00      	nop
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b086      	sub	sp, #24
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	60f8      	str	r0, [r7, #12]
 800bd4a:	60b9      	str	r1, [r7, #8]
 800bd4c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	1ad3      	subs	r3, r2, r3
 800bd54:	109b      	asrs	r3, r3, #2
 800bd56:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d006      	beq.n	800bd6c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	461a      	mov	r2, r3
 800bd64:	68f9      	ldr	r1, [r7, #12]
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f00c f834 	bl	8017dd4 <memmove>
	  return __result + _Num;
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	4413      	add	r3, r2
	}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800bd84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bd88:	4618      	mov	r0, r3
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bc80      	pop	{r7}
 800bd90:	4770      	bx	lr

0800bd92 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP11ExtiHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	60b9      	str	r1, [r7, #8]
 800bd9c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	68b9      	ldr	r1, [r7, #8]
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f000 f805 	bl	800bdb2 <_ZSt4copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <_ZSt4copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 800bdb2:	b590      	push	{r4, r7, lr}
 800bdb4:	b085      	sub	sp, #20
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	60b9      	str	r1, [r7, #8]
 800bdbc:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 f80f 	bl	800bde2 <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	68b8      	ldr	r0, [r7, #8]
 800bdc8:	f000 f80b 	bl	800bde2 <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800bdcc:	4603      	mov	r3, r0
	       __result));
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f000 f816 	bl	800be04 <_ZSt14__copy_move_a2ILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800bdd8:	4603      	mov	r3, r0
    }
 800bdda:	4618      	mov	r0, r3
 800bddc:	3714      	adds	r7, #20
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd90      	pop	{r4, r7, pc}

0800bde2 <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b082      	sub	sp, #8
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 800bdea:	1d3b      	adds	r3, r7, #4
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 f825 	bl	800be3c <_ZNKSt13move_iteratorIPP11ExtiHandlerE4baseEv>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 f82c 	bl	800be52 <_ZSt12__miter_baseIPP11ExtiHandlerET_S3_>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <_ZSt14__copy_move_a2ILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800be04:	b5b0      	push	{r4, r5, r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f000 f828 	bl	800be66 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800be16:	4604      	mov	r4, r0
 800be18:	68b8      	ldr	r0, [r7, #8]
 800be1a:	f000 f824 	bl	800be66 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800be1e:	4605      	mov	r5, r0
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f820 	bl	800be66 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800be26:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800be28:	461a      	mov	r2, r3
 800be2a:	4629      	mov	r1, r5
 800be2c:	4620      	mov	r0, r4
 800be2e:	f7ff ff0b 	bl	800bc48 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800be32:	4603      	mov	r3, r0
    }
 800be34:	4618      	mov	r0, r3
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bdb0      	pop	{r4, r5, r7, pc}

0800be3c <_ZNKSt13move_iteratorIPP11ExtiHandlerE4baseEv>:
      base() const
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4618      	mov	r0, r3
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bc80      	pop	{r7}
 800be50:	4770      	bx	lr

0800be52 <_ZSt12__miter_baseIPP11ExtiHandlerET_S3_>:
    __miter_base(_Iterator __it)
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
    { return __it; }
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4618      	mov	r0, r3
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	bc80      	pop	{r7}
 800be64:	4770      	bx	lr

0800be66 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>:
    __niter_base(_Iterator __it)
 800be66:	b480      	push	{r7}
 800be68:	b083      	sub	sp, #12
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4618      	mov	r0, r3
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	bc80      	pop	{r7}
 800be78:	4770      	bx	lr

0800be7a <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800be7a:	b480      	push	{r7}
 800be7c:	b083      	sub	sp, #12
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	bfb8      	it	lt
 800be88:	425b      	neglt	r3, r3
 800be8a:	4618      	mov	r0, r3
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	bc80      	pop	{r7}
 800be92:	4770      	bx	lr

0800be94 <_ZN14FFBWheelConfig7isequalERS_>:
	uint8_t maxAcceleration = 10;
	uint8_t maxPositionChange = 15;
	uint16_t minForce = 20000;


	bool isequal(FFBWheelConfig& conf)
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
	{
		if(	check == conf.check &&
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	f040 809b 	bne.w	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			axes == conf.axes &&
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	785a      	ldrb	r2, [r3, #1]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	785b      	ldrb	r3, [r3, #1]
		if(	check == conf.check &&
 800beb4:	429a      	cmp	r2, r3
 800beb6:	f040 8094 	bne.w	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			I2CButtons == conf.I2CButtons &&
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	789a      	ldrb	r2, [r3, #2]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	789b      	ldrb	r3, [r3, #2]
			axes == conf.axes &&
 800bec2:	429a      	cmp	r2, r3
 800bec4:	f040 808d 	bne.w	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			nLocalButtons == conf.nLocalButtons &&
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	78da      	ldrb	r2, [r3, #3]
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	78db      	ldrb	r3, [r3, #3]
			I2CButtons == conf.I2CButtons &&
 800bed0:	429a      	cmp	r2, r3
 800bed2:	f040 8086 	bne.w	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			degreesOfRotation == conf.degreesOfRotation &&
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	889a      	ldrh	r2, [r3, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	889b      	ldrh	r3, [r3, #4]
			nLocalButtons == conf.nLocalButtons &&
 800bede:	429a      	cmp	r2, r3
 800bee0:	d17f      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			maxpower == conf.maxpower &&
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	88da      	ldrh	r2, [r3, #6]
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	88db      	ldrh	r3, [r3, #6]
			degreesOfRotation == conf.degreesOfRotation &&
 800beea:	429a      	cmp	r2, r3
 800beec:	d179      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			endstop_gain == conf.endstop_gain &&
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	7b1a      	ldrb	r2, [r3, #12]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	7b1b      	ldrb	r3, [r3, #12]
			maxpower == conf.maxpower &&
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d173      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			encoderPPR == conf.encoderPPR &&
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	891a      	ldrh	r2, [r3, #8]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	891b      	ldrh	r3, [r3, #8]
			endstop_gain == conf.endstop_gain &&
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d16d      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			maxAdcCount == conf.maxAdcCount &&
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	7a9a      	ldrb	r2, [r3, #10]
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	7a9b      	ldrb	r3, [r3, #10]
			encoderPPR == conf.encoderPPR &&
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d167      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			inverted == conf.inverted &&
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	7ada      	ldrb	r2, [r3, #11]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	7adb      	ldrb	r3, [r3, #11]
			maxAdcCount == conf.maxAdcCount &&
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d161      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			constantGain == conf.constantGain &&
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	7b5a      	ldrb	r2, [r3, #13]
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	7b5b      	ldrb	r3, [r3, #13]
			inverted == conf.inverted &&
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d15b      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			rampGain == conf.rampGain &&
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	7b9a      	ldrb	r2, [r3, #14]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	7b9b      	ldrb	r3, [r3, #14]
			constantGain == conf.constantGain &&
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d155      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			squareGain == conf.squareGain &&
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	7bda      	ldrb	r2, [r3, #15]
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	7bdb      	ldrb	r3, [r3, #15]
			rampGain == conf.rampGain &&
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d14f      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			sinGain == conf.sinGain &&
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	7c1a      	ldrb	r2, [r3, #16]
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	7c1b      	ldrb	r3, [r3, #16]
			squareGain == conf.squareGain &&
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d149      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			triangleGain == conf.triangleGain &&
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	7c5a      	ldrb	r2, [r3, #17]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	7c5b      	ldrb	r3, [r3, #17]
			sinGain == conf.sinGain &&
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d143      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			sawToothDownGain == conf.sawToothDownGain &&
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	7c9a      	ldrb	r2, [r3, #18]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	7c9b      	ldrb	r3, [r3, #18]
			triangleGain == conf.triangleGain &&
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d13d      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			sawToothUpGain == conf.sawToothUpGain &&
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	7cda      	ldrb	r2, [r3, #19]
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	7cdb      	ldrb	r3, [r3, #19]
			sawToothDownGain == conf.sawToothDownGain &&
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d137      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			springGain == conf.springGain &&
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	7d1a      	ldrb	r2, [r3, #20]
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	7d1b      	ldrb	r3, [r3, #20]
			sawToothUpGain == conf.sawToothUpGain &&
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d131      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			damperGain == conf.damperGain &&
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	7d5a      	ldrb	r2, [r3, #21]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	7d5b      	ldrb	r3, [r3, #21]
			springGain == conf.springGain &&
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d12b      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			inertiaGain == conf.inertiaGain &&
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	7d9a      	ldrb	r2, [r3, #22]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	7d9b      	ldrb	r3, [r3, #22]
			damperGain == conf.damperGain &&
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d125      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			frictionGain == conf.frictionGain &&
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	7dda      	ldrb	r2, [r3, #23]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	7ddb      	ldrb	r3, [r3, #23]
			inertiaGain == conf.inertiaGain &&
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d11f      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			totalGain == conf.totalGain &&
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	7e1a      	ldrb	r2, [r3, #24]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	7e1b      	ldrb	r3, [r3, #24]
			frictionGain == conf.frictionGain &&
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d119      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			maxVelosity == conf.maxVelosity &&
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	7e5a      	ldrb	r2, [r3, #25]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	7e5b      	ldrb	r3, [r3, #25]
			totalGain == conf.totalGain &&
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d113      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			maxAcceleration == conf.maxAcceleration &&
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	7e9a      	ldrb	r2, [r3, #26]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	7e9b      	ldrb	r3, [r3, #26]
			maxVelosity == conf.maxVelosity &&
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d10d      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			maxPositionChange == conf.maxPositionChange &&
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	7eda      	ldrb	r2, [r3, #27]
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	7edb      	ldrb	r3, [r3, #27]
			maxAcceleration == conf.maxAcceleration &&
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d107      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			minForce == conf.minForce)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	8b9a      	ldrh	r2, [r3, #28]
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	8b9b      	ldrh	r3, [r3, #28]
			maxPositionChange == conf.maxPositionChange &&
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d101      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			return true;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e000      	b.n	800bfe4 <_ZN14FFBWheelConfig7isequalERS_+0x150>
		else
			return false;
 800bfe2:	2300      	movs	r3, #0
	}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bc80      	pop	{r7}
 800bfec:	4770      	bx	lr

0800bfee <_ZN14FFBWheelConfigC1Ev>:
struct FFBWheelConfig{
 800bfee:	b480      	push	{r7}
 800bff0:	b083      	sub	sp, #12
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2257      	movs	r2, #87	; 0x57
 800bffa:	701a      	strb	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2207      	movs	r2, #7
 800c000:	705a      	strb	r2, [r3, #1]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	709a      	strb	r2, [r3, #2]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	70da      	strb	r2, [r3, #3]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f44f 7261 	mov.w	r2, #900	; 0x384
 800c014:	809a      	strh	r2, [r3, #4]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c01c:	80da      	strh	r2, [r3, #6]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f242 1234 	movw	r2, #8500	; 0x2134
 800c024:	811a      	strh	r2, [r3, #8]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2208      	movs	r2, #8
 800c02a:	729a      	strb	r2, [r3, #10]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	72da      	strb	r2, [r3, #11]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2214      	movs	r2, #20
 800c036:	731a      	strb	r2, [r3, #12]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2264      	movs	r2, #100	; 0x64
 800c03c:	735a      	strb	r2, [r3, #13]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2264      	movs	r2, #100	; 0x64
 800c042:	739a      	strb	r2, [r3, #14]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2264      	movs	r2, #100	; 0x64
 800c048:	73da      	strb	r2, [r3, #15]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2264      	movs	r2, #100	; 0x64
 800c04e:	741a      	strb	r2, [r3, #16]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2264      	movs	r2, #100	; 0x64
 800c054:	745a      	strb	r2, [r3, #17]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2264      	movs	r2, #100	; 0x64
 800c05a:	749a      	strb	r2, [r3, #18]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2264      	movs	r2, #100	; 0x64
 800c060:	74da      	strb	r2, [r3, #19]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2264      	movs	r2, #100	; 0x64
 800c066:	751a      	strb	r2, [r3, #20]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2264      	movs	r2, #100	; 0x64
 800c06c:	755a      	strb	r2, [r3, #21]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2264      	movs	r2, #100	; 0x64
 800c072:	759a      	strb	r2, [r3, #22]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2264      	movs	r2, #100	; 0x64
 800c078:	75da      	strb	r2, [r3, #23]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2264      	movs	r2, #100	; 0x64
 800c07e:	761a      	strb	r2, [r3, #24]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	220f      	movs	r2, #15
 800c084:	765a      	strb	r2, [r3, #25]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	220a      	movs	r2, #10
 800c08a:	769a      	strb	r2, [r3, #26]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	220f      	movs	r2, #15
 800c090:	76da      	strb	r2, [r3, #27]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c098:	839a      	strh	r2, [r3, #28]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4618      	mov	r0, r3
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bc80      	pop	{r7}
 800c0a4:	4770      	bx	lr

0800c0a6 <_ZN11reportHID_tC1Ev>:
};


struct  __attribute__((__packed__)) reportHID_t {
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	701a      	strb	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	705a      	strb	r2, [r3, #1]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	709a      	strb	r2, [r3, #2]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	70da      	strb	r2, [r3, #3]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	711a      	strb	r2, [r3, #4]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	715a      	strb	r2, [r3, #5]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	719a      	strb	r2, [r3, #6]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	71da      	strb	r2, [r3, #7]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	721a      	strb	r2, [r3, #8]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	725a      	strb	r2, [r3, #9]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	729a      	strb	r2, [r3, #10]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	72da      	strb	r2, [r3, #11]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	731a      	strb	r2, [r3, #12]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	735a      	strb	r2, [r3, #13]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	739a      	strb	r2, [r3, #14]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	73da      	strb	r2, [r3, #15]
 800c0fe:	2200      	movs	r2, #0
 800c100:	741a      	strb	r2, [r3, #16]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	745a      	strb	r2, [r3, #17]
 800c108:	2200      	movs	r2, #0
 800c10a:	749a      	strb	r2, [r3, #18]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4618      	mov	r0, r3
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	bc80      	pop	{r7}
 800c116:	4770      	bx	lr

0800c118 <_ZN8FFBWheelC1Ev>:
#include "FFBWheel.h"
#include "FFBWheel_usb_init.h"
// TODO class type for parser? (Simhub for example)
//////////////////////////////////////////////

FFBWheel::FFBWheel() {
 800c118:	b590      	push	{r4, r7, lr}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4618      	mov	r0, r3
 800c124:	f7fb ffd8 	bl	80080d8 <_ZN10AdcHandlerC1Ev>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3304      	adds	r3, #4
 800c12c:	4618      	mov	r0, r3
 800c12e:	f005 f9ed 	bl	801150c <_ZN12TimerHandlerC1Ev>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3308      	adds	r3, #8
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe fa62 	bl	800a600 <_ZN14CommandHandlerC1Ev>
 800c13c:	4a3f      	ldr	r2, [pc, #252]	; (800c23c <_ZN8FFBWheelC1Ev+0x124>)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	601a      	str	r2, [r3, #0]
 800c142:	4a3f      	ldr	r2, [pc, #252]	; (800c240 <_ZN8FFBWheelC1Ev+0x128>)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	605a      	str	r2, [r3, #4]
 800c148:	4a3e      	ldr	r2, [pc, #248]	; (800c244 <_ZN8FFBWheelC1Ev+0x12c>)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	609a      	str	r2, [r3, #8]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	735a      	strb	r2, [r3, #13]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	739a      	strb	r2, [r3, #14]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	73da      	strb	r2, [r3, #15]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	3310      	adds	r3, #16
 800c164:	4618      	mov	r0, r3
 800c166:	f7fc fd45 	bl	8008bf4 <_ZN9CmdParserC1Ev>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	64da      	str	r2, [r3, #76]	; 0x4c
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	651a      	str	r2, [r3, #80]	; 0x50
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3354      	adds	r3, #84	; 0x54
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7ff ff37 	bl	800bfee <_ZN14FFBWheelConfigC1Ev>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	675a      	str	r2, [r3, #116]	; 0x74
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	679a      	str	r2, [r3, #120]	; 0x78
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	67da      	str	r2, [r3, #124]	; 0x7c
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	338c      	adds	r3, #140	; 0x8c
 800c196:	4618      	mov	r0, r3
 800c198:	f7ff ff85 	bl	800c0a6 <_ZN11reportHID_tC1Ev>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c1c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f247 5230 	movw	r2, #30000	; 0x7530
 800c1d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	// Create HID FFB handler. Will receive all usb messages directly
	this->ffb = new HidFFB();
 800c1e0:	f640 30e8 	movw	r0, #3048	; 0xbe8
 800c1e4:	f009 f906 	bl	80153f4 <_Znwj>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	461c      	mov	r4, r3
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f003 fb97 	bl	800f920 <_ZN6HidFFBC1Ev>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	645c      	str	r4, [r3, #68]	; 0x44


	// Setup a timer
	extern TIM_HandleTypeDef htim3;
	this->timer_update = &htim3; // Timer setup with prescaler of sysclock
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a13      	ldr	r2, [pc, #76]	; (800c248 <_ZN8FFBWheelC1Ev+0x130>)
 800c1fa:	649a      	str	r2, [r3, #72]	; 0x48
	this->timer_update->Instance->ARR = 250;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	22fa      	movs	r2, #250	; 0xfa
 800c204:	62da      	str	r2, [r3, #44]	; 0x2c
	this->timer_update->Instance->CR1 = 1;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2201      	movs	r2, #1
 800c20e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(this->timer_update);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c214:	4618      	mov	r0, r3
 800c216:	f7f9 fd08 	bl	8005c2a <HAL_TIM_Base_Start_IT>

	restoreFlash(); // Load parameters
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f87c 	bl	800c318 <_ZN8FFBWheel12restoreFlashEv>
	ffb->set_config(&conf);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3354      	adds	r3, #84	; 0x54
 800c228:	4619      	mov	r1, r3
 800c22a:	4610      	mov	r0, r2
 800c22c:	f004 ffd5 	bl	80111da <_ZN6HidFFB10set_configEP14FFBWheelConfig>
}
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4618      	mov	r0, r3
 800c234:	370c      	adds	r7, #12
 800c236:	46bd      	mov	sp, r7
 800c238:	bd90      	pop	{r4, r7, pc}
 800c23a:	bf00      	nop
 800c23c:	08018db8 	.word	0x08018db8
 800c240:	08018dd4 	.word	0x08018dd4
 800c244:	08018de8 	.word	0x08018de8
 800c248:	200015e8 	.word	0x200015e8

0800c24c <_ZN8FFBWheelD1Ev>:

FFBWheel::~FFBWheel() {
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	4a1d      	ldr	r2, [pc, #116]	; (800c2cc <_ZN8FFBWheelD1Ev+0x80>)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	601a      	str	r2, [r3, #0]
 800c25a:	4a1d      	ldr	r2, [pc, #116]	; (800c2d0 <_ZN8FFBWheelD1Ev+0x84>)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	605a      	str	r2, [r3, #4]
 800c260:	4a1c      	ldr	r2, [pc, #112]	; (800c2d4 <_ZN8FFBWheelD1Ev+0x88>)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	609a      	str	r2, [r3, #8]
	delete drv;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d008      	beq.n	800c280 <_ZN8FFBWheelD1Ev+0x34>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3304      	adds	r3, #4
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4610      	mov	r0, r2
 800c27e:	4798      	blx	r3
	delete enc;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c284:	2b00      	cmp	r3, #0
 800c286:	d008      	beq.n	800c29a <_ZN8FFBWheelD1Ev+0x4e>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3304      	adds	r3, #4
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4610      	mov	r0, r2
 800c298:	4798      	blx	r3
FFBWheel::~FFBWheel() {
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	3310      	adds	r3, #16
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fc fcd2 	bl	8008c48 <_ZN9CmdParserD1Ev>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3308      	adds	r3, #8
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fe f9bd 	bl	800a628 <_ZN14CommandHandlerD1Ev>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f005 f942 	bl	801153c <_ZN12TimerHandlerD1Ev>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fb ff24 	bl	8008108 <_ZN10AdcHandlerD1Ev>
}
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	08018db8 	.word	0x08018db8
 800c2d0:	08018dd4 	.word	0x08018dd4
 800c2d4:	08018de8 	.word	0x08018de8

0800c2d8 <_ZThn4_N8FFBWheelD1Ev>:


class FFBWheel: public AdcHandler, TimerHandler, CommandHandler{
public:
	FFBWheel();
	virtual ~FFBWheel();
 800c2d8:	f1a0 0004 	sub.w	r0, r0, #4
 800c2dc:	f7ff bfb6 	b.w	800c24c <_ZN8FFBWheelD1Ev>

0800c2e0 <_ZThn8_N8FFBWheelD1Ev>:
 800c2e0:	f1a0 0008 	sub.w	r0, r0, #8
 800c2e4:	f7ff bfb2 	b.w	800c24c <_ZN8FFBWheelD1Ev>

0800c2e8 <_ZN8FFBWheelD0Ev>:
FFBWheel::~FFBWheel() {
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
}
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7ff ffab 	bl	800c24c <_ZN8FFBWheelD1Ev>
 800c2f6:	21c0      	movs	r1, #192	; 0xc0
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f009 f879 	bl	80153f0 <_ZdlPvj>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4618      	mov	r0, r3
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <_ZThn8_N8FFBWheelD0Ev>:
 800c308:	f1a0 0008 	sub.w	r0, r0, #8
 800c30c:	f7ff bfec 	b.w	800c2e8 <_ZN8FFBWheelD0Ev>

0800c310 <_ZThn4_N8FFBWheelD0Ev>:
 800c310:	f1a0 0004 	sub.w	r0, r0, #4
 800c314:	f7ff bfe8 	b.w	800c2e8 <_ZN8FFBWheelD0Ev>

0800c318 <_ZN8FFBWheel12restoreFlashEv>:


void FFBWheel::restoreFlash(){
 800c318:	b5b0      	push	{r4, r5, r7, lr}
 800c31a:	b08a      	sub	sp, #40	; 0x28
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6278      	str	r0, [r7, #36]	; 0x24

	conf = decodeConf();
 800c320:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c322:	463b      	mov	r3, r7
 800c324:	4618      	mov	r0, r3
 800c326:	f000 fc49 	bl	800cbbc <_ZN8FFBWheel10decodeConfEv>
 800c32a:	3454      	adds	r4, #84	; 0x54
 800c32c:	463d      	mov	r5, r7
 800c32e:	6828      	ldr	r0, [r5, #0]
 800c330:	6869      	ldr	r1, [r5, #4]
 800c332:	68aa      	ldr	r2, [r5, #8]
 800c334:	68eb      	ldr	r3, [r5, #12]
 800c336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c338:	6928      	ldr	r0, [r5, #16]
 800c33a:	6969      	ldr	r1, [r5, #20]
 800c33c:	69aa      	ldr	r2, [r5, #24]
 800c33e:	c407      	stmia	r4!, {r0, r1, r2}
 800c340:	8bab      	ldrh	r3, [r5, #28]
 800c342:	8023      	strh	r3, [r4, #0]
	conf.check= 0x57;
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c346:	2257      	movs	r2, #87	; 0x57
 800c348:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	drv = new MotorBTS7960();
 800c34c:	2018      	movs	r0, #24
 800c34e:	f009 f851 	bl	80153f4 <_Znwj>
 800c352:	4603      	mov	r3, r0
 800c354:	461c      	mov	r4, r3
 800c356:	4620      	mov	r0, r4
 800c358:	f005 f84e 	bl	80113f8 <_ZN12MotorBTS7960C1Ev>
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	675c      	str	r4, [r3, #116]	; 0x74
	enc = new EncoderLocal();
 800c360:	2050      	movs	r0, #80	; 0x50
 800c362:	f009 f847 	bl	80153f4 <_Znwj>
 800c366:	4603      	mov	r3, r0
 800c368:	461c      	mov	r4, r3
 800c36a:	4620      	mov	r0, r4
 800c36c:	f7fe ff0c 	bl	800b188 <_ZN12EncoderLocalC1Ev>
 800c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c372:	679c      	str	r4, [r3, #120]	; 0x78
	btns = new LocalButtons();
 800c374:	2018      	movs	r0, #24
 800c376:	f009 f83d 	bl	80153f4 <_Znwj>
 800c37a:	4603      	mov	r3, r0
 800c37c:	461c      	mov	r4, r3
 800c37e:	4620      	mov	r0, r4
 800c380:	f004 ff38 	bl	80111f4 <_ZN12LocalButtonsC1Ev>
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	67dc      	str	r4, [r3, #124]	; 0x7c

	drv->start();
 800c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c38c:	4618      	mov	r0, r3
 800c38e:	f005 f89b 	bl	80114c8 <_ZN12MotorBTS79605startEv>
	initEncoder();
 800c392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c394:	f000 fc54 	bl	800cc40 <_ZN8FFBWheel11initEncoderEv>
}
 800c398:	bf00      	nop
 800c39a:	3728      	adds	r7, #40	; 0x28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bdb0      	pop	{r4, r5, r7, pc}

0800c3a0 <_ZN8FFBWheel9saveFlashEv>:

// Saves parameters to flash
void FFBWheel::saveFlash(){
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08c      	sub	sp, #48	; 0x30
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
	FFBWheelConfig savedconf = decodeConf();
 800c3a8:	f107 030c 	add.w	r3, r7, #12
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 fc05 	bl	800cbbc <_ZN8FFBWheel10decodeConfEv>
	if(savedconf.isequal(conf))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800c3b8:	f107 030c 	add.w	r3, r7, #12
 800c3bc:	4611      	mov	r1, r2
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7ff fd68 	bl	800be94 <_ZN14FFBWheelConfig7isequalERS_>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d120      	bne.n	800c40c <_ZN8FFBWheel9saveFlashEv+0x6c>
		return;
	uint32_t* buf = (uint32_t*)&conf;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	3354      	adds	r3, #84	; 0x54
 800c3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t len = sizeof(FFBWheelConfig);
 800c3d0:	231e      	movs	r3, #30
 800c3d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	len = len / 4 + (len % 4 != 0 ? 1 : 0);
 800c3d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3da:	089b      	lsrs	r3, r3, #2
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800c3e2:	f002 0203 	and.w	r2, r2, #3
 800c3e6:	2a00      	cmp	r2, #0
 800c3e8:	d001      	beq.n	800c3ee <_ZN8FFBWheel9saveFlashEv+0x4e>
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	e000      	b.n	800c3f0 <_ZN8FFBWheel9saveFlashEv+0x50>
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	EE_Format();
 800c3f6:	f7f4 feeb 	bl	80011d0 <EE_Format>
	EE_Writes(0x00, len, buf);
 800c3fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c402:	4619      	mov	r1, r3
 800c404:	2000      	movs	r0, #0
 800c406:	f7f4 ff3b 	bl	8001280 <EE_Writes>
 800c40a:	e000      	b.n	800c40e <_ZN8FFBWheel9saveFlashEv+0x6e>
		return;
 800c40c:	bf00      	nop
}
 800c40e:	3730      	adds	r7, #48	; 0x30
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <_ZN8FFBWheel6updateEv>:

/*
 * Periodical update method. Called from main loop
 */
void FFBWheel::update(){
 800c414:	b590      	push	{r4, r7, lr}
 800c416:	b087      	sub	sp, #28
 800c418:	af02      	add	r7, sp, #8
 800c41a:	6078      	str	r0, [r7, #4]
	int16_t lasttorque = endstopTorque;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c420:	81bb      	strh	r3, [r7, #12]
	bool updateTorque = false;
 800c422:	2300      	movs	r3, #0
 800c424:	73fb      	strb	r3, [r7, #15]
	if(drv == nullptr || enc == nullptr){
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <_ZN8FFBWheel6updateEv+0x22>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c432:	2b00      	cmp	r3, #0
 800c434:	d102      	bne.n	800c43c <_ZN8FFBWheel6updateEv+0x28>
		pulseSysLed();
 800c436:	f006 fa33 	bl	80128a0 <_Z11pulseSysLedv>
		return;
 800c43a:	e11d      	b.n	800c678 <_ZN8FFBWheel6updateEv+0x264>
	}

	if(usb_update_flag || update_flag){
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	7b5b      	ldrb	r3, [r3, #13]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d103      	bne.n	800c44c <_ZN8FFBWheel6updateEv+0x38>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	7b9b      	ldrb	r3, [r3, #14]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d030      	beq.n	800c4ae <_ZN8FFBWheel6updateEv+0x9a>

		torque = 0;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	64da      	str	r2, [r3, #76]	; 0x4c
		scaledEnc = getEncValue(enc, conf.degreesOfRotation);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c45c:	461a      	mov	r2, r3
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 f9f8 	bl	800c854 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt>
 800c464:	4602      	mov	r2, r0
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

		update_flag = false;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	739a      	strb	r2, [r3, #14]

		if(abs(scaledEnc) > 0xffff){
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff fcfe 	bl	800be7a <_ZSt3absl>
 800c47e:	4602      	mov	r2, r0
 800c480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c484:	429a      	cmp	r2, r3
 800c486:	bfcc      	ite	gt
 800c488:	2301      	movgt	r3, #1
 800c48a:	2300      	movle	r3, #0
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d006      	beq.n	800c4a0 <_ZN8FFBWheel6updateEv+0x8c>
			drv->stop();
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c496:	4618      	mov	r0, r3
 800c498:	f005 f822 	bl	80114e0 <_ZN12MotorBTS79604stopEv>
			pulseSysLed();
 800c49c:	f006 fa00 	bl	80128a0 <_Z11pulseSysLedv>
		}
		endstopTorque = updateEndstop();
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 f90d 	bl	800c6c0 <_ZN8FFBWheel13updateEndstopEv>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	651a      	str	r2, [r3, #80]	; 0x50

	}
	if(usb_update_flag){
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	7b5b      	ldrb	r3, [r3, #13]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d053      	beq.n	800c55e <_ZN8FFBWheel6updateEv+0x14a>
		speed = scaledEnc - lastScaledEnc;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4c2:	1ad2      	subs	r2, r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		lastScaledEnc = scaledEnc;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		usb_update_flag = false;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	735a      	strb	r2, [r3, #13]
		torque = ffb->calculateEffects(enc);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	4610      	mov	r0, r2
 800c4e8:	f003 feaa 	bl	8010240 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	64da      	str	r2, [r3, #76]	; 0x4c

		if(endstopTorque == 0 || (endstopTorque > 0 && torque > 0) || (endstopTorque < 0 && torque < 0))
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00f      	beq.n	800c51a <_ZN8FFBWheel6updateEv+0x106>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	dd03      	ble.n	800c50a <_ZN8FFBWheel6updateEv+0xf6>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c506:	2b00      	cmp	r3, #0
 800c508:	dc07      	bgt.n	800c51a <_ZN8FFBWheel6updateEv+0x106>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c50e:	2b00      	cmp	r3, #0
 800c510:	da22      	bge.n	800c558 <_ZN8FFBWheel6updateEv+0x144>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c516:	2b00      	cmp	r3, #0
 800c518:	da1e      	bge.n	800c558 <_ZN8FFBWheel6updateEv+0x144>
		{
			torque *= ((float)this->conf.totalGain / (float)100.00);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c51e:	4618      	mov	r0, r3
 800c520:	f7f4 fbbc 	bl	8000c9c <__aeabi_i2f>
 800c524:	4604      	mov	r4, r0
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7f4 fbb1 	bl	8000c94 <__aeabi_ui2f>
 800c532:	4603      	mov	r3, r0
 800c534:	4952      	ldr	r1, [pc, #328]	; (800c680 <_ZN8FFBWheel6updateEv+0x26c>)
 800c536:	4618      	mov	r0, r3
 800c538:	f7f4 fcb8 	bl	8000eac <__aeabi_fdiv>
 800c53c:	4603      	mov	r3, r0
 800c53e:	4619      	mov	r1, r3
 800c540:	4620      	mov	r0, r4
 800c542:	f7f4 fbff 	bl	8000d44 <__aeabi_fmul>
 800c546:	4603      	mov	r3, r0
 800c548:	4618      	mov	r0, r3
 800c54a:	f7f4 fdc1 	bl	80010d0 <__aeabi_f2iz>
 800c54e:	4602      	mov	r2, r0
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	64da      	str	r2, [r3, #76]	; 0x4c
			updateTorque = true;
 800c554:	2301      	movs	r3, #1
 800c556:	73fb      	strb	r3, [r7, #15]
		}
		this->send_report();
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fa0b 	bl	800c974 <_ZN8FFBWheel11send_reportEv>
	}

	if(endstopTorque!=lasttorque || updateTorque){
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c562:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c566:	429a      	cmp	r2, r3
 800c568:	d103      	bne.n	800c572 <_ZN8FFBWheel6updateEv+0x15e>
 800c56a:	7bfb      	ldrb	r3, [r7, #15]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 8083 	beq.w	800c678 <_ZN8FFBWheel6updateEv+0x264>
		torque = clip<int32_t,int16_t>(torque, -this->conf.maxpower, this->conf.maxpower);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c57c:	425b      	negs	r3, r3
 800c57e:	b29b      	uxth	r3, r3
 800c580:	b219      	sxth	r1, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c588:	b21b      	sxth	r3, r3
 800c58a:	461a      	mov	r2, r3
 800c58c:	f000 fbc8 	bl	800cd20 <_Z4clipIlsET_S0_T0_S1_>
 800c590:	4602      	mov	r2, r0
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	64da      	str	r2, [r3, #76]	; 0x4c
		if(torque > 0) torque = map(torque, 0, this->conf.maxpower, MIN(this->conf.minForce, this->conf.maxpower), this->conf.maxpower);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	dd24      	ble.n	800c5e8 <_ZN8FFBWheel6updateEv+0x1d4>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d204      	bcs.n	800c5c4 <_ZN8FFBWheel6updateEv+0x1b0>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	e003      	b.n	800c5cc <_ZN8FFBWheel6updateEv+0x1b8>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5d2:	9301      	str	r3, [sp, #4]
 800c5d4:	9200      	str	r2, [sp, #0]
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2200      	movs	r2, #0
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f854 	bl	800c688 <_ZN8FFBWheel3mapElllll>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	64da      	str	r2, [r3, #76]	; 0x4c
 800c5e6:	e022      	b.n	800c62e <_ZN8FFBWheel6updateEv+0x21a>
		else if (torque < 0) torque = map(torque, 0, -this->conf.maxpower, MAX(-this->conf.minForce, -this->conf.maxpower), -this->conf.maxpower);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	da1e      	bge.n	800c62e <_ZN8FFBWheel6updateEv+0x21a>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5fa:	4258      	negs	r0, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c602:	425a      	negs	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800c60a:	425b      	negs	r3, r3
 800c60c:	4293      	cmp	r3, r2
 800c60e:	bfb8      	it	lt
 800c610:	4613      	movlt	r3, r2
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 800c618:	4252      	negs	r2, r2
 800c61a:	9201      	str	r2, [sp, #4]
 800c61c:	9300      	str	r3, [sp, #0]
 800c61e:	4603      	mov	r3, r0
 800c620:	2200      	movs	r2, #0
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 f830 	bl	800c688 <_ZN8FFBWheel3mapElllll>
 800c628:	4602      	mov	r2, r0
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	64da      	str	r2, [r3, #76]	; 0x4c
		torque += endstopTorque;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c636:	441a      	add	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	64da      	str	r2, [r3, #76]	; 0x4c
		torque = clip<int32_t,int16_t>(torque, -0x7fff, 0x7fff);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c640:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c644:	490f      	ldr	r1, [pc, #60]	; (800c684 <_ZN8FFBWheel6updateEv+0x270>)
 800c646:	4618      	mov	r0, r3
 800c648:	f000 fb6a 	bl	800cd20 <_Z4clipIlsET_S0_T0_S1_>
 800c64c:	4602      	mov	r2, r0
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	64da      	str	r2, [r3, #76]	; 0x4c
		if(conf.inverted == true)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d104      	bne.n	800c666 <_ZN8FFBWheel6updateEv+0x252>
			torque *=-1;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c660:	425a      	negs	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	64da      	str	r2, [r3, #76]	; 0x4c
		drv->turn(torque);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c66e:	b21b      	sxth	r3, r3
 800c670:	4619      	mov	r1, r3
 800c672:	4610      	mov	r0, r2
 800c674:	f004 fe80 	bl	8011378 <_ZN12MotorBTS79604turnEs>
	}
}
 800c678:	3714      	adds	r7, #20
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd90      	pop	{r4, r7, pc}
 800c67e:	bf00      	nop
 800c680:	42c80000 	.word	0x42c80000
 800c684:	ffff8001 	.word	0xffff8001

0800c688 <_ZN8FFBWheel3mapElllll>:

int32_t FFBWheel::map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
 800c694:	603b      	str	r3, [r7, #0]
	 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	69f9      	ldr	r1, [r7, #28]
 800c69e:	69ba      	ldr	r2, [r7, #24]
 800c6a0:	1a8a      	subs	r2, r1, r2
 800c6a2:	fb02 f203 	mul.w	r2, r2, r3
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	1acb      	subs	r3, r1, r3
 800c6ac:	fb92 f2f3 	sdiv	r2, r2, r3
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	4413      	add	r3, r2
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bc80      	pop	{r7}
 800c6bc:	4770      	bx	lr
	...

0800c6c0 <_ZN8FFBWheel13updateEndstopEv>:


int16_t FFBWheel::updateEndstop(){
 800c6c0:	b590      	push	{r4, r7, lr}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
	int8_t clipdir = cliptest<int32_t,int32_t>(lastScaledEnc, -0x7fff, 0x7fff);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c6ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c6d2:	4933      	ldr	r1, [pc, #204]	; (800c7a0 <_ZN8FFBWheel13updateEndstopEv+0xe0>)
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f000 fb3e 	bl	800cd56 <_Z8cliptestIllEaT_T0_S1_>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	75fb      	strb	r3, [r7, #23]
	if(clipdir == 0){
 800c6de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <_ZN8FFBWheel13updateEndstopEv+0x2a>
		return 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	e052      	b.n	800c790 <_ZN8FFBWheel13updateEndstopEv+0xd0>
	}
	int32_t addtorque = 0;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	613b      	str	r3, [r7, #16]
	addtorque += clip<int32_t,int32_t>(abs(lastScaledEnc)-0x7fff,-0x7fff,0x7fff);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7ff fbc0 	bl	800be7a <_ZSt3absl>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800c700:	3b7f      	subs	r3, #127	; 0x7f
 800c702:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c706:	4926      	ldr	r1, [pc, #152]	; (800c7a0 <_ZN8FFBWheel13updateEndstopEv+0xe0>)
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 fb3d 	bl	800cd88 <_Z4clipIllET_S0_T0_S1_>
 800c70e:	4602      	mov	r2, r0
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	4413      	add	r3, r2
 800c714:	613b      	str	r3, [r7, #16]
	float scale = ((float)conf.endstop_gain * 50.00) / 255.00; // 0..50
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7f4 fab9 	bl	8000c94 <__aeabi_ui2f>
 800c722:	4603      	mov	r3, r0
 800c724:	4618      	mov	r0, r3
 800c726:	f7f3 fe7f 	bl	8000428 <__aeabi_f2d>
 800c72a:	f04f 0200 	mov.w	r2, #0
 800c72e:	4b1d      	ldr	r3, [pc, #116]	; (800c7a4 <_ZN8FFBWheel13updateEndstopEv+0xe4>)
 800c730:	f7f3 fed2 	bl	80004d8 <__aeabi_dmul>
 800c734:	4603      	mov	r3, r0
 800c736:	460c      	mov	r4, r1
 800c738:	4618      	mov	r0, r3
 800c73a:	4621      	mov	r1, r4
 800c73c:	a316      	add	r3, pc, #88	; (adr r3, 800c798 <_ZN8FFBWheel13updateEndstopEv+0xd8>)
 800c73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c742:	f7f3 fff3 	bl	800072c <__aeabi_ddiv>
 800c746:	4603      	mov	r3, r0
 800c748:	460c      	mov	r4, r1
 800c74a:	4618      	mov	r0, r3
 800c74c:	4621      	mov	r1, r4
 800c74e:	f7f4 f99b 	bl	8000a88 <__aeabi_d2f>
 800c752:	4603      	mov	r3, r0
 800c754:	60fb      	str	r3, [r7, #12]
	addtorque *= scale;
 800c756:	6938      	ldr	r0, [r7, #16]
 800c758:	f7f4 faa0 	bl	8000c9c <__aeabi_i2f>
 800c75c:	4603      	mov	r3, r0
 800c75e:	68f9      	ldr	r1, [r7, #12]
 800c760:	4618      	mov	r0, r3
 800c762:	f7f4 faef 	bl	8000d44 <__aeabi_fmul>
 800c766:	4603      	mov	r3, r0
 800c768:	4618      	mov	r0, r3
 800c76a:	f7f4 fcb1 	bl	80010d0 <__aeabi_f2iz>
 800c76e:	4603      	mov	r3, r0
 800c770:	613b      	str	r3, [r7, #16]
	addtorque *= -clipdir;
 800c772:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c776:	425a      	negs	r2, r3
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	fb02 f303 	mul.w	r3, r2, r3
 800c77e:	613b      	str	r3, [r7, #16]

	return clip<int32_t,int32_t>(addtorque, -0x7fff ,0x7fff);
 800c780:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c784:	4906      	ldr	r1, [pc, #24]	; (800c7a0 <_ZN8FFBWheel13updateEndstopEv+0xe0>)
 800c786:	6938      	ldr	r0, [r7, #16]
 800c788:	f000 fafe 	bl	800cd88 <_Z4clipIllET_S0_T0_S1_>
 800c78c:	4603      	mov	r3, r0
 800c78e:	b21b      	sxth	r3, r3
}
 800c790:	4618      	mov	r0, r3
 800c792:	371c      	adds	r7, #28
 800c794:	46bd      	mov	sp, r7
 800c796:	bd90      	pop	{r4, r7, pc}
 800c798:	00000000 	.word	0x00000000
 800c79c:	406fe000 	.word	0x406fe000
 800c7a0:	ffff8001 	.word	0xffff8001
 800c7a4:	40490000 	.word	0x40490000

0800c7a8 <_ZN8FFBWheel6adcUpdEPVm>:

void FFBWheel::adcUpd(volatile uint32_t* ADC_BUF){
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0;i<ADC_PINS;i++)
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	73fb      	strb	r3, [r7, #15]
 800c7b6:	7bfb      	ldrb	r3, [r7, #15]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d815      	bhi.n	800c7e8 <_ZN8FFBWheel6adcUpdEPVm+0x40>
	{
		this->adc_buf2[i] += ADC_BUF[i+ADC_CHAN_FPIN];
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	6819      	ldr	r1, [r3, #0]
 800c7c6:	7bfb      	ldrb	r3, [r7, #15]
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	3320      	adds	r3, #32
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	4413      	add	r3, r2
 800c7d0:	685a      	ldr	r2, [r3, #4]
 800c7d2:	7bfb      	ldrb	r3, [r7, #15]
 800c7d4:	440a      	add	r2, r1
 800c7d6:	6879      	ldr	r1, [r7, #4]
 800c7d8:	3320      	adds	r3, #32
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	440b      	add	r3, r1
 800c7de:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0;i<ADC_PINS;i++)
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	73fb      	strb	r3, [r7, #15]
 800c7e6:	e7e6      	b.n	800c7b6 <_ZN8FFBWheel6adcUpdEPVm+0xe>
	}
	adcCount++;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	7bdb      	ldrb	r3, [r3, #15]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	b2da      	uxtb	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	73da      	strb	r2, [r3, #15]
	if(adcCount >= conf.maxAdcCount)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	7bda      	ldrb	r2, [r3, #15]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d323      	bcc.n	800c84a <_ZN8FFBWheel6adcUpdEPVm+0xa2>
	{
		for(uint8_t i = 0;i<ADC_PINS;i++)
 800c802:	2300      	movs	r3, #0
 800c804:	73bb      	strb	r3, [r7, #14]
 800c806:	7bbb      	ldrb	r3, [r7, #14]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d81b      	bhi.n	800c844 <_ZN8FFBWheel6adcUpdEPVm+0x9c>
		{
			this->adc_buf[i] = this->adc_buf2[i]/conf.maxAdcCount;
 800c80c:	7bbb      	ldrb	r3, [r7, #14]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	3320      	adds	r3, #32
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	4413      	add	r3, r2
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 800c81e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c822:	7bba      	ldrb	r2, [r7, #14]
 800c824:	b299      	uxth	r1, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	3240      	adds	r2, #64	; 0x40
 800c82a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			this->adc_buf2[i]= 0;
 800c82e:	7bbb      	ldrb	r3, [r7, #14]
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	3320      	adds	r3, #32
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	4413      	add	r3, r2
 800c838:	2200      	movs	r2, #0
 800c83a:	605a      	str	r2, [r3, #4]
		for(uint8_t i = 0;i<ADC_PINS;i++)
 800c83c:	7bbb      	ldrb	r3, [r7, #14]
 800c83e:	3301      	adds	r3, #1
 800c840:	73bb      	strb	r3, [r7, #14]
 800c842:	e7e0      	b.n	800c806 <_ZN8FFBWheel6adcUpdEPVm+0x5e>
		}
		adcCount = 0;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	73da      	strb	r2, [r3, #15]
	}

}
 800c84a:	bf00      	nop
 800c84c:	3714      	adds	r7, #20
 800c84e:	46bd      	mov	sp, r7
 800c850:	bc80      	pop	{r7}
 800c852:	4770      	bx	lr

0800c854 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt>:

int32_t FFBWheel::getEncValue(EncoderLocal* enc,uint16_t degrees){
 800c854:	b590      	push	{r4, r7, lr}
 800c856:	b089      	sub	sp, #36	; 0x24
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	4613      	mov	r3, r2
 800c860:	80fb      	strh	r3, [r7, #6]
	if(enc == nullptr){
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d102      	bne.n	800c86e <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x1a>
			return 0x7fff; // Return center if no encoder present
 800c868:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800c86c:	e079      	b.n	800c962 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x10e>
	}

	enc->currentPosition = enc->getPos();
 800c86e:	68b8      	ldr	r0, [r7, #8]
 800c870:	f7fe fcfe 	bl	800b270 <_ZN12EncoderLocal6getPosEv>
 800c874:	4602      	mov	r2, r0
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	61da      	str	r2, [r3, #28]
	if(conf.inverted == true)
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800c880:	2b01      	cmp	r3, #1
 800c882:	d104      	bne.n	800c88e <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x3a>
		enc->currentPosition *=-1;
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	69db      	ldr	r3, [r3, #28]
 800c888:	425a      	negs	r2, r3
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	61da      	str	r2, [r3, #28]
	enc->positionChange = enc->currentPosition - enc->lastPosition;
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	69da      	ldr	r2, [r3, #28]
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	1ad2      	subs	r2, r2, r3
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	63da      	str	r2, [r3, #60]	; 0x3c
	uint32_t currentEncoderTime = (int32_t) HAL_GetTick();
 800c89c:	f7f5 fc2c 	bl	80020f8 <HAL_GetTick>
 800c8a0:	61f8      	str	r0, [r7, #28]
	int16_t diffTime = (int16_t)(currentEncoderTime -  enc->lastEncoderTime) ;
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	837b      	strh	r3, [r7, #26]
	if (diffTime > 0) {
 800c8b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	dd21      	ble.n	800c8fe <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0xaa>
		enc->currentVelocity = enc->positionChange / diffTime;
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8be:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c8c2:	fb92 f2f3 	sdiv	r2, r2, r3
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	629a      	str	r2, [r3, #40]	; 0x28
		enc->currentAcceleration = (abs(enc->currentVelocity) - abs(enc->lastVelocity)) / diffTime;
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff fad3 	bl	800be7a <_ZSt3absl>
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff facd 	bl	800be7a <_ZSt3absl>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	1ae2      	subs	r2, r4, r3
 800c8e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c8e8:	fb92 f2f3 	sdiv	r2, r2, r3
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	635a      	str	r2, [r3, #52]	; 0x34
		enc->lastEncoderTime = currentEncoderTime;
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	69fa      	ldr	r2, [r7, #28]
 800c8f4:	645a      	str	r2, [r3, #68]	; 0x44
		enc->lastVelocity = enc->currentVelocity;
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	enc->lastPosition = enc->currentPosition;
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	69da      	ldr	r2, [r3, #28]
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	621a      	str	r2, [r3, #32]

	float angle = 360.0*((float)enc->currentPosition/(float)enc->getPosCpr());
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7f4 f9c6 	bl	8000c9c <__aeabi_i2f>
 800c910:	4604      	mov	r4, r0
 800c912:	68b8      	ldr	r0, [r7, #8]
 800c914:	f7fe fd38 	bl	800b388 <_ZN12EncoderLocal9getPosCprEv>
 800c918:	4603      	mov	r3, r0
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7f4 f9ba 	bl	8000c94 <__aeabi_ui2f>
 800c920:	4603      	mov	r3, r0
 800c922:	4619      	mov	r1, r3
 800c924:	4620      	mov	r0, r4
 800c926:	f7f4 fac1 	bl	8000eac <__aeabi_fdiv>
 800c92a:	4603      	mov	r3, r0
 800c92c:	490f      	ldr	r1, [pc, #60]	; (800c96c <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x118>)
 800c92e:	4618      	mov	r0, r3
 800c930:	f7f4 fa08 	bl	8000d44 <__aeabi_fmul>
 800c934:	4603      	mov	r3, r0
 800c936:	617b      	str	r3, [r7, #20]
	int32_t val = (0xffff / (float)degrees) * angle;
 800c938:	88fb      	ldrh	r3, [r7, #6]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7f4 f9aa 	bl	8000c94 <__aeabi_ui2f>
 800c940:	4603      	mov	r3, r0
 800c942:	4619      	mov	r1, r3
 800c944:	480a      	ldr	r0, [pc, #40]	; (800c970 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x11c>)
 800c946:	f7f4 fab1 	bl	8000eac <__aeabi_fdiv>
 800c94a:	4603      	mov	r3, r0
 800c94c:	6979      	ldr	r1, [r7, #20]
 800c94e:	4618      	mov	r0, r3
 800c950:	f7f4 f9f8 	bl	8000d44 <__aeabi_fmul>
 800c954:	4603      	mov	r3, r0
 800c956:	4618      	mov	r0, r3
 800c958:	f7f4 fbba 	bl	80010d0 <__aeabi_f2iz>
 800c95c:	4603      	mov	r3, r0
 800c95e:	613b      	str	r3, [r7, #16]
	return val;
 800c960:	693b      	ldr	r3, [r7, #16]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3724      	adds	r7, #36	; 0x24
 800c966:	46bd      	mov	sp, r7
 800c968:	bd90      	pop	{r4, r7, pc}
 800c96a:	bf00      	nop
 800c96c:	43b40000 	.word	0x43b40000
 800c970:	477fff00 	.word	0x477fff00

0800c974 <_ZN8FFBWheel11send_reportEv>:


void FFBWheel::send_report(){
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
	extern USBD_HandleTypeDef hUsbDeviceFS;

	// Read buttons
	reportHID.buttons = 0;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 800c984:	2200      	movs	r2, #0
 800c986:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800c990:	2200      	movs	r2, #0
 800c992:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	uint32_t buf = 0;
 800c996:	2300      	movs	r3, #0
 800c998:	60bb      	str	r3, [r7, #8]
	btns->readButtons(&buf);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c99e:	f107 0208 	add.w	r2, r7, #8
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f004 fc81 	bl	80112ac <_ZN12LocalButtons11readButtonsEPm>
	reportHID.buttons = buf;
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8c3 208d 	str.w	r2, [r3, #141]	; 0x8d

	// Encoder
	reportHID.X = clip(lastScaledEnc,-0x7fff,0x7fff);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c9b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c9bc:	4953      	ldr	r1, [pc, #332]	; (800cb0c <_ZN8FFBWheel11send_reportEv+0x198>)
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 f9fa 	bl	800cdb8 <_Z4clipIliET_S0_T0_S1_>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	b21a      	sxth	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8a3 2091 	strh.w	r2, [r3, #145]	; 0x91
	// Analog values read by DMA
	uint16_t axes = this->conf.axes;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800c9d4:	81fb      	strh	r3, [r7, #14]
	reportHID.Y 	=  	(axes & 0x01 << 1) ? ((adc_buf[0] & 0xFFF) << 4)	-0x7fff : 0;
 800c9d6:	89fb      	ldrh	r3, [r7, #14]
 800c9d8:	f003 0302 	and.w	r3, r3, #2
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00e      	beq.n	800c9fe <_ZN8FFBWheel11send_reportEv+0x8a>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	011b      	lsls	r3, r3, #4
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	f023 030f 	bic.w	r3, r3, #15
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800c9f6:	3b7f      	subs	r3, #127	; 0x7f
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	b21a      	sxth	r2, r3
 800c9fc:	e000      	b.n	800ca00 <_ZN8FFBWheel11send_reportEv+0x8c>
 800c9fe:	2200      	movs	r2, #0
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8a3 2093 	strh.w	r2, [r3, #147]	; 0x93
	reportHID.Z		=  	(axes & 0x01 << 2) ? ((adc_buf[1] & 0xFFF) << 4)	-0x7fff : 0;
 800ca06:	89fb      	ldrh	r3, [r7, #14]
 800ca08:	f003 0304 	and.w	r3, r3, #4
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d00e      	beq.n	800ca2e <_ZN8FFBWheel11send_reportEv+0xba>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	011b      	lsls	r3, r3, #4
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	f023 030f 	bic.w	r3, r3, #15
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800ca26:	3b7f      	subs	r3, #127	; 0x7f
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	b21a      	sxth	r2, r3
 800ca2c:	e000      	b.n	800ca30 <_ZN8FFBWheel11send_reportEv+0xbc>
 800ca2e:	2200      	movs	r2, #0
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8a3 2095 	strh.w	r2, [r3, #149]	; 0x95
	reportHID.RX	=  	(axes & 0x01 << 3) ? ((adc_buf[2] & 0xFFF) << 4)	-0x7fff : 0;
 800ca36:	89fb      	ldrh	r3, [r7, #14]
 800ca38:	f003 0308 	and.w	r3, r3, #8
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00e      	beq.n	800ca5e <_ZN8FFBWheel11send_reportEv+0xea>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	011b      	lsls	r3, r3, #4
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	f023 030f 	bic.w	r3, r3, #15
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800ca56:	3b7f      	subs	r3, #127	; 0x7f
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	b21a      	sxth	r2, r3
 800ca5c:	e000      	b.n	800ca60 <_ZN8FFBWheel11send_reportEv+0xec>
 800ca5e:	2200      	movs	r2, #0
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8a3 2097 	strh.w	r2, [r3, #151]	; 0x97
	reportHID.RY	=	(axes & 0x01 << 4) ? ((adc_buf[3] & 0xFFF) << 4)	-0x7fff : 0;
 800ca66:	89fb      	ldrh	r3, [r7, #14]
 800ca68:	f003 0310 	and.w	r3, r3, #16
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00e      	beq.n	800ca8e <_ZN8FFBWheel11send_reportEv+0x11a>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	011b      	lsls	r3, r3, #4
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	f023 030f 	bic.w	r3, r3, #15
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800ca86:	3b7f      	subs	r3, #127	; 0x7f
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	b21a      	sxth	r2, r3
 800ca8c:	e000      	b.n	800ca90 <_ZN8FFBWheel11send_reportEv+0x11c>
 800ca8e:	2200      	movs	r2, #0
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8a3 2099 	strh.w	r2, [r3, #153]	; 0x99
	reportHID.RZ	= 	(axes & 0x01 << 5) ? ((adc_buf[4] & 0xFFF) << 4)	-0x7fff : 0;
 800ca96:	89fb      	ldrh	r3, [r7, #14]
 800ca98:	f003 0320 	and.w	r3, r3, #32
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00e      	beq.n	800cabe <_ZN8FFBWheel11send_reportEv+0x14a>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	011b      	lsls	r3, r3, #4
 800caaa:	b29b      	uxth	r3, r3
 800caac:	f023 030f 	bic.w	r3, r3, #15
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800cab6:	3b7f      	subs	r3, #127	; 0x7f
 800cab8:	b29b      	uxth	r3, r3
 800caba:	b21a      	sxth	r2, r3
 800cabc:	e000      	b.n	800cac0 <_ZN8FFBWheel11send_reportEv+0x14c>
 800cabe:	2200      	movs	r2, #0
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8a3 209b 	strh.w	r2, [r3, #155]	; 0x9b
	reportHID.Slider= 	(axes & 0x01 << 6) ? ((adc_buf[5] & 0xFFF) << 4)	-0x7fff : 0;
 800cac6:	89fb      	ldrh	r3, [r7, #14]
 800cac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00e      	beq.n	800caee <_ZN8FFBWheel11send_reportEv+0x17a>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	011b      	lsls	r3, r3, #4
 800cada:	b29b      	uxth	r3, r3
 800cadc:	f023 030f 	bic.w	r3, r3, #15
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800cae6:	3b7f      	subs	r3, #127	; 0x7f
 800cae8:	b29b      	uxth	r3, r3
 800caea:	b21a      	sxth	r2, r3
 800caec:	e000      	b.n	800caf0 <_ZN8FFBWheel11send_reportEv+0x17c>
 800caee:	2200      	movs	r2, #0
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reinterpret_cast<uint8_t*>(&reportHID), sizeof(reportHID_t));
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	338c      	adds	r3, #140	; 0x8c
 800cafa:	2213      	movs	r2, #19
 800cafc:	4619      	mov	r1, r3
 800cafe:	4804      	ldr	r0, [pc, #16]	; (800cb10 <_ZN8FFBWheel11send_reportEv+0x19c>)
 800cb00:	f008 fa76 	bl	8014ff0 <USBD_CUSTOM_HID_SendReport>

}
 800cb04:	bf00      	nop
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	ffff8001 	.word	0xffff8001
 800cb10:	20000918 	.word	0x20000918

0800cb14 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>:

void FFBWheel::timerElapsed(TIM_HandleTypeDef* htim){
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
	if(htim == this->timer_update){
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d102      	bne.n	800cb2e <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef+0x1a>
		update_flag = true;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	739a      	strb	r2, [r3, #14]
	}
}
 800cb2e:	bf00      	nop
 800cb30:	370c      	adds	r7, #12
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bc80      	pop	{r7}
 800cb36:	4770      	bx	lr

0800cb38 <_ZThn4_N8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>:
	void cdcRcv(char* Buf, uint32_t *Len);

	static FFBWheelConfig decodeConf();

	void adcUpd(volatile uint32_t* ADC_BUF);
	void timerElapsed(TIM_HandleTypeDef* htim);
 800cb38:	f1a0 0004 	sub.w	r0, r0, #4
 800cb3c:	f7ff bfea 	b.w	800cb14 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>

0800cb40 <_ZN8FFBWheel6cdcRcvEPcPm>:

void FFBWheel::cdcRcv(char* Buf, uint32_t *Len){
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b088      	sub	sp, #32
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
	if(this->parser.add(Buf, Len)){
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	3310      	adds	r3, #16
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	68b9      	ldr	r1, [r7, #8]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fc f89f 	bl	8008c98 <_ZN9CmdParser3addEPcPm>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d013      	beq.n	800cb88 <_ZN8FFBWheel6cdcRcvEPcPm+0x48>
		executeCommands(this->parser.parse());
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f103 0210 	add.w	r2, r3, #16
 800cb66:	f107 0314 	add.w	r3, r7, #20
 800cb6a:	4611      	mov	r1, r2
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fc f8f5 	bl	8008d5c <_ZN9CmdParser5parseEv>
 800cb72:	f107 0314 	add.w	r3, r7, #20
 800cb76:	4619      	mov	r1, r3
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f000 f9d5 	bl	800cf28 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE>
 800cb7e:	f107 0314 	add.w	r3, r7, #20
 800cb82:	4618      	mov	r0, r3
 800cb84:	f000 f930 	bl	800cde8 <_ZNSt6vectorI13ParsedCommandSaIS0_EED1Ev>
	}
}
 800cb88:	bf00      	nop
 800cb8a:	3720      	adds	r7, #32
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <_ZN8FFBWheel7usbInitEv>:

void FFBWheel::usbInit(){
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
	usbInit_HID_Wheel();
 800cb98:	f001 fd56 	bl	800e648 <_Z17usbInit_HID_Wheelv>
}
 800cb9c:	bf00      	nop
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <_ZN8FFBWheel3SOFEv>:
void FFBWheel::SOF(){
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
	usb_update_flag = true;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	735a      	strb	r2, [r3, #13]
	// USB clocked update callback
}
 800cbb2:	bf00      	nop
 800cbb4:	370c      	adds	r7, #12
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bc80      	pop	{r7}
 800cbba:	4770      	bx	lr

0800cbbc <_ZN8FFBWheel10decodeConfEv>:

FFBWheelConfig FFBWheel::decodeConf(){
 800cbbc:	b5b0      	push	{r4, r5, r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
	uint8_t len = sizeof(FFBWheelConfig);
 800cbc4:	231e      	movs	r3, #30
 800cbc6:	75fb      	strb	r3, [r7, #23]
	len = len / 4 + (len % 4 != 0 ? 1 : 0);
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	089b      	lsrs	r3, r3, #2
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	7dfa      	ldrb	r2, [r7, #23]
 800cbd0:	f002 0203 	and.w	r2, r2, #3
 800cbd4:	2a00      	cmp	r2, #0
 800cbd6:	d001      	beq.n	800cbdc <_ZN8FFBWheel10decodeConfEv+0x20>
 800cbd8:	2201      	movs	r2, #1
 800cbda:	e000      	b.n	800cbde <_ZN8FFBWheel10decodeConfEv+0x22>
 800cbdc:	2200      	movs	r2, #0
 800cbde:	4413      	add	r3, r2
 800cbe0:	75fb      	strb	r3, [r7, #23]
	uint32_t* buf = new uint32_t[len];
 800cbe2:	7dfb      	ldrb	r3, [r7, #23]
 800cbe4:	4a15      	ldr	r2, [pc, #84]	; (800cc3c <_ZN8FFBWheel10decodeConfEv+0x80>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d801      	bhi.n	800cbee <_ZN8FFBWheel10decodeConfEv+0x32>
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	e001      	b.n	800cbf2 <_ZN8FFBWheel10decodeConfEv+0x36>
 800cbee:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f008 fbfa 	bl	80153ec <_Znaj>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	613b      	str	r3, [r7, #16]
	FFBWheelConfig* conf;

	EE_Reads(0x00, len, buf);
 800cbfc:	7dfb      	ldrb	r3, [r7, #23]
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	693a      	ldr	r2, [r7, #16]
 800cc02:	4619      	mov	r1, r3
 800cc04:	2000      	movs	r0, #0
 800cc06:	f7f4 fb0d 	bl	8001224 <EE_Reads>

	conf = (FFBWheelConfig*)buf;
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	60fb      	str	r3, [r7, #12]
	return *conf;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	6814      	ldr	r4, [r2, #0]
 800cc14:	6850      	ldr	r0, [r2, #4]
 800cc16:	6891      	ldr	r1, [r2, #8]
 800cc18:	68d5      	ldr	r5, [r2, #12]
 800cc1a:	601c      	str	r4, [r3, #0]
 800cc1c:	6058      	str	r0, [r3, #4]
 800cc1e:	6099      	str	r1, [r3, #8]
 800cc20:	60dd      	str	r5, [r3, #12]
 800cc22:	6914      	ldr	r4, [r2, #16]
 800cc24:	6950      	ldr	r0, [r2, #20]
 800cc26:	6991      	ldr	r1, [r2, #24]
 800cc28:	611c      	str	r4, [r3, #16]
 800cc2a:	6158      	str	r0, [r3, #20]
 800cc2c:	6199      	str	r1, [r3, #24]
 800cc2e:	8b92      	ldrh	r2, [r2, #28]
 800cc30:	839a      	strh	r2, [r3, #28]
}
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bdb0      	pop	{r4, r5, r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	1ffffffe 	.word	0x1ffffffe

0800cc40 <_ZN8FFBWheel11initEncoderEv>:

void FFBWheel::initEncoder()
{
 800cc40:	b590      	push	{r4, r7, lr}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
	enc->setPpr(conf.encoderPPR);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc52:	4619      	mov	r1, r3
 800cc54:	4610      	mov	r0, r2
 800cc56:	f7fe fba2 	bl	800b39e <_ZN12EncoderLocal6setPprEm>
	enc->maxAngle = conf.degreesOfRotation;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800cc64:	821a      	strh	r2, [r3, #16]
	enc->maxValue = (float)enc->maxAngle / 2 / 360 * enc->ppr;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc6a:	8a1b      	ldrh	r3, [r3, #16]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7f4 f811 	bl	8000c94 <__aeabi_ui2f>
 800cc72:	4603      	mov	r3, r0
 800cc74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7f4 f917 	bl	8000eac <__aeabi_fdiv>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	4926      	ldr	r1, [pc, #152]	; (800cd1c <_ZN8FFBWheel11initEncoderEv+0xdc>)
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7f4 f912 	bl	8000eac <__aeabi_fdiv>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	461c      	mov	r4, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7f4 f802 	bl	8000c9c <__aeabi_i2f>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f7f4 f851 	bl	8000d44 <__aeabi_fmul>
 800cca2:	4603      	mov	r3, r0
 800cca4:	461a      	mov	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800ccaa:	4610      	mov	r0, r2
 800ccac:	f7f4 fa10 	bl	80010d0 <__aeabi_f2iz>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	6163      	str	r3, [r4, #20]
	enc->minValue = -enc->maxValue;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccb8:	695a      	ldr	r2, [r3, #20]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccbe:	4252      	negs	r2, r2
 800ccc0:	619a      	str	r2, [r3, #24]
	enc->currentPosition = 0;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	61da      	str	r2, [r3, #28]
	enc->lastPosition = 0;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccce:	2200      	movs	r2, #0
 800ccd0:	621a      	str	r2, [r3, #32]
	enc->correctPosition = 0;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	625a      	str	r2, [r3, #36]	; 0x24
	enc->lastEncoderTime = (uint32_t)HAL_GetTick();
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800ccde:	f7f5 fa0b 	bl	80020f8 <HAL_GetTick>
 800cce2:	4603      	mov	r3, r0
 800cce4:	6463      	str	r3, [r4, #68]	; 0x44
	enc->lastVelocity = 0;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccea:	2200      	movs	r2, #0
 800ccec:	62da      	str	r2, [r3, #44]	; 0x2c
	enc->maxVelocity = conf.maxVelosity;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccf8:	631a      	str	r2, [r3, #48]	; 0x30
	enc->maxAcceleration = conf.maxAcceleration;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd04:	639a      	str	r2, [r3, #56]	; 0x38
	enc->maxPositionChange = conf.maxPositionChange;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd10:	641a      	str	r2, [r3, #64]	; 0x40
}
 800cd12:	bf00      	nop
 800cd14:	370c      	adds	r7, #12
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd90      	pop	{r4, r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	43b40000 	.word	0x43b40000

0800cd20 <_Z4clipIlsET_S0_T0_S1_>:
		return 0;
	}
}

template<class T,class C>
T clip(T v, C l, C h)
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	807b      	strh	r3, [r7, #2]
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	803b      	strh	r3, [r7, #0]
{
  return { v > h ? h : v < l ? l : v };
 800cd30:	f9b7 3000 	ldrsh.w	r3, [r7]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	dd02      	ble.n	800cd40 <_Z4clipIlsET_S0_T0_S1_+0x20>
 800cd3a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800cd3e:	e005      	b.n	800cd4c <_Z4clipIlsET_S0_T0_S1_+0x2c>
 800cd40:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4293      	cmp	r3, r2
 800cd48:	bfb8      	it	lt
 800cd4a:	4613      	movlt	r3, r2
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bc80      	pop	{r7}
 800cd54:	4770      	bx	lr

0800cd56 <_Z8cliptestIllEaT_T0_S1_>:
int8_t cliptest(T v, C l, C h)
 800cd56:	b480      	push	{r7}
 800cd58:	b085      	sub	sp, #20
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	60f8      	str	r0, [r7, #12]
 800cd5e:	60b9      	str	r1, [r7, #8]
 800cd60:	607a      	str	r2, [r7, #4]
	if(v > h){
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	dd01      	ble.n	800cd6e <_Z8cliptestIllEaT_T0_S1_+0x18>
		return 1;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e007      	b.n	800cd7e <_Z8cliptestIllEaT_T0_S1_+0x28>
	}else if(v < l){
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	da02      	bge.n	800cd7c <_Z8cliptestIllEaT_T0_S1_+0x26>
		return -1;
 800cd76:	f04f 33ff 	mov.w	r3, #4294967295
 800cd7a:	e000      	b.n	800cd7e <_Z8cliptestIllEaT_T0_S1_+0x28>
		return 0;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3714      	adds	r7, #20
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bc80      	pop	{r7}
 800cd86:	4770      	bx	lr

0800cd88 <_Z4clipIllET_S0_T0_S1_>:
T clip(T v, C l, C h)
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
  return { v > h ? h : v < l ? l : v };
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	dc07      	bgt.n	800cdac <_Z4clipIllET_S0_T0_S1_+0x24>
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	da01      	bge.n	800cda8 <_Z4clipIllET_S0_T0_S1_+0x20>
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	e002      	b.n	800cdae <_Z4clipIllET_S0_T0_S1_+0x26>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	e000      	b.n	800cdae <_Z4clipIllET_S0_T0_S1_+0x26>
 800cdac:	687b      	ldr	r3, [r7, #4]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3714      	adds	r7, #20
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bc80      	pop	{r7}
 800cdb6:	4770      	bx	lr

0800cdb8 <_Z4clipIliET_S0_T0_S1_>:
T clip(T v, C l, C h)
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
  return { v > h ? h : v < l ? l : v };
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	dc07      	bgt.n	800cddc <_Z4clipIliET_S0_T0_S1_+0x24>
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	da01      	bge.n	800cdd8 <_Z4clipIliET_S0_T0_S1_+0x20>
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	e002      	b.n	800cdde <_Z4clipIliET_S0_T0_S1_+0x26>
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	e000      	b.n	800cdde <_Z4clipIliET_S0_T0_S1_+0x26>
 800cddc:	687b      	ldr	r3, [r7, #4]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3714      	adds	r7, #20
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bc80      	pop	{r7}
 800cde6:	4770      	bx	lr

0800cde8 <_ZNSt6vectorI13ParsedCommandSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800cde8:	b5b0      	push	{r4, r5, r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681c      	ldr	r4, [r3, #0]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fc fc58 	bl	80096b0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 800ce00:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ce02:	461a      	mov	r2, r3
 800ce04:	4629      	mov	r1, r5
 800ce06:	4620      	mov	r0, r4
 800ce08:	f7fc fc5c 	bl	80096c4 <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f000 f812 	bl	800ce38 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bdb0      	pop	{r4, r5, r7, pc}

0800ce1e <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b082      	sub	sp, #8
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 f826 	bl	800ce78 <_ZNSaI13ParsedCommandED1Ev>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
	...

0800ce38 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6819      	ldr	r1, [r3, #0]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800ce48:	461a      	mov	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	1ad3      	subs	r3, r2, r3
 800ce50:	109b      	asrs	r3, r3, #2
 800ce52:	4a08      	ldr	r2, [pc, #32]	; (800ce74 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev+0x3c>)
 800ce54:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800ce58:	461a      	mov	r2, r3
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7fc fe3c 	bl	8009ad8 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>
		      - this->_M_impl._M_start); }
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7ff ffdb 	bl	800ce1e <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implD1Ev>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	38e38e39 	.word	0x38e38e39

0800ce78 <_ZNSaI13ParsedCommandED1Ev>:
      ~allocator() throw() { }
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f805 	bl	800ce90 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandED1Ev>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	370c      	adds	r7, #12
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bc80      	pop	{r7}
 800cea2:	4770      	bx	lr

0800cea4 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af02      	add	r7, sp, #8
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	4b04      	ldr	r3, [pc, #16]	; (800cec8 <_ZNSt7__cxx119to_stringEi+0x24>)
 800ceb6:	2210      	movs	r2, #16
 800ceb8:	4904      	ldr	r1, [pc, #16]	; (800cecc <_ZNSt7__cxx119to_stringEi+0x28>)
 800ceba:	f001 fa5d 	bl	800e378 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	08018914 	.word	0x08018914
 800cecc:	08018189 	.word	0x08018189

0800ced0 <_ZNSt7__cxx119to_stringEl>:
					   4 * sizeof(unsigned),
					   "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af02      	add	r7, sp, #8
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
					   "%ld", __val); }
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	4b04      	ldr	r3, [pc, #16]	; (800cef4 <_ZNSt7__cxx119to_stringEl+0x24>)
 800cee2:	2210      	movs	r2, #16
 800cee4:	4904      	ldr	r1, [pc, #16]	; (800cef8 <_ZNSt7__cxx119to_stringEl+0x28>)
 800cee6:	f001 fa47 	bl	800e378 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	08018918 	.word	0x08018918
 800cef8:	08018189 	.word	0x08018189

0800cefc <_ZNSt7__cxx119to_stringEm>:

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af02      	add	r7, sp, #8
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <_ZNSt7__cxx119to_stringEm+0x24>)
 800cf0e:	2210      	movs	r2, #16
 800cf10:	4904      	ldr	r1, [pc, #16]	; (800cf24 <_ZNSt7__cxx119to_stringEm+0x28>)
 800cf12:	f001 fa31 	bl	800e378 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	0801891c 	.word	0x0801891c
 800cf24:	08018189 	.word	0x08018189

0800cf28 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE>:
		{128,0,0},
		{0,128,0},
		{0,0,128}
};

void FFBWheel::executeCommands(std::vector<ParsedCommand> commands){
 800cf28:	b590      	push	{r4, r7, lr}
 800cf2a:	b099      	sub	sp, #100	; 0x64
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
	std::string reply;
 800cf32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf36:	4618      	mov	r0, r3
 800cf38:	f008 fb78 	bl	801562c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	extern std::vector<CommandHandler*> cmdHandlers;
	for(ParsedCommand cmd : commands){
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf40:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cf42:	f7fc feb7 	bl	8009cb4 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>
 800cf46:	4603      	mov	r3, r0
 800cf48:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf4a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cf4c:	f7fc fc37 	bl	80097be <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>
 800cf50:	4603      	mov	r3, r0
 800cf52:	637b      	str	r3, [r7, #52]	; 0x34
 800cf54:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800cf58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f001 fa42 	bl	800e3e8 <_ZN9__gnu_cxxneIP13ParsedCommandSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d07f      	beq.n	800d06a <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x142>
 800cf6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f001 fa62 	bl	800e438 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEdeEv>
 800cf74:	4602      	mov	r2, r0
 800cf76:	f107 0308 	add.w	r3, r7, #8
 800cf7a:	4611      	mov	r1, r2
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fc fe0c 	bl	8009b9a <_ZN13ParsedCommandC1ERKS_>
		if(!executeSysCommand(&cmd,&reply)){
 800cf82:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cf86:	f107 0308 	add.w	r3, r7, #8
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 f895 	bl	800d0bc <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800cf92:	4603      	mov	r3, r0
 800cf94:	f083 0301 	eor.w	r3, r3, #1
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d03b      	beq.n	800d016 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xee>
			// Call all command handlers
			for(CommandHandler* handler : cmdHandlers){
 800cf9e:	4b46      	ldr	r3, [pc, #280]	; (800d0b8 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x190>)
 800cfa0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cfa2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cfa4:	f7fd fc46 	bl	800a834 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	633b      	str	r3, [r7, #48]	; 0x30
 800cfac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cfae:	f7fd fd6b 	bl	800aa88 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfb6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800cfba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cfbe:	4611      	mov	r1, r2
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fd fe18 	bl	800abf6 <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d024      	beq.n	800d016 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xee>
 800cfcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f001 fa4b 	bl	800e46c <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	657b      	str	r3, [r7, #84]	; 0x54
				if(handler->hasCommands())
 800cfdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	3308      	adds	r3, #8
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cfe6:	4798      	blx	r3
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00c      	beq.n	800d008 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xe0>
					if(handler->command(&cmd,&reply))
 800cfee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	3310      	adds	r3, #16
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cffa:	f107 0108 	add.w	r1, r7, #8
 800cffe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d000:	4798      	blx	r3
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d105      	bne.n	800d014 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xec>
			for(CommandHandler* handler : cmdHandlers){
 800d008:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d00c:	4618      	mov	r0, r3
 800d00e:	f001 fa1e 	bl	800e44e <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEppEv>
 800d012:	e7d0      	b.n	800cfb6 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x8e>
						break; // Stop after this class if finished flag is returned
 800d014:	bf00      	nop
			}

		}
		if(!reply.empty() && reply.back()!='\n'){
 800d016:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d01a:	4618      	mov	r0, r3
 800d01c:	f008 fb5f 	bl	80156de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800d020:	4603      	mov	r3, r0
 800d022:	f083 0301 	eor.w	r3, r3, #1
 800d026:	b2db      	uxtb	r3, r3
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00a      	beq.n	800d042 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11a>
 800d02c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d030:	4618      	mov	r0, r3
 800d032:	f008 fb5c 	bl	80156ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 800d036:	4603      	mov	r3, r0
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	2b0a      	cmp	r3, #10
 800d03c:	d001      	beq.n	800d042 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11a>
 800d03e:	2301      	movs	r3, #1
 800d040:	e000      	b.n	800d044 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11c>
 800d042:	2300      	movs	r3, #0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d005      	beq.n	800d054 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x12c>
			reply+='\n';
 800d048:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d04c:	210a      	movs	r1, #10
 800d04e:	4618      	mov	r0, r3
 800d050:	f008 fb70 	bl	8015734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	for(ParsedCommand cmd : commands){
 800d054:	f107 0308 	add.w	r3, r7, #8
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fb fe72 	bl	8008d42 <_ZN13ParsedCommandD1Ev>
 800d05e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d062:	4618      	mov	r0, r3
 800d064:	f001 f9d8 	bl	800e418 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEppEv>
 800d068:	e774      	b.n	800cf54 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x2c>
		}
	}
	if(reply.length()>0){
 800d06a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d06e:	4618      	mov	r0, r3
 800d070:	f008 fb2e 	bl	80156d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	bf14      	ite	ne
 800d07a:	2301      	movne	r3, #1
 800d07c:	2300      	moveq	r3, #0
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	2b00      	cmp	r3, #0
 800d082:	d010      	beq.n	800d0a6 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x17e>
		CDC_Transmit_FS(reply.c_str(), reply.length());
 800d084:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d088:	4618      	mov	r0, r3
 800d08a:	f008 fbad 	bl	80157e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800d08e:	4604      	mov	r4, r0
 800d090:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d094:	4618      	mov	r0, r3
 800d096:	f008 fb1b 	bl	80156d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800d09a:	4603      	mov	r3, r0
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	4619      	mov	r1, r3
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f006 f8df 	bl	8013264 <CDC_Transmit_FS>
	std::string reply;
 800d0a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f008 fadf 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800d0b0:	bf00      	nop
 800d0b2:	3764      	adds	r7, #100	; 0x64
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd90      	pop	{r4, r7, pc}
 800d0b8:	20000b58 	.word	0x20000b58

0800d0bc <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool FFBWheel::executeSysCommand(ParsedCommand* cmd,std::string* reply){
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b086      	sub	sp, #24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
	bool flag = true;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	75fb      	strb	r3, [r7, #23]
	if(cmd->cmd == "help"){
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	491b      	ldr	r1, [pc, #108]	; (800d13c <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>)
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f001 f9d6 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00c      	beq.n	800d0f6 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
		*reply += parser.helpstring;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	332c      	adds	r3, #44	; 0x2c
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f008 fb52 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
		*reply += "Commands:format (Erase flash)";
 800d0e8:	4915      	ldr	r1, [pc, #84]	; (800d140 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>)
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f008 fb78 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		flag = false; // Continue to user commands
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	75fb      	strb	r3, [r7, #23]
 800d0f4:	e01d      	b.n	800d132 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x76>
	}else if(cmd->cmd == "format"){
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	4912      	ldr	r1, [pc, #72]	; (800d144 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>)
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f001 f9c1 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d013      	beq.n	800d12e <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x72>
		if(cmd->type == CMDtype::set && cmd->val==1){
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	6a1b      	ldr	r3, [r3, #32]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10a      	bne.n	800d124 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	69db      	ldr	r3, [r3, #28]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d106      	bne.n	800d124 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>
			HAL_FLASH_Unlock();
 800d116:	f7f5 ff17 	bl	8002f48 <HAL_FLASH_Unlock>
			EE_Format();
 800d11a:	f7f4 f859 	bl	80011d0 <EE_Format>
			HAL_FLASH_Lock();
 800d11e:	f7f5 ff39 	bl	8002f94 <HAL_FLASH_Lock>
 800d122:	e006      	b.n	800d132 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x76>
		}else{
			*reply += "format=1 will ERASE ALL stored variables. Be careful!";
 800d124:	4908      	ldr	r1, [pc, #32]	; (800d148 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f008 fb5a 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d12c:	e001      	b.n	800d132 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x76>
		}
	}else{
		flag = false;
 800d12e:	2300      	movs	r3, #0
 800d130:	75fb      	strb	r3, [r7, #23]
	}
	return flag;
 800d132:	7dfb      	ldrb	r3, [r7, #23]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3718      	adds	r7, #24
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	08018920 	.word	0x08018920
 800d140:	08018928 	.word	0x08018928
 800d144:	08018948 	.word	0x08018948
 800d148:	08018950 	.word	0x08018950

0800d14c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
volatile const SimDisplayPacket* telemetry;
bool FFBWheel::command(ParsedCommand* cmd,std::string* reply){
 800d14c:	b5b0      	push	{r4, r5, r7, lr}
 800d14e:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800d152:	af00      	add	r7, sp, #0
 800d154:	f107 030c 	add.w	r3, r7, #12
 800d158:	6018      	str	r0, [r3, #0]
 800d15a:	f107 0308 	add.w	r3, r7, #8
 800d15e:	6019      	str	r1, [r3, #0]
 800d160:	1d3b      	adds	r3, r7, #4
 800d162:	601a      	str	r2, [r3, #0]
	bool flag = true;
 800d164:	2301      	movs	r3, #1
 800d166:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
	// ------------ General commands ----------------
	if(cmd->cmd == "save"){
 800d16a:	f107 0308 	add.w	r3, r7, #8
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	49b3      	ldr	r1, [pc, #716]	; (800d440 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f4>)
 800d172:	4618      	mov	r0, r3
 800d174:	f001 f985 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00b      	beq.n	800d196 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a>
		this->saveFlash();
 800d17e:	f107 030c 	add.w	r3, r7, #12
 800d182:	6818      	ldr	r0, [r3, #0]
 800d184:	f7ff f90c 	bl	800c3a0 <_ZN8FFBWheel9saveFlashEv>
		*reply+="OK";
 800d188:	1d3b      	adds	r3, r7, #4
 800d18a:	49ae      	ldr	r1, [pc, #696]	; (800d444 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800d18c:	6818      	ldr	r0, [r3, #0]
 800d18e:	f008 fb27 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d192:	f001 b8de 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
	}else if(cmd->cmd == "zeroenc"){
 800d196:	f107 0308 	add.w	r3, r7, #8
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	49aa      	ldr	r1, [pc, #680]	; (800d448 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2fc>)
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f001 f96f 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d015      	beq.n	800d1d6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
		if(cmd->type == CMDtype::get){
 800d1aa:	f107 0308 	add.w	r3, r7, #8
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6a1b      	ldr	r3, [r3, #32]
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	f041 80cd 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
			this->enc->setPos(0);
 800d1b8:	f107 030c 	add.w	r3, r7, #12
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe f869 	bl	800b29a <_ZN12EncoderLocal6setPosEl>
			*reply += "OK";
 800d1c8:	1d3b      	adds	r3, r7, #4
 800d1ca:	499e      	ldr	r1, [pc, #632]	; (800d444 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800d1cc:	6818      	ldr	r0, [r3, #0]
 800d1ce:	f008 fb07 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d1d2:	f001 b8be 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}
	}else if(cmd->cmd == "maxPower"){
 800d1d6:	f107 0308 	add.w	r3, r7, #8
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	499b      	ldr	r1, [pc, #620]	; (800d44c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x300>)
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f001 f94f 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d037      	beq.n	800d25a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10e>
		if(cmd->type == CMDtype::get){
 800d1ea:	f107 0308 	add.w	r3, r7, #8
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	6a1b      	ldr	r3, [r3, #32]
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d119      	bne.n	800d22a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
			*reply+=std::to_string(conf.maxpower);
 800d1f6:	f107 030c 	add.w	r3, r7, #12
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d200:	461a      	mov	r2, r3
 800d202:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d206:	4611      	mov	r1, r2
 800d208:	4618      	mov	r0, r3
 800d20a:	f7ff fe4b 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d20e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d212:	1d3b      	adds	r3, r7, #4
 800d214:	4611      	mov	r1, r2
 800d216:	6818      	ldr	r0, [r3, #0]
 800d218:	f008 fab8 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d21c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d220:	4618      	mov	r0, r3
 800d222:	f008 fa24 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d226:	f001 b894 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}else if(cmd->type == CMDtype::set){
 800d22a:	f107 0308 	add.w	r3, r7, #8
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	2b00      	cmp	r3, #0
 800d234:	f041 808d 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
			this->conf.maxpower = cmd->val;
 800d238:	f107 0308 	add.w	r3, r7, #8
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	69db      	ldr	r3, [r3, #28]
 800d240:	b29a      	uxth	r2, r3
 800d242:	f107 030c 	add.w	r3, r7, #12
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			*reply += "OK";
 800d24c:	1d3b      	adds	r3, r7, #4
 800d24e:	497d      	ldr	r1, [pc, #500]	; (800d444 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800d250:	6818      	ldr	r0, [r3, #0]
 800d252:	f008 fac5 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d256:	f001 b87c 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}
	}else if(cmd->cmd == "degrees"){
 800d25a:	f107 0308 	add.w	r3, r7, #8
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	497b      	ldr	r1, [pc, #492]	; (800d450 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x304>)
 800d262:	4618      	mov	r0, r3
 800d264:	f001 f90d 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d079      	beq.n	800d362 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x216>
		if(cmd->type == CMDtype::get){
 800d26e:	f107 0308 	add.w	r3, r7, #8
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	6a1b      	ldr	r3, [r3, #32]
 800d276:	2b02      	cmp	r3, #2
 800d278:	d119      	bne.n	800d2ae <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x162>
			*reply+=std::to_string(this->conf.degreesOfRotation);
 800d27a:	f107 030c 	add.w	r3, r7, #12
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d284:	461a      	mov	r2, r3
 800d286:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d28a:	4611      	mov	r1, r2
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7ff fe09 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d292:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800d296:	1d3b      	adds	r3, r7, #4
 800d298:	4611      	mov	r1, r2
 800d29a:	6818      	ldr	r0, [r3, #0]
 800d29c:	f008 fa76 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d2a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f008 f9e2 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d2aa:	f001 b852 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}else if(cmd->type == CMDtype::set){
 800d2ae:	f107 0308 	add.w	r3, r7, #8
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	6a1b      	ldr	r3, [r3, #32]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f041 804b 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
			this->conf.degreesOfRotation = cmd->val;
 800d2bc:	f107 0308 	add.w	r3, r7, #8
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	69db      	ldr	r3, [r3, #28]
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	f107 030c 	add.w	r3, r7, #12
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			enc->maxAngle = conf.degreesOfRotation;
 800d2d0:	f107 030c 	add.w	r3, r7, #12
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2d8:	f107 020c 	add.w	r2, r7, #12
 800d2dc:	6812      	ldr	r2, [r2, #0]
 800d2de:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800d2e2:	821a      	strh	r2, [r3, #16]
			enc->maxValue = (float)enc->maxAngle / 2 / 360 * enc->ppr;
 800d2e4:	f107 030c 	add.w	r3, r7, #12
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2ec:	8a1b      	ldrh	r3, [r3, #16]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7f3 fcd0 	bl	8000c94 <__aeabi_ui2f>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7f3 fdd6 	bl	8000eac <__aeabi_fdiv>
 800d300:	4603      	mov	r3, r0
 800d302:	4954      	ldr	r1, [pc, #336]	; (800d454 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x308>)
 800d304:	4618      	mov	r0, r3
 800d306:	f7f3 fdd1 	bl	8000eac <__aeabi_fdiv>
 800d30a:	4603      	mov	r3, r0
 800d30c:	461c      	mov	r4, r3
 800d30e:	f107 030c 	add.w	r3, r7, #12
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	4618      	mov	r0, r3
 800d31a:	f7f3 fcbf 	bl	8000c9c <__aeabi_i2f>
 800d31e:	4603      	mov	r3, r0
 800d320:	4619      	mov	r1, r3
 800d322:	4620      	mov	r0, r4
 800d324:	f7f3 fd0e 	bl	8000d44 <__aeabi_fmul>
 800d328:	4603      	mov	r3, r0
 800d32a:	461a      	mov	r2, r3
 800d32c:	f107 030c 	add.w	r3, r7, #12
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800d334:	4610      	mov	r0, r2
 800d336:	f7f3 fecb 	bl	80010d0 <__aeabi_f2iz>
 800d33a:	4603      	mov	r3, r0
 800d33c:	6163      	str	r3, [r4, #20]
			enc->minValue = -enc->maxValue;
 800d33e:	f107 030c 	add.w	r3, r7, #12
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d346:	695a      	ldr	r2, [r3, #20]
 800d348:	f107 030c 	add.w	r3, r7, #12
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d350:	4252      	negs	r2, r2
 800d352:	619a      	str	r2, [r3, #24]
			*reply += "OK";
 800d354:	1d3b      	adds	r3, r7, #4
 800d356:	493b      	ldr	r1, [pc, #236]	; (800d444 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800d358:	6818      	ldr	r0, [r3, #0]
 800d35a:	f008 fa41 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d35e:	f000 bff8 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}
	}else if(cmd->cmd == "axismask"){
 800d362:	f107 0308 	add.w	r3, r7, #8
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	493b      	ldr	r1, [pc, #236]	; (800d458 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30c>)
 800d36a:	4618      	mov	r0, r3
 800d36c:	f001 f889 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d037      	beq.n	800d3e6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x29a>
		if(cmd->type == CMDtype::get){
 800d376:	f107 0308 	add.w	r3, r7, #8
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	2b02      	cmp	r3, #2
 800d380:	d119      	bne.n	800d3b6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26a>
			*reply+=std::to_string(this->conf.axes);
 800d382:	f107 030c 	add.w	r3, r7, #12
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d38c:	461a      	mov	r2, r3
 800d38e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d392:	4611      	mov	r1, r2
 800d394:	4618      	mov	r0, r3
 800d396:	f7ff fd85 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d39a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800d39e:	1d3b      	adds	r3, r7, #4
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	6818      	ldr	r0, [r3, #0]
 800d3a4:	f008 f9f2 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d3a8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f008 f95e 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d3b2:	f000 bfce 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}else if(cmd->type == CMDtype::set){
 800d3b6:	f107 0308 	add.w	r3, r7, #8
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6a1b      	ldr	r3, [r3, #32]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	f040 87c7 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
			this->conf.axes = cmd->val;
 800d3c4:	f107 0308 	add.w	r3, r7, #8
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	69db      	ldr	r3, [r3, #28]
 800d3cc:	b2da      	uxtb	r2, r3
 800d3ce:	f107 030c 	add.w	r3, r7, #12
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			*reply += "OK";
 800d3d8:	1d3b      	adds	r3, r7, #4
 800d3da:	491a      	ldr	r1, [pc, #104]	; (800d444 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800d3dc:	6818      	ldr	r0, [r3, #0]
 800d3de:	f008 f9ff 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d3e2:	f000 bfb6 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}
	}else if(cmd->cmd == "ppr"){
 800d3e6:	f107 0308 	add.w	r3, r7, #8
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	491b      	ldr	r1, [pc, #108]	; (800d45c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x310>)
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f001 f847 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d062      	beq.n	800d4c0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x374>
		if(cmd->type == CMDtype::get){
 800d3fa:	f107 0308 	add.w	r3, r7, #8
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	6a1b      	ldr	r3, [r3, #32]
 800d402:	2b02      	cmp	r3, #2
 800d404:	d12c      	bne.n	800d460 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x314>
			*reply+=std::to_string(this->enc->getPpr());
 800d406:	f107 030c 	add.w	r3, r7, #12
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fd ffaf 	bl	800b372 <_ZN12EncoderLocal6getPprEv>
 800d414:	4602      	mov	r2, r0
 800d416:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d41a:	4611      	mov	r1, r2
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7ff fd6d 	bl	800cefc <_ZNSt7__cxx119to_stringEm>
 800d422:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800d426:	1d3b      	adds	r3, r7, #4
 800d428:	4611      	mov	r1, r2
 800d42a:	6818      	ldr	r0, [r3, #0]
 800d42c:	f008 f9ae 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d430:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d434:	4618      	mov	r0, r3
 800d436:	f008 f91a 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d43a:	f000 bf8a 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
 800d43e:	bf00      	nop
 800d440:	08018988 	.word	0x08018988
 800d444:	08018990 	.word	0x08018990
 800d448:	08018994 	.word	0x08018994
 800d44c:	0801899c 	.word	0x0801899c
 800d450:	080189a8 	.word	0x080189a8
 800d454:	43b40000 	.word	0x43b40000
 800d458:	080189b0 	.word	0x080189b0
 800d45c:	080189bc 	.word	0x080189bc
		}else if(cmd->type == CMDtype::set && this->enc != nullptr){
 800d460:	f107 0308 	add.w	r3, r7, #8
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6a1b      	ldr	r3, [r3, #32]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d122      	bne.n	800d4b2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x366>
 800d46c:	f107 030c 	add.w	r3, r7, #12
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d474:	2b00      	cmp	r3, #0
 800d476:	d01c      	beq.n	800d4b2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x366>
			this->conf.encoderPPR = cmd->val;
 800d478:	f107 0308 	add.w	r3, r7, #8
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	69db      	ldr	r3, [r3, #28]
 800d480:	b29a      	uxth	r2, r3
 800d482:	f107 030c 	add.w	r3, r7, #12
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			this->enc->setPpr(cmd->val);
 800d48c:	f107 030c 	add.w	r3, r7, #12
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800d494:	f107 0308 	add.w	r3, r7, #8
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	69db      	ldr	r3, [r3, #28]
 800d49c:	4619      	mov	r1, r3
 800d49e:	4610      	mov	r0, r2
 800d4a0:	f7fd ff7d 	bl	800b39e <_ZN12EncoderLocal6setPprEm>
			*reply += "OK";
 800d4a4:	1d3b      	adds	r3, r7, #4
 800d4a6:	49c0      	ldr	r1, [pc, #768]	; (800d7a8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d4a8:	6818      	ldr	r0, [r3, #0]
 800d4aa:	f008 f999 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d4ae:	f000 bf50 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}else{
			*reply += "Err. Setup enctype first";
 800d4b2:	1d3b      	adds	r3, r7, #4
 800d4b4:	49bd      	ldr	r1, [pc, #756]	; (800d7ac <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x660>)
 800d4b6:	6818      	ldr	r0, [r3, #0]
 800d4b8:	f008 f992 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d4bc:	f000 bf49 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}
	}else if(cmd->cmd == "adcmax"){
 800d4c0:	f107 0308 	add.w	r3, r7, #8
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	49ba      	ldr	r1, [pc, #744]	; (800d7b0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x664>)
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f000 ffda 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d037      	beq.n	800d544 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f8>
			if(cmd->type == CMDtype::get){
 800d4d4:	f107 0308 	add.w	r3, r7, #8
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	6a1b      	ldr	r3, [r3, #32]
 800d4dc:	2b02      	cmp	r3, #2
 800d4de:	d119      	bne.n	800d514 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c8>
				*reply+=std::to_string(this->conf.maxAdcCount);
 800d4e0:	f107 030c 	add.w	r3, r7, #12
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7ff fcd6 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d4f8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800d4fc:	1d3b      	adds	r3, r7, #4
 800d4fe:	4611      	mov	r1, r2
 800d500:	6818      	ldr	r0, [r3, #0]
 800d502:	f008 f943 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d506:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d50a:	4618      	mov	r0, r3
 800d50c:	f008 f8af 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d510:	f000 bf1f 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
			}else if(cmd->type == CMDtype::set){
 800d514:	f107 0308 	add.w	r3, r7, #8
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6a1b      	ldr	r3, [r3, #32]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f040 8718 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				this->conf.maxAdcCount = cmd->val;
 800d522:	f107 0308 	add.w	r3, r7, #8
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	69db      	ldr	r3, [r3, #28]
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	f107 030c 	add.w	r3, r7, #12
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
				*reply += "OK";
 800d536:	1d3b      	adds	r3, r7, #4
 800d538:	499b      	ldr	r1, [pc, #620]	; (800d7a8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d53a:	6818      	ldr	r0, [r3, #0]
 800d53c:	f008 f950 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d540:	f000 bf07 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
			}
	}else if(cmd->cmd == "inverted"){
 800d544:	f107 0308 	add.w	r3, r7, #8
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	499a      	ldr	r1, [pc, #616]	; (800d7b4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x668>)
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 ff98 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d552:	4603      	mov	r3, r0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d037      	beq.n	800d5c8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x47c>
				if(cmd->type == CMDtype::get){
 800d558:	f107 0308 	add.w	r3, r7, #8
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	2b02      	cmp	r3, #2
 800d562:	d119      	bne.n	800d598 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44c>
					*reply+=std::to_string(this->conf.inverted);
 800d564:	f107 030c 	add.w	r3, r7, #12
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800d56e:	461a      	mov	r2, r3
 800d570:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800d574:	4611      	mov	r1, r2
 800d576:	4618      	mov	r0, r3
 800d578:	f7ff fc94 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d57c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800d580:	1d3b      	adds	r3, r7, #4
 800d582:	4611      	mov	r1, r2
 800d584:	6818      	ldr	r0, [r3, #0]
 800d586:	f008 f901 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d58a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800d58e:	4618      	mov	r0, r3
 800d590:	f008 f86d 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d594:	f000 bedd 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800d598:	f107 0308 	add.w	r3, r7, #8
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	6a1b      	ldr	r3, [r3, #32]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f040 86d6 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.inverted = (uint8_t)cmd->val;
 800d5a6:	f107 0308 	add.w	r3, r7, #8
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	69db      	ldr	r3, [r3, #28]
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	f107 030c 	add.w	r3, r7, #12
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
					*reply += "OK";
 800d5ba:	1d3b      	adds	r3, r7, #4
 800d5bc:	497a      	ldr	r1, [pc, #488]	; (800d7a8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d5be:	6818      	ldr	r0, [r3, #0]
 800d5c0:	f008 f90e 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d5c4:	f000 bec5 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}

	}else if(cmd->cmd == "constantGain"){
 800d5c8:	f107 0308 	add.w	r3, r7, #8
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	497a      	ldr	r1, [pc, #488]	; (800d7b8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x66c>)
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f000 ff56 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d037      	beq.n	800d64c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x500>
				if(cmd->type == CMDtype::get){
 800d5dc:	f107 0308 	add.w	r3, r7, #8
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	6a1b      	ldr	r3, [r3, #32]
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d119      	bne.n	800d61c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4d0>
					*reply+=std::to_string(this->conf.constantGain);
 800d5e8:	f107 030c 	add.w	r3, r7, #12
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7ff fc52 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d600:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800d604:	1d3b      	adds	r3, r7, #4
 800d606:	4611      	mov	r1, r2
 800d608:	6818      	ldr	r0, [r3, #0]
 800d60a:	f008 f8bf 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d60e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800d612:	4618      	mov	r0, r3
 800d614:	f008 f82b 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d618:	f000 be9b 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800d61c:	f107 0308 	add.w	r3, r7, #8
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	6a1b      	ldr	r3, [r3, #32]
 800d624:	2b00      	cmp	r3, #0
 800d626:	f040 8694 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.constantGain = cmd->val;
 800d62a:	f107 0308 	add.w	r3, r7, #8
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	69db      	ldr	r3, [r3, #28]
 800d632:	b2da      	uxtb	r2, r3
 800d634:	f107 030c 	add.w	r3, r7, #12
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
					*reply += "OK";
 800d63e:	1d3b      	adds	r3, r7, #4
 800d640:	4959      	ldr	r1, [pc, #356]	; (800d7a8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d642:	6818      	ldr	r0, [r3, #0]
 800d644:	f008 f8cc 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d648:	f000 be83 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "rampGain"){
 800d64c:	f107 0308 	add.w	r3, r7, #8
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	495a      	ldr	r1, [pc, #360]	; (800d7bc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x670>)
 800d654:	4618      	mov	r0, r3
 800d656:	f000 ff14 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d037      	beq.n	800d6d0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x584>
				if(cmd->type == CMDtype::get){
 800d660:	f107 0308 	add.w	r3, r7, #8
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	2b02      	cmp	r3, #2
 800d66a:	d119      	bne.n	800d6a0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x554>
					*reply+=std::to_string(this->conf.rampGain);
 800d66c:	f107 030c 	add.w	r3, r7, #12
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800d676:	461a      	mov	r2, r3
 800d678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d67c:	4611      	mov	r1, r2
 800d67e:	4618      	mov	r0, r3
 800d680:	f7ff fc10 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d684:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d688:	1d3b      	adds	r3, r7, #4
 800d68a:	4611      	mov	r1, r2
 800d68c:	6818      	ldr	r0, [r3, #0]
 800d68e:	f008 f87d 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d696:	4618      	mov	r0, r3
 800d698:	f007 ffe9 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d69c:	f000 be59 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800d6a0:	f107 0308 	add.w	r3, r7, #8
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	6a1b      	ldr	r3, [r3, #32]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f040 8652 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.rampGain = cmd->val;
 800d6ae:	f107 0308 	add.w	r3, r7, #8
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	69db      	ldr	r3, [r3, #28]
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	f107 030c 	add.w	r3, r7, #12
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
					*reply += "OK";
 800d6c2:	1d3b      	adds	r3, r7, #4
 800d6c4:	4938      	ldr	r1, [pc, #224]	; (800d7a8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d6c6:	6818      	ldr	r0, [r3, #0]
 800d6c8:	f008 f88a 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d6cc:	f000 be41 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "squareGain"){
 800d6d0:	f107 0308 	add.w	r3, r7, #8
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	493a      	ldr	r1, [pc, #232]	; (800d7c0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x674>)
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f000 fed2 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d037      	beq.n	800d754 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x608>
				if(cmd->type == CMDtype::get){
 800d6e4:	f107 0308 	add.w	r3, r7, #8
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	6a1b      	ldr	r3, [r3, #32]
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d119      	bne.n	800d724 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5d8>
					*reply+=std::to_string(this->conf.squareGain);
 800d6f0:	f107 030c 	add.w	r3, r7, #12
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d700:	4611      	mov	r1, r2
 800d702:	4618      	mov	r0, r3
 800d704:	f7ff fbce 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d708:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800d70c:	1d3b      	adds	r3, r7, #4
 800d70e:	4611      	mov	r1, r2
 800d710:	6818      	ldr	r0, [r3, #0]
 800d712:	f008 f83b 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d716:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d71a:	4618      	mov	r0, r3
 800d71c:	f007 ffa7 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d720:	f000 be17 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800d724:	f107 0308 	add.w	r3, r7, #8
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6a1b      	ldr	r3, [r3, #32]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f040 8610 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.squareGain = cmd->val;
 800d732:	f107 0308 	add.w	r3, r7, #8
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	69db      	ldr	r3, [r3, #28]
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	f107 030c 	add.w	r3, r7, #12
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
					*reply += "OK";
 800d746:	1d3b      	adds	r3, r7, #4
 800d748:	4917      	ldr	r1, [pc, #92]	; (800d7a8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d74a:	6818      	ldr	r0, [r3, #0]
 800d74c:	f008 f848 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d750:	f000 bdff 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "sinGain"){
 800d754:	f107 0308 	add.w	r3, r7, #8
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	491a      	ldr	r1, [pc, #104]	; (800d7c4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x678>)
 800d75c:	4618      	mov	r0, r3
 800d75e:	f000 fe90 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d047      	beq.n	800d7f8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6ac>
				if(cmd->type == CMDtype::get){
 800d768:	f107 0308 	add.w	r3, r7, #8
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	6a1b      	ldr	r3, [r3, #32]
 800d770:	2b02      	cmp	r3, #2
 800d772:	d129      	bne.n	800d7c8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x67c>
					*reply+=std::to_string(this->conf.sinGain);
 800d774:	f107 030c 	add.w	r3, r7, #12
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800d77e:	461a      	mov	r2, r3
 800d780:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d784:	4611      	mov	r1, r2
 800d786:	4618      	mov	r0, r3
 800d788:	f7ff fb8c 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d78c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d790:	1d3b      	adds	r3, r7, #4
 800d792:	4611      	mov	r1, r2
 800d794:	6818      	ldr	r0, [r3, #0]
 800d796:	f007 fff9 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d79a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f007 ff65 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d7a4:	f000 bdd5 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
 800d7a8:	08018990 	.word	0x08018990
 800d7ac:	080189c0 	.word	0x080189c0
 800d7b0:	080189dc 	.word	0x080189dc
 800d7b4:	080189e4 	.word	0x080189e4
 800d7b8:	080189f0 	.word	0x080189f0
 800d7bc:	08018a00 	.word	0x08018a00
 800d7c0:	08018a0c 	.word	0x08018a0c
 800d7c4:	08018a18 	.word	0x08018a18
				}else if(cmd->type == CMDtype::set){
 800d7c8:	f107 0308 	add.w	r3, r7, #8
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	6a1b      	ldr	r3, [r3, #32]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f040 85be 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.sinGain = cmd->val;
 800d7d6:	f107 0308 	add.w	r3, r7, #8
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	69db      	ldr	r3, [r3, #28]
 800d7de:	b2da      	uxtb	r2, r3
 800d7e0:	f107 030c 	add.w	r3, r7, #12
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
					*reply += "OK";
 800d7ea:	1d3b      	adds	r3, r7, #4
 800d7ec:	49c8      	ldr	r1, [pc, #800]	; (800db10 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800d7ee:	6818      	ldr	r0, [r3, #0]
 800d7f0:	f007 fff6 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d7f4:	f000 bdad 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "triangleGain"){
 800d7f8:	f107 0308 	add.w	r3, r7, #8
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	49c5      	ldr	r1, [pc, #788]	; (800db14 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c8>)
 800d800:	4618      	mov	r0, r3
 800d802:	f000 fe3e 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d037      	beq.n	800d87c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x730>
				if(cmd->type == CMDtype::get){
 800d80c:	f107 0308 	add.w	r3, r7, #8
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	6a1b      	ldr	r3, [r3, #32]
 800d814:	2b02      	cmp	r3, #2
 800d816:	d119      	bne.n	800d84c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x700>
					*reply+=std::to_string(this->conf.triangleGain);
 800d818:	f107 030c 	add.w	r3, r7, #12
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800d822:	461a      	mov	r2, r3
 800d824:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800d828:	4611      	mov	r1, r2
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7ff fb3a 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d830:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800d834:	1d3b      	adds	r3, r7, #4
 800d836:	4611      	mov	r1, r2
 800d838:	6818      	ldr	r0, [r3, #0]
 800d83a:	f007 ffa7 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d83e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800d842:	4618      	mov	r0, r3
 800d844:	f007 ff13 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d848:	f000 bd83 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800d84c:	f107 0308 	add.w	r3, r7, #8
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	6a1b      	ldr	r3, [r3, #32]
 800d854:	2b00      	cmp	r3, #0
 800d856:	f040 857c 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.triangleGain = cmd->val;
 800d85a:	f107 0308 	add.w	r3, r7, #8
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	69db      	ldr	r3, [r3, #28]
 800d862:	b2da      	uxtb	r2, r3
 800d864:	f107 030c 	add.w	r3, r7, #12
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
					*reply += "OK";
 800d86e:	1d3b      	adds	r3, r7, #4
 800d870:	49a7      	ldr	r1, [pc, #668]	; (800db10 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800d872:	6818      	ldr	r0, [r3, #0]
 800d874:	f007 ffb4 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d878:	f000 bd6b 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "sawToothDownGain"){
 800d87c:	f107 0308 	add.w	r3, r7, #8
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	49a5      	ldr	r1, [pc, #660]	; (800db18 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9cc>)
 800d884:	4618      	mov	r0, r3
 800d886:	f000 fdfc 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d037      	beq.n	800d900 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7b4>
				if(cmd->type == CMDtype::get){
 800d890:	f107 0308 	add.w	r3, r7, #8
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	6a1b      	ldr	r3, [r3, #32]
 800d898:	2b02      	cmp	r3, #2
 800d89a:	d119      	bne.n	800d8d0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x784>
					*reply+=std::to_string(this->conf.sawToothDownGain);
 800d89c:	f107 030c 	add.w	r3, r7, #12
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7ff faf8 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d8b4:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800d8b8:	1d3b      	adds	r3, r7, #4
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	6818      	ldr	r0, [r3, #0]
 800d8be:	f007 ff65 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d8c2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f007 fed1 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d8cc:	f000 bd41 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800d8d0:	f107 0308 	add.w	r3, r7, #8
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	6a1b      	ldr	r3, [r3, #32]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f040 853a 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.sawToothDownGain = cmd->val;
 800d8de:	f107 0308 	add.w	r3, r7, #8
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	69db      	ldr	r3, [r3, #28]
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	f107 030c 	add.w	r3, r7, #12
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
					*reply += "OK";
 800d8f2:	1d3b      	adds	r3, r7, #4
 800d8f4:	4986      	ldr	r1, [pc, #536]	; (800db10 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800d8f6:	6818      	ldr	r0, [r3, #0]
 800d8f8:	f007 ff72 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d8fc:	f000 bd29 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "sawToothUpGain"){
 800d900:	f107 0308 	add.w	r3, r7, #8
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4985      	ldr	r1, [pc, #532]	; (800db1c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d0>)
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 fdba 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d037      	beq.n	800d984 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x838>
				if(cmd->type == CMDtype::get){
 800d914:	f107 0308 	add.w	r3, r7, #8
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	2b02      	cmp	r3, #2
 800d91e:	d119      	bne.n	800d954 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x808>
					*reply+=std::to_string(this->conf.sawToothUpGain);
 800d920:	f107 030c 	add.w	r3, r7, #12
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800d92a:	461a      	mov	r2, r3
 800d92c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d930:	4611      	mov	r1, r2
 800d932:	4618      	mov	r0, r3
 800d934:	f7ff fab6 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d938:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800d93c:	1d3b      	adds	r3, r7, #4
 800d93e:	4611      	mov	r1, r2
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	f007 ff23 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d946:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d94a:	4618      	mov	r0, r3
 800d94c:	f007 fe8f 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d950:	f000 bcff 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800d954:	f107 0308 	add.w	r3, r7, #8
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	6a1b      	ldr	r3, [r3, #32]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f040 84f8 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.sawToothUpGain = cmd->val;
 800d962:	f107 0308 	add.w	r3, r7, #8
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	69db      	ldr	r3, [r3, #28]
 800d96a:	b2da      	uxtb	r2, r3
 800d96c:	f107 030c 	add.w	r3, r7, #12
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
					*reply += "OK";
 800d976:	1d3b      	adds	r3, r7, #4
 800d978:	4965      	ldr	r1, [pc, #404]	; (800db10 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800d97a:	6818      	ldr	r0, [r3, #0]
 800d97c:	f007 ff30 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d980:	f000 bce7 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "springGain"){
 800d984:	f107 0308 	add.w	r3, r7, #8
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4965      	ldr	r1, [pc, #404]	; (800db20 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d4>)
 800d98c:	4618      	mov	r0, r3
 800d98e:	f000 fd78 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d037      	beq.n	800da08 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8bc>
				if(cmd->type == CMDtype::get){
 800d998:	f107 0308 	add.w	r3, r7, #8
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	6a1b      	ldr	r3, [r3, #32]
 800d9a0:	2b02      	cmp	r3, #2
 800d9a2:	d119      	bne.n	800d9d8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88c>
					*reply+=std::to_string(this->conf.springGain);
 800d9a4:	f107 030c 	add.w	r3, r7, #12
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800d9b4:	4611      	mov	r1, r2
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7ff fa74 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800d9bc:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800d9c0:	1d3b      	adds	r3, r7, #4
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	6818      	ldr	r0, [r3, #0]
 800d9c6:	f007 fee1 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d9ca:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f007 fe4d 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d9d4:	f000 bcbd 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800d9d8:	f107 0308 	add.w	r3, r7, #8
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	6a1b      	ldr	r3, [r3, #32]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f040 84b6 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.springGain = cmd->val;
 800d9e6:	f107 0308 	add.w	r3, r7, #8
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	69db      	ldr	r3, [r3, #28]
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	f107 030c 	add.w	r3, r7, #12
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
					*reply += "OK";
 800d9fa:	1d3b      	adds	r3, r7, #4
 800d9fc:	4944      	ldr	r1, [pc, #272]	; (800db10 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800d9fe:	6818      	ldr	r0, [r3, #0]
 800da00:	f007 feee 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800da04:	f000 bca5 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "damperGain"){
 800da08:	f107 0308 	add.w	r3, r7, #8
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4945      	ldr	r1, [pc, #276]	; (800db24 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d8>)
 800da10:	4618      	mov	r0, r3
 800da12:	f000 fd36 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d037      	beq.n	800da8c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x940>
				if(cmd->type == CMDtype::get){
 800da1c:	f107 0308 	add.w	r3, r7, #8
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	6a1b      	ldr	r3, [r3, #32]
 800da24:	2b02      	cmp	r3, #2
 800da26:	d119      	bne.n	800da5c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x910>
					*reply+=std::to_string(this->conf.damperGain);
 800da28:	f107 030c 	add.w	r3, r7, #12
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800da32:	461a      	mov	r2, r3
 800da34:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da38:	4611      	mov	r1, r2
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7ff fa32 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800da40:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800da44:	1d3b      	adds	r3, r7, #4
 800da46:	4611      	mov	r1, r2
 800da48:	6818      	ldr	r0, [r3, #0]
 800da4a:	f007 fe9f 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800da4e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da52:	4618      	mov	r0, r3
 800da54:	f007 fe0b 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800da58:	f000 bc7b 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800da5c:	f107 0308 	add.w	r3, r7, #8
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	6a1b      	ldr	r3, [r3, #32]
 800da64:	2b00      	cmp	r3, #0
 800da66:	f040 8474 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.damperGain = cmd->val;
 800da6a:	f107 0308 	add.w	r3, r7, #8
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	69db      	ldr	r3, [r3, #28]
 800da72:	b2da      	uxtb	r2, r3
 800da74:	f107 030c 	add.w	r3, r7, #12
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
					*reply += "OK";
 800da7e:	1d3b      	adds	r3, r7, #4
 800da80:	4923      	ldr	r1, [pc, #140]	; (800db10 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800da82:	6818      	ldr	r0, [r3, #0]
 800da84:	f007 feac 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800da88:	f000 bc63 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "inertiaGain"){
 800da8c:	f107 0308 	add.w	r3, r7, #8
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4925      	ldr	r1, [pc, #148]	; (800db28 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9dc>)
 800da94:	4618      	mov	r0, r3
 800da96:	f000 fcf4 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d045      	beq.n	800db2c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e0>
				if(cmd->type == CMDtype::get){
 800daa0:	f107 0308 	add.w	r3, r7, #8
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6a1b      	ldr	r3, [r3, #32]
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	d119      	bne.n	800dae0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x994>
					*reply+=std::to_string(this->conf.inertiaGain);
 800daac:	f107 030c 	add.w	r3, r7, #12
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800dab6:	461a      	mov	r2, r3
 800dab8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dabc:	4611      	mov	r1, r2
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7ff f9f0 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800dac4:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800dac8:	1d3b      	adds	r3, r7, #4
 800daca:	4611      	mov	r1, r2
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f007 fe5d 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dad2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dad6:	4618      	mov	r0, r3
 800dad8:	f007 fdc9 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dadc:	f000 bc39 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800dae0:	f107 0308 	add.w	r3, r7, #8
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	6a1b      	ldr	r3, [r3, #32]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f040 8432 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.inertiaGain = cmd->val;
 800daee:	f107 0308 	add.w	r3, r7, #8
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	69db      	ldr	r3, [r3, #28]
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	f107 030c 	add.w	r3, r7, #12
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
					*reply += "OK";
 800db02:	1d3b      	adds	r3, r7, #4
 800db04:	4902      	ldr	r1, [pc, #8]	; (800db10 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800db06:	6818      	ldr	r0, [r3, #0]
 800db08:	f007 fe6a 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800db0c:	f000 bc21 	b.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
 800db10:	08018990 	.word	0x08018990
 800db14:	08018a20 	.word	0x08018a20
 800db18:	08018a30 	.word	0x08018a30
 800db1c:	08018a44 	.word	0x08018a44
 800db20:	08018a54 	.word	0x08018a54
 800db24:	08018a60 	.word	0x08018a60
 800db28:	08018a6c 	.word	0x08018a6c
				}
	}else if(cmd->cmd == "frictionGain"){
 800db2c:	f107 0308 	add.w	r3, r7, #8
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	49be      	ldr	r1, [pc, #760]	; (800de2c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce0>)
 800db34:	4618      	mov	r0, r3
 800db36:	f000 fca4 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d035      	beq.n	800dbac <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa60>
				if(cmd->type == CMDtype::get){
 800db40:	f107 0308 	add.w	r3, r7, #8
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	6a1b      	ldr	r3, [r3, #32]
 800db48:	2b02      	cmp	r3, #2
 800db4a:	d118      	bne.n	800db7e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa32>
					*reply+=std::to_string(this->conf.frictionGain);
 800db4c:	f107 030c 	add.w	r3, r7, #12
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800db56:	461a      	mov	r2, r3
 800db58:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800db5c:	4611      	mov	r1, r2
 800db5e:	4618      	mov	r0, r3
 800db60:	f7ff f9a0 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800db64:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800db68:	1d3b      	adds	r3, r7, #4
 800db6a:	4611      	mov	r1, r2
 800db6c:	6818      	ldr	r0, [r3, #0]
 800db6e:	f007 fe0d 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800db72:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800db76:	4618      	mov	r0, r3
 800db78:	f007 fd79 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800db7c:	e3e9      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800db7e:	f107 0308 	add.w	r3, r7, #8
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	6a1b      	ldr	r3, [r3, #32]
 800db86:	2b00      	cmp	r3, #0
 800db88:	f040 83e3 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.frictionGain = cmd->val;
 800db8c:	f107 0308 	add.w	r3, r7, #8
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	69db      	ldr	r3, [r3, #28]
 800db94:	b2da      	uxtb	r2, r3
 800db96:	f107 030c 	add.w	r3, r7, #12
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
					*reply += "OK";
 800dba0:	1d3b      	adds	r3, r7, #4
 800dba2:	49a3      	ldr	r1, [pc, #652]	; (800de30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800dba4:	6818      	ldr	r0, [r3, #0]
 800dba6:	f007 fe1b 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dbaa:	e3d2      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "endstopGain"){
 800dbac:	f107 0308 	add.w	r3, r7, #8
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	49a0      	ldr	r1, [pc, #640]	; (800de34 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce8>)
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f000 fc64 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d035      	beq.n	800dc2c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae0>
				if(cmd->type == CMDtype::get){
 800dbc0:	f107 0308 	add.w	r3, r7, #8
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6a1b      	ldr	r3, [r3, #32]
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d118      	bne.n	800dbfe <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xab2>
					*reply+=std::to_string(this->conf.endstop_gain);
 800dbcc:	f107 030c 	add.w	r3, r7, #12
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800dbdc:	4611      	mov	r1, r2
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7ff f960 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800dbe4:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800dbe8:	1d3b      	adds	r3, r7, #4
 800dbea:	4611      	mov	r1, r2
 800dbec:	6818      	ldr	r0, [r3, #0]
 800dbee:	f007 fdcd 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dbf2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f007 fd39 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dbfc:	e3a9      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800dbfe:	f107 0308 	add.w	r3, r7, #8
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	6a1b      	ldr	r3, [r3, #32]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f040 83a3 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.endstop_gain = cmd->val;
 800dc0c:	f107 0308 	add.w	r3, r7, #8
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	69db      	ldr	r3, [r3, #28]
 800dc14:	b2da      	uxtb	r2, r3
 800dc16:	f107 030c 	add.w	r3, r7, #12
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
					*reply += "OK";
 800dc20:	1d3b      	adds	r3, r7, #4
 800dc22:	4983      	ldr	r1, [pc, #524]	; (800de30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800dc24:	6818      	ldr	r0, [r3, #0]
 800dc26:	f007 fddb 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dc2a:	e392      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "totalGain"){
 800dc2c:	f107 0308 	add.w	r3, r7, #8
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4981      	ldr	r1, [pc, #516]	; (800de38 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcec>)
 800dc34:	4618      	mov	r0, r3
 800dc36:	f000 fc24 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d035      	beq.n	800dcac <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb60>
				if(cmd->type == CMDtype::get){
 800dc40:	f107 0308 	add.w	r3, r7, #8
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6a1b      	ldr	r3, [r3, #32]
 800dc48:	2b02      	cmp	r3, #2
 800dc4a:	d118      	bne.n	800dc7e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb32>
					*reply+=std::to_string(this->conf.totalGain);
 800dc4c:	f107 030c 	add.w	r3, r7, #12
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800dc56:	461a      	mov	r2, r3
 800dc58:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7ff f920 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800dc64:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800dc68:	1d3b      	adds	r3, r7, #4
 800dc6a:	4611      	mov	r1, r2
 800dc6c:	6818      	ldr	r0, [r3, #0]
 800dc6e:	f007 fd8d 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dc72:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800dc76:	4618      	mov	r0, r3
 800dc78:	f007 fcf9 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dc7c:	e369      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800dc7e:	f107 0308 	add.w	r3, r7, #8
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	6a1b      	ldr	r3, [r3, #32]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f040 8363 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.totalGain = cmd->val;
 800dc8c:	f107 0308 	add.w	r3, r7, #8
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	69db      	ldr	r3, [r3, #28]
 800dc94:	b2da      	uxtb	r2, r3
 800dc96:	f107 030c 	add.w	r3, r7, #12
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
					*reply += "OK";
 800dca0:	1d3b      	adds	r3, r7, #4
 800dca2:	4963      	ldr	r1, [pc, #396]	; (800de30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800dca4:	6818      	ldr	r0, [r3, #0]
 800dca6:	f007 fd9b 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dcaa:	e352      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "maxVelosity"){
 800dcac:	f107 0308 	add.w	r3, r7, #8
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4962      	ldr	r1, [pc, #392]	; (800de3c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf0>)
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f000 fbe4 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d035      	beq.n	800dd2c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbe0>
				if(cmd->type == CMDtype::get){
 800dcc0:	f107 0308 	add.w	r3, r7, #8
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	6a1b      	ldr	r3, [r3, #32]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d118      	bne.n	800dcfe <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbb2>
					*reply+=std::to_string(this->conf.maxVelosity);
 800dccc:	f107 030c 	add.w	r3, r7, #12
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dcdc:	4611      	mov	r1, r2
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7ff f8e0 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800dce4:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800dce8:	1d3b      	adds	r3, r7, #4
 800dcea:	4611      	mov	r1, r2
 800dcec:	6818      	ldr	r0, [r3, #0]
 800dcee:	f007 fd4d 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dcf2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f007 fcb9 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dcfc:	e329      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800dcfe:	f107 0308 	add.w	r3, r7, #8
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6a1b      	ldr	r3, [r3, #32]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f040 8323 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.maxVelosity = cmd->val;
 800dd0c:	f107 0308 	add.w	r3, r7, #8
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	69db      	ldr	r3, [r3, #28]
 800dd14:	b2da      	uxtb	r2, r3
 800dd16:	f107 030c 	add.w	r3, r7, #12
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
					*reply += "OK";
 800dd20:	1d3b      	adds	r3, r7, #4
 800dd22:	4943      	ldr	r1, [pc, #268]	; (800de30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800dd24:	6818      	ldr	r0, [r3, #0]
 800dd26:	f007 fd5b 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dd2a:	e312      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "maxAcceleration"){
 800dd2c:	f107 0308 	add.w	r3, r7, #8
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4943      	ldr	r1, [pc, #268]	; (800de40 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf4>)
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 fba4 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d035      	beq.n	800ddac <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc60>
				if(cmd->type == CMDtype::get){
 800dd40:	f107 0308 	add.w	r3, r7, #8
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	6a1b      	ldr	r3, [r3, #32]
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d118      	bne.n	800dd7e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc32>
					*reply+=std::to_string(this->conf.maxAcceleration);
 800dd4c:	f107 030c 	add.w	r3, r7, #12
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800dd56:	461a      	mov	r2, r3
 800dd58:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7ff f8a0 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800dd64:	f507 7210 	add.w	r2, r7, #576	; 0x240
 800dd68:	1d3b      	adds	r3, r7, #4
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	6818      	ldr	r0, [r3, #0]
 800dd6e:	f007 fd0d 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dd72:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800dd76:	4618      	mov	r0, r3
 800dd78:	f007 fc79 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dd7c:	e2e9      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800dd7e:	f107 0308 	add.w	r3, r7, #8
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6a1b      	ldr	r3, [r3, #32]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f040 82e3 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.maxAcceleration = cmd->val;
 800dd8c:	f107 0308 	add.w	r3, r7, #8
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	69db      	ldr	r3, [r3, #28]
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	f107 030c 	add.w	r3, r7, #12
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
					*reply += "OK";
 800dda0:	1d3b      	adds	r3, r7, #4
 800dda2:	4923      	ldr	r1, [pc, #140]	; (800de30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800dda4:	6818      	ldr	r0, [r3, #0]
 800dda6:	f007 fd1b 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800ddaa:	e2d2      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}
	}else if(cmd->cmd == "maxPositionChange"){
 800ddac:	f107 0308 	add.w	r3, r7, #8
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4924      	ldr	r1, [pc, #144]	; (800de44 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf8>)
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f000 fb64 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d043      	beq.n	800de48 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcfc>
				if(cmd->type == CMDtype::get){
 800ddc0:	f107 0308 	add.w	r3, r7, #8
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	6a1b      	ldr	r3, [r3, #32]
 800ddc8:	2b02      	cmp	r3, #2
 800ddca:	d118      	bne.n	800ddfe <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcb2>
					*reply+=std::to_string(this->conf.maxPositionChange);
 800ddcc:	f107 030c 	add.w	r3, r7, #12
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800dddc:	4611      	mov	r1, r2
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7ff f860 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800dde4:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800dde8:	1d3b      	adds	r3, r7, #4
 800ddea:	4611      	mov	r1, r2
 800ddec:	6818      	ldr	r0, [r3, #0]
 800ddee:	f007 fccd 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800ddf2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f007 fc39 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ddfc:	e2a9      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800ddfe:	f107 0308 	add.w	r3, r7, #8
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	2b00      	cmp	r3, #0
 800de08:	f040 82a3 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.maxPositionChange = cmd->val;
 800de0c:	f107 0308 	add.w	r3, r7, #8
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	69db      	ldr	r3, [r3, #28]
 800de14:	b2da      	uxtb	r2, r3
 800de16:	f107 030c 	add.w	r3, r7, #12
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
					*reply += "OK";
 800de20:	1d3b      	adds	r3, r7, #4
 800de22:	4903      	ldr	r1, [pc, #12]	; (800de30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800de24:	6818      	ldr	r0, [r3, #0]
 800de26:	f007 fcdb 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800de2a:	e292      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
 800de2c:	08018a78 	.word	0x08018a78
 800de30:	08018990 	.word	0x08018990
 800de34:	08018a88 	.word	0x08018a88
 800de38:	08018a94 	.word	0x08018a94
 800de3c:	08018aa0 	.word	0x08018aa0
 800de40:	08018aac 	.word	0x08018aac
 800de44:	08018abc 	.word	0x08018abc
				}
	}else if(cmd->cmd == "minPower"){
 800de48:	f107 0308 	add.w	r3, r7, #8
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	49c3      	ldr	r1, [pc, #780]	; (800e15c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1010>)
 800de50:	4618      	mov	r0, r3
 800de52:	f000 fb16 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d035      	beq.n	800dec8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd7c>
				if(cmd->type == CMDtype::get){
 800de5c:	f107 0308 	add.w	r3, r7, #8
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	6a1b      	ldr	r3, [r3, #32]
 800de64:	2b02      	cmp	r3, #2
 800de66:	d118      	bne.n	800de9a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4e>
					*reply+=std::to_string(this->conf.minForce);
 800de68:	f107 030c 	add.w	r3, r7, #12
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800de72:	461a      	mov	r2, r3
 800de74:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800de78:	4611      	mov	r1, r2
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7ff f812 	bl	800cea4 <_ZNSt7__cxx119to_stringEi>
 800de80:	f507 721c 	add.w	r2, r7, #624	; 0x270
 800de84:	1d3b      	adds	r3, r7, #4
 800de86:	4611      	mov	r1, r2
 800de88:	6818      	ldr	r0, [r3, #0]
 800de8a:	f007 fc7f 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800de8e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800de92:	4618      	mov	r0, r3
 800de94:	f007 fbeb 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800de98:	e25b      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}else if(cmd->type == CMDtype::set){
 800de9a:	f107 0308 	add.w	r3, r7, #8
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f040 8255 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
					this->conf.minForce = cmd->val;
 800dea8:	f107 0308 	add.w	r3, r7, #8
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	69db      	ldr	r3, [r3, #28]
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	f107 030c 	add.w	r3, r7, #12
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
					*reply += "OK";
 800debc:	1d3b      	adds	r3, r7, #4
 800debe:	49a8      	ldr	r1, [pc, #672]	; (800e160 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1014>)
 800dec0:	6818      	ldr	r0, [r3, #0]
 800dec2:	f007 fc8d 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dec6:	e244      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				}

	}else if(cmd->cmd == "pos"){
 800dec8:	f107 0308 	add.w	r3, r7, #8
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	49a5      	ldr	r1, [pc, #660]	; (800e164 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1018>)
 800ded0:	4618      	mov	r0, r3
 800ded2:	f000 fad6 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d044      	beq.n	800df66 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe1a>
		if(cmd->type == CMDtype::get){
 800dedc:	f107 0308 	add.w	r3, r7, #8
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	6a1b      	ldr	r3, [r3, #32]
 800dee4:	2b02      	cmp	r3, #2
 800dee6:	d11a      	bne.n	800df1e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdd2>
			*reply+=std::to_string(this->enc->getPos());
 800dee8:	f107 030c 	add.w	r3, r7, #12
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800def0:	4618      	mov	r0, r3
 800def2:	f7fd f9bd 	bl	800b270 <_ZN12EncoderLocal6getPosEv>
 800def6:	4602      	mov	r2, r0
 800def8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800defc:	4611      	mov	r1, r2
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe ffe6 	bl	800ced0 <_ZNSt7__cxx119to_stringEl>
 800df04:	f507 7222 	add.w	r2, r7, #648	; 0x288
 800df08:	1d3b      	adds	r3, r7, #4
 800df0a:	4611      	mov	r1, r2
 800df0c:	6818      	ldr	r0, [r3, #0]
 800df0e:	f007 fc3d 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800df12:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800df16:	4618      	mov	r0, r3
 800df18:	f007 fba9 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800df1c:	e219      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}else if(cmd->type == CMDtype::set && this->enc != nullptr){
 800df1e:	f107 0308 	add.w	r3, r7, #8
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	6a1b      	ldr	r3, [r3, #32]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d117      	bne.n	800df5a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0e>
 800df2a:	f107 030c 	add.w	r3, r7, #12
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df32:	2b00      	cmp	r3, #0
 800df34:	d011      	beq.n	800df5a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0e>
			this->enc->setPos(cmd->val);
 800df36:	f107 030c 	add.w	r3, r7, #12
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800df3e:	f107 0308 	add.w	r3, r7, #8
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	69db      	ldr	r3, [r3, #28]
 800df46:	4619      	mov	r1, r3
 800df48:	4610      	mov	r0, r2
 800df4a:	f7fd f9a6 	bl	800b29a <_ZN12EncoderLocal6setPosEl>
			*reply += "OK";
 800df4e:	1d3b      	adds	r3, r7, #4
 800df50:	4983      	ldr	r1, [pc, #524]	; (800e160 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1014>)
 800df52:	6818      	ldr	r0, [r3, #0]
 800df54:	f007 fc44 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800df58:	e1fb      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}else{
			*reply += "Err. Setup enctype first";
 800df5a:	1d3b      	adds	r3, r7, #4
 800df5c:	4982      	ldr	r1, [pc, #520]	; (800e168 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x101c>)
 800df5e:	6818      	ldr	r0, [r3, #0]
 800df60:	f007 fc3e 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800df64:	e1f5      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}
	}else if(cmd->cmd == "default"){
 800df66:	f107 0308 	add.w	r3, r7, #8
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	497f      	ldr	r1, [pc, #508]	; (800e16c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1020>)
 800df6e:	4618      	mov	r0, r3
 800df70:	f000 fa87 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d025      	beq.n	800dfc6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe7a>
			if(cmd->type == CMDtype::get){
 800df7a:	f107 0308 	add.w	r3, r7, #8
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	6a1b      	ldr	r3, [r3, #32]
 800df82:	2b02      	cmp	r3, #2
 800df84:	f040 81e5 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				FFBWheelConfig defConf;
 800df88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800df8c:	4a78      	ldr	r2, [pc, #480]	; (800e170 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1024>)
 800df8e:	461c      	mov	r4, r3
 800df90:	4615      	mov	r5, r2
 800df92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800df9a:	c407      	stmia	r4!, {r0, r1, r2}
 800df9c:	8023      	strh	r3, [r4, #0]
				this->conf = defConf;
 800df9e:	f107 030c 	add.w	r3, r7, #12
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800dfa8:	f103 0454 	add.w	r4, r3, #84	; 0x54
 800dfac:	4615      	mov	r5, r2
 800dfae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dfb6:	c407      	stmia	r4!, {r0, r1, r2}
 800dfb8:	8023      	strh	r3, [r4, #0]
				*reply += "OK";
 800dfba:	1d3b      	adds	r3, r7, #4
 800dfbc:	4968      	ldr	r1, [pc, #416]	; (800e160 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1014>)
 800dfbe:	6818      	ldr	r0, [r3, #0]
 800dfc0:	f007 fc0e 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dfc4:	e1c5      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
			}
	}else if(cmd->cmd == "all"){
 800dfc6:	f107 0308 	add.w	r3, r7, #8
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4969      	ldr	r1, [pc, #420]	; (800e174 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1028>)
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f000 fa57 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d02a      	beq.n	800e030 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xee4>
		if(cmd->type == CMDtype::get){
 800dfda:	f107 0308 	add.w	r3, r7, #8
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	6a1b      	ldr	r3, [r3, #32]
 800dfe2:	2b02      	cmp	r3, #2
 800dfe4:	f040 81b5 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
			uint8_t* buf8 = (uint8_t*)&conf;
 800dfe8:	f107 030c 	add.w	r3, r7, #12
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	3354      	adds	r3, #84	; 0x54
 800dff0:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
			uint8_t len = sizeof(FFBWheelConfig);
 800dff4:	231e      	movs	r3, #30
 800dff6:	f887 32c3 	strb.w	r3, [r7, #707]	; 0x2c3
			for(uint8_t i = 0; i < len ;i++)
 800dffa:	2300      	movs	r3, #0
 800dffc:	f887 32ce 	strb.w	r3, [r7, #718]	; 0x2ce
 800e000:	f897 22ce 	ldrb.w	r2, [r7, #718]	; 0x2ce
 800e004:	f897 32c3 	ldrb.w	r3, [r7, #707]	; 0x2c3
 800e008:	429a      	cmp	r2, r3
 800e00a:	f080 81a2 	bcs.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				*reply += (char)buf8[i];
 800e00e:	f897 32ce 	ldrb.w	r3, [r7, #718]	; 0x2ce
 800e012:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 800e016:	4413      	add	r3, r2
 800e018:	781a      	ldrb	r2, [r3, #0]
 800e01a:	1d3b      	adds	r3, r7, #4
 800e01c:	4611      	mov	r1, r2
 800e01e:	6818      	ldr	r0, [r3, #0]
 800e020:	f007 fb88 	bl	8015734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			for(uint8_t i = 0; i < len ;i++)
 800e024:	f897 32ce 	ldrb.w	r3, [r7, #718]	; 0x2ce
 800e028:	3301      	adds	r3, #1
 800e02a:	f887 32ce 	strb.w	r3, [r7, #718]	; 0x2ce
 800e02e:	e7e7      	b.n	800e000 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xeb4>
		}
	}else if(cmd->cmd == "hidrate" && cmd->type == CMDtype::get){
 800e030:	f107 0308 	add.w	r3, r7, #8
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4950      	ldr	r1, [pc, #320]	; (800e178 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x102c>)
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 fa22 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b00      	cmp	r3, #0
 800e042:	d007      	beq.n	800e054 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf08>
 800e044:	f107 0308 	add.w	r3, r7, #8
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	6a1b      	ldr	r3, [r3, #32]
 800e04c:	2b02      	cmp	r3, #2
 800e04e:	d101      	bne.n	800e054 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf08>
 800e050:	2301      	movs	r3, #1
 800e052:	e000      	b.n	800e056 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0a>
 800e054:	2300      	movs	r3, #0
 800e056:	2b00      	cmp	r3, #0
 800e058:	d028      	beq.n	800e0ac <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf60>
		if(ffb->hid_out_period != 0){
 800e05a:	f107 030c 	add.w	r3, r7, #12
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d01b      	beq.n	800e0a0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf54>
			*reply+=std::to_string(1000/ffb->hid_out_period);
 800e068:	f107 030c 	add.w	r3, r7, #12
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e070:	689b      	ldr	r3, [r3, #8]
 800e072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e076:	fbb2 f2f3 	udiv	r2, r2, r3
 800e07a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800e07e:	4611      	mov	r1, r2
 800e080:	4618      	mov	r0, r3
 800e082:	f7fe ff3b 	bl	800cefc <_ZNSt7__cxx119to_stringEm>
 800e086:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800e08a:	1d3b      	adds	r3, r7, #4
 800e08c:	4611      	mov	r1, r2
 800e08e:	6818      	ldr	r0, [r3, #0]
 800e090:	f007 fb7c 	bl	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800e094:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800e098:	4618      	mov	r0, r3
 800e09a:	f007 fae8 	bl	801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e09e:	e158      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}else{
			*reply+="0";
 800e0a0:	1d3b      	adds	r3, r7, #4
 800e0a2:	4936      	ldr	r1, [pc, #216]	; (800e17c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1030>)
 800e0a4:	6818      	ldr	r0, [r3, #0]
 800e0a6:	f007 fb9b 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800e0aa:	e152      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}
	}else if(cmd->cmd == "led"){
 800e0ac:	f107 0308 	add.w	r3, r7, #8
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4933      	ldr	r1, [pc, #204]	; (800e180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1034>)
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f000 f9e4 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d063      	beq.n	800e188 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x103c>
		if(cmd->type == CMDtype::set){
 800e0c0:	f107 0308 	add.w	r3, r7, #8
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	6a1b      	ldr	r3, [r3, #32]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f040 8142 	bne.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
			RGB rgb_array[16] = {0};
 800e0ce:	f107 0310 	add.w	r3, r7, #16
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	2330      	movs	r3, #48	; 0x30
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	2100      	movs	r1, #0
 800e0da:	f009 fe94 	bl	8017e06 <memset>
			for(uint8_t i = 0;i<LED_COUNT;i++)
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f887 32cd 	strb.w	r3, [r7, #717]	; 0x2cd
 800e0e4:	f897 32cd 	ldrb.w	r3, [r7, #717]	; 0x2cd
 800e0e8:	2b0f      	cmp	r3, #15
 800e0ea:	d82b      	bhi.n	800e144 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xff8>
			{
				uint8_t tmp = (cmd->val >> (2*i)) & 0b11;
 800e0ec:	f107 0308 	add.w	r3, r7, #8
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	69da      	ldr	r2, [r3, #28]
 800e0f4:	f897 32cd 	ldrb.w	r3, [r7, #717]	; 0x2cd
 800e0f8:	005b      	lsls	r3, r3, #1
 800e0fa:	fa42 f303 	asr.w	r3, r2, r3
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	f003 0303 	and.w	r3, r3, #3
 800e104:	f887 32cb 	strb.w	r3, [r7, #715]	; 0x2cb
				if(tmp >=0 && tmp <=3)
 800e108:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 800e10c:	2b03      	cmp	r3, #3
 800e10e:	d813      	bhi.n	800e138 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfec>
					rgb_array[i] = defaultRGB[tmp];
 800e110:	f897 22cb 	ldrb.w	r2, [r7, #715]	; 0x2cb
 800e114:	f897 12cd 	ldrb.w	r1, [r7, #717]	; 0x2cd
 800e118:	f107 0010 	add.w	r0, r7, #16
 800e11c:	460b      	mov	r3, r1
 800e11e:	005b      	lsls	r3, r3, #1
 800e120:	440b      	add	r3, r1
 800e122:	4418      	add	r0, r3
 800e124:	4917      	ldr	r1, [pc, #92]	; (800e184 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1038>)
 800e126:	4613      	mov	r3, r2
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	4413      	add	r3, r2
 800e12c:	18ca      	adds	r2, r1, r3
 800e12e:	4603      	mov	r3, r0
 800e130:	8811      	ldrh	r1, [r2, #0]
 800e132:	7892      	ldrb	r2, [r2, #2]
 800e134:	8019      	strh	r1, [r3, #0]
 800e136:	709a      	strb	r2, [r3, #2]
			for(uint8_t i = 0;i<LED_COUNT;i++)
 800e138:	f897 32cd 	ldrb.w	r3, [r7, #717]	; 0x2cd
 800e13c:	3301      	adds	r3, #1
 800e13e:	f887 32cd 	strb.w	r3, [r7, #717]	; 0x2cd
 800e142:	e7cf      	b.n	800e0e4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf98>
			}
			setup_ws2812(rgb_array, LED_COUNT);
 800e144:	f107 0310 	add.w	r3, r7, #16
 800e148:	2110      	movs	r1, #16
 800e14a:	4618      	mov	r0, r3
 800e14c:	f004 fca0 	bl	8012a90 <_Z12setup_ws2812P3RGBh>
			*reply+="OK";
 800e150:	1d3b      	adds	r3, r7, #4
 800e152:	4903      	ldr	r1, [pc, #12]	; (800e160 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1014>)
 800e154:	6818      	ldr	r0, [r3, #0]
 800e156:	f007 fb43 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800e15a:	e0fa      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
 800e15c:	08018ad0 	.word	0x08018ad0
 800e160:	08018990 	.word	0x08018990
 800e164:	08018adc 	.word	0x08018adc
 800e168:	080189c0 	.word	0x080189c0
 800e16c:	08018ae0 	.word	0x08018ae0
 800e170:	08018c4c 	.word	0x08018c4c
 800e174:	08018ae8 	.word	0x08018ae8
 800e178:	08018aec 	.word	0x08018aec
 800e17c:	08018af4 	.word	0x08018af4
 800e180:	08018af8 	.word	0x08018af8
 800e184:	20000010 	.word	0x20000010
		}
	}else if(cmd->type == CMDtype::dash){
 800e188:	f107 0308 	add.w	r3, r7, #8
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	6a1b      	ldr	r3, [r3, #32]
 800e190:	2b07      	cmp	r3, #7
 800e192:	f040 80c8 	bne.w	800e326 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11da>
		flag = true;
 800e196:	2301      	movs	r3, #1
 800e198:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
		telemetry = (SimDisplayPacket*)(cmd->cmd.c_str());
 800e19c:	f107 0308 	add.w	r3, r7, #8
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f007 fb20 	bl	80157e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	4b6d      	ldr	r3, [pc, #436]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e1ac:	601a      	str	r2, [r3, #0]
		uint8_t rgb_array = 0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f887 32cc 	strb.w	r3, [r7, #716]	; 0x2cc
		if (telemetry->status == SDP_STATUS_OFF)
 800e1b4:	4b6a      	ldr	r3, [pc, #424]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	785b      	ldrb	r3, [r3, #1]
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	bf0c      	ite	eq
 800e1c0:	2301      	moveq	r3, #1
 800e1c2:	2300      	movne	r3, #0
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d005      	beq.n	800e1d6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x108a>
			setup_rpm_ws2812(rgb_array);
 800e1ca:	f897 32cc 	ldrb.w	r3, [r7, #716]	; 0x2cc
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f004 fc22 	bl	8012a18 <_Z16setup_rpm_ws2812h>
 800e1d4:	e0bd      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		else if (telemetry->status == SDP_STATUS_LIVE && telemetry->rpm <= (telemetry->shftrpm*100/95))
 800e1d6:	4b62      	ldr	r3, [pc, #392]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	785b      	ldrb	r3, [r3, #1]
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	2b02      	cmp	r3, #2
 800e1e0:	d117      	bne.n	800e212 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10c6>
 800e1e2:	4b5f      	ldr	r3, [pc, #380]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	885b      	ldrh	r3, [r3, #2]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	4b5c      	ldr	r3, [pc, #368]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	88db      	ldrh	r3, [r3, #6]
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	2364      	movs	r3, #100	; 0x64
 800e1f8:	fb03 f302 	mul.w	r3, r3, r2
 800e1fc:	4a59      	ldr	r2, [pc, #356]	; (800e364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1218>)
 800e1fe:	fb82 0203 	smull	r0, r2, r2, r3
 800e202:	441a      	add	r2, r3
 800e204:	1192      	asrs	r2, r2, #6
 800e206:	17db      	asrs	r3, r3, #31
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	4299      	cmp	r1, r3
 800e20c:	dc01      	bgt.n	800e212 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10c6>
 800e20e:	2301      	movs	r3, #1
 800e210:	e000      	b.n	800e214 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10c8>
 800e212:	2300      	movs	r3, #0
 800e214:	2b00      	cmp	r3, #0
 800e216:	f000 809c 	beq.w	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		{
			if(telemetry->rpm < telemetry->optrpm)
 800e21a:	4b51      	ldr	r3, [pc, #324]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	885b      	ldrh	r3, [r3, #2]
 800e220:	b29a      	uxth	r2, r3
 800e222:	4b4f      	ldr	r3, [pc, #316]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	889b      	ldrh	r3, [r3, #4]
 800e228:	b29b      	uxth	r3, r3
 800e22a:	429a      	cmp	r2, r3
 800e22c:	bf34      	ite	cc
 800e22e:	2301      	movcc	r3, #1
 800e230:	2300      	movcs	r3, #0
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b00      	cmp	r3, #0
 800e236:	d020      	beq.n	800e27a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x112e>
				rgb_array = std::max(0, telemetry->rpm - 1500) * 8 / (telemetry->optrpm - 1500);
 800e238:	2300      	movs	r3, #0
 800e23a:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800e23e:	4b48      	ldr	r3, [pc, #288]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	885b      	ldrh	r3, [r3, #2]
 800e244:	b29b      	uxth	r3, r3
 800e246:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800e24a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800e24e:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 800e252:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800e256:	4611      	mov	r1, r2
 800e258:	4618      	mov	r0, r3
 800e25a:	f000 f925 	bl	800e4a8 <_ZSt3maxIiERKT_S2_S2_>
 800e25e:	4603      	mov	r3, r0
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	00da      	lsls	r2, r3, #3
 800e264:	4b3e      	ldr	r3, [pc, #248]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	889b      	ldrh	r3, [r3, #4]
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800e270:	fb92 f3f3 	sdiv	r3, r2, r3
 800e274:	f887 32cc 	strb.w	r3, [r7, #716]	; 0x2cc
 800e278:	e04f      	b.n	800e31a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11ce>
			else if(telemetry->rpm < telemetry->shftrpm)
 800e27a:	4b39      	ldr	r3, [pc, #228]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	885b      	ldrh	r3, [r3, #2]
 800e280:	b29a      	uxth	r2, r3
 800e282:	4b37      	ldr	r3, [pc, #220]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	88db      	ldrh	r3, [r3, #6]
 800e288:	b29b      	uxth	r3, r3
 800e28a:	429a      	cmp	r2, r3
 800e28c:	bf34      	ite	cc
 800e28e:	2301      	movcc	r3, #1
 800e290:	2300      	movcs	r3, #0
 800e292:	b2db      	uxtb	r3, r3
 800e294:	2b00      	cmp	r3, #0
 800e296:	d01b      	beq.n	800e2d0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1184>
				rgb_array = 8 + (telemetry->rpm - telemetry->optrpm)*4/(telemetry->shftrpm - telemetry->optrpm);
 800e298:	4b31      	ldr	r3, [pc, #196]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	885b      	ldrh	r3, [r3, #2]
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	4b2f      	ldr	r3, [pc, #188]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	889b      	ldrh	r3, [r3, #4]
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	1ad3      	subs	r3, r2, r3
 800e2ac:	009a      	lsls	r2, r3, #2
 800e2ae:	4b2c      	ldr	r3, [pc, #176]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	88db      	ldrh	r3, [r3, #6]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	4b29      	ldr	r3, [pc, #164]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	889b      	ldrh	r3, [r3, #4]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	1acb      	subs	r3, r1, r3
 800e2c2:	fb92 f3f3 	sdiv	r3, r2, r3
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	3308      	adds	r3, #8
 800e2ca:	f887 32cc 	strb.w	r3, [r7, #716]	; 0x2cc
 800e2ce:	e024      	b.n	800e31a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11ce>
			else
				rgb_array = 12 + (telemetry->rpm - telemetry->shftrpm)*4/((telemetry->shftrpm*100/95) - telemetry->shftrpm);
 800e2d0:	4b23      	ldr	r3, [pc, #140]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	885b      	ldrh	r3, [r3, #2]
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	461a      	mov	r2, r3
 800e2da:	4b21      	ldr	r3, [pc, #132]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	88db      	ldrh	r3, [r3, #6]
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	1ad3      	subs	r3, r2, r3
 800e2e4:	009a      	lsls	r2, r3, #2
 800e2e6:	4b1e      	ldr	r3, [pc, #120]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	88db      	ldrh	r3, [r3, #6]
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	2364      	movs	r3, #100	; 0x64
 800e2f2:	fb03 f301 	mul.w	r3, r3, r1
 800e2f6:	491b      	ldr	r1, [pc, #108]	; (800e364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1218>)
 800e2f8:	fb81 0103 	smull	r0, r1, r1, r3
 800e2fc:	4419      	add	r1, r3
 800e2fe:	1189      	asrs	r1, r1, #6
 800e300:	17db      	asrs	r3, r3, #31
 800e302:	1acb      	subs	r3, r1, r3
 800e304:	4916      	ldr	r1, [pc, #88]	; (800e360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1214>)
 800e306:	6809      	ldr	r1, [r1, #0]
 800e308:	88c9      	ldrh	r1, [r1, #6]
 800e30a:	b289      	uxth	r1, r1
 800e30c:	1a5b      	subs	r3, r3, r1
 800e30e:	fb92 f3f3 	sdiv	r3, r2, r3
 800e312:	b2db      	uxtb	r3, r3
 800e314:	330c      	adds	r3, #12
 800e316:	f887 32cc 	strb.w	r3, [r7, #716]	; 0x2cc
			setup_rpm_ws2812(rgb_array);
 800e31a:	f897 32cc 	ldrb.w	r3, [r7, #716]	; 0x2cc
 800e31e:	4618      	mov	r0, r3
 800e320:	f004 fb7a 	bl	8012a18 <_Z16setup_rpm_ws2812h>
 800e324:	e015      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
		}
	}else if(cmd->cmd == "help"){
 800e326:	f107 0308 	add.w	r3, r7, #8
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	490e      	ldr	r1, [pc, #56]	; (800e368 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x121c>)
 800e32e:	4618      	mov	r0, r3
 800e330:	f000 f8a7 	bl	800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d008      	beq.n	800e34c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1200>
		flag = false;
 800e33a:	2300      	movs	r3, #0
 800e33c:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
		*reply += ""
 800e340:	1d3b      	adds	r3, r7, #4
 800e342:	490a      	ldr	r1, [pc, #40]	; (800e36c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1220>)
 800e344:	6818      	ldr	r0, [r3, #0]
 800e346:	f007 fa4b 	bl	80157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800e34a:	e002      	b.n	800e352 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1206>
				", save, zeroenc, maxPower, degrees, axismask, ppr, adcmax, inverted, constantGain, rampGain, squareGain, sinGain, triangleGain, sawToothDownGain, sawToothUpGain, springGain, damperGain, inertiaGain, frictionGain, endstopGain, totalGain, maxVelosity, maxAcceleration, maxPositionChange, minPower, pos, hidrate, led, all, default, help\n"; // TODO
	}else{
		flag = false;
 800e34c:	2300      	movs	r3, #0
 800e34e:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
	}


	return flag;
 800e352:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
}
 800e356:	4618      	mov	r0, r3
 800e358:	f507 7734 	add.w	r7, r7, #720	; 0x2d0
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bdb0      	pop	{r4, r5, r7, pc}
 800e360:	20000b40 	.word	0x20000b40
 800e364:	ac769185 	.word	0xac769185
 800e368:	08018920 	.word	0x08018920
 800e36c:	08018afc 	.word	0x08018afc

0800e370 <_ZThn8_N8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	bool command(ParsedCommand* cmd,std::string* reply);
 800e370:	f1a0 0008 	sub.w	r0, r0, #8
 800e374:	f7fe beea 	b.w	800d14c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

0800e378 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800e378:	b408      	push	{r3}
 800e37a:	b590      	push	{r4, r7, lr}
 800e37c:	b088      	sub	sp, #32
 800e37e:	af00      	add	r7, sp, #0
 800e380:	60f8      	str	r0, [r7, #12]
 800e382:	60b9      	str	r1, [r7, #8]
 800e384:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3307      	adds	r3, #7
 800e38a:	3307      	adds	r3, #7
 800e38c:	08db      	lsrs	r3, r3, #3
 800e38e:	00db      	lsls	r3, r3, #3
 800e390:	ebad 0d03 	sub.w	sp, sp, r3
 800e394:	466b      	mov	r3, sp
 800e396:	3307      	adds	r3, #7
 800e398:	08db      	lsrs	r3, r3, #3
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 800e39e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e3a2:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 800e3a4:	68bc      	ldr	r4, [r7, #8]
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3aa:	6879      	ldr	r1, [r7, #4]
 800e3ac:	69f8      	ldr	r0, [r7, #28]
 800e3ae:	47a0      	blx	r4
 800e3b0:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 800e3b2:	69bb      	ldr	r3, [r7, #24]
 800e3b4:	69fa      	ldr	r2, [r7, #28]
 800e3b6:	18d4      	adds	r4, r2, r3
 800e3b8:	f107 0314 	add.w	r3, r7, #20
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f007 f835 	bl	801542c <_ZNSaIcEC1Ev>
 800e3c2:	f107 0314 	add.w	r3, r7, #20
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	69f9      	ldr	r1, [r7, #28]
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	f000 f87f 	bl	800e4ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 800e3d0:	f107 0314 	add.w	r3, r7, #20
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f007 f82a 	bl	801542e <_ZNSaIcED1Ev>
    }
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	3720      	adds	r7, #32
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800e3e4:	b001      	add	sp, #4
 800e3e6:	4770      	bx	lr

0800e3e8 <_ZN9__gnu_cxxneIP13ParsedCommandSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e3e8:	b590      	push	{r4, r7, lr}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f7fb fc9e 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	681c      	ldr	r4, [r3, #0]
 800e3fc:	6838      	ldr	r0, [r7, #0]
 800e3fe:	f7fb fc99 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800e402:	4603      	mov	r3, r0
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	429c      	cmp	r4, r3
 800e408:	bf14      	ite	ne
 800e40a:	2301      	movne	r3, #1
 800e40c:	2300      	moveq	r3, #0
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	4618      	mov	r0, r3
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	bd90      	pop	{r4, r7, pc}

0800e418 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	601a      	str	r2, [r3, #0]
	return *this;
 800e42c:	687b      	ldr	r3, [r7, #4]
      }
 800e42e:	4618      	mov	r0, r3
 800e430:	370c      	adds	r7, #12
 800e432:	46bd      	mov	sp, r7
 800e434:	bc80      	pop	{r7}
 800e436:	4770      	bx	lr

0800e438 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4618      	mov	r0, r3
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	bc80      	pop	{r7}
 800e44c:	4770      	bx	lr

0800e44e <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e44e:	b480      	push	{r7}
 800e450:	b083      	sub	sp, #12
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	1d1a      	adds	r2, r3, #4
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	601a      	str	r2, [r3, #0]
	return *this;
 800e460:	687b      	ldr	r3, [r7, #4]
      }
 800e462:	4618      	mov	r0, r3
 800e464:	370c      	adds	r7, #12
 800e466:	46bd      	mov	sp, r7
 800e468:	bc80      	pop	{r7}
 800e46a:	4770      	bx	lr

0800e46c <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4618      	mov	r0, r3
 800e47a:	370c      	adds	r7, #12
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bc80      	pop	{r7}
 800e480:	4770      	bx	lr

0800e482 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800e482:	b580      	push	{r7, lr}
 800e484:	b082      	sub	sp, #8
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
 800e48a:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 800e48c:	6839      	ldr	r1, [r7, #0]
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f007 f9c1 	bl	8015816 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	bf0c      	ite	eq
 800e49a:	2301      	moveq	r3, #1
 800e49c:	2300      	movne	r3, #0
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3708      	adds	r7, #8
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	da01      	bge.n	800e4c2 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	e000      	b.n	800e4c4 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800e4c2:	687b      	ldr	r3, [r7, #4]
    }
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bc80      	pop	{r7}
 800e4cc:	4770      	bx	lr

0800e4ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800e4ce:	b590      	push	{r4, r7, lr}
 800e4d0:	b085      	sub	sp, #20
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	60f8      	str	r0, [r7, #12]
 800e4d6:	60b9      	str	r1, [r7, #8]
 800e4d8:	607a      	str	r2, [r7, #4]
 800e4da:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800e4dc:	68fc      	ldr	r4, [r7, #12]
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	f006 ffe5 	bl	80154ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	683a      	ldr	r2, [r7, #0]
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	f007 f9a6 	bl	801583c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	68b9      	ldr	r1, [r7, #8]
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f000 f805 	bl	800e504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3714      	adds	r7, #20
 800e500:	46bd      	mov	sp, r7
 800e502:	bd90      	pop	{r4, r7, pc}

0800e504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800e504:	b580      	push	{r7, lr}
 800e506:	b086      	sub	sp, #24
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	68b9      	ldr	r1, [r7, #8]
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f000 f804 	bl	800e522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800e51a:	bf00      	nop
 800e51c:	3718      	adds	r7, #24
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800e522:	b590      	push	{r4, r7, lr}
 800e524:	b087      	sub	sp, #28
 800e526:	af00      	add	r7, sp, #0
 800e528:	60f8      	str	r0, [r7, #12]
 800e52a:	60b9      	str	r1, [r7, #8]
 800e52c:	607a      	str	r2, [r7, #4]
 800e52e:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800e530:	4623      	mov	r3, r4
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	68b9      	ldr	r1, [r7, #8]
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f000 f804 	bl	800e544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800e53c:	bf00      	nop
 800e53e:	371c      	adds	r7, #28
 800e540:	46bd      	mov	sp, r7
 800e542:	bd90      	pop	{r4, r7, pc}

0800e544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 800e544:	b580      	push	{r7, lr}
 800e546:	b086      	sub	sp, #24
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	607a      	str	r2, [r7, #4]
 800e550:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800e552:	68b8      	ldr	r0, [r7, #8]
 800e554:	f000 f83e 	bl	800e5d4 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d005      	beq.n	800e56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800e55e:	68ba      	ldr	r2, [r7, #8]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	429a      	cmp	r2, r3
 800e564:	d001      	beq.n	800e56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800e566:	2301      	movs	r3, #1
 800e568:	e000      	b.n	800e56c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800e56a:	2300      	movs	r3, #0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d002      	beq.n	800e576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800e570:	4817      	ldr	r0, [pc, #92]	; (800e5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800e572:	f006 ff60 	bl	8015436 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800e576:	6879      	ldr	r1, [r7, #4]
 800e578:	68b8      	ldr	r0, [r7, #8]
 800e57a:	f000 f843 	bl	800e604 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800e57e:	4603      	mov	r3, r0
 800e580:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	2b0f      	cmp	r3, #15
 800e586:	d910      	bls.n	800e5aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800e588:	f107 0314 	add.w	r3, r7, #20
 800e58c:	2200      	movs	r2, #0
 800e58e:	4619      	mov	r1, r3
 800e590:	68f8      	ldr	r0, [r7, #12]
 800e592:	f006 ff95 	bl	80154c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800e596:	4603      	mov	r3, r0
 800e598:	4619      	mov	r1, r3
 800e59a:	68f8      	ldr	r0, [r7, #12]
 800e59c:	f006 ff83 	bl	80154a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	f006 ff84 	bl	80154b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f006 ff7d 	bl	80154aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	68b9      	ldr	r1, [r7, #8]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f006 ffc7 	bl	801554a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	4619      	mov	r1, r3
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f006 ff78 	bl	80154b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800e5c6:	bf00      	nop
 800e5c8:	3718      	adds	r7, #24
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	08018c6c 	.word	0x08018c6c

0800e5d4 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	bf0c      	ite	eq
 800e5e2:	2301      	moveq	r3, #1
 800e5e4:	2300      	movne	r3, #0
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bc80      	pop	{r7}
 800e5f0:	4770      	bx	lr

0800e5f2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800e5f2:	b480      	push	{r7}
 800e5f4:	b083      	sub	sp, #12
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	370c      	adds	r7, #12
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bc80      	pop	{r7}
 800e602:	4770      	bx	lr

0800e604 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800e604:	b5b0      	push	{r4, r5, r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800e60e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800e610:	1d3b      	adds	r3, r7, #4
 800e612:	4618      	mov	r0, r3
 800e614:	f7ff ffed 	bl	800e5f2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800e618:	462a      	mov	r2, r5
 800e61a:	6839      	ldr	r1, [r7, #0]
 800e61c:	4620      	mov	r0, r4
 800e61e:	f000 f805 	bl	800e62c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800e622:	4603      	mov	r3, r0
    }
 800e624:	4618      	mov	r0, r3
 800e626:	3710      	adds	r7, #16
 800e628:	46bd      	mov	sp, r7
 800e62a:	bdb0      	pop	{r4, r5, r7, pc}

0800e62c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e638:	68ba      	ldr	r2, [r7, #8]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	1ad3      	subs	r3, r2, r3
    }
 800e63e:	4618      	mov	r0, r3
 800e640:	3714      	adds	r7, #20
 800e642:	46bd      	mov	sp, r7
 800e644:	bc80      	pop	{r7}
 800e646:	4770      	bx	lr

0800e648 <_Z17usbInit_HID_Wheelv>:
#include "usbd_desc.h"

extern USBD_HandleTypeDef hUsbDeviceFS;
USBD_ClassTypeDef* handles[2];

void usbInit_HID_Wheel(){
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
	handles[CDC_IDX] = &USBD_CDC;
 800e64e:	4b24      	ldr	r3, [pc, #144]	; (800e6e0 <_Z17usbInit_HID_Wheelv+0x98>)
 800e650:	4a24      	ldr	r2, [pc, #144]	; (800e6e4 <_Z17usbInit_HID_Wheelv+0x9c>)
 800e652:	601a      	str	r2, [r3, #0]
	handles[HID_IDX] = &USBD_CUSTOM_HID;
 800e654:	4b22      	ldr	r3, [pc, #136]	; (800e6e0 <_Z17usbInit_HID_Wheelv+0x98>)
 800e656:	4a24      	ldr	r2, [pc, #144]	; (800e6e8 <_Z17usbInit_HID_Wheelv+0xa0>)
 800e658:	605a      	str	r2, [r3, #4]

	// Base Descriptor
	USB_ConfigDescType base_desc = {
 800e65a:	4a24      	ldr	r2, [pc, #144]	; (800e6ec <_Z17usbInit_HID_Wheelv+0xa4>)
 800e65c:	1d3b      	adds	r3, r7, #4
 800e65e:	ca07      	ldmia	r2, {r0, r1, r2}
 800e660:	c303      	stmia	r3!, {r0, r1}
 800e662:	701a      	strb	r2, [r3, #0]
		0xC0,   /* bmAttributes: self powered */
		0x32,   /* MaxPower 100 mA */

	};

	USBD_Init(&hUsbDeviceFS, &FS_Desc_Composite, DEVICE_FS);
 800e664:	2200      	movs	r2, #0
 800e666:	4922      	ldr	r1, [pc, #136]	; (800e6f0 <_Z17usbInit_HID_Wheelv+0xa8>)
 800e668:	4822      	ldr	r0, [pc, #136]	; (800e6f4 <_Z17usbInit_HID_Wheelv+0xac>)
 800e66a:	f005 fb3b 	bl	8013ce4 <USBD_Init>

	// Add descriptors and class functions to composite device
	USBD_Composite_Set_Classes(handles,2,&base_desc);
 800e66e:	1d3b      	adds	r3, r7, #4
 800e670:	461a      	mov	r2, r3
 800e672:	2102      	movs	r1, #2
 800e674:	481a      	ldr	r0, [pc, #104]	; (800e6e0 <_Z17usbInit_HID_Wheelv+0x98>)
 800e676:	f004 fee3 	bl	8013440 <USBD_Composite_Set_Classes>

	// Define endpoints

	//HID
	USBD_Composite_EPIN_To_Class(CUSTOM_HID_EPIN_ADDR, HID_IDX);
 800e67a:	2101      	movs	r1, #1
 800e67c:	2083      	movs	r0, #131	; 0x83
 800e67e:	f004 fe63 	bl	8013348 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPOUT_To_Class(CUSTOM_HID_EPOUT_ADDR, HID_IDX);
 800e682:	2101      	movs	r1, #1
 800e684:	2002      	movs	r0, #2
 800e686:	f004 fe75 	bl	8013374 <USBD_Composite_EPOUT_To_Class>
	USBD_Composite_InterfaceToClass(HID_INTERFACE,HID_IDX);
 800e68a:	2101      	movs	r1, #1
 800e68c:	2002      	movs	r0, #2
 800e68e:	f005 f8a1 	bl	80137d4 <USBD_Composite_InterfaceToClass>

	// CDC
	USBD_Composite_EPIN_To_Class(CDC_CMD_EP, CDC_IDX);
 800e692:	2100      	movs	r1, #0
 800e694:	2082      	movs	r0, #130	; 0x82
 800e696:	f004 fe57 	bl	8013348 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPIN_To_Class(CDC_IN_EP, CDC_IDX);
 800e69a:	2100      	movs	r1, #0
 800e69c:	2081      	movs	r0, #129	; 0x81
 800e69e:	f004 fe53 	bl	8013348 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPIN_To_Class(CDC_OUT_EP, CDC_IDX);
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	2001      	movs	r0, #1
 800e6a6:	f004 fe4f 	bl	8013348 <USBD_Composite_EPIN_To_Class>

	USBD_Composite_InterfaceToClass(CDC_INTERFACE,CDC_IDX);
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	2000      	movs	r0, #0
 800e6ae:	f005 f891 	bl	80137d4 <USBD_Composite_InterfaceToClass>
	USBD_Composite_InterfaceToClass(CDC_INTERFACE_DATA,CDC_IDX);
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	2001      	movs	r0, #1
 800e6b6:	f005 f88d 	bl	80137d4 <USBD_Composite_InterfaceToClass>


	USBD_RegisterClass(&hUsbDeviceFS, &USBD_Composite);
 800e6ba:	490f      	ldr	r1, [pc, #60]	; (800e6f8 <_Z17usbInit_HID_Wheelv+0xb0>)
 800e6bc:	480d      	ldr	r0, [pc, #52]	; (800e6f4 <_Z17usbInit_HID_Wheelv+0xac>)
 800e6be:	f005 fb3c 	bl	8013d3a <USBD_RegisterClass>

	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800e6c2:	490e      	ldr	r1, [pc, #56]	; (800e6fc <_Z17usbInit_HID_Wheelv+0xb4>)
 800e6c4:	480b      	ldr	r0, [pc, #44]	; (800e6f4 <_Z17usbInit_HID_Wheelv+0xac>)
 800e6c6:	f004 fc6b 	bl	8012fa0 <USBD_CDC_RegisterInterface>
	USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 800e6ca:	490d      	ldr	r1, [pc, #52]	; (800e700 <_Z17usbInit_HID_Wheelv+0xb8>)
 800e6cc:	4809      	ldr	r0, [pc, #36]	; (800e6f4 <_Z17usbInit_HID_Wheelv+0xac>)
 800e6ce:	f006 fd43 	bl	8015158 <USBD_CUSTOM_HID_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 800e6d2:	4808      	ldr	r0, [pc, #32]	; (800e6f4 <_Z17usbInit_HID_Wheelv+0xac>)
 800e6d4:	f005 fb4a 	bl	8013d6c <USBD_Start>
}
 800e6d8:	bf00      	nop
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	20000b44 	.word	0x20000b44
 800e6e4:	2000002c 	.word	0x2000002c
 800e6e8:	2000061c 	.word	0x2000061c
 800e6ec:	08018c98 	.word	0x08018c98
 800e6f0:	200006f0 	.word	0x200006f0
 800e6f4:	20000918 	.word	0x20000918
 800e6f8:	200000c0 	.word	0x200000c0
 800e6fc:	200000b0 	.word	0x200000b0
 800e700:	20000608 	.word	0x20000608

0800e704 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e712:	4618      	mov	r0, r3
 800e714:	370c      	adds	r7, #12
 800e716:	46bd      	mov	sp, r7
 800e718:	bc80      	pop	{r7}
 800e71a:	4770      	bx	lr

0800e71c <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f007 f995 	bl	8015a54 <cosf>
 800e72a:	4603      	mov	r3, r0
 800e72c:	4618      	mov	r0, r3
 800e72e:	3708      	adds	r7, #8
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f007 fbc7 	bl	8015ed0 <expf>
 800e742:	4603      	mov	r3, r0
 800e744:	4618      	mov	r0, r3
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <_ZN7FiltersC1Ev>:
 *      Author: kks19
 */

#include <Filters.h>

Filters::Filters()
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
{
	// TODO Auto-generated constructor stub

}
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	4618      	mov	r0, r3
 800e758:	370c      	adds	r7, #12
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bc80      	pop	{r7}
 800e75e:	4770      	bx	lr

0800e760 <_ZN7FiltersC1Eff5ORDER4TYPE>:

Filters::Filters(float hz_, float ts_, ORDER od_, TYPE ty_) :
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	70fb      	strb	r3, [r7, #3]
  ts( ts_ ),
  hz( hz_ ),
  od( od_ ),
  ty( ty_ )
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	68ba      	ldr	r2, [r7, #8]
 800e778:	605a      	str	r2, [r3, #4]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	78fa      	ldrb	r2, [r7, #3]
 800e77e:	721a      	strb	r2, [r3, #8]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	7e3a      	ldrb	r2, [r7, #24]
 800e784:	725a      	strb	r2, [r3, #9]
{
  init();
 800e786:	2101      	movs	r1, #1
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f000 f80f 	bl	800e7ac <_ZN7Filters4initEh>
}
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	4618      	mov	r0, r3
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <_ZN7FiltersD1Ev>:

Filters::~Filters()
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
{
	// TODO Auto-generated destructor stub
}
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bc80      	pop	{r7}
 800e7aa:	4770      	bx	lr

0800e7ac <_ZN7Filters4initEh>:

void Filters::init(uint8_t doFlush) {
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	70fb      	strb	r3, [r7, #3]
  if(doFlush) flush();
 800e7b8:	78fb      	ldrb	r3, [r7, #3]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d002      	beq.n	800e7c4 <_ZN7Filters4initEh+0x18>
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 f840 	bl	800e844 <_ZN7Filters5flushEv>
  f_err  = false;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  f_warn = false;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  switch ((uint8_t)ty) {
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	7a5b      	ldrb	r3, [r3, #9]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d002      	beq.n	800e7e2 <_ZN7Filters4initEh+0x36>
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d004      	beq.n	800e7ea <_ZN7Filters4initEh+0x3e>
      break;
    case (uint8_t)TYPE::HIGHPASS :
      initHighPass();
      break;
  }
}
 800e7e0:	e007      	b.n	800e7f2 <_ZN7Filters4initEh+0x46>
      initLowPass();
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 fa1c 	bl	800ec20 <_ZN7Filters11initLowPassEv>
      break;
 800e7e8:	e003      	b.n	800e7f2 <_ZN7Filters4initEh+0x46>
      initHighPass();
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 fe70 	bl	800f4d0 <_ZN7Filters12initHighPassEv>
      break;
 800e7f0:	bf00      	nop
}
 800e7f2:	bf00      	nop
 800e7f4:	3708      	adds	r7, #8
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}

0800e7fa <_ZN7Filters8filterInEf>:

float Filters::filterIn(float input) {
 800e7fa:	b580      	push	{r7, lr}
 800e7fc:	b082      	sub	sp, #8
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	6078      	str	r0, [r7, #4]
 800e802:	6039      	str	r1, [r7, #0]
  if(f_err) return 0.0;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d002      	beq.n	800e814 <_ZN7Filters8filterInEf+0x1a>
 800e80e:	f04f 0300 	mov.w	r3, #0
 800e812:	e013      	b.n	800e83c <_ZN7Filters8filterInEf+0x42>

  switch ((uint8_t)ty) {
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	7a5b      	ldrb	r3, [r3, #9]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d002      	beq.n	800e822 <_ZN7Filters8filterInEf+0x28>
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d006      	beq.n	800e82e <_ZN7Filters8filterInEf+0x34>
 800e820:	e00b      	b.n	800e83a <_ZN7Filters8filterInEf+0x40>
    case (uint8_t)TYPE::LOWPASS :
      return computeLowPass(input);
 800e822:	6839      	ldr	r1, [r7, #0]
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 f82f 	bl	800e888 <_ZN7Filters14computeLowPassEf>
 800e82a:	4603      	mov	r3, r0
 800e82c:	e006      	b.n	800e83c <_ZN7Filters8filterInEf+0x42>
      break;
    case (uint8_t)TYPE::HIGHPASS :
      return computeHighPass(input);
 800e82e:	6839      	ldr	r1, [r7, #0]
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f000 f93f 	bl	800eab4 <_ZN7Filters15computeHighPassEf>
 800e836:	4603      	mov	r3, r0
 800e838:	e000      	b.n	800e83c <_ZN7Filters8filterInEf+0x42>
      break;
    default:
      return input;
 800e83a:	683b      	ldr	r3, [r7, #0]
  }
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3708      	adds	r7, #8
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <_ZN7Filters5flushEv>:

void Filters::flush() {
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  for(uint8_t i=0; i<MAX_ORDER; i++) {
 800e84c:	2300      	movs	r3, #0
 800e84e:	73fb      	strb	r3, [r7, #15]
 800e850:	7bfb      	ldrb	r3, [r7, #15]
 800e852:	2b04      	cmp	r3, #4
 800e854:	d812      	bhi.n	800e87c <_ZN7Filters5flushEv+0x38>
    u[i] = 0.0;
 800e856:	7bfa      	ldrb	r2, [r7, #15]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	321e      	adds	r2, #30
 800e85c:	f04f 0100 	mov.w	r1, #0
 800e860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    y[i] = 0.0;
 800e864:	7bfb      	ldrb	r3, [r7, #15]
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	3318      	adds	r3, #24
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	4413      	add	r3, r2
 800e86e:	f04f 0200 	mov.w	r2, #0
 800e872:	605a      	str	r2, [r3, #4]
  for(uint8_t i=0; i<MAX_ORDER; i++) {
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	3301      	adds	r3, #1
 800e878:	73fb      	strb	r3, [r7, #15]
 800e87a:	e7e9      	b.n	800e850 <_ZN7Filters5flushEv+0xc>
  }
}
 800e87c:	bf00      	nop
 800e87e:	3714      	adds	r7, #20
 800e880:	46bd      	mov	sp, r7
 800e882:	bc80      	pop	{r7}
 800e884:	4770      	bx	lr
	...

0800e888 <_ZN7Filters14computeLowPassEf>:

// PRIVATE METHODS  * * * * * * * * * * * * * * * * * * * *

inline float Filters::computeLowPass(float input) {
 800e888:	b590      	push	{r4, r7, lr}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 800e892:	2304      	movs	r3, #4
 800e894:	73fb      	strb	r3, [r7, #15]
 800e896:	7bfb      	ldrb	r3, [r7, #15]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d01c      	beq.n	800e8d6 <_ZN7Filters14computeLowPassEf+0x4e>
    y[i] = y[i-1];
 800e89c:	7bfb      	ldrb	r3, [r7, #15]
 800e89e:	3b01      	subs	r3, #1
 800e8a0:	7bf8      	ldrb	r0, [r7, #15]
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	3318      	adds	r3, #24
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	4413      	add	r3, r2
 800e8aa:	685a      	ldr	r2, [r3, #4]
 800e8ac:	6879      	ldr	r1, [r7, #4]
 800e8ae:	f100 0318 	add.w	r3, r0, #24
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	440b      	add	r3, r1
 800e8b6:	605a      	str	r2, [r3, #4]
    u[i] = u[i-1];
 800e8b8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ba:	1e59      	subs	r1, r3, #1
 800e8bc:	7bfa      	ldrb	r2, [r7, #15]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	311e      	adds	r1, #30
 800e8c2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	321e      	adds	r2, #30
 800e8ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 800e8ce:	7bfb      	ldrb	r3, [r7, #15]
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	73fb      	strb	r3, [r7, #15]
 800e8d4:	e7df      	b.n	800e896 <_ZN7Filters14computeLowPassEf+0xe>
  }

  switch((uint8_t)od) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	7a1b      	ldrb	r3, [r3, #8]
 800e8da:	2b03      	cmp	r3, #3
 800e8dc:	f200 80dd 	bhi.w	800ea9a <_ZN7Filters14computeLowPassEf+0x212>
 800e8e0:	a201      	add	r2, pc, #4	; (adr r2, 800e8e8 <_ZN7Filters14computeLowPassEf+0x60>)
 800e8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e6:	bf00      	nop
 800e8e8:	0800e8f9 	.word	0x0800e8f9
 800e8ec:	0800e92d 	.word	0x0800e92d
 800e8f0:	0800e989 	.word	0x0800e989
 800e8f4:	0800ea03 	.word	0x0800ea03
    case (uint8_t)ORDER::OD1:
        y[0] = k1*y[1] + k0*input;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e900:	4619      	mov	r1, r3
 800e902:	4610      	mov	r0, r2
 800e904:	f7f2 fa1e 	bl	8000d44 <__aeabi_fmul>
 800e908:	4603      	mov	r3, r0
 800e90a:	461c      	mov	r4, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e910:	6839      	ldr	r1, [r7, #0]
 800e912:	4618      	mov	r0, r3
 800e914:	f7f2 fa16 	bl	8000d44 <__aeabi_fmul>
 800e918:	4603      	mov	r3, r0
 800e91a:	4619      	mov	r1, r3
 800e91c:	4620      	mov	r0, r4
 800e91e:	f7f2 f909 	bl	8000b34 <__addsf3>
 800e922:	4603      	mov	r3, r0
 800e924:	461a      	mov	r2, r3
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800e92a:	e0ba      	b.n	800eaa2 <_ZN7Filters14computeLowPassEf+0x21a>
    case (uint8_t)ORDER::OD2:
        y[0] = k1*y[1] - k2*y[2] + (k0*input)/KM;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e934:	4619      	mov	r1, r3
 800e936:	4610      	mov	r0, r2
 800e938:	f7f2 fa04 	bl	8000d44 <__aeabi_fmul>
 800e93c:	4603      	mov	r3, r0
 800e93e:	461c      	mov	r4, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e948:	4619      	mov	r1, r3
 800e94a:	4610      	mov	r0, r2
 800e94c:	f7f2 f9fa 	bl	8000d44 <__aeabi_fmul>
 800e950:	4603      	mov	r3, r0
 800e952:	4619      	mov	r1, r3
 800e954:	4620      	mov	r0, r4
 800e956:	f7f2 f8eb 	bl	8000b30 <__aeabi_fsub>
 800e95a:	4603      	mov	r3, r0
 800e95c:	461c      	mov	r4, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e962:	6839      	ldr	r1, [r7, #0]
 800e964:	4618      	mov	r0, r3
 800e966:	f7f2 f9ed 	bl	8000d44 <__aeabi_fmul>
 800e96a:	4603      	mov	r3, r0
 800e96c:	4950      	ldr	r1, [pc, #320]	; (800eab0 <_ZN7Filters14computeLowPassEf+0x228>)
 800e96e:	4618      	mov	r0, r3
 800e970:	f7f2 fa9c 	bl	8000eac <__aeabi_fdiv>
 800e974:	4603      	mov	r3, r0
 800e976:	4619      	mov	r1, r3
 800e978:	4620      	mov	r0, r4
 800e97a:	f7f2 f8db 	bl	8000b34 <__addsf3>
 800e97e:	4603      	mov	r3, r0
 800e980:	461a      	mov	r2, r3
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800e986:	e08c      	b.n	800eaa2 <_ZN7Filters14computeLowPassEf+0x21a>
    case (uint8_t)ORDER::OD3:
        y[0] = k1*y[1] - k2*y[2] + k3*y[3] + (k0*input)/KM;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e990:	4619      	mov	r1, r3
 800e992:	4610      	mov	r0, r2
 800e994:	f7f2 f9d6 	bl	8000d44 <__aeabi_fmul>
 800e998:	4603      	mov	r3, r0
 800e99a:	461c      	mov	r4, r3
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	4610      	mov	r0, r2
 800e9a8:	f7f2 f9cc 	bl	8000d44 <__aeabi_fmul>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f7f2 f8bd 	bl	8000b30 <__aeabi_fsub>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	461c      	mov	r4, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	4610      	mov	r0, r2
 800e9c6:	f7f2 f9bd 	bl	8000d44 <__aeabi_fmul>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f7f2 f8b0 	bl	8000b34 <__addsf3>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	461c      	mov	r4, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9dc:	6839      	ldr	r1, [r7, #0]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7f2 f9b0 	bl	8000d44 <__aeabi_fmul>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	4932      	ldr	r1, [pc, #200]	; (800eab0 <_ZN7Filters14computeLowPassEf+0x228>)
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7f2 fa5f 	bl	8000eac <__aeabi_fdiv>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f7f2 f89e 	bl	8000b34 <__addsf3>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800ea00:	e04f      	b.n	800eaa2 <_ZN7Filters14computeLowPassEf+0x21a>
    case (uint8_t)ORDER::OD4:
        y[0] = k1*y[1] - k2*y[2] + k3*y[3] - k4*y[4] + (k0*input)/KM;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	4610      	mov	r0, r2
 800ea0e:	f7f2 f999 	bl	8000d44 <__aeabi_fmul>
 800ea12:	4603      	mov	r3, r0
 800ea14:	461c      	mov	r4, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4610      	mov	r0, r2
 800ea22:	f7f2 f98f 	bl	8000d44 <__aeabi_fmul>
 800ea26:	4603      	mov	r3, r0
 800ea28:	4619      	mov	r1, r3
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f7f2 f880 	bl	8000b30 <__aeabi_fsub>
 800ea30:	4603      	mov	r3, r0
 800ea32:	461c      	mov	r4, r3
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	4610      	mov	r0, r2
 800ea40:	f7f2 f980 	bl	8000d44 <__aeabi_fmul>
 800ea44:	4603      	mov	r3, r0
 800ea46:	4619      	mov	r1, r3
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f7f2 f873 	bl	8000b34 <__addsf3>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	461c      	mov	r4, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	4610      	mov	r0, r2
 800ea5e:	f7f2 f971 	bl	8000d44 <__aeabi_fmul>
 800ea62:	4603      	mov	r3, r0
 800ea64:	4619      	mov	r1, r3
 800ea66:	4620      	mov	r0, r4
 800ea68:	f7f2 f862 	bl	8000b30 <__aeabi_fsub>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	461c      	mov	r4, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea74:	6839      	ldr	r1, [r7, #0]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7f2 f964 	bl	8000d44 <__aeabi_fmul>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	490c      	ldr	r1, [pc, #48]	; (800eab0 <_ZN7Filters14computeLowPassEf+0x228>)
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7f2 fa13 	bl	8000eac <__aeabi_fdiv>
 800ea86:	4603      	mov	r3, r0
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	f7f2 f852 	bl	8000b34 <__addsf3>
 800ea90:	4603      	mov	r3, r0
 800ea92:	461a      	mov	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800ea98:	e003      	b.n	800eaa2 <_ZN7Filters14computeLowPassEf+0x21a>
    default:
        y[0] = input;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	683a      	ldr	r2, [r7, #0]
 800ea9e:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800eaa0:	bf00      	nop
  }
  return y[0];
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3714      	adds	r7, #20
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd90      	pop	{r4, r7, pc}
 800eaae:	bf00      	nop
 800eab0:	42c80000 	.word	0x42c80000

0800eab4 <_ZN7Filters15computeHighPassEf>:

inline float Filters::computeHighPass(float input) {
 800eab4:	b590      	push	{r4, r7, lr}
 800eab6:	b085      	sub	sp, #20
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 800eabe:	2304      	movs	r3, #4
 800eac0:	73fb      	strb	r3, [r7, #15]
 800eac2:	7bfb      	ldrb	r3, [r7, #15]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d01c      	beq.n	800eb02 <_ZN7Filters15computeHighPassEf+0x4e>
    y[i] = y[i-1];
 800eac8:	7bfb      	ldrb	r3, [r7, #15]
 800eaca:	3b01      	subs	r3, #1
 800eacc:	7bf8      	ldrb	r0, [r7, #15]
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	3318      	adds	r3, #24
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	4413      	add	r3, r2
 800ead6:	685a      	ldr	r2, [r3, #4]
 800ead8:	6879      	ldr	r1, [r7, #4]
 800eada:	f100 0318 	add.w	r3, r0, #24
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	440b      	add	r3, r1
 800eae2:	605a      	str	r2, [r3, #4]
    u[i] = u[i-1];
 800eae4:	7bfb      	ldrb	r3, [r7, #15]
 800eae6:	1e59      	subs	r1, r3, #1
 800eae8:	7bfa      	ldrb	r2, [r7, #15]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	311e      	adds	r1, #30
 800eaee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	321e      	adds	r2, #30
 800eaf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 800eafa:	7bfb      	ldrb	r3, [r7, #15]
 800eafc:	3b01      	subs	r3, #1
 800eafe:	73fb      	strb	r3, [r7, #15]
 800eb00:	e7df      	b.n	800eac2 <_ZN7Filters15computeHighPassEf+0xe>
  }
  u[0] = input;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	683a      	ldr	r2, [r7, #0]
 800eb06:	679a      	str	r2, [r3, #120]	; 0x78

  switch((uint8_t)od) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	7a1b      	ldrb	r3, [r3, #8]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d004      	beq.n	800eb1a <_ZN7Filters15computeHighPassEf+0x66>
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	db77      	blt.n	800ec04 <_ZN7Filters15computeHighPassEf+0x150>
 800eb14:	2b03      	cmp	r3, #3
 800eb16:	dc75      	bgt.n	800ec04 <_ZN7Filters15computeHighPassEf+0x150>
 800eb18:	e02a      	b.n	800eb70 <_ZN7Filters15computeHighPassEf+0xbc>
    case (uint8_t)ORDER::OD1:
        y[0] = k1*y[1] + j0*u[0] + j1*u[1];
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb22:	4619      	mov	r1, r3
 800eb24:	4610      	mov	r0, r2
 800eb26:	f7f2 f90d 	bl	8000d44 <__aeabi_fmul>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	461c      	mov	r4, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb36:	4619      	mov	r1, r3
 800eb38:	4610      	mov	r0, r2
 800eb3a:	f7f2 f903 	bl	8000d44 <__aeabi_fmul>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	4619      	mov	r1, r3
 800eb42:	4620      	mov	r0, r4
 800eb44:	f7f1 fff6 	bl	8000b34 <__addsf3>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	461c      	mov	r4, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb54:	4619      	mov	r1, r3
 800eb56:	4610      	mov	r0, r2
 800eb58:	f7f2 f8f4 	bl	8000d44 <__aeabi_fmul>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	4619      	mov	r1, r3
 800eb60:	4620      	mov	r0, r4
 800eb62:	f7f1 ffe7 	bl	8000b34 <__addsf3>
 800eb66:	4603      	mov	r3, r0
 800eb68:	461a      	mov	r2, r3
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800eb6e:	e04e      	b.n	800ec0e <_ZN7Filters15computeHighPassEf+0x15a>
    case (uint8_t)ORDER::OD2:
    case (uint8_t)ORDER::OD3:
    case (uint8_t)ORDER::OD4:
        y[0] = k1*y[1] + k2*y[2] + j0*u[0] + j1*u[1] + j2*u[2];
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb78:	4619      	mov	r1, r3
 800eb7a:	4610      	mov	r0, r2
 800eb7c:	f7f2 f8e2 	bl	8000d44 <__aeabi_fmul>
 800eb80:	4603      	mov	r3, r0
 800eb82:	461c      	mov	r4, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	4610      	mov	r0, r2
 800eb90:	f7f2 f8d8 	bl	8000d44 <__aeabi_fmul>
 800eb94:	4603      	mov	r3, r0
 800eb96:	4619      	mov	r1, r3
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f7f1 ffcb 	bl	8000b34 <__addsf3>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	461c      	mov	r4, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebaa:	4619      	mov	r1, r3
 800ebac:	4610      	mov	r0, r2
 800ebae:	f7f2 f8c9 	bl	8000d44 <__aeabi_fmul>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	f7f1 ffbc 	bl	8000b34 <__addsf3>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	461c      	mov	r4, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebc8:	4619      	mov	r1, r3
 800ebca:	4610      	mov	r0, r2
 800ebcc:	f7f2 f8ba 	bl	8000d44 <__aeabi_fmul>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f7f1 ffad 	bl	8000b34 <__addsf3>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	461c      	mov	r4, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebe8:	4619      	mov	r1, r3
 800ebea:	4610      	mov	r0, r2
 800ebec:	f7f2 f8aa 	bl	8000d44 <__aeabi_fmul>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f7f1 ff9d 	bl	8000b34 <__addsf3>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800ec02:	e004      	b.n	800ec0e <_ZN7Filters15computeHighPassEf+0x15a>
    default:
        y[0] = u[0];
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800ec0c:	bf00      	nop
  }
  return y[0];
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3714      	adds	r7, #20
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd90      	pop	{r4, r7, pc}
 800ec1a:	0000      	movs	r0, r0
 800ec1c:	0000      	movs	r0, r0
	...

0800ec20 <_ZN7Filters11initLowPassEv>:


inline void  Filters::initLowPass() {
 800ec20:	b5b0      	push	{r4, r5, r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  switch((uint8_t)od) {
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	7a1b      	ldrb	r3, [r3, #8]
 800ec2c:	2b03      	cmp	r3, #3
 800ec2e:	f200 8444 	bhi.w	800f4ba <_ZN7Filters11initLowPassEv+0x89a>
 800ec32:	a201      	add	r2, pc, #4	; (adr r2, 800ec38 <_ZN7Filters11initLowPassEv+0x18>)
 800ec34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec38:	0800ec49 	.word	0x0800ec49
 800ec3c:	0800ecab 	.word	0x0800ecab
 800ec40:	0800ee45 	.word	0x0800ee45
 800ec44:	0800f10d 	.word	0x0800f10d
    case (uint8_t)ORDER::OD1:
        a  = 2.0*PI*hz;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7f1 fbeb 	bl	8000428 <__aeabi_f2d>
 800ec52:	a375      	add	r3, pc, #468	; (adr r3, 800ee28 <_ZN7Filters11initLowPassEv+0x208>)
 800ec54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec58:	f7f1 fc3e 	bl	80004d8 <__aeabi_dmul>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	460c      	mov	r4, r1
 800ec60:	4618      	mov	r0, r3
 800ec62:	4621      	mov	r1, r4
 800ec64:	f7f1 ff10 	bl	8000a88 <__aeabi_d2f>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	60da      	str	r2, [r3, #12]
        k1 = exp(-a*ts);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	4610      	mov	r0, r2
 800ec7e:	f7f2 f861 	bl	8000d44 <__aeabi_fmul>
 800ec82:	4603      	mov	r3, r0
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7ff fd55 	bl	800e734 <_ZSt3expf>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	645a      	str	r2, [r3, #68]	; 0x44
        k0 = 1.0 - k1;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec94:	4619      	mov	r1, r3
 800ec96:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ec9a:	f7f1 ff49 	bl	8000b30 <__aeabi_fsub>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	461a      	mov	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800eca6:	f000 bc08 	b.w	800f4ba <_ZN7Filters11initLowPassEv+0x89a>
    case (uint8_t)ORDER::OD2:
        a  = -PI*hz*SQRT2;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	4960      	ldr	r1, [pc, #384]	; (800ee30 <_ZN7Filters11initLowPassEv+0x210>)
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7f2 f847 	bl	8000d44 <__aeabi_fmul>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	495e      	ldr	r1, [pc, #376]	; (800ee34 <_ZN7Filters11initLowPassEv+0x214>)
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7f2 f842 	bl	8000d44 <__aeabi_fmul>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	60da      	str	r2, [r3, #12]
        b  =  PI*hz*SQRT2;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	495a      	ldr	r1, [pc, #360]	; (800ee38 <_ZN7Filters11initLowPassEv+0x218>)
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7f2 f838 	bl	8000d44 <__aeabi_fmul>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	4957      	ldr	r1, [pc, #348]	; (800ee34 <_ZN7Filters11initLowPassEv+0x214>)
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7f2 f833 	bl	8000d44 <__aeabi_fmul>
 800ecde:	4603      	mov	r3, r0
 800ece0:	461a      	mov	r2, r3
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	611a      	str	r2, [r3, #16]
        k2 = ap(exp(2.0*ts*a));
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7f1 fb9c 	bl	8000428 <__aeabi_f2d>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	f7f1 fa3a 	bl	800016c <__adddf3>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	460c      	mov	r4, r1
 800ecfc:	4625      	mov	r5, r4
 800ecfe:	461c      	mov	r4, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7f1 fb8f 	bl	8000428 <__aeabi_f2d>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	4620      	mov	r0, r4
 800ed10:	4629      	mov	r1, r5
 800ed12:	f7f1 fbe1 	bl	80004d8 <__aeabi_dmul>
 800ed16:	4603      	mov	r3, r0
 800ed18:	460c      	mov	r4, r1
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	4621      	mov	r1, r4
 800ed1e:	f006 ff03 	bl	8015b28 <exp>
 800ed22:	4603      	mov	r3, r0
 800ed24:	460c      	mov	r4, r1
 800ed26:	4618      	mov	r0, r3
 800ed28:	4621      	mov	r1, r4
 800ed2a:	f7f1 fead 	bl	8000a88 <__aeabi_d2f>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	4619      	mov	r1, r3
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 fcf0 	bl	800f718 <_ZN7Filters2apEf>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	649a      	str	r2, [r3, #72]	; 0x48
        k1 = ap(2.0*exp(a*ts)*cos(b*ts));
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	68da      	ldr	r2, [r3, #12]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4619      	mov	r1, r3
 800ed48:	4610      	mov	r0, r2
 800ed4a:	f7f1 fffb 	bl	8000d44 <__aeabi_fmul>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7ff fcef 	bl	800e734 <_ZSt3expf>
 800ed56:	4603      	mov	r3, r0
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7f1 fb65 	bl	8000428 <__aeabi_f2d>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	460b      	mov	r3, r1
 800ed62:	f7f1 fa03 	bl	800016c <__adddf3>
 800ed66:	4603      	mov	r3, r0
 800ed68:	460c      	mov	r4, r1
 800ed6a:	4625      	mov	r5, r4
 800ed6c:	461c      	mov	r4, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	691a      	ldr	r2, [r3, #16]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	4619      	mov	r1, r3
 800ed78:	4610      	mov	r0, r2
 800ed7a:	f7f1 ffe3 	bl	8000d44 <__aeabi_fmul>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7ff fccb 	bl	800e71c <_ZSt3cosf>
 800ed86:	4603      	mov	r3, r0
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7f1 fb4d 	bl	8000428 <__aeabi_f2d>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	460b      	mov	r3, r1
 800ed92:	4620      	mov	r0, r4
 800ed94:	4629      	mov	r1, r5
 800ed96:	f7f1 fb9f 	bl	80004d8 <__aeabi_dmul>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	460c      	mov	r4, r1
 800ed9e:	4618      	mov	r0, r3
 800eda0:	4621      	mov	r1, r4
 800eda2:	f7f1 fe71 	bl	8000a88 <__aeabi_d2f>
 800eda6:	4603      	mov	r3, r0
 800eda8:	4619      	mov	r1, r3
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 fcb4 	bl	800f718 <_ZN7Filters2apEf>
 800edb0:	4602      	mov	r2, r0
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	645a      	str	r2, [r3, #68]	; 0x44
        k0 = ap(1.0*KM - k1*KM + k2*KM);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edba:	4920      	ldr	r1, [pc, #128]	; (800ee3c <_ZN7Filters11initLowPassEv+0x21c>)
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7f1 ffc1 	bl	8000d44 <__aeabi_fmul>
 800edc2:	4603      	mov	r3, r0
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7f1 fb2f 	bl	8000428 <__aeabi_f2d>
 800edca:	4603      	mov	r3, r0
 800edcc:	460c      	mov	r4, r1
 800edce:	461a      	mov	r2, r3
 800edd0:	4623      	mov	r3, r4
 800edd2:	f04f 0000 	mov.w	r0, #0
 800edd6:	491a      	ldr	r1, [pc, #104]	; (800ee40 <_ZN7Filters11initLowPassEv+0x220>)
 800edd8:	f7f1 f9c6 	bl	8000168 <__aeabi_dsub>
 800eddc:	4603      	mov	r3, r0
 800edde:	460c      	mov	r4, r1
 800ede0:	4625      	mov	r5, r4
 800ede2:	461c      	mov	r4, r3
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ede8:	4914      	ldr	r1, [pc, #80]	; (800ee3c <_ZN7Filters11initLowPassEv+0x21c>)
 800edea:	4618      	mov	r0, r3
 800edec:	f7f1 ffaa 	bl	8000d44 <__aeabi_fmul>
 800edf0:	4603      	mov	r3, r0
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7f1 fb18 	bl	8000428 <__aeabi_f2d>
 800edf8:	4602      	mov	r2, r0
 800edfa:	460b      	mov	r3, r1
 800edfc:	4620      	mov	r0, r4
 800edfe:	4629      	mov	r1, r5
 800ee00:	f7f1 f9b4 	bl	800016c <__adddf3>
 800ee04:	4603      	mov	r3, r0
 800ee06:	460c      	mov	r4, r1
 800ee08:	4618      	mov	r0, r3
 800ee0a:	4621      	mov	r1, r4
 800ee0c:	f7f1 fe3c 	bl	8000a88 <__aeabi_d2f>
 800ee10:	4603      	mov	r3, r0
 800ee12:	4619      	mov	r1, r3
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 fc7f 	bl	800f718 <_ZN7Filters2apEf>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800ee20:	e34b      	b.n	800f4ba <_ZN7Filters11initLowPassEv+0x89a>
 800ee22:	bf00      	nop
 800ee24:	f3af 8000 	nop.w
 800ee28:	60000000 	.word	0x60000000
 800ee2c:	401921fb 	.word	0x401921fb
 800ee30:	c0490fdb 	.word	0xc0490fdb
 800ee34:	3fb504f3 	.word	0x3fb504f3
 800ee38:	40490fdb 	.word	0x40490fdb
 800ee3c:	42c80000 	.word	0x42c80000
 800ee40:	40590000 	.word	0x40590000
    case (uint8_t)ORDER::OD3:
        a  = -PI*hz;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	49ab      	ldr	r1, [pc, #684]	; (800f0f8 <_ZN7Filters11initLowPassEv+0x4d8>)
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7f1 ff7a 	bl	8000d44 <__aeabi_fmul>
 800ee50:	4603      	mov	r3, r0
 800ee52:	461a      	mov	r2, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	60da      	str	r2, [r3, #12]
        b  =  PI*hz*SQRT3;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	49a7      	ldr	r1, [pc, #668]	; (800f0fc <_ZN7Filters11initLowPassEv+0x4dc>)
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7f1 ff70 	bl	8000d44 <__aeabi_fmul>
 800ee64:	4603      	mov	r3, r0
 800ee66:	49a6      	ldr	r1, [pc, #664]	; (800f100 <_ZN7Filters11initLowPassEv+0x4e0>)
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7f1 ff6b 	bl	8000d44 <__aeabi_fmul>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	461a      	mov	r2, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	611a      	str	r2, [r3, #16]
        c  =  2.0*PI*hz;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7f1 fad4 	bl	8000428 <__aeabi_f2d>
 800ee80:	a39b      	add	r3, pc, #620	; (adr r3, 800f0f0 <_ZN7Filters11initLowPassEv+0x4d0>)
 800ee82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee86:	f7f1 fb27 	bl	80004d8 <__aeabi_dmul>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	4618      	mov	r0, r3
 800ee90:	4621      	mov	r1, r4
 800ee92:	f7f1 fdf9 	bl	8000a88 <__aeabi_d2f>
 800ee96:	4602      	mov	r2, r0
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	615a      	str	r2, [r3, #20]
        b3 = exp(-c*ts);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	695b      	ldr	r3, [r3, #20]
 800eea0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4619      	mov	r1, r3
 800eeaa:	4610      	mov	r0, r2
 800eeac:	f7f1 ff4a 	bl	8000d44 <__aeabi_fmul>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7ff fc3e 	bl	800e734 <_ZSt3expf>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	62da      	str	r2, [r3, #44]	; 0x2c
        b2 = exp(2.0*ts*a);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7f1 fab0 	bl	8000428 <__aeabi_f2d>
 800eec8:	4602      	mov	r2, r0
 800eeca:	460b      	mov	r3, r1
 800eecc:	f7f1 f94e 	bl	800016c <__adddf3>
 800eed0:	4603      	mov	r3, r0
 800eed2:	460c      	mov	r4, r1
 800eed4:	4625      	mov	r5, r4
 800eed6:	461c      	mov	r4, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	4618      	mov	r0, r3
 800eede:	f7f1 faa3 	bl	8000428 <__aeabi_f2d>
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	4620      	mov	r0, r4
 800eee8:	4629      	mov	r1, r5
 800eeea:	f7f1 faf5 	bl	80004d8 <__aeabi_dmul>
 800eeee:	4603      	mov	r3, r0
 800eef0:	460c      	mov	r4, r1
 800eef2:	4618      	mov	r0, r3
 800eef4:	4621      	mov	r1, r4
 800eef6:	f006 fe17 	bl	8015b28 <exp>
 800eefa:	4603      	mov	r3, r0
 800eefc:	460c      	mov	r4, r1
 800eefe:	4618      	mov	r0, r3
 800ef00:	4621      	mov	r1, r4
 800ef02:	f7f1 fdc1 	bl	8000a88 <__aeabi_d2f>
 800ef06:	4602      	mov	r2, r0
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	629a      	str	r2, [r3, #40]	; 0x28
        b1 = 2.0*exp(a*ts)*cos(b*ts);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	68da      	ldr	r2, [r3, #12]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4619      	mov	r1, r3
 800ef16:	4610      	mov	r0, r2
 800ef18:	f7f1 ff14 	bl	8000d44 <__aeabi_fmul>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7ff fc08 	bl	800e734 <_ZSt3expf>
 800ef24:	4603      	mov	r3, r0
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7f1 fa7e 	bl	8000428 <__aeabi_f2d>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	460b      	mov	r3, r1
 800ef30:	f7f1 f91c 	bl	800016c <__adddf3>
 800ef34:	4603      	mov	r3, r0
 800ef36:	460c      	mov	r4, r1
 800ef38:	4625      	mov	r5, r4
 800ef3a:	461c      	mov	r4, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	691a      	ldr	r2, [r3, #16]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4619      	mov	r1, r3
 800ef46:	4610      	mov	r0, r2
 800ef48:	f7f1 fefc 	bl	8000d44 <__aeabi_fmul>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7ff fbe4 	bl	800e71c <_ZSt3cosf>
 800ef54:	4603      	mov	r3, r0
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7f1 fa66 	bl	8000428 <__aeabi_f2d>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	460b      	mov	r3, r1
 800ef60:	4620      	mov	r0, r4
 800ef62:	4629      	mov	r1, r5
 800ef64:	f7f1 fab8 	bl	80004d8 <__aeabi_dmul>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	460c      	mov	r4, r1
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	4621      	mov	r1, r4
 800ef70:	f7f1 fd8a 	bl	8000a88 <__aeabi_d2f>
 800ef74:	4602      	mov	r2, r0
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	625a      	str	r2, [r3, #36]	; 0x24
        k3 = ap(b2*b3);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef82:	4619      	mov	r1, r3
 800ef84:	4610      	mov	r0, r2
 800ef86:	f7f1 fedd 	bl	8000d44 <__aeabi_fmul>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 fbc2 	bl	800f718 <_ZN7Filters2apEf>
 800ef94:	4602      	mov	r2, r0
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	64da      	str	r2, [r3, #76]	; 0x4c
        k2 = ap(b2 + b1*b3);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa6:	4619      	mov	r1, r3
 800efa8:	4610      	mov	r0, r2
 800efaa:	f7f1 fecb 	bl	8000d44 <__aeabi_fmul>
 800efae:	4603      	mov	r3, r0
 800efb0:	4619      	mov	r1, r3
 800efb2:	4620      	mov	r0, r4
 800efb4:	f7f1 fdbe 	bl	8000b34 <__addsf3>
 800efb8:	4603      	mov	r3, r0
 800efba:	4619      	mov	r1, r3
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 fbab 	bl	800f718 <_ZN7Filters2apEf>
 800efc2:	4602      	mov	r2, r0
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	649a      	str	r2, [r3, #72]	; 0x48
        k1 = ap(b1 + b3);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd0:	4619      	mov	r1, r3
 800efd2:	4610      	mov	r0, r2
 800efd4:	f7f1 fdae 	bl	8000b34 <__addsf3>
 800efd8:	4603      	mov	r3, r0
 800efda:	4619      	mov	r1, r3
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 fb9b 	bl	800f718 <_ZN7Filters2apEf>
 800efe2:	4602      	mov	r2, r0
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	645a      	str	r2, [r3, #68]	; 0x44
        k0 = ap(1.0*KM - b1*KM + b2*KM -b3*KM + b1*KM*b3 - b2*KM*b3);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efec:	4945      	ldr	r1, [pc, #276]	; (800f104 <_ZN7Filters11initLowPassEv+0x4e4>)
 800efee:	4618      	mov	r0, r3
 800eff0:	f7f1 fea8 	bl	8000d44 <__aeabi_fmul>
 800eff4:	4603      	mov	r3, r0
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7f1 fa16 	bl	8000428 <__aeabi_f2d>
 800effc:	4603      	mov	r3, r0
 800effe:	460c      	mov	r4, r1
 800f000:	461a      	mov	r2, r3
 800f002:	4623      	mov	r3, r4
 800f004:	f04f 0000 	mov.w	r0, #0
 800f008:	493f      	ldr	r1, [pc, #252]	; (800f108 <_ZN7Filters11initLowPassEv+0x4e8>)
 800f00a:	f7f1 f8ad 	bl	8000168 <__aeabi_dsub>
 800f00e:	4603      	mov	r3, r0
 800f010:	460c      	mov	r4, r1
 800f012:	4625      	mov	r5, r4
 800f014:	461c      	mov	r4, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f01a:	493a      	ldr	r1, [pc, #232]	; (800f104 <_ZN7Filters11initLowPassEv+0x4e4>)
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7f1 fe91 	bl	8000d44 <__aeabi_fmul>
 800f022:	4603      	mov	r3, r0
 800f024:	4618      	mov	r0, r3
 800f026:	f7f1 f9ff 	bl	8000428 <__aeabi_f2d>
 800f02a:	4602      	mov	r2, r0
 800f02c:	460b      	mov	r3, r1
 800f02e:	4620      	mov	r0, r4
 800f030:	4629      	mov	r1, r5
 800f032:	f7f1 f89b 	bl	800016c <__adddf3>
 800f036:	4603      	mov	r3, r0
 800f038:	460c      	mov	r4, r1
 800f03a:	4625      	mov	r5, r4
 800f03c:	461c      	mov	r4, r3
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f042:	4930      	ldr	r1, [pc, #192]	; (800f104 <_ZN7Filters11initLowPassEv+0x4e4>)
 800f044:	4618      	mov	r0, r3
 800f046:	f7f1 fe7d 	bl	8000d44 <__aeabi_fmul>
 800f04a:	4603      	mov	r3, r0
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7f1 f9eb 	bl	8000428 <__aeabi_f2d>
 800f052:	4602      	mov	r2, r0
 800f054:	460b      	mov	r3, r1
 800f056:	4620      	mov	r0, r4
 800f058:	4629      	mov	r1, r5
 800f05a:	f7f1 f885 	bl	8000168 <__aeabi_dsub>
 800f05e:	4603      	mov	r3, r0
 800f060:	460c      	mov	r4, r1
 800f062:	4625      	mov	r5, r4
 800f064:	461c      	mov	r4, r3
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f06a:	4926      	ldr	r1, [pc, #152]	; (800f104 <_ZN7Filters11initLowPassEv+0x4e4>)
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7f1 fe69 	bl	8000d44 <__aeabi_fmul>
 800f072:	4603      	mov	r3, r0
 800f074:	461a      	mov	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07a:	4619      	mov	r1, r3
 800f07c:	4610      	mov	r0, r2
 800f07e:	f7f1 fe61 	bl	8000d44 <__aeabi_fmul>
 800f082:	4603      	mov	r3, r0
 800f084:	4618      	mov	r0, r3
 800f086:	f7f1 f9cf 	bl	8000428 <__aeabi_f2d>
 800f08a:	4602      	mov	r2, r0
 800f08c:	460b      	mov	r3, r1
 800f08e:	4620      	mov	r0, r4
 800f090:	4629      	mov	r1, r5
 800f092:	f7f1 f86b 	bl	800016c <__adddf3>
 800f096:	4603      	mov	r3, r0
 800f098:	460c      	mov	r4, r1
 800f09a:	4625      	mov	r5, r4
 800f09c:	461c      	mov	r4, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a2:	4918      	ldr	r1, [pc, #96]	; (800f104 <_ZN7Filters11initLowPassEv+0x4e4>)
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7f1 fe4d 	bl	8000d44 <__aeabi_fmul>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	4610      	mov	r0, r2
 800f0b6:	f7f1 fe45 	bl	8000d44 <__aeabi_fmul>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7f1 f9b3 	bl	8000428 <__aeabi_f2d>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	4629      	mov	r1, r5
 800f0ca:	f7f1 f84d 	bl	8000168 <__aeabi_dsub>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	460c      	mov	r4, r1
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	4621      	mov	r1, r4
 800f0d6:	f7f1 fcd7 	bl	8000a88 <__aeabi_d2f>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	4619      	mov	r1, r3
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 fb1a 	bl	800f718 <_ZN7Filters2apEf>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800f0ea:	e1e6      	b.n	800f4ba <_ZN7Filters11initLowPassEv+0x89a>
 800f0ec:	f3af 8000 	nop.w
 800f0f0:	60000000 	.word	0x60000000
 800f0f4:	401921fb 	.word	0x401921fb
 800f0f8:	c0490fdb 	.word	0xc0490fdb
 800f0fc:	40490fdb 	.word	0x40490fdb
 800f100:	3fddb3d7 	.word	0x3fddb3d7
 800f104:	42c80000 	.word	0x42c80000
 800f108:	40590000 	.word	0x40590000
    case (uint8_t)ORDER::OD4:
        a  = -0.3827*2.0*PI*hz;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	4618      	mov	r0, r3
 800f112:	f7f1 f989 	bl	8000428 <__aeabi_f2d>
 800f116:	a3b0      	add	r3, pc, #704	; (adr r3, 800f3d8 <_ZN7Filters11initLowPassEv+0x7b8>)
 800f118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11c:	f7f1 f9dc 	bl	80004d8 <__aeabi_dmul>
 800f120:	4603      	mov	r3, r0
 800f122:	460c      	mov	r4, r1
 800f124:	4618      	mov	r0, r3
 800f126:	4621      	mov	r1, r4
 800f128:	f7f1 fcae 	bl	8000a88 <__aeabi_d2f>
 800f12c:	4602      	mov	r2, r0
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	60da      	str	r2, [r3, #12]
        b  =  0.9238*2.0*PI*hz;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	4618      	mov	r0, r3
 800f138:	f7f1 f976 	bl	8000428 <__aeabi_f2d>
 800f13c:	a3a8      	add	r3, pc, #672	; (adr r3, 800f3e0 <_ZN7Filters11initLowPassEv+0x7c0>)
 800f13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f142:	f7f1 f9c9 	bl	80004d8 <__aeabi_dmul>
 800f146:	4603      	mov	r3, r0
 800f148:	460c      	mov	r4, r1
 800f14a:	4618      	mov	r0, r3
 800f14c:	4621      	mov	r1, r4
 800f14e:	f7f1 fc9b 	bl	8000a88 <__aeabi_d2f>
 800f152:	4602      	mov	r2, r0
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	611a      	str	r2, [r3, #16]
        c  = -0.9238*2.0*PI*hz;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7f1 f963 	bl	8000428 <__aeabi_f2d>
 800f162:	a3a1      	add	r3, pc, #644	; (adr r3, 800f3e8 <_ZN7Filters11initLowPassEv+0x7c8>)
 800f164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f168:	f7f1 f9b6 	bl	80004d8 <__aeabi_dmul>
 800f16c:	4603      	mov	r3, r0
 800f16e:	460c      	mov	r4, r1
 800f170:	4618      	mov	r0, r3
 800f172:	4621      	mov	r1, r4
 800f174:	f7f1 fc88 	bl	8000a88 <__aeabi_d2f>
 800f178:	4602      	mov	r2, r0
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	615a      	str	r2, [r3, #20]
        d  =  0.3827*2.0*PI*hz;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	4618      	mov	r0, r3
 800f184:	f7f1 f950 	bl	8000428 <__aeabi_f2d>
 800f188:	a399      	add	r3, pc, #612	; (adr r3, 800f3f0 <_ZN7Filters11initLowPassEv+0x7d0>)
 800f18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18e:	f7f1 f9a3 	bl	80004d8 <__aeabi_dmul>
 800f192:	4603      	mov	r3, r0
 800f194:	460c      	mov	r4, r1
 800f196:	4618      	mov	r0, r3
 800f198:	4621      	mov	r1, r4
 800f19a:	f7f1 fc75 	bl	8000a88 <__aeabi_d2f>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	619a      	str	r2, [r3, #24]
        b4 = exp(2.0*ts*c);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7f1 f93d 	bl	8000428 <__aeabi_f2d>
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	f7f0 ffdb 	bl	800016c <__adddf3>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	460c      	mov	r4, r1
 800f1ba:	4625      	mov	r5, r4
 800f1bc:	461c      	mov	r4, r3
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	695b      	ldr	r3, [r3, #20]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7f1 f930 	bl	8000428 <__aeabi_f2d>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	f7f1 f982 	bl	80004d8 <__aeabi_dmul>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	4618      	mov	r0, r3
 800f1da:	4621      	mov	r1, r4
 800f1dc:	f006 fca4 	bl	8015b28 <exp>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	460c      	mov	r4, r1
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	f7f1 fc4e 	bl	8000a88 <__aeabi_d2f>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	631a      	str	r2, [r3, #48]	; 0x30
        b3 = 2.0*exp(c*ts)*cos(d*ts);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	695a      	ldr	r2, [r3, #20]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	f7f1 fda1 	bl	8000d44 <__aeabi_fmul>
 800f202:	4603      	mov	r3, r0
 800f204:	4618      	mov	r0, r3
 800f206:	f7ff fa95 	bl	800e734 <_ZSt3expf>
 800f20a:	4603      	mov	r3, r0
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7f1 f90b 	bl	8000428 <__aeabi_f2d>
 800f212:	4602      	mov	r2, r0
 800f214:	460b      	mov	r3, r1
 800f216:	f7f0 ffa9 	bl	800016c <__adddf3>
 800f21a:	4603      	mov	r3, r0
 800f21c:	460c      	mov	r4, r1
 800f21e:	4625      	mov	r5, r4
 800f220:	461c      	mov	r4, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	699a      	ldr	r2, [r3, #24]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4619      	mov	r1, r3
 800f22c:	4610      	mov	r0, r2
 800f22e:	f7f1 fd89 	bl	8000d44 <__aeabi_fmul>
 800f232:	4603      	mov	r3, r0
 800f234:	4618      	mov	r0, r3
 800f236:	f7ff fa71 	bl	800e71c <_ZSt3cosf>
 800f23a:	4603      	mov	r3, r0
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7f1 f8f3 	bl	8000428 <__aeabi_f2d>
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	4620      	mov	r0, r4
 800f248:	4629      	mov	r1, r5
 800f24a:	f7f1 f945 	bl	80004d8 <__aeabi_dmul>
 800f24e:	4603      	mov	r3, r0
 800f250:	460c      	mov	r4, r1
 800f252:	4618      	mov	r0, r3
 800f254:	4621      	mov	r1, r4
 800f256:	f7f1 fc17 	bl	8000a88 <__aeabi_d2f>
 800f25a:	4602      	mov	r2, r0
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	62da      	str	r2, [r3, #44]	; 0x2c
        b2 = exp(2.0*ts*a);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4618      	mov	r0, r3
 800f266:	f7f1 f8df 	bl	8000428 <__aeabi_f2d>
 800f26a:	4602      	mov	r2, r0
 800f26c:	460b      	mov	r3, r1
 800f26e:	f7f0 ff7d 	bl	800016c <__adddf3>
 800f272:	4603      	mov	r3, r0
 800f274:	460c      	mov	r4, r1
 800f276:	4625      	mov	r5, r4
 800f278:	461c      	mov	r4, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	4618      	mov	r0, r3
 800f280:	f7f1 f8d2 	bl	8000428 <__aeabi_f2d>
 800f284:	4602      	mov	r2, r0
 800f286:	460b      	mov	r3, r1
 800f288:	4620      	mov	r0, r4
 800f28a:	4629      	mov	r1, r5
 800f28c:	f7f1 f924 	bl	80004d8 <__aeabi_dmul>
 800f290:	4603      	mov	r3, r0
 800f292:	460c      	mov	r4, r1
 800f294:	4618      	mov	r0, r3
 800f296:	4621      	mov	r1, r4
 800f298:	f006 fc46 	bl	8015b28 <exp>
 800f29c:	4603      	mov	r3, r0
 800f29e:	460c      	mov	r4, r1
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	f7f1 fbf0 	bl	8000a88 <__aeabi_d2f>
 800f2a8:	4602      	mov	r2, r0
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	629a      	str	r2, [r3, #40]	; 0x28
        b1 = 2.0*exp(a*ts)*cos(b*ts);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68da      	ldr	r2, [r3, #12]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	4610      	mov	r0, r2
 800f2ba:	f7f1 fd43 	bl	8000d44 <__aeabi_fmul>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7ff fa37 	bl	800e734 <_ZSt3expf>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7f1 f8ad 	bl	8000428 <__aeabi_f2d>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	f7f0 ff4b 	bl	800016c <__adddf3>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	460c      	mov	r4, r1
 800f2da:	4625      	mov	r5, r4
 800f2dc:	461c      	mov	r4, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	691a      	ldr	r2, [r3, #16]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	4610      	mov	r0, r2
 800f2ea:	f7f1 fd2b 	bl	8000d44 <__aeabi_fmul>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff fa13 	bl	800e71c <_ZSt3cosf>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7f1 f895 	bl	8000428 <__aeabi_f2d>
 800f2fe:	4602      	mov	r2, r0
 800f300:	460b      	mov	r3, r1
 800f302:	4620      	mov	r0, r4
 800f304:	4629      	mov	r1, r5
 800f306:	f7f1 f8e7 	bl	80004d8 <__aeabi_dmul>
 800f30a:	4603      	mov	r3, r0
 800f30c:	460c      	mov	r4, r1
 800f30e:	4618      	mov	r0, r3
 800f310:	4621      	mov	r1, r4
 800f312:	f7f1 fbb9 	bl	8000a88 <__aeabi_d2f>
 800f316:	4602      	mov	r2, r0
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	625a      	str	r2, [r3, #36]	; 0x24
        k4 = ap(b2*b4);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f324:	4619      	mov	r1, r3
 800f326:	4610      	mov	r0, r2
 800f328:	f7f1 fd0c 	bl	8000d44 <__aeabi_fmul>
 800f32c:	4603      	mov	r3, r0
 800f32e:	4619      	mov	r1, r3
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 f9f1 	bl	800f718 <_ZN7Filters2apEf>
 800f336:	4602      	mov	r2, r0
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	651a      	str	r2, [r3, #80]	; 0x50
        k3 = ap(b1*b4 + b2*b3);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f344:	4619      	mov	r1, r3
 800f346:	4610      	mov	r0, r2
 800f348:	f7f1 fcfc 	bl	8000d44 <__aeabi_fmul>
 800f34c:	4603      	mov	r3, r0
 800f34e:	461c      	mov	r4, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f358:	4619      	mov	r1, r3
 800f35a:	4610      	mov	r0, r2
 800f35c:	f7f1 fcf2 	bl	8000d44 <__aeabi_fmul>
 800f360:	4603      	mov	r3, r0
 800f362:	4619      	mov	r1, r3
 800f364:	4620      	mov	r0, r4
 800f366:	f7f1 fbe5 	bl	8000b34 <__addsf3>
 800f36a:	4603      	mov	r3, r0
 800f36c:	4619      	mov	r1, r3
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 f9d2 	bl	800f718 <_ZN7Filters2apEf>
 800f374:	4602      	mov	r2, r0
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	64da      	str	r2, [r3, #76]	; 0x4c
        k2 = ap(b4 + b1*b3 + b2);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f386:	4619      	mov	r1, r3
 800f388:	4610      	mov	r0, r2
 800f38a:	f7f1 fcdb 	bl	8000d44 <__aeabi_fmul>
 800f38e:	4603      	mov	r3, r0
 800f390:	4619      	mov	r1, r3
 800f392:	4620      	mov	r0, r4
 800f394:	f7f1 fbce 	bl	8000b34 <__addsf3>
 800f398:	4603      	mov	r3, r0
 800f39a:	461a      	mov	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	4610      	mov	r0, r2
 800f3a4:	f7f1 fbc6 	bl	8000b34 <__addsf3>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 f9b3 	bl	800f718 <_ZN7Filters2apEf>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	649a      	str	r2, [r3, #72]	; 0x48
        k1 = ap(b1 + b3);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	4610      	mov	r0, r2
 800f3c4:	f7f1 fbb6 	bl	8000b34 <__addsf3>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f000 f9a3 	bl	800f718 <_ZN7Filters2apEf>
 800f3d2:	e011      	b.n	800f3f8 <_ZN7Filters11initLowPassEv+0x7d8>
 800f3d4:	f3af 8000 	nop.w
 800f3d8:	dc9374bc 	.word	0xdc9374bc
 800f3dc:	c0033c91 	.word	0xc0033c91
 800f3e0:	67126e97 	.word	0x67126e97
 800f3e4:	401737b6 	.word	0x401737b6
 800f3e8:	67126e97 	.word	0x67126e97
 800f3ec:	c01737b6 	.word	0xc01737b6
 800f3f0:	dc9374bc 	.word	0xdc9374bc
 800f3f4:	40033c91 	.word	0x40033c91
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	645a      	str	r2, [r3, #68]	; 0x44
        k0 = ap(1.0*KM - k1*KM + k2*KM - k3*KM + k4*KM);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f402:	4930      	ldr	r1, [pc, #192]	; (800f4c4 <_ZN7Filters11initLowPassEv+0x8a4>)
 800f404:	4618      	mov	r0, r3
 800f406:	f7f1 fc9d 	bl	8000d44 <__aeabi_fmul>
 800f40a:	4603      	mov	r3, r0
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7f1 f80b 	bl	8000428 <__aeabi_f2d>
 800f412:	4603      	mov	r3, r0
 800f414:	460c      	mov	r4, r1
 800f416:	461a      	mov	r2, r3
 800f418:	4623      	mov	r3, r4
 800f41a:	f04f 0000 	mov.w	r0, #0
 800f41e:	492a      	ldr	r1, [pc, #168]	; (800f4c8 <_ZN7Filters11initLowPassEv+0x8a8>)
 800f420:	f7f0 fea2 	bl	8000168 <__aeabi_dsub>
 800f424:	4603      	mov	r3, r0
 800f426:	460c      	mov	r4, r1
 800f428:	4625      	mov	r5, r4
 800f42a:	461c      	mov	r4, r3
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f430:	4924      	ldr	r1, [pc, #144]	; (800f4c4 <_ZN7Filters11initLowPassEv+0x8a4>)
 800f432:	4618      	mov	r0, r3
 800f434:	f7f1 fc86 	bl	8000d44 <__aeabi_fmul>
 800f438:	4603      	mov	r3, r0
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7f0 fff4 	bl	8000428 <__aeabi_f2d>
 800f440:	4602      	mov	r2, r0
 800f442:	460b      	mov	r3, r1
 800f444:	4620      	mov	r0, r4
 800f446:	4629      	mov	r1, r5
 800f448:	f7f0 fe90 	bl	800016c <__adddf3>
 800f44c:	4603      	mov	r3, r0
 800f44e:	460c      	mov	r4, r1
 800f450:	4625      	mov	r5, r4
 800f452:	461c      	mov	r4, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f458:	491a      	ldr	r1, [pc, #104]	; (800f4c4 <_ZN7Filters11initLowPassEv+0x8a4>)
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7f1 fc72 	bl	8000d44 <__aeabi_fmul>
 800f460:	4603      	mov	r3, r0
 800f462:	4618      	mov	r0, r3
 800f464:	f7f0 ffe0 	bl	8000428 <__aeabi_f2d>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
 800f46c:	4620      	mov	r0, r4
 800f46e:	4629      	mov	r1, r5
 800f470:	f7f0 fe7a 	bl	8000168 <__aeabi_dsub>
 800f474:	4603      	mov	r3, r0
 800f476:	460c      	mov	r4, r1
 800f478:	4625      	mov	r5, r4
 800f47a:	461c      	mov	r4, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f480:	4910      	ldr	r1, [pc, #64]	; (800f4c4 <_ZN7Filters11initLowPassEv+0x8a4>)
 800f482:	4618      	mov	r0, r3
 800f484:	f7f1 fc5e 	bl	8000d44 <__aeabi_fmul>
 800f488:	4603      	mov	r3, r0
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7f0 ffcc 	bl	8000428 <__aeabi_f2d>
 800f490:	4602      	mov	r2, r0
 800f492:	460b      	mov	r3, r1
 800f494:	4620      	mov	r0, r4
 800f496:	4629      	mov	r1, r5
 800f498:	f7f0 fe68 	bl	800016c <__adddf3>
 800f49c:	4603      	mov	r3, r0
 800f49e:	460c      	mov	r4, r1
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	4621      	mov	r1, r4
 800f4a4:	f7f1 faf0 	bl	8000a88 <__aeabi_d2f>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 f933 	bl	800f718 <_ZN7Filters2apEf>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800f4b8:	bf00      	nop
  }
}
 800f4ba:	bf00      	nop
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bdb0      	pop	{r4, r5, r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	42c80000 	.word	0x42c80000
 800f4c8:	40590000 	.word	0x40590000
 800f4cc:	00000000 	.word	0x00000000

0800f4d0 <_ZN7Filters12initHighPassEv>:

// a0..aN Terms are the TF's denominator coeffs;
// b0..bN Terms are the TF's numerator coeffs;
// k0..kN Terms multiply the diff. equation state terms (y) with 0 to N delays, respectively
// j0..jN Terms multiply the diff. equation input terms (u) with 0 to N delays, respectively
inline void  Filters::initHighPass() {
 800f4d0:	b5b0      	push	{r4, r5, r7, lr}
 800f4d2:	b086      	sub	sp, #24
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  // Bilinear transformation
  float k  = 2.0/ts;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4619      	mov	r1, r3
 800f4de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800f4e2:	f7f1 fce3 	bl	8000eac <__aeabi_fdiv>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	617b      	str	r3, [r7, #20]
  float w0 = 2.0*PI*hz;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7f0 ff9a 	bl	8000428 <__aeabi_f2d>
 800f4f4:	a386      	add	r3, pc, #536	; (adr r3, 800f710 <_ZN7Filters12initHighPassEv+0x240>)
 800f4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4fa:	f7f0 ffed 	bl	80004d8 <__aeabi_dmul>
 800f4fe:	4603      	mov	r3, r0
 800f500:	460c      	mov	r4, r1
 800f502:	4618      	mov	r0, r3
 800f504:	4621      	mov	r1, r4
 800f506:	f7f1 fabf 	bl	8000a88 <__aeabi_d2f>
 800f50a:	4603      	mov	r3, r0
 800f50c:	613b      	str	r3, [r7, #16]

  switch((uint8_t)od) {
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	7a1b      	ldrb	r3, [r3, #8]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d006      	beq.n	800f524 <_ZN7Filters12initHighPassEv+0x54>
 800f516:	2b00      	cmp	r3, #0
 800f518:	f2c0 80f6 	blt.w	800f708 <_ZN7Filters12initHighPassEv+0x238>
 800f51c:	2b03      	cmp	r3, #3
 800f51e:	f300 80f3 	bgt.w	800f708 <_ZN7Filters12initHighPassEv+0x238>
 800f522:	e03e      	b.n	800f5a2 <_ZN7Filters12initHighPassEv+0xd2>
      case (uint8_t)ORDER::OD1:
          // TF Terms
          b0 =  k;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	697a      	ldr	r2, [r7, #20]
 800f528:	621a      	str	r2, [r3, #32]
          b1 = -k;
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	625a      	str	r2, [r3, #36]	; 0x24
          a0 = (w0 + k);
 800f534:	6979      	ldr	r1, [r7, #20]
 800f536:	6938      	ldr	r0, [r7, #16]
 800f538:	f7f1 fafc 	bl	8000b34 <__addsf3>
 800f53c:	4603      	mov	r3, r0
 800f53e:	461a      	mov	r2, r3
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	635a      	str	r2, [r3, #52]	; 0x34
          a1 = (w0 - k);
 800f544:	6979      	ldr	r1, [r7, #20]
 800f546:	6938      	ldr	r0, [r7, #16]
 800f548:	f7f1 faf2 	bl	8000b30 <__aeabi_fsub>
 800f54c:	4603      	mov	r3, r0
 800f54e:	461a      	mov	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	639a      	str	r2, [r3, #56]	; 0x38
          // Diff equation terms
          j0 =  b0/a0;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6a1a      	ldr	r2, [r3, #32]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f55c:	4619      	mov	r1, r3
 800f55e:	4610      	mov	r0, r2
 800f560:	f7f1 fca4 	bl	8000eac <__aeabi_fdiv>
 800f564:	4603      	mov	r3, r0
 800f566:	461a      	mov	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	659a      	str	r2, [r3, #88]	; 0x58
          j1 =  b1/a0;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f574:	4619      	mov	r1, r3
 800f576:	4610      	mov	r0, r2
 800f578:	f7f1 fc98 	bl	8000eac <__aeabi_fdiv>
 800f57c:	4603      	mov	r3, r0
 800f57e:	461a      	mov	r2, r3
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	65da      	str	r2, [r3, #92]	; 0x5c
          k1 = -a1/a0;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f588:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f590:	4619      	mov	r1, r3
 800f592:	4610      	mov	r0, r2
 800f594:	f7f1 fc8a 	bl	8000eac <__aeabi_fdiv>
 800f598:	4603      	mov	r3, r0
 800f59a:	461a      	mov	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800f5a0:	e0b2      	b.n	800f708 <_ZN7Filters12initHighPassEv+0x238>
      case (uint8_t)ORDER::OD2:
      case (uint8_t)ORDER::OD3:
      case (uint8_t)ORDER::OD4:
          float_t w0sq = pow(w0, 2.0);
 800f5a2:	f04f 0200 	mov.w	r2, #0
 800f5a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5aa:	6938      	ldr	r0, [r7, #16]
 800f5ac:	f000 f900 	bl	800f7b0 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	460c      	mov	r4, r1
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	4621      	mov	r1, r4
 800f5b8:	f7f1 fa66 	bl	8000a88 <__aeabi_d2f>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	60fb      	str	r3, [r7, #12]
          float_t ksq  = pow(k,  2.0);
 800f5c0:	f04f 0200 	mov.w	r2, #0
 800f5c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5c8:	6978      	ldr	r0, [r7, #20]
 800f5ca:	f000 f8f1 	bl	800f7b0 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	460c      	mov	r4, r1
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	4621      	mov	r1, r4
 800f5d6:	f7f1 fa57 	bl	8000a88 <__aeabi_d2f>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	60bb      	str	r3, [r7, #8]
          // TF Terms
          b0 = ksq;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	68ba      	ldr	r2, [r7, #8]
 800f5e2:	621a      	str	r2, [r3, #32]
          b1 = -2.0*ksq;
 800f5e4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800f5e8:	68b8      	ldr	r0, [r7, #8]
 800f5ea:	f7f1 fbab 	bl	8000d44 <__aeabi_fmul>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	625a      	str	r2, [r3, #36]	; 0x24
          b2 = ksq;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	68ba      	ldr	r2, [r7, #8]
 800f5fa:	629a      	str	r2, [r3, #40]	; 0x28
          a0 = w0sq + k*w0 + ksq;
 800f5fc:	6939      	ldr	r1, [r7, #16]
 800f5fe:	6978      	ldr	r0, [r7, #20]
 800f600:	f7f1 fba0 	bl	8000d44 <__aeabi_fmul>
 800f604:	4603      	mov	r3, r0
 800f606:	68f9      	ldr	r1, [r7, #12]
 800f608:	4618      	mov	r0, r3
 800f60a:	f7f1 fa93 	bl	8000b34 <__addsf3>
 800f60e:	4603      	mov	r3, r0
 800f610:	68b9      	ldr	r1, [r7, #8]
 800f612:	4618      	mov	r0, r3
 800f614:	f7f1 fa8e 	bl	8000b34 <__addsf3>
 800f618:	4603      	mov	r3, r0
 800f61a:	461a      	mov	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	635a      	str	r2, [r3, #52]	; 0x34
          a1 = 2.0*w0sq - 2.0*ksq;
 800f620:	68f8      	ldr	r0, [r7, #12]
 800f622:	f7f0 ff01 	bl	8000428 <__aeabi_f2d>
 800f626:	4602      	mov	r2, r0
 800f628:	460b      	mov	r3, r1
 800f62a:	f7f0 fd9f 	bl	800016c <__adddf3>
 800f62e:	4603      	mov	r3, r0
 800f630:	460c      	mov	r4, r1
 800f632:	4625      	mov	r5, r4
 800f634:	461c      	mov	r4, r3
 800f636:	68b8      	ldr	r0, [r7, #8]
 800f638:	f7f0 fef6 	bl	8000428 <__aeabi_f2d>
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	f7f0 fd94 	bl	800016c <__adddf3>
 800f644:	4602      	mov	r2, r0
 800f646:	460b      	mov	r3, r1
 800f648:	4620      	mov	r0, r4
 800f64a:	4629      	mov	r1, r5
 800f64c:	f7f0 fd8c 	bl	8000168 <__aeabi_dsub>
 800f650:	4603      	mov	r3, r0
 800f652:	460c      	mov	r4, r1
 800f654:	4618      	mov	r0, r3
 800f656:	4621      	mov	r1, r4
 800f658:	f7f1 fa16 	bl	8000a88 <__aeabi_d2f>
 800f65c:	4602      	mov	r2, r0
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	639a      	str	r2, [r3, #56]	; 0x38
          a2 = w0sq - k*w0 + ksq;
 800f662:	6939      	ldr	r1, [r7, #16]
 800f664:	6978      	ldr	r0, [r7, #20]
 800f666:	f7f1 fb6d 	bl	8000d44 <__aeabi_fmul>
 800f66a:	4603      	mov	r3, r0
 800f66c:	4619      	mov	r1, r3
 800f66e:	68f8      	ldr	r0, [r7, #12]
 800f670:	f7f1 fa5e 	bl	8000b30 <__aeabi_fsub>
 800f674:	4603      	mov	r3, r0
 800f676:	68b9      	ldr	r1, [r7, #8]
 800f678:	4618      	mov	r0, r3
 800f67a:	f7f1 fa5b 	bl	8000b34 <__addsf3>
 800f67e:	4603      	mov	r3, r0
 800f680:	461a      	mov	r2, r3
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	63da      	str	r2, [r3, #60]	; 0x3c
          // Diff equation terms
          j0 = b0/a0;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6a1a      	ldr	r2, [r3, #32]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f68e:	4619      	mov	r1, r3
 800f690:	4610      	mov	r0, r2
 800f692:	f7f1 fc0b 	bl	8000eac <__aeabi_fdiv>
 800f696:	4603      	mov	r3, r0
 800f698:	461a      	mov	r2, r3
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	659a      	str	r2, [r3, #88]	; 0x58
          j1 = b1/a0;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	4610      	mov	r0, r2
 800f6aa:	f7f1 fbff 	bl	8000eac <__aeabi_fdiv>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	65da      	str	r2, [r3, #92]	; 0x5c
          j2 = b2/a0;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6be:	4619      	mov	r1, r3
 800f6c0:	4610      	mov	r0, r2
 800f6c2:	f7f1 fbf3 	bl	8000eac <__aeabi_fdiv>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	661a      	str	r2, [r3, #96]	; 0x60
          k1 = -a1/a0;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6da:	4619      	mov	r1, r3
 800f6dc:	4610      	mov	r0, r2
 800f6de:	f7f1 fbe5 	bl	8000eac <__aeabi_fdiv>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	645a      	str	r2, [r3, #68]	; 0x44
          k2 = -a2/a0;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6ee:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	4610      	mov	r0, r2
 800f6fa:	f7f1 fbd7 	bl	8000eac <__aeabi_fdiv>
 800f6fe:	4603      	mov	r3, r0
 800f700:	461a      	mov	r2, r3
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800f706:	bf00      	nop
      }
}
 800f708:	bf00      	nop
 800f70a:	3718      	adds	r7, #24
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bdb0      	pop	{r4, r5, r7, pc}
 800f710:	60000000 	.word	0x60000000
 800f714:	401921fb 	.word	0x401921fb

0800f718 <_ZN7Filters2apEf>:

float Filters::ap(float p) {
 800f718:	b5b0      	push	{r4, r5, r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
  f_err  = f_err  | (abs(p) <= EPSILON );
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800f728:	b25c      	sxtb	r4, r3
 800f72a:	6838      	ldr	r0, [r7, #0]
 800f72c:	f7fe ffea 	bl	800e704 <_ZSt3absf>
 800f730:	4602      	mov	r2, r0
 800f732:	2301      	movs	r3, #1
 800f734:	461d      	mov	r5, r3
 800f736:	491c      	ldr	r1, [pc, #112]	; (800f7a8 <_ZN7Filters2apEf+0x90>)
 800f738:	4610      	mov	r0, r2
 800f73a:	f7f1 fcab 	bl	8001094 <__aeabi_fcmple>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b00      	cmp	r3, #0
 800f742:	d101      	bne.n	800f748 <_ZN7Filters2apEf+0x30>
 800f744:	2300      	movs	r3, #0
 800f746:	461d      	mov	r5, r3
 800f748:	b2eb      	uxtb	r3, r5
 800f74a:	b25b      	sxtb	r3, r3
 800f74c:	4323      	orrs	r3, r4
 800f74e:	b25b      	sxtb	r3, r3
 800f750:	b2da      	uxtb	r2, r3
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  f_warn = f_warn | (abs(p) <= WEPSILON);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800f75e:	b25c      	sxtb	r4, r3
 800f760:	6838      	ldr	r0, [r7, #0]
 800f762:	f7fe ffcf 	bl	800e704 <_ZSt3absf>
 800f766:	4602      	mov	r2, r0
 800f768:	2301      	movs	r3, #1
 800f76a:	461d      	mov	r5, r3
 800f76c:	490f      	ldr	r1, [pc, #60]	; (800f7ac <_ZN7Filters2apEf+0x94>)
 800f76e:	4610      	mov	r0, r2
 800f770:	f7f1 fc90 	bl	8001094 <__aeabi_fcmple>
 800f774:	4603      	mov	r3, r0
 800f776:	2b00      	cmp	r3, #0
 800f778:	d101      	bne.n	800f77e <_ZN7Filters2apEf+0x66>
 800f77a:	2300      	movs	r3, #0
 800f77c:	461d      	mov	r5, r3
 800f77e:	b2eb      	uxtb	r3, r5
 800f780:	b25b      	sxtb	r3, r3
 800f782:	4323      	orrs	r3, r4
 800f784:	b25b      	sxtb	r3, r3
 800f786:	b2da      	uxtb	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  return (f_err) ? 0.0 : p;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800f794:	2b00      	cmp	r3, #0
 800f796:	d101      	bne.n	800f79c <_ZN7Filters2apEf+0x84>
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	e001      	b.n	800f7a0 <_ZN7Filters2apEf+0x88>
 800f79c:	f04f 0300 	mov.w	r3, #0
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3708      	adds	r7, #8
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bdb0      	pop	{r4, r5, r7, pc}
 800f7a8:	3727c5ac 	.word	0x3727c5ac
 800f7ac:	38d1b717 	.word	0x38d1b717

0800f7b0 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800f7b0:	b590      	push	{r4, r7, lr}
 800f7b2:	b085      	sub	sp, #20
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	e9c7 2300 	strd	r2, r3, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f7f0 fe33 	bl	8000428 <__aeabi_f2d>
 800f7c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7c6:	f006 fa27 	bl	8015c18 <pow>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	460c      	mov	r4, r1
    }
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	4621      	mov	r1, r4
 800f7d2:	3714      	adds	r7, #20
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd90      	pop	{r4, r7, pc}

0800f7d8 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f006 f96b 	bl	8015abc <sinf>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3708      	adds	r7, #8
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <_ZN28FFB_BlockLoad_Feature_Data_tC1Ev>:
	{ // FFB: PID Block Load Feature Report
	uint8_t	reportId = HID_ID_BLKLDREP;	// =2
	uint8_t effectBlockIndex;	// 1..40
	uint8_t	loadStatus;	// 1=Success,2=Full,3=Error
	uint16_t	ramPoolAvailable;	// =0 or 0xFFFF?
} __attribute__((packed)) FFB_BlockLoad_Feature_Data_t;
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2212      	movs	r2, #18
 800f7fc:	701a      	strb	r2, [r3, #0]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4618      	mov	r0, r3
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	bc80      	pop	{r7}
 800f808:	4770      	bx	lr

0800f80a <_ZN26FFB_PIDPool_Feature_Data_tC1Ev>:
	{ // FFB: PID Pool Feature Report
	uint8_t	reportId = HID_ID_POOLREP;
	uint16_t	ramPoolSize = MAX_EFFECTS;
	uint8_t		maxSimultaneousEffects = MAX_EFFECTS;
	uint8_t		memoryManagement = 3;	// Bits: 0=DeviceManagedPool, 1=SharedParameterBlocks
} __attribute__((packed)) FFB_PIDPool_Feature_Data_t;
 800f80a:	b480      	push	{r7}
 800f80c:	b083      	sub	sp, #12
 800f80e:	af00      	add	r7, sp, #0
 800f810:	6078      	str	r0, [r7, #4]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2213      	movs	r2, #19
 800f816:	701a      	strb	r2, [r3, #0]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2200      	movs	r2, #0
 800f81c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800f820:	705a      	strb	r2, [r3, #1]
 800f822:	2200      	movs	r2, #0
 800f824:	709a      	strb	r2, [r3, #2]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2228      	movs	r2, #40	; 0x28
 800f82a:	70da      	strb	r2, [r3, #3]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2203      	movs	r2, #3
 800f830:	711a      	strb	r2, [r3, #4]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4618      	mov	r0, r3
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	bc80      	pop	{r7}
 800f83c:	4770      	bx	lr

0800f83e <_ZN18reportFFB_status_tC1Ev>:
} __attribute__((packed)) reportFFB_status_t;
 800f83e:	b480      	push	{r7}
 800f840:	b083      	sub	sp, #12
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2202      	movs	r2, #2
 800f84a:	701a      	strb	r2, [r3, #0]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2201      	movs	r2, #1
 800f850:	705a      	strb	r2, [r3, #1]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	220a      	movs	r2, #10
 800f856:	709a      	strb	r2, [r3, #2]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4618      	mov	r0, r3
 800f85c:	370c      	adds	r7, #12
 800f85e:	46bd      	mov	sp, r7
 800f860:	bc80      	pop	{r7}
 800f862:	4770      	bx	lr

0800f864 <_ZN10FFB_EffectC1Ev>:
	uint16_t duration=0,fadeTime=0,attackTime=0, elapsedTime = 0;	// ms
	uint64_t startTime = 0;
	uint16_t samplePeriod = 0;
	uint8_t axis = 0;
	uint16_t	deadBand = 0;
} FFB_Effect;
 800f864:	b490      	push	{r4, r7}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	701a      	strb	r2, [r3, #0]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2200      	movs	r2, #0
 800f876:	705a      	strb	r2, [r3, #1]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	22ff      	movs	r2, #255	; 0xff
 800f87c:	709a      	strb	r2, [r3, #2]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2200      	movs	r2, #0
 800f882:	811a      	strh	r2, [r3, #8]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	815a      	strh	r2, [r3, #10]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2200      	movs	r2, #0
 800f88e:	819a      	strh	r2, [r3, #12]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2200      	movs	r2, #0
 800f894:	81da      	strh	r2, [r3, #14]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2200      	movs	r2, #0
 800f89a:	821a      	strh	r2, [r3, #16]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	825a      	strh	r2, [r3, #18]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	829a      	strh	r2, [r3, #20]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	759a      	strb	r2, [r3, #22]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	75da      	strb	r2, [r3, #23]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	831a      	strh	r2, [r3, #24]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	835a      	strh	r2, [r3, #26]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	839a      	strh	r2, [r3, #28]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	621a      	str	r2, [r3, #32]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	849a      	strh	r2, [r3, #36]	; 0x24
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	84da      	strh	r2, [r3, #38]	; 0x26
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	851a      	strh	r2, [r3, #40]	; 0x28
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	859a      	strh	r2, [r3, #44]	; 0x2c
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	85da      	strh	r2, [r3, #46]	; 0x2e
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	f04f 0300 	mov.w	r3, #0
 800f8f6:	f04f 0400 	mov.w	r4, #0
 800f8fa:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	871a      	strh	r2, [r3, #56]	; 0x38
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2200      	movs	r2, #0
 800f908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2200      	movs	r2, #0
 800f910:	879a      	strh	r2, [r3, #60]	; 0x3c
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	4618      	mov	r0, r3
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bc90      	pop	{r4, r7}
 800f91c:	4770      	bx	lr
	...

0800f920 <_ZN6HidFFBC1Ev>:
#include "HidFFB.h"
#include "math.h"

HidFFB::HidFFB() {
 800f920:	b5b0      	push	{r4, r5, r7, lr}
 800f922:	b0f0      	sub	sp, #448	; 0x1c0
 800f924:	af02      	add	r7, sp, #8
 800f926:	1d3b      	adds	r3, r7, #4
 800f928:	6018      	str	r0, [r3, #0]
 800f92a:	1d3b      	adds	r3, r7, #4
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4618      	mov	r0, r3
 800f930:	f002 fb4e 	bl	8011fd0 <_ZN13UsbHidHandlerC1Ev>
 800f934:	4a67      	ldr	r2, [pc, #412]	; (800fad4 <_ZN6HidFFBC1Ev+0x1b4>)
 800f936:	1d3b      	adds	r3, r7, #4
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	601a      	str	r2, [r3, #0]
 800f93c:	1d3b      	adds	r3, r7, #4
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2201      	movs	r2, #1
 800f942:	711a      	strb	r2, [r3, #4]
 800f944:	1d3b      	adds	r3, r7, #4
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	2200      	movs	r2, #0
 800f94a:	609a      	str	r2, [r3, #8]
 800f94c:	1d3b      	adds	r3, r7, #4
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2200      	movs	r2, #0
 800f952:	731a      	strb	r2, [r3, #12]
 800f954:	1d3b      	adds	r3, r7, #4
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2200      	movs	r2, #0
 800f95a:	81da      	strh	r2, [r3, #14]
 800f95c:	1d3b      	adds	r3, r7, #4
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2200      	movs	r2, #0
 800f962:	741a      	strb	r2, [r3, #16]
 800f964:	1d3b      	adds	r3, r7, #4
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2200      	movs	r2, #0
 800f96a:	825a      	strh	r2, [r3, #18]
 800f96c:	1d3b      	adds	r3, r7, #4
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	22ff      	movs	r2, #255	; 0xff
 800f972:	751a      	strb	r2, [r3, #20]
 800f974:	1d3b      	adds	r3, r7, #4
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2200      	movs	r2, #0
 800f97a:	755a      	strb	r2, [r3, #21]
 800f97c:	1d3b      	adds	r3, r7, #4
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	3316      	adds	r3, #22
 800f982:	4618      	mov	r0, r3
 800f984:	f7ff ff34 	bl	800f7f0 <_ZN28FFB_BlockLoad_Feature_Data_tC1Ev>
 800f988:	1d3b      	adds	r3, r7, #4
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	331b      	adds	r3, #27
 800f98e:	4618      	mov	r0, r3
 800f990:	f7ff ff3b 	bl	800f80a <_ZN26FFB_PIDPool_Feature_Data_tC1Ev>
 800f994:	1d3b      	adds	r3, r7, #4
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	3324      	adds	r3, #36	; 0x24
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7ff ff4f 	bl	800f83e <_ZN18reportFFB_status_tC1Ev>
 800f9a0:	1d3b      	adds	r3, r7, #4
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	3328      	adds	r3, #40	; 0x28
 800f9a6:	2427      	movs	r4, #39	; 0x27
 800f9a8:	461d      	mov	r5, r3
 800f9aa:	2c00      	cmp	r4, #0
 800f9ac:	db05      	blt.n	800f9ba <_ZN6HidFFBC1Ev+0x9a>
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	f7ff ff58 	bl	800f864 <_ZN10FFB_EffectC1Ev>
 800f9b4:	3540      	adds	r5, #64	; 0x40
 800f9b6:	3c01      	subs	r4, #1
 800f9b8:	e7f7      	b.n	800f9aa <_ZN6HidFFBC1Ev+0x8a>
 800f9ba:	1d3b      	adds	r3, r7, #4
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
 800f9c4:	1d3b      	adds	r3, r7, #4
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4a43      	ldr	r2, [pc, #268]	; (800fad8 <_ZN6HidFFBC1Ev+0x1b8>)
 800f9ca:	f8c3 2a2c 	str.w	r2, [r3, #2604]	; 0xa2c
 800f9ce:	1d3b      	adds	r3, r7, #4
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	4a42      	ldr	r2, [pc, #264]	; (800fadc <_ZN6HidFFBC1Ev+0x1bc>)
 800f9d4:	f8c3 2a30 	str.w	r2, [r3, #2608]	; 0xa30
 800f9d8:	1d3b      	adds	r3, r7, #4
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7fe feb3 	bl	800e74c <_ZN7FiltersC1Ev>
 800f9e6:	1d3b      	adds	r3, r7, #4
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fe feac 	bl	800e74c <_ZN7FiltersC1Ev>
 800f9f4:	1d3b      	adds	r3, r7, #4
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7fe fea5 	bl	800e74c <_ZN7FiltersC1Ev>
	damperFilter = Filters(cutoff_freq_damper, sampling_time_damper, ORDER::OD1);
 800fa02:	1d3b      	adds	r3, r7, #4
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f8d3 1a2c 	ldr.w	r1, [r3, #2604]	; 0xa2c
 800fa0a:	1d3b      	adds	r3, r7, #4
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f8d3 2a30 	ldr.w	r2, [r3, #2608]	; 0xa30
 800fa12:	f107 0008 	add.w	r0, r7, #8
 800fa16:	2300      	movs	r3, #0
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	f7fe fea0 	bl	800e760 <_ZN7FiltersC1Eff5ORDER4TYPE>
 800fa20:	1d3b      	adds	r3, r7, #4
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f107 0208 	add.w	r2, r7, #8
 800fa28:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	228e      	movs	r2, #142	; 0x8e
 800fa30:	4618      	mov	r0, r3
 800fa32:	f008 f9c4 	bl	8017dbe <memcpy>
 800fa36:	f107 0308 	add.w	r3, r7, #8
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fe feac 	bl	800e798 <_ZN7FiltersD1Ev>
	interiaFilter = Filters(cutoff_freq_damper, sampling_time_damper, ORDER::OD1);
 800fa40:	1d3b      	adds	r3, r7, #4
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f8d3 1a2c 	ldr.w	r1, [r3, #2604]	; 0xa2c
 800fa48:	1d3b      	adds	r3, r7, #4
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f8d3 2a30 	ldr.w	r2, [r3, #2608]	; 0xa30
 800fa50:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800fa54:	2300      	movs	r3, #0
 800fa56:	9300      	str	r3, [sp, #0]
 800fa58:	2300      	movs	r3, #0
 800fa5a:	f7fe fe81 	bl	800e760 <_ZN7FiltersC1Eff5ORDER4TYPE>
 800fa5e:	1d3b      	adds	r3, r7, #4
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800fa66:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 800fa6a:	4611      	mov	r1, r2
 800fa6c:	228e      	movs	r2, #142	; 0x8e
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f008 f9a5 	bl	8017dbe <memcpy>
 800fa74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fe fe8d 	bl	800e798 <_ZN7FiltersD1Ev>
	frictionFilter = Filters(cutoff_freq_damper, sampling_time_damper, ORDER::OD1);
 800fa7e:	1d3b      	adds	r3, r7, #4
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	f8d3 1a2c 	ldr.w	r1, [r3, #2604]	; 0xa2c
 800fa86:	1d3b      	adds	r3, r7, #4
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f8d3 2a30 	ldr.w	r2, [r3, #2608]	; 0xa30
 800fa8e:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800fa92:	2300      	movs	r3, #0
 800fa94:	9300      	str	r3, [sp, #0]
 800fa96:	2300      	movs	r3, #0
 800fa98:	f7fe fe62 	bl	800e760 <_ZN7FiltersC1Eff5ORDER4TYPE>
 800fa9c:	1d3b      	adds	r3, r7, #4
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 800faa4:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800faa8:	228e      	movs	r2, #142	; 0x8e
 800faaa:	4618      	mov	r0, r3
 800faac:	f008 f987 	bl	8017dbe <memcpy>
 800fab0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7fe fe6f 	bl	800e798 <_ZN7FiltersD1Ev>

	this->registerHidCallback();
 800faba:	1d3b      	adds	r3, r7, #4
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4618      	mov	r0, r3
 800fac0:	f002 face 	bl	8012060 <_ZN13UsbHidHandler19registerHidCallbackEv>
}
 800fac4:	1d3b      	adds	r3, r7, #4
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4618      	mov	r0, r3
 800faca:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800face:	46bd      	mov	sp, r7
 800fad0:	bdb0      	pop	{r4, r5, r7, pc}
 800fad2:	bf00      	nop
 800fad4:	08018e0c 	.word	0x08018e0c
 800fad8:	40a00000 	.word	0x40a00000
 800fadc:	3a83126f 	.word	0x3a83126f

0800fae0 <_ZN6HidFFBD1Ev>:

HidFFB::~HidFFB() {
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	4a0e      	ldr	r2, [pc, #56]	; (800fb24 <_ZN6HidFFBD1Ev+0x44>)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	601a      	str	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7fe fe4f 	bl	800e798 <_ZN7FiltersD1Ev>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7fe fe49 	bl	800e798 <_ZN7FiltersD1Ev>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7fe fe43 	bl	800e798 <_ZN7FiltersD1Ev>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f002 fa6b 	bl	8011ff0 <_ZN13UsbHidHandlerD1Ev>

}
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	08018e0c 	.word	0x08018e0c

0800fb28 <_ZN6HidFFBD0Ev>:
HidFFB::~HidFFB() {
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
}
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f7ff ffd5 	bl	800fae0 <_ZN6HidFFBD1Ev>
 800fb36:	f640 31e8 	movw	r1, #3048	; 0xbe8
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f005 fc58 	bl	80153f0 <_ZdlPvj>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4618      	mov	r0, r3
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
	...

0800fb4c <_ZN6HidFFB6hidOutEPh>:


void HidFFB::hidOut(uint8_t* report){
 800fb4c:	b590      	push	{r4, r7, lr}
 800fb4e:	b085      	sub	sp, #20
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
	hid_out_period = HAL_GetTick() - lastOut; // For measuring update rate
 800fb56:	f7f2 facf 	bl	80020f8 <HAL_GetTick>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 3a28 	ldr.w	r3, [r3, #2600]	; 0xa28
 800fb62:	1ad2      	subs	r2, r2, r3
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	609a      	str	r2, [r3, #8]
	lastOut = HAL_GetTick();
 800fb68:	f7f2 fac6 	bl	80020f8 <HAL_GetTick>
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
	// FFB Output Message
	report[0] -= FFB_ID_OFFSET;// if offset id was set correct this
 800fb74:	683a      	ldr	r2, [r7, #0]
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	7812      	ldrb	r2, [r2, #0]
 800fb7a:	701a      	strb	r2, [r3, #0]
	uint8_t event_idx = report[0];
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	73fb      	strb	r3, [r7, #15]


	// -------- Out Reports --------
	switch(event_idx){
 800fb82:	7bfb      	ldrb	r3, [r7, #15]
 800fb84:	3b01      	subs	r3, #1
 800fb86:	2b10      	cmp	r3, #16
 800fb88:	f200 809c 	bhi.w	800fcc4 <_ZN6HidFFB6hidOutEPh+0x178>
 800fb8c:	a201      	add	r2, pc, #4	; (adr r2, 800fb94 <_ZN6HidFFB6hidOutEPh+0x48>)
 800fb8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb92:	bf00      	nop
 800fb94:	0800fbe5 	.word	0x0800fbe5
 800fb98:	0800fc0b 	.word	0x0800fc0b
 800fb9c:	0800fc17 	.word	0x0800fc17
 800fba0:	0800fc23 	.word	0x0800fc23
 800fba4:	0800fc2f 	.word	0x0800fc2f
 800fba8:	0800fc3b 	.word	0x0800fc3b
 800fbac:	0800fcc5 	.word	0x0800fcc5
 800fbb0:	0800fcc5 	.word	0x0800fcc5
 800fbb4:	0800fcc5 	.word	0x0800fcc5
 800fbb8:	0800fc47 	.word	0x0800fc47
 800fbbc:	0800fcaf 	.word	0x0800fcaf
 800fbc0:	0800fbf1 	.word	0x0800fbf1
 800fbc4:	0800fc01 	.word	0x0800fc01
 800fbc8:	0800fcc5 	.word	0x0800fcc5
 800fbcc:	0800fcc5 	.word	0x0800fcc5
 800fbd0:	0800fcc5 	.word	0x0800fcc5
 800fbd4:	0800fbd9 	.word	0x0800fbd9
	case HID_ID_NEWEFREP: //add Effect Report. Feature
		new_effect((FFB_CreateNewEffect_Feature_Data_t*)(report));
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	4619      	mov	r1, r3
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 f94a 	bl	800fe76 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t>
		break;
 800fbe2:	e070      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_EFFREP: // Set Effect
		set_effect((FFB_SetEffect_t*)(report));
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f000 f993 	bl	800ff14 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t>
		break;
 800fbee:	e06a      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_CTRLREP: // Control report. 1=Enable Actuators, 2=Disable Actuators, 4=Stop All Effects, 8=Reset, 16=Pause, 32=Continue
		ffb_control(report[1]);
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f000 f8b6 	bl	800fd6a <_ZN6HidFFB11ffb_controlEh>
		break;
 800fbfe:	e062      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_GAINREP:
		gain = report[1];
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	785a      	ldrb	r2, [r3, #1]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	751a      	strb	r2, [r3, #20]
		break;
 800fc08:	e05d      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_ENVREP:
		set_envelope((FFB_SetEnvelope_Data_t*)(report));
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 f9dc 	bl	800ffcc <_ZN6HidFFB12set_envelopeEP22FFB_SetEnvelope_Data_t>
		break;
 800fc14:	e057      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_CONDREP: // Condition
		set_condition((FFB_SetCondition_Data_t*)report);
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	4619      	mov	r1, r3
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 fa1c 	bl	8010058 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t>
		break;
 800fc20:	e051      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_PRIDREP: // Periodic
		set_periodic((FFB_SetPeriodic_Data_t*)report);
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	4619      	mov	r1, r3
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f000 fa51 	bl	80100ce <_ZN6HidFFB12set_periodicEP22FFB_SetPeriodic_Data_t>
		break;
 800fc2c:	e04b      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_CONSTREP: // Constant
		set_constant_effect((FFB_SetConstantForce_Data_t*)report);
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	4619      	mov	r1, r3
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 f908 	bl	800fe48 <_ZN6HidFFB19set_constant_effectEP27FFB_SetConstantForce_Data_t>
		break;
 800fc38:	e045      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_RAMPREP: // Ramp
		set_ramp_effect((FFB_SetRampForce_Data_t*)report);
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 f9ec 	bl	801001c <_ZN6HidFFB15set_ramp_effectEP23FFB_SetRampForce_Data_t>
		break;
 800fc44:	e03f      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
		//TODO
		break;
	case HID_ID_EFOPREP: //Effect operation
	{
		// Start or stop effect
		uint8_t id = report[1]-1;
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	3301      	adds	r3, #1
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	3b01      	subs	r3, #1
 800fc4e:	73bb      	strb	r3, [r7, #14]
		if(report[2] == 3){
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	3302      	adds	r3, #2
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	2b03      	cmp	r3, #3
 800fc58:	d107      	bne.n	800fc6a <_ZN6HidFFB6hidOutEPh+0x11e>
			effects[id].state = 0; //Stop
 800fc5a:	7bbb      	ldrb	r3, [r7, #14]
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	019b      	lsls	r3, r3, #6
 800fc60:	4413      	add	r3, r2
 800fc62:	3328      	adds	r3, #40	; 0x28
 800fc64:	2200      	movs	r2, #0
 800fc66:	701a      	strb	r2, [r3, #0]
			effects[id].state = 1; //Start
			effects[id].counter = 0; // When an effect was stopped reset all parameters that could cause jerking
			effects[id].elapsedTime = 0;
			effects[id].startTime = HAL_GetTick();
		}
		break;
 800fc68:	e02d      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
			effects[id].state = 1; //Start
 800fc6a:	7bbb      	ldrb	r3, [r7, #14]
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	019b      	lsls	r3, r3, #6
 800fc70:	4413      	add	r3, r2
 800fc72:	3328      	adds	r3, #40	; 0x28
 800fc74:	2201      	movs	r2, #1
 800fc76:	701a      	strb	r2, [r3, #0]
			effects[id].counter = 0; // When an effect was stopped reset all parameters that could cause jerking
 800fc78:	7bbb      	ldrb	r3, [r7, #14]
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	019b      	lsls	r3, r3, #6
 800fc7e:	4413      	add	r3, r2
 800fc80:	334c      	adds	r3, #76	; 0x4c
 800fc82:	2200      	movs	r2, #0
 800fc84:	801a      	strh	r2, [r3, #0]
			effects[id].elapsedTime = 0;
 800fc86:	7bbb      	ldrb	r3, [r7, #14]
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	019b      	lsls	r3, r3, #6
 800fc8c:	4413      	add	r3, r2
 800fc8e:	3356      	adds	r3, #86	; 0x56
 800fc90:	2200      	movs	r2, #0
 800fc92:	801a      	strh	r2, [r3, #0]
			effects[id].startTime = HAL_GetTick();
 800fc94:	f7f2 fa30 	bl	80020f8 <HAL_GetTick>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	7bba      	ldrb	r2, [r7, #14]
 800fc9c:	f04f 0400 	mov.w	r4, #0
 800fca0:	6879      	ldr	r1, [r7, #4]
 800fca2:	0192      	lsls	r2, r2, #6
 800fca4:	440a      	add	r2, r1
 800fca6:	3258      	adds	r2, #88	; 0x58
 800fca8:	e9c2 3400 	strd	r3, r4, [r2]
		break;
 800fcac:	e00b      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
	}
	case HID_ID_BLKFRREP: // Free a block
	{
		free_effect(report[1]-1);
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	3b01      	subs	r3, #1
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	4619      	mov	r1, r3
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 f807 	bl	800fcd0 <_ZN6HidFFB11free_effectEt>
		break;
 800fcc2:	e000      	b.n	800fcc6 <_ZN6HidFFB6hidOutEPh+0x17a>
	}

	default:
		break;
 800fcc4:	bf00      	nop
	}

}
 800fcc6:	bf00      	nop
 800fcc8:	3714      	adds	r7, #20
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd90      	pop	{r4, r7, pc}
 800fcce:	bf00      	nop

0800fcd0 <_ZN6HidFFB11free_effectEt>:

void HidFFB::free_effect(uint16_t idx){
 800fcd0:	b480      	push	{r7}
 800fcd2:	b083      	sub	sp, #12
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	460b      	mov	r3, r1
 800fcda:	807b      	strh	r3, [r7, #2]
	if(idx < MAX_EFFECTS)
 800fcdc:	887b      	ldrh	r3, [r7, #2]
 800fcde:	2b27      	cmp	r3, #39	; 0x27
 800fce0:	d806      	bhi.n	800fcf0 <_ZN6HidFFB11free_effectEt+0x20>
		effects[idx].type=FFB_EFFECT_NONE;
 800fce2:	887b      	ldrh	r3, [r7, #2]
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	019b      	lsls	r3, r3, #6
 800fce8:	4413      	add	r3, r2
 800fcea:	3329      	adds	r3, #41	; 0x29
 800fcec:	2200      	movs	r2, #0
 800fcee:	701a      	strb	r2, [r3, #0]
}
 800fcf0:	bf00      	nop
 800fcf2:	370c      	adds	r7, #12
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bc80      	pop	{r7}
 800fcf8:	4770      	bx	lr

0800fcfa <_ZN6HidFFB6hidGetEhtPPh>:


void HidFFB::hidGet(uint8_t id,uint16_t len,uint8_t** return_buf){
 800fcfa:	b480      	push	{r7}
 800fcfc:	b085      	sub	sp, #20
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	60f8      	str	r0, [r7, #12]
 800fd02:	607b      	str	r3, [r7, #4]
 800fd04:	460b      	mov	r3, r1
 800fd06:	72fb      	strb	r3, [r7, #11]
 800fd08:	4613      	mov	r3, r2
 800fd0a:	813b      	strh	r3, [r7, #8]
	// Feature gets go here

	id = id - FFB_ID_OFFSET;

	switch(id){
 800fd0c:	7afb      	ldrb	r3, [r7, #11]
 800fd0e:	2b12      	cmp	r3, #18
 800fd10:	d002      	beq.n	800fd18 <_ZN6HidFFB6hidGetEhtPPh+0x1e>
 800fd12:	2b13      	cmp	r3, #19
 800fd14:	d006      	beq.n	800fd24 <_ZN6HidFFB6hidGetEhtPPh+0x2a>
		break;
	case HID_ID_POOLREP:
		*return_buf = (uint8_t*)(&this->pool_report);
		break;
	}
}
 800fd16:	e00b      	b.n	800fd30 <_ZN6HidFFB6hidGetEhtPPh+0x36>
		*return_buf = (uint8_t*)(&this->blockLoad_report);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f103 0216 	add.w	r2, r3, #22
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	601a      	str	r2, [r3, #0]
		break;
 800fd22:	e005      	b.n	800fd30 <_ZN6HidFFB6hidGetEhtPPh+0x36>
		*return_buf = (uint8_t*)(&this->pool_report);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f103 021b 	add.w	r2, r3, #27
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	601a      	str	r2, [r3, #0]
		break;
 800fd2e:	bf00      	nop
}
 800fd30:	bf00      	nop
 800fd32:	3714      	adds	r7, #20
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bc80      	pop	{r7}
 800fd38:	4770      	bx	lr

0800fd3a <_ZN6HidFFB9start_FFBEv>:

void HidFFB::start_FFB(){
 800fd3a:	b480      	push	{r7}
 800fd3c:	b083      	sub	sp, #12
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
	ffb_active = true;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2201      	movs	r2, #1
 800fd46:	755a      	strb	r2, [r3, #21]


}
 800fd48:	bf00      	nop
 800fd4a:	370c      	adds	r7, #12
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bc80      	pop	{r7}
 800fd50:	4770      	bx	lr

0800fd52 <_ZN6HidFFB8stop_FFBEv>:
void HidFFB::stop_FFB(){
 800fd52:	b480      	push	{r7}
 800fd54:	b083      	sub	sp, #12
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	6078      	str	r0, [r7, #4]
	ffb_active = false;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	755a      	strb	r2, [r3, #21]


	//TODO Callbacks?
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bc80      	pop	{r7}
 800fd68:	4770      	bx	lr

0800fd6a <_ZN6HidFFB11ffb_controlEh>:

void HidFFB::ffb_control(uint8_t cmd){
 800fd6a:	b580      	push	{r7, lr}
 800fd6c:	b082      	sub	sp, #8
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	6078      	str	r0, [r7, #4]
 800fd72:	460b      	mov	r3, r1
 800fd74:	70fb      	strb	r3, [r7, #3]
	if(cmd & 0x01){ //enable
 800fd76:	78fb      	ldrb	r3, [r7, #3]
 800fd78:	f003 0301 	and.w	r3, r3, #1
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d002      	beq.n	800fd86 <_ZN6HidFFB11ffb_controlEh+0x1c>
		start_FFB();
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f7ff ffda 	bl	800fd3a <_ZN6HidFFB9start_FFBEv>
	}if(cmd & 0x02){ //disable
 800fd86:	78fb      	ldrb	r3, [r7, #3]
 800fd88:	f003 0302 	and.w	r3, r3, #2
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <_ZN6HidFFB11ffb_controlEh+0x2c>
		ffb_active = false;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2200      	movs	r2, #0
 800fd94:	755a      	strb	r2, [r3, #21]
	}if(cmd & 0x04){ //stop TODO Some games send wrong commands?
 800fd96:	78fb      	ldrb	r3, [r7, #3]
 800fd98:	f003 0304 	and.w	r3, r3, #4
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <_ZN6HidFFB11ffb_controlEh+0x3c>
		stop_FFB();
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7ff ffd6 	bl	800fd52 <_ZN6HidFFB8stop_FFBEv>
		//start_FFB();
	}if(cmd & 0x08){ //reset
 800fda6:	78fb      	ldrb	r3, [r7, #3]
 800fda8:	f003 0308 	and.w	r3, r3, #8
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d005      	beq.n	800fdbc <_ZN6HidFFB11ffb_controlEh+0x52>
		//ffb_active = true;
		stop_FFB();
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f7ff ffce 	bl	800fd52 <_ZN6HidFFB8stop_FFBEv>
		reset_ffb();
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f000 f9d3 	bl	8010162 <_ZN6HidFFB9reset_ffbEv>
		// reset effects
	}if(cmd & 0x10){ //pause
 800fdbc:	78fb      	ldrb	r3, [r7, #3]
 800fdbe:	f003 0310 	and.w	r3, r3, #16
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d002      	beq.n	800fdcc <_ZN6HidFFB11ffb_controlEh+0x62>
		ffb_active = false;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	755a      	strb	r2, [r3, #21]
	}if(cmd & 0x20){ //continue
 800fdcc:	78fb      	ldrb	r3, [r7, #3]
 800fdce:	f003 0320 	and.w	r3, r3, #32
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d002      	beq.n	800fddc <_ZN6HidFFB11ffb_controlEh+0x72>
		ffb_active = true;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	755a      	strb	r2, [r3, #21]
	}
	Bchg(this->reportFFBStatus.status,HID_ENABLE_ACTUATORS & ffb_active);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fde2:	461a      	mov	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	7d5b      	ldrb	r3, [r3, #21]
 800fde8:	f003 0302 	and.w	r3, r3, #2
 800fdec:	401a      	ands	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	7d5b      	ldrb	r3, [r3, #21]
 800fdf2:	f003 0302 	and.w	r3, r3, #2
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d112      	bne.n	800fe20 <_ZN6HidFFB11ffb_controlEh+0xb6>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fe00:	b25a      	sxtb	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	7d5b      	ldrb	r3, [r3, #21]
 800fe06:	f003 0302 	and.w	r3, r3, #2
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	43db      	mvns	r3, r3
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	b25b      	sxtb	r3, r3
 800fe12:	4013      	ands	r3, r2
 800fe14:	b25b      	sxtb	r3, r3
 800fe16:	b2da      	uxtb	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800fe1e:	e00f      	b.n	800fe40 <_ZN6HidFFB11ffb_controlEh+0xd6>
	Bchg(this->reportFFBStatus.status,HID_ENABLE_ACTUATORS & ffb_active);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fe26:	b25a      	sxtb	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	7d5b      	ldrb	r3, [r3, #21]
 800fe2c:	b25b      	sxtb	r3, r3
 800fe2e:	f003 0302 	and.w	r3, r3, #2
 800fe32:	b25b      	sxtb	r3, r3
 800fe34:	4313      	orrs	r3, r2
 800fe36:	b25b      	sxtb	r3, r3
 800fe38:	b2da      	uxtb	r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800fe40:	bf00      	nop
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <_ZN6HidFFB19set_constant_effectEP27FFB_SetConstantForce_Data_t>:


void HidFFB::set_constant_effect(FFB_SetConstantForce_Data_t* effect){
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
	effects[effect->effectBlockIndex-1].magnitude = effect->magnitude;
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	785b      	ldrb	r3, [r3, #1]
 800fe56:	3b01      	subs	r3, #1
 800fe58:	683a      	ldr	r2, [r7, #0]
 800fe5a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800fe5e:	b211      	sxth	r1, r2
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	019b      	lsls	r3, r3, #6
 800fe64:	4413      	add	r3, r2
 800fe66:	3338      	adds	r3, #56	; 0x38
 800fe68:	460a      	mov	r2, r1
 800fe6a:	801a      	strh	r2, [r3, #0]
}
 800fe6c:	bf00      	nop
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bc80      	pop	{r7}
 800fe74:	4770      	bx	lr

0800fe76 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t>:

void HidFFB::new_effect(FFB_CreateNewEffect_Feature_Data_t* effect){
 800fe76:	b5b0      	push	{r4, r5, r7, lr}
 800fe78:	b094      	sub	sp, #80	; 0x50
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
 800fe7e:	6039      	str	r1, [r7, #0]
	// Allocates a new effect

	uint8_t index = find_free_effect(effect->effectType); // next effect
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	785b      	ldrb	r3, [r3, #1]
 800fe84:	4619      	mov	r1, r3
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 f94a 	bl	8010120 <_ZN6HidFFB16find_free_effectEh>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(index == 0){
 800fe92:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d103      	bne.n	800fea2 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0x2c>
		blockLoad_report.loadStatus = 2;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2202      	movs	r2, #2
 800fe9e:	761a      	strb	r2, [r3, #24]
 800fea0:	e035      	b.n	800ff0e <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0x98>
		return;
	}

	FFB_Effect new_effect;
 800fea2:	f107 0308 	add.w	r3, r7, #8
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7ff fcdc 	bl	800f864 <_ZN10FFB_EffectC1Ev>
	new_effect.type = effect->effectType;
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	785b      	ldrb	r3, [r3, #1]
 800feb0:	727b      	strb	r3, [r7, #9]

	effects[index-1] = new_effect;
 800feb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800feb6:	3b01      	subs	r3, #1
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	019b      	lsls	r3, r3, #6
 800febc:	4413      	add	r3, r2
 800febe:	3328      	adds	r3, #40	; 0x28
 800fec0:	461d      	mov	r5, r3
 800fec2:	f107 0408 	add.w	r4, r7, #8
 800fec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800feca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fed2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fed6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	// Set block load report
	reportFFBStatus.effectBlockIndex = index;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fee0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	blockLoad_report.effectBlockIndex = index;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800feea:	75da      	strb	r2, [r3, #23]
	used_effects++;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	8a5b      	ldrh	r3, [r3, #18]
 800fef0:	3301      	adds	r3, #1
 800fef2:	b29a      	uxth	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	825a      	strh	r2, [r3, #18]
	blockLoad_report.ramPoolAvailable = MAX_EFFECTS-used_effects;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	8a5b      	ldrh	r3, [r3, #18]
 800fefc:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800ff00:	b29a      	uxth	r2, r3
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f8a3 2019 	strh.w	r2, [r3, #25]
	blockLoad_report.loadStatus = 1;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	761a      	strb	r2, [r3, #24]


}
 800ff0e:	3750      	adds	r7, #80	; 0x50
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bdb0      	pop	{r4, r5, r7, pc}

0800ff14 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t>:
void HidFFB::set_effect(FFB_SetEffect_t* effect){
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
	uint8_t index = effect->effectBlockIndex;
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	785b      	ldrb	r3, [r3, #1]
 800ff22:	73fb      	strb	r3, [r7, #15]
	if(index > MAX_EFFECTS || index == 0)
 800ff24:	7bfb      	ldrb	r3, [r7, #15]
 800ff26:	2b28      	cmp	r3, #40	; 0x28
 800ff28:	d84c      	bhi.n	800ffc4 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xb0>
 800ff2a:	7bfb      	ldrb	r3, [r7, #15]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d049      	beq.n	800ffc4 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xb0>
		return;

	FFB_Effect* effect_p = &effects[index-1];
 800ff30:	7bfb      	ldrb	r3, [r7, #15]
 800ff32:	3b01      	subs	r3, #1
 800ff34:	019b      	lsls	r3, r3, #6
 800ff36:	3328      	adds	r3, #40	; 0x28
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	4413      	add	r3, r2
 800ff3c:	60bb      	str	r3, [r7, #8]
	effect_p->gain = effect->gain;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	7a5a      	ldrb	r2, [r3, #9]
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	709a      	strb	r2, [r3, #2]
	effect_p->type = effect->effectType;
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	789a      	ldrb	r2, [r3, #2]
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	705a      	strb	r2, [r3, #1]
	effect_p->samplePeriod = effect->samplePeriod;
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ff54:	b29a      	uxth	r2, r3
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	871a      	strh	r2, [r3, #56]	; 0x38
	if(effect->enableAxis & 0x4){
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	7adb      	ldrb	r3, [r3, #11]
 800ff5e:	f003 0304 	and.w	r3, r3, #4
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d004      	beq.n	800ff70 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x5c>
		// All axes
		effect_p->axis = 0x7;
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	2207      	movs	r2, #7
 800ff6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ff6e:	e004      	b.n	800ff7a <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x66>
	}else{
		effect_p->axis = effect->enableAxis;
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	7ada      	ldrb	r2, [r3, #11]
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}
	if(effect_p->type != effect->effectType){
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	785a      	ldrb	r2, [r3, #1]
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	789b      	ldrb	r3, [r3, #2]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d005      	beq.n	800ff92 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x7e>
		effect_p->counter = 0;
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	849a      	strh	r2, [r3, #36]	; 0x24
		effect_p->last_value = 0;
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	621a      	str	r2, [r3, #32]
	}

	effect_p->duration = effect->duration;
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	851a      	strh	r2, [r3, #40]	; 0x28
	effect_p->directionX = effect->directionX;
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	7b1a      	ldrb	r2, [r3, #12]
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	759a      	strb	r2, [r3, #22]
	effect_p->directionY = effect->directionY;
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	7b5a      	ldrb	r2, [r3, #13]
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	75da      	strb	r2, [r3, #23]

	if(!ffb_active)
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	7d5b      	ldrb	r3, [r3, #21]
 800ffb2:	f083 0301 	eor.w	r3, r3, #1
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d004      	beq.n	800ffc6 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xb2>
		start_FFB();
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f7ff febc 	bl	800fd3a <_ZN6HidFFB9start_FFBEv>
 800ffc2:	e000      	b.n	800ffc6 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xb2>
		return;
 800ffc4:	bf00      	nop
}
 800ffc6:	3710      	adds	r7, #16
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <_ZN6HidFFB12set_envelopeEP22FFB_SetEnvelope_Data_t>:

void HidFFB::set_envelope(FFB_SetEnvelope_Data_t *envelop)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b085      	sub	sp, #20
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]
	FFB_Effect* effect = &effects[envelop->effectBlockIndex-1];
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	785b      	ldrb	r3, [r3, #1]
 800ffda:	3b01      	subs	r3, #1
 800ffdc:	019b      	lsls	r3, r3, #6
 800ffde:	3328      	adds	r3, #40	; 0x28
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	60fb      	str	r3, [r7, #12]

	effect->attackLevel = envelop->attackLevel;
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	885b      	ldrh	r3, [r3, #2]
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	b21a      	sxth	r2, r3
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	809a      	strh	r2, [r3, #4]
	effect->fadeLevel = envelop->fadeLevel;
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	889b      	ldrh	r3, [r3, #4]
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	b21a      	sxth	r2, r3
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	80da      	strh	r2, [r3, #6]
	effect->attackTime = envelop->attackTime;
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	88db      	ldrh	r3, [r3, #6]
 8010002:	b29a      	uxth	r2, r3
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	859a      	strh	r2, [r3, #44]	; 0x2c
	effect->fadeTime = envelop->fadeTime;
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	891b      	ldrh	r3, [r3, #8]
 801000c:	b29a      	uxth	r2, r3
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8010012:	bf00      	nop
 8010014:	3714      	adds	r7, #20
 8010016:	46bd      	mov	sp, r7
 8010018:	bc80      	pop	{r7}
 801001a:	4770      	bx	lr

0801001c <_ZN6HidFFB15set_ramp_effectEP23FFB_SetRampForce_Data_t>:

void HidFFB::set_ramp_effect(FFB_SetRampForce_Data_t *effect)
{
 801001c:	b480      	push	{r7}
 801001e:	b085      	sub	sp, #20
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
	FFB_Effect* effect_p = &effects[effect->effectBlockIndex-1];
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	785b      	ldrb	r3, [r3, #1]
 801002a:	3b01      	subs	r3, #1
 801002c:	019b      	lsls	r3, r3, #6
 801002e:	3328      	adds	r3, #40	; 0x28
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	4413      	add	r3, r2
 8010034:	60fb      	str	r3, [r7, #12]

	effect_p->startMagnitude = effect->startMagnitude;
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801003c:	b21a      	sxth	r2, r3
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	825a      	strh	r2, [r3, #18]
	effect_p->endMagnitude = effect->endMagnitude;
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010048:	b21a      	sxth	r2, r3
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	829a      	strh	r2, [r3, #20]
}
 801004e:	bf00      	nop
 8010050:	3714      	adds	r7, #20
 8010052:	46bd      	mov	sp, r7
 8010054:	bc80      	pop	{r7}
 8010056:	4770      	bx	lr

08010058 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t>:


void HidFFB::set_condition(FFB_SetCondition_Data_t* cond){
 8010058:	b480      	push	{r7}
 801005a:	b085      	sub	sp, #20
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
	if(cond->parameterBlockOffset != 0) //TODO if more axes are needed. Only X Axis is implemented now for the wheel.
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	789b      	ldrb	r3, [r3, #2]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d12c      	bne.n	80100c4 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t+0x6c>
		return;

	FFB_Effect* effect = &effects[cond->effectBlockIndex-1];
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	785b      	ldrb	r3, [r3, #1]
 801006e:	3b01      	subs	r3, #1
 8010070:	019b      	lsls	r3, r3, #6
 8010072:	3328      	adds	r3, #40	; 0x28
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	4413      	add	r3, r2
 8010078:	60fb      	str	r3, [r7, #12]

	effect->offset = cond->cpOffset;
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8010080:	b21a      	sxth	r2, r3
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	835a      	strh	r2, [r3, #26]
	effect->negativeCoefficient  = cond->negativeCoefficient;
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 801008c:	b21a      	sxth	r2, r3
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	815a      	strh	r2, [r3, #10]
	effect->positiveCoefficient = cond->positiveCoefficient;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8010098:	b21a      	sxth	r2, r3
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	811a      	strh	r2, [r3, #8]
	effect->negativeSaturation = cond->negativeSaturation;
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	81da      	strh	r2, [r3, #14]
	effect->positiveSaturation = cond->positiveSaturation;
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80100b0:	b29a      	uxth	r2, r3
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	819a      	strh	r2, [r3, #12]
	effect->deadBand = cond->deadBand;
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80100bc:	b29a      	uxth	r2, r3
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	879a      	strh	r2, [r3, #60]	; 0x3c
 80100c2:	e000      	b.n	80100c6 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t+0x6e>
		return;
 80100c4:	bf00      	nop
}
 80100c6:	3714      	adds	r7, #20
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bc80      	pop	{r7}
 80100cc:	4770      	bx	lr

080100ce <_ZN6HidFFB12set_periodicEP22FFB_SetPeriodic_Data_t>:

void HidFFB::set_periodic(FFB_SetPeriodic_Data_t* report){
 80100ce:	b480      	push	{r7}
 80100d0:	b085      	sub	sp, #20
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
 80100d6:	6039      	str	r1, [r7, #0]
	FFB_Effect* effect = &effects[report->effectBlockIndex-1];
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	785b      	ldrb	r3, [r3, #1]
 80100dc:	3b01      	subs	r3, #1
 80100de:	019b      	lsls	r3, r3, #6
 80100e0:	3328      	adds	r3, #40	; 0x28
 80100e2:	687a      	ldr	r2, [r7, #4]
 80100e4:	4413      	add	r3, r2
 80100e6:	60fb      	str	r3, [r7, #12]

	effect->period = report->period;
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	891b      	ldrh	r3, [r3, #8]
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	84da      	strh	r2, [r3, #38]	; 0x26
	effect->magnitude = report->magnitude;
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	885b      	ldrh	r3, [r3, #2]
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	b21a      	sxth	r2, r3
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	821a      	strh	r2, [r3, #16]
	effect->offset = report->offset;
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010104:	b21a      	sxth	r2, r3
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	835a      	strh	r2, [r3, #26]
	effect->phase = report->phase;
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	88db      	ldrh	r3, [r3, #6]
 801010e:	b29b      	uxth	r3, r3
 8010110:	b21a      	sxth	r2, r3
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	831a      	strh	r2, [r3, #24]
	//effect->counter = 0;
}
 8010116:	bf00      	nop
 8010118:	3714      	adds	r7, #20
 801011a:	46bd      	mov	sp, r7
 801011c:	bc80      	pop	{r7}
 801011e:	4770      	bx	lr

08010120 <_ZN6HidFFB16find_free_effectEh>:

uint8_t HidFFB::find_free_effect(uint8_t type){ //Will return the first effect index which is empty or the same type
 8010120:	b480      	push	{r7}
 8010122:	b085      	sub	sp, #20
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	460b      	mov	r3, r1
 801012a:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 801012c:	2300      	movs	r3, #0
 801012e:	73fb      	strb	r3, [r7, #15]
 8010130:	7bfb      	ldrb	r3, [r7, #15]
 8010132:	2b27      	cmp	r3, #39	; 0x27
 8010134:	d80f      	bhi.n	8010156 <_ZN6HidFFB16find_free_effectEh+0x36>
		if(effects[i].type == FFB_EFFECT_NONE){
 8010136:	7bfb      	ldrb	r3, [r7, #15]
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	019b      	lsls	r3, r3, #6
 801013c:	4413      	add	r3, r2
 801013e:	3329      	adds	r3, #41	; 0x29
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d103      	bne.n	801014e <_ZN6HidFFB16find_free_effectEh+0x2e>
			return(i+1);
 8010146:	7bfb      	ldrb	r3, [r7, #15]
 8010148:	3301      	adds	r3, #1
 801014a:	b2db      	uxtb	r3, r3
 801014c:	e004      	b.n	8010158 <_ZN6HidFFB16find_free_effectEh+0x38>
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 801014e:	7bfb      	ldrb	r3, [r7, #15]
 8010150:	3301      	adds	r3, #1
 8010152:	73fb      	strb	r3, [r7, #15]
 8010154:	e7ec      	b.n	8010130 <_ZN6HidFFB16find_free_effectEh+0x10>
		}
	}
	return 0;
 8010156:	2300      	movs	r3, #0
}
 8010158:	4618      	mov	r0, r3
 801015a:	3714      	adds	r7, #20
 801015c:	46bd      	mov	sp, r7
 801015e:	bc80      	pop	{r7}
 8010160:	4770      	bx	lr

08010162 <_ZN6HidFFB9reset_ffbEv>:



void HidFFB::reset_ffb(){
 8010162:	b580      	push	{r7, lr}
 8010164:	b084      	sub	sp, #16
 8010166:	af00      	add	r7, sp, #0
 8010168:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 801016a:	2300      	movs	r3, #0
 801016c:	73fb      	strb	r3, [r7, #15]
 801016e:	7bfb      	ldrb	r3, [r7, #15]
 8010170:	2b27      	cmp	r3, #39	; 0x27
 8010172:	d809      	bhi.n	8010188 <_ZN6HidFFB9reset_ffbEv+0x26>
		free_effect(i);
 8010174:	7bfb      	ldrb	r3, [r7, #15]
 8010176:	b29b      	uxth	r3, r3
 8010178:	4619      	mov	r1, r3
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f7ff fda8 	bl	800fcd0 <_ZN6HidFFB11free_effectEt>
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 8010180:	7bfb      	ldrb	r3, [r7, #15]
 8010182:	3301      	adds	r3, #1
 8010184:	73fb      	strb	r3, [r7, #15]
 8010186:	e7f2      	b.n	801016e <_ZN6HidFFB9reset_ffbEv+0xc>
	}
	this->reportFFBStatus.effectBlockIndex = 1;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2201      	movs	r2, #1
 801018c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	this->reportFFBStatus.status = (HID_ACTUATOR_POWER) | (HID_ENABLE_ACTUATORS);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	220a      	movs	r2, #10
 8010194:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	used_effects = 0;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2200      	movs	r2, #0
 801019c:	825a      	strh	r2, [r3, #18]
}
 801019e:	bf00      	nop
 80101a0:	3710      	adds	r7, #16
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
	...

080101a8 <_ZN6HidFFB23ConstantForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::ConstantForceCalculator(FFB_Effect *effect)
{
 80101a8:	b590      	push	{r4, r7, lr}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	6039      	str	r1, [r7, #0]
	float tempforce = (float)effect->magnitude * effect->gain / 255;
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7f0 fd6f 	bl	8000c9c <__aeabi_i2f>
 80101be:	4604      	mov	r4, r0
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	789b      	ldrb	r3, [r3, #2]
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7f0 fd69 	bl	8000c9c <__aeabi_i2f>
 80101ca:	4603      	mov	r3, r0
 80101cc:	4619      	mov	r1, r3
 80101ce:	4620      	mov	r0, r4
 80101d0:	f7f0 fdb8 	bl	8000d44 <__aeabi_fmul>
 80101d4:	4603      	mov	r3, r0
 80101d6:	4907      	ldr	r1, [pc, #28]	; (80101f4 <_ZN6HidFFB23ConstantForceCalculatorEP10FFB_Effect+0x4c>)
 80101d8:	4618      	mov	r0, r3
 80101da:	f7f0 fe67 	bl	8000eac <__aeabi_fdiv>
 80101de:	4603      	mov	r3, r0
 80101e0:	60fb      	str	r3, [r7, #12]
	return (int32_t)tempforce;
 80101e2:	68f8      	ldr	r0, [r7, #12]
 80101e4:	f7f0 ff74 	bl	80010d0 <__aeabi_f2iz>
 80101e8:	4603      	mov	r3, r0
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3714      	adds	r7, #20
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd90      	pop	{r4, r7, pc}
 80101f2:	bf00      	nop
 80101f4:	437f0000 	.word	0x437f0000

080101f8 <_ZN6HidFFB19RampForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::RampForceCalculator(FFB_Effect* effect)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
	int32_t rampForce = effect->startMagnitude + effect->elapsedTime * (effect->endMagnitude - effect->startMagnitude) / effect->duration;
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010208:	4619      	mov	r1, r3
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801020e:	461a      	mov	r2, r3
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010216:	4618      	mov	r0, r3
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801021e:	1ac3      	subs	r3, r0, r3
 8010220:	fb03 f302 	mul.w	r3, r3, r2
 8010224:	683a      	ldr	r2, [r7, #0]
 8010226:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010228:	fb93 f3f2 	sdiv	r3, r3, r2
 801022c:	440b      	add	r3, r1
 801022e:	60fb      	str	r3, [r7, #12]
	return rampForce;
 8010230:	68fb      	ldr	r3, [r7, #12]
}
 8010232:	4618      	mov	r0, r3
 8010234:	3714      	adds	r7, #20
 8010236:	46bd      	mov	sp, r7
 8010238:	bc80      	pop	{r7}
 801023a:	4770      	bx	lr
 801023c:	0000      	movs	r0, r0
	...

08010240 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal>:

int32_t HidFFB::calculateEffects(EncoderLocal* encoder){
 8010240:	b5b0      	push	{r4, r5, r7, lr}
 8010242:	b086      	sub	sp, #24
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
	if(!ffb_active){
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	7d5b      	ldrb	r3, [r3, #21]
 801024e:	f083 0301 	eor.w	r3, r3, #1
 8010252:	b2db      	uxtb	r3, r3
 8010254:	2b00      	cmp	r3, #0
 8010256:	d010      	beq.n	801027a <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x3a>
		if(idlecenter){
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	791b      	ldrb	r3, [r3, #4]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00a      	beq.n	8010276 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x36>
			return clip<int32_t,int32_t>(-encoder->currentPosition,-5000,5000);
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	69db      	ldr	r3, [r3, #28]
 8010264:	425b      	negs	r3, r3
 8010266:	f241 3288 	movw	r2, #5000	; 0x1388
 801026a:	49c1      	ldr	r1, [pc, #772]	; (8010570 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x330>)
 801026c:	4618      	mov	r0, r3
 801026e:	f7fc fd8b 	bl	800cd88 <_Z4clipIllET_S0_T0_S1_>
 8010272:	4603      	mov	r3, r0
 8010274:	e3af      	b.n	80109d6 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x796>
		}else{
			return 0;
 8010276:	2300      	movs	r3, #0
 8010278:	e3ad      	b.n	80109d6 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x796>
		}
	}

	int32_t result_torque = 0;
 801027a:	2300      	movs	r3, #0
 801027c:	617b      	str	r3, [r7, #20]

	for(uint8_t i = 0;i<MAX_EFFECTS;i++){
 801027e:	2300      	movs	r3, #0
 8010280:	74fb      	strb	r3, [r7, #19]
 8010282:	7cfb      	ldrb	r3, [r7, #19]
 8010284:	2b27      	cmp	r3, #39	; 0x27
 8010286:	f200 8397 	bhi.w	80109b8 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x778>
		FFB_Effect* effect = &effects[i];
 801028a:	7cfb      	ldrb	r3, [r7, #19]
 801028c:	019b      	lsls	r3, r3, #6
 801028e:	3328      	adds	r3, #40	; 0x28
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	4413      	add	r3, r2
 8010294:	60fb      	str	r3, [r7, #12]
		// Filter out inactive effects
		if(effect->state == 0 || !(0x01 & effect->axis))
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	b2db      	uxtb	r3, r3
 801029c:	2b00      	cmp	r3, #0
 801029e:	d006      	beq.n	80102ae <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x6e>
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80102a6:	f003 0301 	and.w	r3, r3, #1
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d101      	bne.n	80102b2 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x72>
 80102ae:	2301      	movs	r3, #1
 80102b0:	e000      	b.n	80102b4 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x74>
 80102b2:	2300      	movs	r3, #0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	f040 837a 	bne.w	80109ae <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x76e>
			continue;

		switch(effect->type){
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	785b      	ldrb	r3, [r3, #1]
 80102be:	3b01      	subs	r3, #1
 80102c0:	2b0a      	cmp	r3, #10
 80102c2:	f200 8349 	bhi.w	8010958 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x718>
 80102c6:	a201      	add	r2, pc, #4	; (adr r2, 80102cc <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x8c>)
 80102c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102cc:	080102f9 	.word	0x080102f9
 80102d0:	08010371 	.word	0x08010371
 80102d4:	08010475 	.word	0x08010475
 80102d8:	080104ed 	.word	0x080104ed
 80102dc:	08010579 	.word	0x08010579
 80102e0:	08010669 	.word	0x08010669
 80102e4:	080105f1 	.word	0x080105f1
 80102e8:	080103e9 	.word	0x080103e9
 80102ec:	080106e1 	.word	0x080106e1
 80102f0:	0801076d 	.word	0x0801076d
 80102f4:	080108cd 	.word	0x080108cd
		case FFB_EFFECT_CONSTANT:
			result_torque -= ConstantForceCalculator(effect) * (((float)conf->constantGain * 50.0) / 255.0);
 80102f8:	68f9      	ldr	r1, [r7, #12]
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f7ff ff54 	bl	80101a8 <_ZN6HidFFB23ConstantForceCalculatorEP10FFB_Effect>
 8010300:	4603      	mov	r3, r0
 8010302:	4618      	mov	r0, r3
 8010304:	f7f0 f87e 	bl	8000404 <__aeabi_i2d>
 8010308:	4604      	mov	r4, r0
 801030a:	460d      	mov	r5, r1
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6a1b      	ldr	r3, [r3, #32]
 8010310:	7b5b      	ldrb	r3, [r3, #13]
 8010312:	4618      	mov	r0, r3
 8010314:	f7f0 fcbe 	bl	8000c94 <__aeabi_ui2f>
 8010318:	4603      	mov	r3, r0
 801031a:	4618      	mov	r0, r3
 801031c:	f7f0 f884 	bl	8000428 <__aeabi_f2d>
 8010320:	f04f 0200 	mov.w	r2, #0
 8010324:	4b93      	ldr	r3, [pc, #588]	; (8010574 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x334>)
 8010326:	f7f0 f8d7 	bl	80004d8 <__aeabi_dmul>
 801032a:	4602      	mov	r2, r0
 801032c:	460b      	mov	r3, r1
 801032e:	4610      	mov	r0, r2
 8010330:	4619      	mov	r1, r3
 8010332:	a38d      	add	r3, pc, #564	; (adr r3, 8010568 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x328>)
 8010334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010338:	f7f0 f9f8 	bl	800072c <__aeabi_ddiv>
 801033c:	4602      	mov	r2, r0
 801033e:	460b      	mov	r3, r1
 8010340:	4620      	mov	r0, r4
 8010342:	4629      	mov	r1, r5
 8010344:	f7f0 f8c8 	bl	80004d8 <__aeabi_dmul>
 8010348:	4603      	mov	r3, r0
 801034a:	460c      	mov	r4, r1
 801034c:	4625      	mov	r5, r4
 801034e:	461c      	mov	r4, r3
 8010350:	6978      	ldr	r0, [r7, #20]
 8010352:	f7f0 f857 	bl	8000404 <__aeabi_i2d>
 8010356:	4622      	mov	r2, r4
 8010358:	462b      	mov	r3, r5
 801035a:	f7ef ff05 	bl	8000168 <__aeabi_dsub>
 801035e:	4603      	mov	r3, r0
 8010360:	460c      	mov	r4, r1
 8010362:	4618      	mov	r0, r3
 8010364:	4621      	mov	r1, r4
 8010366:	f7f0 fb67 	bl	8000a38 <__aeabi_d2iz>
 801036a:	4603      	mov	r3, r0
 801036c:	617b      	str	r3, [r7, #20]
			break;
 801036e:	e2f6      	b.n	801095e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
	    case FFB_EFFECT_RAMP:
	    	result_torque -= RampForceCalculator(effect) * (((float)conf->rampGain * 50.0) / 255.0);
 8010370:	68f9      	ldr	r1, [r7, #12]
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f7ff ff40 	bl	80101f8 <_ZN6HidFFB19RampForceCalculatorEP10FFB_Effect>
 8010378:	4603      	mov	r3, r0
 801037a:	4618      	mov	r0, r3
 801037c:	f7f0 f842 	bl	8000404 <__aeabi_i2d>
 8010380:	4604      	mov	r4, r0
 8010382:	460d      	mov	r5, r1
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6a1b      	ldr	r3, [r3, #32]
 8010388:	7b9b      	ldrb	r3, [r3, #14]
 801038a:	4618      	mov	r0, r3
 801038c:	f7f0 fc82 	bl	8000c94 <__aeabi_ui2f>
 8010390:	4603      	mov	r3, r0
 8010392:	4618      	mov	r0, r3
 8010394:	f7f0 f848 	bl	8000428 <__aeabi_f2d>
 8010398:	f04f 0200 	mov.w	r2, #0
 801039c:	4b75      	ldr	r3, [pc, #468]	; (8010574 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x334>)
 801039e:	f7f0 f89b 	bl	80004d8 <__aeabi_dmul>
 80103a2:	4602      	mov	r2, r0
 80103a4:	460b      	mov	r3, r1
 80103a6:	4610      	mov	r0, r2
 80103a8:	4619      	mov	r1, r3
 80103aa:	a36f      	add	r3, pc, #444	; (adr r3, 8010568 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x328>)
 80103ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b0:	f7f0 f9bc 	bl	800072c <__aeabi_ddiv>
 80103b4:	4602      	mov	r2, r0
 80103b6:	460b      	mov	r3, r1
 80103b8:	4620      	mov	r0, r4
 80103ba:	4629      	mov	r1, r5
 80103bc:	f7f0 f88c 	bl	80004d8 <__aeabi_dmul>
 80103c0:	4603      	mov	r3, r0
 80103c2:	460c      	mov	r4, r1
 80103c4:	4625      	mov	r5, r4
 80103c6:	461c      	mov	r4, r3
 80103c8:	6978      	ldr	r0, [r7, #20]
 80103ca:	f7f0 f81b 	bl	8000404 <__aeabi_i2d>
 80103ce:	4622      	mov	r2, r4
 80103d0:	462b      	mov	r3, r5
 80103d2:	f7ef fec9 	bl	8000168 <__aeabi_dsub>
 80103d6:	4603      	mov	r3, r0
 80103d8:	460c      	mov	r4, r1
 80103da:	4618      	mov	r0, r3
 80103dc:	4621      	mov	r1, r4
 80103de:	f7f0 fb2b 	bl	8000a38 <__aeabi_d2iz>
 80103e2:	4603      	mov	r3, r0
 80103e4:	617b      	str	r3, [r7, #20]
	        break;
 80103e6:	e2ba      	b.n	801095e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		case FFB_EFFECT_SPRING:
			result_torque -= ConditionForceCalculator(effect, NormalizeRange(encoder->currentPosition, encoder->maxValue)) * (((float)conf->springGain * 50.0) / 255.0);
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	69d9      	ldr	r1, [r3, #28]
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	695b      	ldr	r3, [r3, #20]
 80103f0:	461a      	mov	r2, r3
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 fece 	bl	8011194 <_ZN6HidFFB14NormalizeRangeEll>
 80103f8:	4603      	mov	r3, r0
 80103fa:	461a      	mov	r2, r3
 80103fc:	68f9      	ldr	r1, [r7, #12]
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 fd72 	bl	8010ee8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>
 8010404:	4603      	mov	r3, r0
 8010406:	4618      	mov	r0, r3
 8010408:	f7ef fffc 	bl	8000404 <__aeabi_i2d>
 801040c:	4604      	mov	r4, r0
 801040e:	460d      	mov	r5, r1
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6a1b      	ldr	r3, [r3, #32]
 8010414:	7d1b      	ldrb	r3, [r3, #20]
 8010416:	4618      	mov	r0, r3
 8010418:	f7f0 fc3c 	bl	8000c94 <__aeabi_ui2f>
 801041c:	4603      	mov	r3, r0
 801041e:	4618      	mov	r0, r3
 8010420:	f7f0 f802 	bl	8000428 <__aeabi_f2d>
 8010424:	f04f 0200 	mov.w	r2, #0
 8010428:	4b52      	ldr	r3, [pc, #328]	; (8010574 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x334>)
 801042a:	f7f0 f855 	bl	80004d8 <__aeabi_dmul>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	4610      	mov	r0, r2
 8010434:	4619      	mov	r1, r3
 8010436:	a34c      	add	r3, pc, #304	; (adr r3, 8010568 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x328>)
 8010438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043c:	f7f0 f976 	bl	800072c <__aeabi_ddiv>
 8010440:	4602      	mov	r2, r0
 8010442:	460b      	mov	r3, r1
 8010444:	4620      	mov	r0, r4
 8010446:	4629      	mov	r1, r5
 8010448:	f7f0 f846 	bl	80004d8 <__aeabi_dmul>
 801044c:	4603      	mov	r3, r0
 801044e:	460c      	mov	r4, r1
 8010450:	4625      	mov	r5, r4
 8010452:	461c      	mov	r4, r3
 8010454:	6978      	ldr	r0, [r7, #20]
 8010456:	f7ef ffd5 	bl	8000404 <__aeabi_i2d>
 801045a:	4622      	mov	r2, r4
 801045c:	462b      	mov	r3, r5
 801045e:	f7ef fe83 	bl	8000168 <__aeabi_dsub>
 8010462:	4603      	mov	r3, r0
 8010464:	460c      	mov	r4, r1
 8010466:	4618      	mov	r0, r3
 8010468:	4621      	mov	r1, r4
 801046a:	f7f0 fae5 	bl	8000a38 <__aeabi_d2iz>
 801046e:	4603      	mov	r3, r0
 8010470:	617b      	str	r3, [r7, #20]
			break;
 8010472:	e274      	b.n	801095e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		case FFB_EFFECT_SQUARE:
			result_torque -= SquareForceCalculator(effect) * (((float)conf->squareGain * 50.0) / 255.0);
 8010474:	68f9      	ldr	r1, [r7, #12]
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 faba 	bl	80109f0 <_ZN6HidFFB21SquareForceCalculatorEP10FFB_Effect>
 801047c:	4603      	mov	r3, r0
 801047e:	4618      	mov	r0, r3
 8010480:	f7ef ffc0 	bl	8000404 <__aeabi_i2d>
 8010484:	4604      	mov	r4, r0
 8010486:	460d      	mov	r5, r1
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6a1b      	ldr	r3, [r3, #32]
 801048c:	7bdb      	ldrb	r3, [r3, #15]
 801048e:	4618      	mov	r0, r3
 8010490:	f7f0 fc00 	bl	8000c94 <__aeabi_ui2f>
 8010494:	4603      	mov	r3, r0
 8010496:	4618      	mov	r0, r3
 8010498:	f7ef ffc6 	bl	8000428 <__aeabi_f2d>
 801049c:	f04f 0200 	mov.w	r2, #0
 80104a0:	4b34      	ldr	r3, [pc, #208]	; (8010574 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x334>)
 80104a2:	f7f0 f819 	bl	80004d8 <__aeabi_dmul>
 80104a6:	4602      	mov	r2, r0
 80104a8:	460b      	mov	r3, r1
 80104aa:	4610      	mov	r0, r2
 80104ac:	4619      	mov	r1, r3
 80104ae:	a32e      	add	r3, pc, #184	; (adr r3, 8010568 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x328>)
 80104b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b4:	f7f0 f93a 	bl	800072c <__aeabi_ddiv>
 80104b8:	4602      	mov	r2, r0
 80104ba:	460b      	mov	r3, r1
 80104bc:	4620      	mov	r0, r4
 80104be:	4629      	mov	r1, r5
 80104c0:	f7f0 f80a 	bl	80004d8 <__aeabi_dmul>
 80104c4:	4603      	mov	r3, r0
 80104c6:	460c      	mov	r4, r1
 80104c8:	4625      	mov	r5, r4
 80104ca:	461c      	mov	r4, r3
 80104cc:	6978      	ldr	r0, [r7, #20]
 80104ce:	f7ef ff99 	bl	8000404 <__aeabi_i2d>
 80104d2:	4622      	mov	r2, r4
 80104d4:	462b      	mov	r3, r5
 80104d6:	f7ef fe47 	bl	8000168 <__aeabi_dsub>
 80104da:	4603      	mov	r3, r0
 80104dc:	460c      	mov	r4, r1
 80104de:	4618      	mov	r0, r3
 80104e0:	4621      	mov	r1, r4
 80104e2:	f7f0 faa9 	bl	8000a38 <__aeabi_d2iz>
 80104e6:	4603      	mov	r3, r0
 80104e8:	617b      	str	r3, [r7, #20]
			break;
 80104ea:	e238      	b.n	801095e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		case FFB_EFFECT_SINE:
			result_torque -= SinForceCalculator(effect) * (((float)conf->sinGain * 50.0) / 255.0);
 80104ec:	68f9      	ldr	r1, [r7, #12]
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 faca 	bl	8010a88 <_ZN6HidFFB18SinForceCalculatorEP10FFB_Effect>
 80104f4:	4603      	mov	r3, r0
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7ef ff84 	bl	8000404 <__aeabi_i2d>
 80104fc:	4604      	mov	r4, r0
 80104fe:	460d      	mov	r5, r1
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6a1b      	ldr	r3, [r3, #32]
 8010504:	7c1b      	ldrb	r3, [r3, #16]
 8010506:	4618      	mov	r0, r3
 8010508:	f7f0 fbc4 	bl	8000c94 <__aeabi_ui2f>
 801050c:	4603      	mov	r3, r0
 801050e:	4618      	mov	r0, r3
 8010510:	f7ef ff8a 	bl	8000428 <__aeabi_f2d>
 8010514:	f04f 0200 	mov.w	r2, #0
 8010518:	4b16      	ldr	r3, [pc, #88]	; (8010574 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x334>)
 801051a:	f7ef ffdd 	bl	80004d8 <__aeabi_dmul>
 801051e:	4602      	mov	r2, r0
 8010520:	460b      	mov	r3, r1
 8010522:	4610      	mov	r0, r2
 8010524:	4619      	mov	r1, r3
 8010526:	a310      	add	r3, pc, #64	; (adr r3, 8010568 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x328>)
 8010528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052c:	f7f0 f8fe 	bl	800072c <__aeabi_ddiv>
 8010530:	4602      	mov	r2, r0
 8010532:	460b      	mov	r3, r1
 8010534:	4620      	mov	r0, r4
 8010536:	4629      	mov	r1, r5
 8010538:	f7ef ffce 	bl	80004d8 <__aeabi_dmul>
 801053c:	4603      	mov	r3, r0
 801053e:	460c      	mov	r4, r1
 8010540:	4625      	mov	r5, r4
 8010542:	461c      	mov	r4, r3
 8010544:	6978      	ldr	r0, [r7, #20]
 8010546:	f7ef ff5d 	bl	8000404 <__aeabi_i2d>
 801054a:	4622      	mov	r2, r4
 801054c:	462b      	mov	r3, r5
 801054e:	f7ef fe0b 	bl	8000168 <__aeabi_dsub>
 8010552:	4603      	mov	r3, r0
 8010554:	460c      	mov	r4, r1
 8010556:	4618      	mov	r0, r3
 8010558:	4621      	mov	r1, r4
 801055a:	f7f0 fa6d 	bl	8000a38 <__aeabi_d2iz>
 801055e:	4603      	mov	r3, r0
 8010560:	617b      	str	r3, [r7, #20]
			break;
 8010562:	e1fc      	b.n	801095e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
 8010564:	f3af 8000 	nop.w
 8010568:	00000000 	.word	0x00000000
 801056c:	406fe000 	.word	0x406fe000
 8010570:	ffffec78 	.word	0xffffec78
 8010574:	40490000 	.word	0x40490000
        case FFB_EFFECT_TRIANGLE:
        	result_torque -= TriangleForceCalculator(effect) * (((float)conf->triangleGain * 50.0) / 255.0);
 8010578:	68f9      	ldr	r1, [r7, #12]
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 faee 	bl	8010b5c <_ZN6HidFFB23TriangleForceCalculatorEP10FFB_Effect>
 8010580:	4603      	mov	r3, r0
 8010582:	4618      	mov	r0, r3
 8010584:	f7ef ff3e 	bl	8000404 <__aeabi_i2d>
 8010588:	4604      	mov	r4, r0
 801058a:	460d      	mov	r5, r1
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6a1b      	ldr	r3, [r3, #32]
 8010590:	7c5b      	ldrb	r3, [r3, #17]
 8010592:	4618      	mov	r0, r3
 8010594:	f7f0 fb7e 	bl	8000c94 <__aeabi_ui2f>
 8010598:	4603      	mov	r3, r0
 801059a:	4618      	mov	r0, r3
 801059c:	f7ef ff44 	bl	8000428 <__aeabi_f2d>
 80105a0:	f04f 0200 	mov.w	r2, #0
 80105a4:	4bc8      	ldr	r3, [pc, #800]	; (80108c8 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 80105a6:	f7ef ff97 	bl	80004d8 <__aeabi_dmul>
 80105aa:	4602      	mov	r2, r0
 80105ac:	460b      	mov	r3, r1
 80105ae:	4610      	mov	r0, r2
 80105b0:	4619      	mov	r1, r3
 80105b2:	a3c3      	add	r3, pc, #780	; (adr r3, 80108c0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 80105b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b8:	f7f0 f8b8 	bl	800072c <__aeabi_ddiv>
 80105bc:	4602      	mov	r2, r0
 80105be:	460b      	mov	r3, r1
 80105c0:	4620      	mov	r0, r4
 80105c2:	4629      	mov	r1, r5
 80105c4:	f7ef ff88 	bl	80004d8 <__aeabi_dmul>
 80105c8:	4603      	mov	r3, r0
 80105ca:	460c      	mov	r4, r1
 80105cc:	4625      	mov	r5, r4
 80105ce:	461c      	mov	r4, r3
 80105d0:	6978      	ldr	r0, [r7, #20]
 80105d2:	f7ef ff17 	bl	8000404 <__aeabi_i2d>
 80105d6:	4622      	mov	r2, r4
 80105d8:	462b      	mov	r3, r5
 80105da:	f7ef fdc5 	bl	8000168 <__aeabi_dsub>
 80105de:	4603      	mov	r3, r0
 80105e0:	460c      	mov	r4, r1
 80105e2:	4618      	mov	r0, r3
 80105e4:	4621      	mov	r1, r4
 80105e6:	f7f0 fa27 	bl	8000a38 <__aeabi_d2iz>
 80105ea:	4603      	mov	r3, r0
 80105ec:	617b      	str	r3, [r7, #20]
        	break;
 80105ee:	e1b6      	b.n	801095e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
        case FFB_EFFECT_SAWTOOTHDOWN:
        	result_torque -= SawtoothDownForceCalculator(effect) * (((float)conf->sawToothDownGain * 50.0) / 255.0);
 80105f0:	68f9      	ldr	r1, [r7, #12]
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f000 fb56 	bl	8010ca4 <_ZN6HidFFB27SawtoothDownForceCalculatorEP10FFB_Effect>
 80105f8:	4603      	mov	r3, r0
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7ef ff02 	bl	8000404 <__aeabi_i2d>
 8010600:	4604      	mov	r4, r0
 8010602:	460d      	mov	r5, r1
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6a1b      	ldr	r3, [r3, #32]
 8010608:	7c9b      	ldrb	r3, [r3, #18]
 801060a:	4618      	mov	r0, r3
 801060c:	f7f0 fb42 	bl	8000c94 <__aeabi_ui2f>
 8010610:	4603      	mov	r3, r0
 8010612:	4618      	mov	r0, r3
 8010614:	f7ef ff08 	bl	8000428 <__aeabi_f2d>
 8010618:	f04f 0200 	mov.w	r2, #0
 801061c:	4baa      	ldr	r3, [pc, #680]	; (80108c8 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 801061e:	f7ef ff5b 	bl	80004d8 <__aeabi_dmul>
 8010622:	4602      	mov	r2, r0
 8010624:	460b      	mov	r3, r1
 8010626:	4610      	mov	r0, r2
 8010628:	4619      	mov	r1, r3
 801062a:	a3a5      	add	r3, pc, #660	; (adr r3, 80108c0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 801062c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010630:	f7f0 f87c 	bl	800072c <__aeabi_ddiv>
 8010634:	4602      	mov	r2, r0
 8010636:	460b      	mov	r3, r1
 8010638:	4620      	mov	r0, r4
 801063a:	4629      	mov	r1, r5
 801063c:	f7ef ff4c 	bl	80004d8 <__aeabi_dmul>
 8010640:	4603      	mov	r3, r0
 8010642:	460c      	mov	r4, r1
 8010644:	4625      	mov	r5, r4
 8010646:	461c      	mov	r4, r3
 8010648:	6978      	ldr	r0, [r7, #20]
 801064a:	f7ef fedb 	bl	8000404 <__aeabi_i2d>
 801064e:	4622      	mov	r2, r4
 8010650:	462b      	mov	r3, r5
 8010652:	f7ef fd89 	bl	8000168 <__aeabi_dsub>
 8010656:	4603      	mov	r3, r0
 8010658:	460c      	mov	r4, r1
 801065a:	4618      	mov	r0, r3
 801065c:	4621      	mov	r1, r4
 801065e:	f7f0 f9eb 	bl	8000a38 <__aeabi_d2iz>
 8010662:	4603      	mov	r3, r0
 8010664:	617b      	str	r3, [r7, #20]
        	break;
 8010666:	e17a      	b.n	801095e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
        case FFB_EFFECT_SAWTOOTHUP:
        	result_torque -= SawtoothUpForceCalculator(effect) * (((float)conf->sawToothUpGain * 50.0) / 255.0);
 8010668:	68f9      	ldr	r1, [r7, #12]
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f000 fbb6 	bl	8010ddc <_ZN6HidFFB25SawtoothUpForceCalculatorEP10FFB_Effect>
 8010670:	4603      	mov	r3, r0
 8010672:	4618      	mov	r0, r3
 8010674:	f7ef fec6 	bl	8000404 <__aeabi_i2d>
 8010678:	4604      	mov	r4, r0
 801067a:	460d      	mov	r5, r1
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6a1b      	ldr	r3, [r3, #32]
 8010680:	7cdb      	ldrb	r3, [r3, #19]
 8010682:	4618      	mov	r0, r3
 8010684:	f7f0 fb06 	bl	8000c94 <__aeabi_ui2f>
 8010688:	4603      	mov	r3, r0
 801068a:	4618      	mov	r0, r3
 801068c:	f7ef fecc 	bl	8000428 <__aeabi_f2d>
 8010690:	f04f 0200 	mov.w	r2, #0
 8010694:	4b8c      	ldr	r3, [pc, #560]	; (80108c8 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 8010696:	f7ef ff1f 	bl	80004d8 <__aeabi_dmul>
 801069a:	4602      	mov	r2, r0
 801069c:	460b      	mov	r3, r1
 801069e:	4610      	mov	r0, r2
 80106a0:	4619      	mov	r1, r3
 80106a2:	a387      	add	r3, pc, #540	; (adr r3, 80108c0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 80106a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a8:	f7f0 f840 	bl	800072c <__aeabi_ddiv>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	4620      	mov	r0, r4
 80106b2:	4629      	mov	r1, r5
 80106b4:	f7ef ff10 	bl	80004d8 <__aeabi_dmul>
 80106b8:	4603      	mov	r3, r0
 80106ba:	460c      	mov	r4, r1
 80106bc:	4625      	mov	r5, r4
 80106be:	461c      	mov	r4, r3
 80106c0:	6978      	ldr	r0, [r7, #20]
 80106c2:	f7ef fe9f 	bl	8000404 <__aeabi_i2d>
 80106c6:	4622      	mov	r2, r4
 80106c8:	462b      	mov	r3, r5
 80106ca:	f7ef fd4d 	bl	8000168 <__aeabi_dsub>
 80106ce:	4603      	mov	r3, r0
 80106d0:	460c      	mov	r4, r1
 80106d2:	4618      	mov	r0, r3
 80106d4:	4621      	mov	r1, r4
 80106d6:	f7f0 f9af 	bl	8000a38 <__aeabi_d2iz>
 80106da:	4603      	mov	r3, r0
 80106dc:	617b      	str	r3, [r7, #20]
          	break;
 80106de:	e13e      	b.n	801095e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		case FFB_EFFECT_DAMPER:
			result_torque -= ConditionForceCalculator(effect, NormalizeRange(encoder->currentVelocity, encoder->maxVelocity)) * (((float)conf->damperGain * 50.0) / 255.0);
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106e8:	461a      	mov	r2, r3
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f000 fd52 	bl	8011194 <_ZN6HidFFB14NormalizeRangeEll>
 80106f0:	4603      	mov	r3, r0
 80106f2:	461a      	mov	r2, r3
 80106f4:	68f9      	ldr	r1, [r7, #12]
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f000 fbf6 	bl	8010ee8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>
 80106fc:	4603      	mov	r3, r0
 80106fe:	4618      	mov	r0, r3
 8010700:	f7ef fe80 	bl	8000404 <__aeabi_i2d>
 8010704:	4604      	mov	r4, r0
 8010706:	460d      	mov	r5, r1
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6a1b      	ldr	r3, [r3, #32]
 801070c:	7d5b      	ldrb	r3, [r3, #21]
 801070e:	4618      	mov	r0, r3
 8010710:	f7f0 fac0 	bl	8000c94 <__aeabi_ui2f>
 8010714:	4603      	mov	r3, r0
 8010716:	4618      	mov	r0, r3
 8010718:	f7ef fe86 	bl	8000428 <__aeabi_f2d>
 801071c:	f04f 0200 	mov.w	r2, #0
 8010720:	4b69      	ldr	r3, [pc, #420]	; (80108c8 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 8010722:	f7ef fed9 	bl	80004d8 <__aeabi_dmul>
 8010726:	4602      	mov	r2, r0
 8010728:	460b      	mov	r3, r1
 801072a:	4610      	mov	r0, r2
 801072c:	4619      	mov	r1, r3
 801072e:	a364      	add	r3, pc, #400	; (adr r3, 80108c0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 8010730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010734:	f7ef fffa 	bl	800072c <__aeabi_ddiv>
 8010738:	4602      	mov	r2, r0
 801073a:	460b      	mov	r3, r1
 801073c:	4620      	mov	r0, r4
 801073e:	4629      	mov	r1, r5
 8010740:	f7ef feca 	bl	80004d8 <__aeabi_dmul>
 8010744:	4603      	mov	r3, r0
 8010746:	460c      	mov	r4, r1
 8010748:	4625      	mov	r5, r4
 801074a:	461c      	mov	r4, r3
 801074c:	6978      	ldr	r0, [r7, #20]
 801074e:	f7ef fe59 	bl	8000404 <__aeabi_i2d>
 8010752:	4622      	mov	r2, r4
 8010754:	462b      	mov	r3, r5
 8010756:	f7ef fd07 	bl	8000168 <__aeabi_dsub>
 801075a:	4603      	mov	r3, r0
 801075c:	460c      	mov	r4, r1
 801075e:	4618      	mov	r0, r3
 8010760:	4621      	mov	r1, r4
 8010762:	f7f0 f969 	bl	8000a38 <__aeabi_d2iz>
 8010766:	4603      	mov	r3, r0
 8010768:	617b      	str	r3, [r7, #20]
		    break;
 801076a:	e0f8      	b.n	801095e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		case FFB_EFFECT_INERTIA:
	        if ( encoder->currentAcceleration < 0 and encoder->positionChange < 0) {
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010770:	2b00      	cmp	r3, #0
 8010772:	da4d      	bge.n	8010810 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x5d0>
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010778:	2b00      	cmp	r3, #0
 801077a:	da49      	bge.n	8010810 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x5d0>
	        	result_torque -= ConditionForceCalculator(effect, abs(NormalizeRange(encoder->currentAcceleration, encoder->maxAcceleration))) * (((float)conf->inertiaGain * 50.0) / 255.0);
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010784:	461a      	mov	r2, r3
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 fd04 	bl	8011194 <_ZN6HidFFB14NormalizeRangeEll>
 801078c:	4603      	mov	r3, r0
 801078e:	4618      	mov	r0, r3
 8010790:	f7fd ffb8 	bl	800e704 <_ZSt3absf>
 8010794:	4603      	mov	r3, r0
 8010796:	461a      	mov	r2, r3
 8010798:	68f9      	ldr	r1, [r7, #12]
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 fba4 	bl	8010ee8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>
 80107a0:	4603      	mov	r3, r0
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7ef fe2e 	bl	8000404 <__aeabi_i2d>
 80107a8:	4604      	mov	r4, r0
 80107aa:	460d      	mov	r5, r1
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6a1b      	ldr	r3, [r3, #32]
 80107b0:	7d9b      	ldrb	r3, [r3, #22]
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7f0 fa6e 	bl	8000c94 <__aeabi_ui2f>
 80107b8:	4603      	mov	r3, r0
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7ef fe34 	bl	8000428 <__aeabi_f2d>
 80107c0:	f04f 0200 	mov.w	r2, #0
 80107c4:	4b40      	ldr	r3, [pc, #256]	; (80108c8 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 80107c6:	f7ef fe87 	bl	80004d8 <__aeabi_dmul>
 80107ca:	4602      	mov	r2, r0
 80107cc:	460b      	mov	r3, r1
 80107ce:	4610      	mov	r0, r2
 80107d0:	4619      	mov	r1, r3
 80107d2:	a33b      	add	r3, pc, #236	; (adr r3, 80108c0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 80107d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d8:	f7ef ffa8 	bl	800072c <__aeabi_ddiv>
 80107dc:	4602      	mov	r2, r0
 80107de:	460b      	mov	r3, r1
 80107e0:	4620      	mov	r0, r4
 80107e2:	4629      	mov	r1, r5
 80107e4:	f7ef fe78 	bl	80004d8 <__aeabi_dmul>
 80107e8:	4603      	mov	r3, r0
 80107ea:	460c      	mov	r4, r1
 80107ec:	4625      	mov	r5, r4
 80107ee:	461c      	mov	r4, r3
 80107f0:	6978      	ldr	r0, [r7, #20]
 80107f2:	f7ef fe07 	bl	8000404 <__aeabi_i2d>
 80107f6:	4622      	mov	r2, r4
 80107f8:	462b      	mov	r3, r5
 80107fa:	f7ef fcb5 	bl	8000168 <__aeabi_dsub>
 80107fe:	4603      	mov	r3, r0
 8010800:	460c      	mov	r4, r1
 8010802:	4618      	mov	r0, r3
 8010804:	4621      	mov	r1, r4
 8010806:	f7f0 f917 	bl	8000a38 <__aeabi_d2iz>
 801080a:	4603      	mov	r3, r0
 801080c:	617b      	str	r3, [r7, #20]
	        } else if ( encoder->currentAcceleration < 0 and encoder->positionChange > 0) {
	        	result_torque += ConditionForceCalculator(effect, abs(NormalizeRange(encoder->currentAcceleration, encoder->maxAcceleration))) * (((float)conf->inertiaGain * 50.0) / 255.0);
	        }
			break;
 801080e:	e0a5      	b.n	801095c <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71c>
	        } else if ( encoder->currentAcceleration < 0 and encoder->positionChange > 0) {
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010814:	2b00      	cmp	r3, #0
 8010816:	f280 80a1 	bge.w	801095c <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71c>
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801081e:	2b00      	cmp	r3, #0
 8010820:	f340 809c 	ble.w	801095c <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71c>
	        	result_torque += ConditionForceCalculator(effect, abs(NormalizeRange(encoder->currentAcceleration, encoder->maxAcceleration))) * (((float)conf->inertiaGain * 50.0) / 255.0);
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801082c:	461a      	mov	r2, r3
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 fcb0 	bl	8011194 <_ZN6HidFFB14NormalizeRangeEll>
 8010834:	4603      	mov	r3, r0
 8010836:	4618      	mov	r0, r3
 8010838:	f7fd ff64 	bl	800e704 <_ZSt3absf>
 801083c:	4603      	mov	r3, r0
 801083e:	461a      	mov	r2, r3
 8010840:	68f9      	ldr	r1, [r7, #12]
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f000 fb50 	bl	8010ee8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>
 8010848:	4603      	mov	r3, r0
 801084a:	4618      	mov	r0, r3
 801084c:	f7ef fdda 	bl	8000404 <__aeabi_i2d>
 8010850:	4604      	mov	r4, r0
 8010852:	460d      	mov	r5, r1
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6a1b      	ldr	r3, [r3, #32]
 8010858:	7d9b      	ldrb	r3, [r3, #22]
 801085a:	4618      	mov	r0, r3
 801085c:	f7f0 fa1a 	bl	8000c94 <__aeabi_ui2f>
 8010860:	4603      	mov	r3, r0
 8010862:	4618      	mov	r0, r3
 8010864:	f7ef fde0 	bl	8000428 <__aeabi_f2d>
 8010868:	f04f 0200 	mov.w	r2, #0
 801086c:	4b16      	ldr	r3, [pc, #88]	; (80108c8 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 801086e:	f7ef fe33 	bl	80004d8 <__aeabi_dmul>
 8010872:	4602      	mov	r2, r0
 8010874:	460b      	mov	r3, r1
 8010876:	4610      	mov	r0, r2
 8010878:	4619      	mov	r1, r3
 801087a:	a311      	add	r3, pc, #68	; (adr r3, 80108c0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 801087c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010880:	f7ef ff54 	bl	800072c <__aeabi_ddiv>
 8010884:	4602      	mov	r2, r0
 8010886:	460b      	mov	r3, r1
 8010888:	4620      	mov	r0, r4
 801088a:	4629      	mov	r1, r5
 801088c:	f7ef fe24 	bl	80004d8 <__aeabi_dmul>
 8010890:	4603      	mov	r3, r0
 8010892:	460c      	mov	r4, r1
 8010894:	4625      	mov	r5, r4
 8010896:	461c      	mov	r4, r3
 8010898:	6978      	ldr	r0, [r7, #20]
 801089a:	f7ef fdb3 	bl	8000404 <__aeabi_i2d>
 801089e:	4602      	mov	r2, r0
 80108a0:	460b      	mov	r3, r1
 80108a2:	4620      	mov	r0, r4
 80108a4:	4629      	mov	r1, r5
 80108a6:	f7ef fc61 	bl	800016c <__adddf3>
 80108aa:	4603      	mov	r3, r0
 80108ac:	460c      	mov	r4, r1
 80108ae:	4618      	mov	r0, r3
 80108b0:	4621      	mov	r1, r4
 80108b2:	f7f0 f8c1 	bl	8000a38 <__aeabi_d2iz>
 80108b6:	4603      	mov	r3, r0
 80108b8:	617b      	str	r3, [r7, #20]
			break;
 80108ba:	e04f      	b.n	801095c <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71c>
 80108bc:	f3af 8000 	nop.w
 80108c0:	00000000 	.word	0x00000000
 80108c4:	406fe000 	.word	0x406fe000
 80108c8:	40490000 	.word	0x40490000
		case FFB_EFFECT_FRICTION:
			result_torque -= ConditionForceCalculator(effect, NormalizeRange(encoder->positionChange, encoder->maxPositionChange)) * (((float)conf->frictionGain * 50.0) / 255.0);
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108d4:	461a      	mov	r2, r3
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f000 fc5c 	bl	8011194 <_ZN6HidFFB14NormalizeRangeEll>
 80108dc:	4603      	mov	r3, r0
 80108de:	461a      	mov	r2, r3
 80108e0:	68f9      	ldr	r1, [r7, #12]
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 fb00 	bl	8010ee8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>
 80108e8:	4603      	mov	r3, r0
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7ef fd8a 	bl	8000404 <__aeabi_i2d>
 80108f0:	4604      	mov	r4, r0
 80108f2:	460d      	mov	r5, r1
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6a1b      	ldr	r3, [r3, #32]
 80108f8:	7ddb      	ldrb	r3, [r3, #23]
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7f0 f9ca 	bl	8000c94 <__aeabi_ui2f>
 8010900:	4603      	mov	r3, r0
 8010902:	4618      	mov	r0, r3
 8010904:	f7ef fd90 	bl	8000428 <__aeabi_f2d>
 8010908:	f04f 0200 	mov.w	r2, #0
 801090c:	4b36      	ldr	r3, [pc, #216]	; (80109e8 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x7a8>)
 801090e:	f7ef fde3 	bl	80004d8 <__aeabi_dmul>
 8010912:	4602      	mov	r2, r0
 8010914:	460b      	mov	r3, r1
 8010916:	4610      	mov	r0, r2
 8010918:	4619      	mov	r1, r3
 801091a:	a331      	add	r3, pc, #196	; (adr r3, 80109e0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x7a0>)
 801091c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010920:	f7ef ff04 	bl	800072c <__aeabi_ddiv>
 8010924:	4602      	mov	r2, r0
 8010926:	460b      	mov	r3, r1
 8010928:	4620      	mov	r0, r4
 801092a:	4629      	mov	r1, r5
 801092c:	f7ef fdd4 	bl	80004d8 <__aeabi_dmul>
 8010930:	4603      	mov	r3, r0
 8010932:	460c      	mov	r4, r1
 8010934:	4625      	mov	r5, r4
 8010936:	461c      	mov	r4, r3
 8010938:	6978      	ldr	r0, [r7, #20]
 801093a:	f7ef fd63 	bl	8000404 <__aeabi_i2d>
 801093e:	4622      	mov	r2, r4
 8010940:	462b      	mov	r3, r5
 8010942:	f7ef fc11 	bl	8000168 <__aeabi_dsub>
 8010946:	4603      	mov	r3, r0
 8010948:	460c      	mov	r4, r1
 801094a:	4618      	mov	r0, r3
 801094c:	4621      	mov	r1, r4
 801094e:	f7f0 f873 	bl	8000a38 <__aeabi_d2iz>
 8010952:	4603      	mov	r3, r0
 8010954:	617b      	str	r3, [r7, #20]
			break;
 8010956:	e002      	b.n	801095e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		default:
			break;
 8010958:	bf00      	nop
 801095a:	e000      	b.n	801095e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
			break;
 801095c:	bf00      	nop
		}
		effect->elapsedTime = (uint64_t)HAL_GetTick() - effect->startTime;
 801095e:	f7f1 fbcb 	bl	80020f8 <HAL_GetTick>
 8010962:	4603      	mov	r3, r0
 8010964:	b29a      	uxth	r2, r3
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801096c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8010970:	b29b      	uxth	r3, r3
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	b29a      	uxth	r2, r3
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	85da      	strh	r2, [r3, #46]	; 0x2e
		if(effect->counter++ > effect->duration){
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	b291      	uxth	r1, r2
 8010982:	68fa      	ldr	r2, [r7, #12]
 8010984:	8491      	strh	r1, [r2, #36]	; 0x24
 8010986:	68fa      	ldr	r2, [r7, #12]
 8010988:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801098a:	4293      	cmp	r3, r2
 801098c:	bf8c      	ite	hi
 801098e:	2301      	movhi	r3, #1
 8010990:	2300      	movls	r3, #0
 8010992:	b2db      	uxtb	r3, r3
 8010994:	2b00      	cmp	r3, #0
 8010996:	d002      	beq.n	801099e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x75e>
			effect->state = 0;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2200      	movs	r2, #0
 801099c:	701a      	strb	r2, [r3, #0]
		}
		result_torque =  clip(result_torque, -0x7fff, 0x7fff);
 801099e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80109a2:	4912      	ldr	r1, [pc, #72]	; (80109ec <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x7ac>)
 80109a4:	6978      	ldr	r0, [r7, #20]
 80109a6:	f7fc fa07 	bl	800cdb8 <_Z4clipIliET_S0_T0_S1_>
 80109aa:	6178      	str	r0, [r7, #20]
 80109ac:	e000      	b.n	80109b0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x770>
			continue;
 80109ae:	bf00      	nop
	for(uint8_t i = 0;i<MAX_EFFECTS;i++){
 80109b0:	7cfb      	ldrb	r3, [r7, #19]
 80109b2:	3301      	adds	r3, #1
 80109b4:	74fb      	strb	r3, [r7, #19]
 80109b6:	e464      	b.n	8010282 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x42>
	}
	result_torque = (result_torque * (gain+1)) >> 8; // Apply global gain
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	7d1b      	ldrb	r3, [r3, #20]
 80109bc:	3301      	adds	r3, #1
 80109be:	697a      	ldr	r2, [r7, #20]
 80109c0:	fb02 f303 	mul.w	r3, r2, r3
 80109c4:	121b      	asrs	r3, r3, #8
 80109c6:	617b      	str	r3, [r7, #20]
	return clip(result_torque, -0x7fff, 0x7fff);
 80109c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80109cc:	4907      	ldr	r1, [pc, #28]	; (80109ec <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x7ac>)
 80109ce:	6978      	ldr	r0, [r7, #20]
 80109d0:	f7fc f9f2 	bl	800cdb8 <_Z4clipIliET_S0_T0_S1_>
 80109d4:	4603      	mov	r3, r0
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3718      	adds	r7, #24
 80109da:	46bd      	mov	sp, r7
 80109dc:	bdb0      	pop	{r4, r5, r7, pc}
 80109de:	bf00      	nop
 80109e0:	00000000 	.word	0x00000000
 80109e4:	406fe000 	.word	0x406fe000
 80109e8:	40490000 	.word	0x40490000
 80109ec:	ffff8001 	.word	0xffff8001

080109f0 <_ZN6HidFFB21SquareForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::SquareForceCalculator(FFB_Effect *effect)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b08e      	sub	sp, #56	; 0x38
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	6039      	str	r1, [r7, #0]
	 int32_t offset = effect->offset * 2;
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8010a00:	005b      	lsls	r3, r3, #1
 8010a02:	633b      	str	r3, [r7, #48]	; 0x30
	  uint32_t magnitude = effect->magnitude;
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint32_t elapsedTime = effect->elapsedTime;
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010a10:	62bb      	str	r3, [r7, #40]	; 0x28
	  uint32_t phase = effect->phase;
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8010a18:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t period = effect->period;
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010a1e:	623b      	str	r3, [r7, #32]

	  int32_t maxMagnitude = offset + magnitude;
 8010a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a24:	4413      	add	r3, r2
 8010a26:	61fb      	str	r3, [r7, #28]
	  int32_t minMagnitude = offset - magnitude;
 8010a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2c:	1ad3      	subs	r3, r2, r3
 8010a2e:	61bb      	str	r3, [r7, #24]
	  uint32_t phasetime = (phase * period) / 255;
 8010a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a32:	6a3a      	ldr	r2, [r7, #32]
 8010a34:	fb02 f303 	mul.w	r3, r2, r3
 8010a38:	4a12      	ldr	r2, [pc, #72]	; (8010a84 <_ZN6HidFFB21SquareForceCalculatorEP10FFB_Effect+0x94>)
 8010a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a3e:	09db      	lsrs	r3, r3, #7
 8010a40:	617b      	str	r3, [r7, #20]
	  uint32_t timeTemp = elapsedTime + phasetime;
 8010a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	4413      	add	r3, r2
 8010a48:	613b      	str	r3, [r7, #16]
	  uint32_t reminder = timeTemp % period;
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	6a3a      	ldr	r2, [r7, #32]
 8010a4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010a52:	6a39      	ldr	r1, [r7, #32]
 8010a54:	fb01 f202 	mul.w	r2, r1, r2
 8010a58:	1a9b      	subs	r3, r3, r2
 8010a5a:	60fb      	str	r3, [r7, #12]
	  int32_t tempforce;
	  if (reminder > (period / 2)) tempforce = minMagnitude;
 8010a5c:	6a3b      	ldr	r3, [r7, #32]
 8010a5e:	085b      	lsrs	r3, r3, #1
 8010a60:	68fa      	ldr	r2, [r7, #12]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d902      	bls.n	8010a6c <_ZN6HidFFB21SquareForceCalculatorEP10FFB_Effect+0x7c>
 8010a66:	69bb      	ldr	r3, [r7, #24]
 8010a68:	637b      	str	r3, [r7, #52]	; 0x34
 8010a6a:	e001      	b.n	8010a70 <_ZN6HidFFB21SquareForceCalculatorEP10FFB_Effect+0x80>
	  else tempforce = maxMagnitude;
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	637b      	str	r3, [r7, #52]	; 0x34
	  return ApplyEnvelope(effect, tempforce);
 8010a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a72:	6839      	ldr	r1, [r7, #0]
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f000 fb0d 	bl	8011094 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>
 8010a7a:	4603      	mov	r3, r0
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3738      	adds	r7, #56	; 0x38
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	80808081 	.word	0x80808081

08010a88 <_ZN6HidFFB18SinForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::SinForceCalculator(FFB_Effect *effect)
{
 8010a88:	b590      	push	{r4, r7, lr}
 8010a8a:	b08b      	sub	sp, #44	; 0x2c
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
	float offset = effect->offset * 2;
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8010a98:	005b      	lsls	r3, r3, #1
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7f0 f8fe 	bl	8000c9c <__aeabi_i2f>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	627b      	str	r3, [r7, #36]	; 0x24
	float magnitude = effect->magnitude;
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7f0 f8f6 	bl	8000c9c <__aeabi_i2f>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	623b      	str	r3, [r7, #32]
	float phase = effect->phase;
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7f0 f8ee 	bl	8000c9c <__aeabi_i2f>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	61fb      	str	r3, [r7, #28]
	float timeTemp = effect->elapsedTime;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7f0 f8e3 	bl	8000c94 <__aeabi_ui2f>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	61bb      	str	r3, [r7, #24]
	float period = effect->period;
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7f0 f8dc 	bl	8000c94 <__aeabi_ui2f>
 8010adc:	4603      	mov	r3, r0
 8010ade:	617b      	str	r3, [r7, #20]
	float angle = ((timeTemp / period) * 2 * (float)3.14159265359 + (float)(phase / 36000));
 8010ae0:	6979      	ldr	r1, [r7, #20]
 8010ae2:	69b8      	ldr	r0, [r7, #24]
 8010ae4:	f7f0 f9e2 	bl	8000eac <__aeabi_fdiv>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	4619      	mov	r1, r3
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7f0 f821 	bl	8000b34 <__addsf3>
 8010af2:	4603      	mov	r3, r0
 8010af4:	4917      	ldr	r1, [pc, #92]	; (8010b54 <_ZN6HidFFB18SinForceCalculatorEP10FFB_Effect+0xcc>)
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7f0 f924 	bl	8000d44 <__aeabi_fmul>
 8010afc:	4603      	mov	r3, r0
 8010afe:	461c      	mov	r4, r3
 8010b00:	4915      	ldr	r1, [pc, #84]	; (8010b58 <_ZN6HidFFB18SinForceCalculatorEP10FFB_Effect+0xd0>)
 8010b02:	69f8      	ldr	r0, [r7, #28]
 8010b04:	f7f0 f9d2 	bl	8000eac <__aeabi_fdiv>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f7f0 f811 	bl	8000b34 <__addsf3>
 8010b12:	4603      	mov	r3, r0
 8010b14:	613b      	str	r3, [r7, #16]
	float sine = sin(angle);
 8010b16:	6938      	ldr	r0, [r7, #16]
 8010b18:	f7fe fe5e 	bl	800f7d8 <_ZSt3sinf>
 8010b1c:	60f8      	str	r0, [r7, #12]
	float tempforce = sine * magnitude;
 8010b1e:	6a39      	ldr	r1, [r7, #32]
 8010b20:	68f8      	ldr	r0, [r7, #12]
 8010b22:	f7f0 f90f 	bl	8000d44 <__aeabi_fmul>
 8010b26:	4603      	mov	r3, r0
 8010b28:	60bb      	str	r3, [r7, #8]
	tempforce += offset;
 8010b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b2c:	68b8      	ldr	r0, [r7, #8]
 8010b2e:	f7f0 f801 	bl	8000b34 <__addsf3>
 8010b32:	4603      	mov	r3, r0
 8010b34:	60bb      	str	r3, [r7, #8]
	return ApplyEnvelope(effect, tempforce);
 8010b36:	68b8      	ldr	r0, [r7, #8]
 8010b38:	f7f0 faca 	bl	80010d0 <__aeabi_f2iz>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	461a      	mov	r2, r3
 8010b40:	6839      	ldr	r1, [r7, #0]
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 faa6 	bl	8011094 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>
 8010b48:	4603      	mov	r3, r0
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	372c      	adds	r7, #44	; 0x2c
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd90      	pop	{r4, r7, pc}
 8010b52:	bf00      	nop
 8010b54:	40490fdb 	.word	0x40490fdb
 8010b58:	470ca000 	.word	0x470ca000

08010b5c <_ZN6HidFFB23TriangleForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::TriangleForceCalculator(FFB_Effect *effect)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b090      	sub	sp, #64	; 0x40
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	6039      	str	r1, [r7, #0]
	  float offset = effect->offset * 2;
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8010b6c:	005b      	lsls	r3, r3, #1
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7f0 f894 	bl	8000c9c <__aeabi_i2f>
 8010b74:	4603      	mov	r3, r0
 8010b76:	63bb      	str	r3, [r7, #56]	; 0x38
	  float magnitude = effect->magnitude;
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7f0 f88c 	bl	8000c9c <__aeabi_i2f>
 8010b84:	4603      	mov	r3, r0
 8010b86:	637b      	str	r3, [r7, #52]	; 0x34
	  float elapsedTime = effect->elapsedTime;
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7f0 f881 	bl	8000c94 <__aeabi_ui2f>
 8010b92:	4603      	mov	r3, r0
 8010b94:	633b      	str	r3, [r7, #48]	; 0x30
	  uint32_t phase = effect->phase;
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8010b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint32_t period = effect->period;
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	  float periodF = effect->period;
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7f0 f873 	bl	8000c94 <__aeabi_ui2f>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	627b      	str	r3, [r7, #36]	; 0x24

	  float maxMagnitude = offset + magnitude;
 8010bb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010bb6:	f7ef ffbd 	bl	8000b34 <__addsf3>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	623b      	str	r3, [r7, #32]
	  float minMagnitude = offset - magnitude;
 8010bbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010bc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010bc2:	f7ef ffb5 	bl	8000b30 <__aeabi_fsub>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	61fb      	str	r3, [r7, #28]
	  uint32_t phasetime = (phase * period) / 255;
 8010bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bce:	fb02 f303 	mul.w	r3, r2, r3
 8010bd2:	4a33      	ldr	r2, [pc, #204]	; (8010ca0 <_ZN6HidFFB23TriangleForceCalculatorEP10FFB_Effect+0x144>)
 8010bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8010bd8:	09db      	lsrs	r3, r3, #7
 8010bda:	61bb      	str	r3, [r7, #24]
	  uint32_t timeTemp = elapsedTime + phasetime;
 8010bdc:	69b8      	ldr	r0, [r7, #24]
 8010bde:	f7f0 f859 	bl	8000c94 <__aeabi_ui2f>
 8010be2:	4603      	mov	r3, r0
 8010be4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7ef ffa4 	bl	8000b34 <__addsf3>
 8010bec:	4603      	mov	r3, r0
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7f0 fa94 	bl	800111c <__aeabi_f2uiz>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	617b      	str	r3, [r7, #20]
	  float reminder = timeTemp % period;
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bfc:	fbb3 f2f2 	udiv	r2, r3, r2
 8010c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c02:	fb01 f202 	mul.w	r2, r1, r2
 8010c06:	1a9b      	subs	r3, r3, r2
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7f0 f843 	bl	8000c94 <__aeabi_ui2f>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	613b      	str	r3, [r7, #16]
	  float slope = ((maxMagnitude - minMagnitude) * 2) / periodF;
 8010c12:	69f9      	ldr	r1, [r7, #28]
 8010c14:	6a38      	ldr	r0, [r7, #32]
 8010c16:	f7ef ff8b 	bl	8000b30 <__aeabi_fsub>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7ef ff88 	bl	8000b34 <__addsf3>
 8010c24:	4603      	mov	r3, r0
 8010c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7f0 f93f 	bl	8000eac <__aeabi_fdiv>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	60fb      	str	r3, [r7, #12]
	  float tempforce = 0;
 8010c32:	f04f 0300 	mov.w	r3, #0
 8010c36:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (reminder > (periodF / 2)) tempforce = slope * (periodF - reminder);
 8010c38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c3e:	f7f0 f935 	bl	8000eac <__aeabi_fdiv>
 8010c42:	4603      	mov	r3, r0
 8010c44:	4619      	mov	r1, r3
 8010c46:	6938      	ldr	r0, [r7, #16]
 8010c48:	f7f0 fa38 	bl	80010bc <__aeabi_fcmpgt>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d00b      	beq.n	8010c6a <_ZN6HidFFB23TriangleForceCalculatorEP10FFB_Effect+0x10e>
 8010c52:	6939      	ldr	r1, [r7, #16]
 8010c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c56:	f7ef ff6b 	bl	8000b30 <__aeabi_fsub>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	68f8      	ldr	r0, [r7, #12]
 8010c60:	f7f0 f870 	bl	8000d44 <__aeabi_fmul>
 8010c64:	4603      	mov	r3, r0
 8010c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c68:	e005      	b.n	8010c76 <_ZN6HidFFB23TriangleForceCalculatorEP10FFB_Effect+0x11a>
	  else tempforce = slope * reminder;
 8010c6a:	6939      	ldr	r1, [r7, #16]
 8010c6c:	68f8      	ldr	r0, [r7, #12]
 8010c6e:	f7f0 f869 	bl	8000d44 <__aeabi_fmul>
 8010c72:	4603      	mov	r3, r0
 8010c74:	63fb      	str	r3, [r7, #60]	; 0x3c
	  tempforce += minMagnitude;
 8010c76:	69f9      	ldr	r1, [r7, #28]
 8010c78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c7a:	f7ef ff5b 	bl	8000b34 <__addsf3>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	63fb      	str	r3, [r7, #60]	; 0x3c
	  return ApplyEnvelope(effect, tempforce);
 8010c82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c84:	f7f0 fa24 	bl	80010d0 <__aeabi_f2iz>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	6839      	ldr	r1, [r7, #0]
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 fa00 	bl	8011094 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>
 8010c94:	4603      	mov	r3, r0
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3740      	adds	r7, #64	; 0x40
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	80808081 	.word	0x80808081

08010ca4 <_ZN6HidFFB27SawtoothDownForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::SawtoothDownForceCalculator(FFB_Effect *effect)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b090      	sub	sp, #64	; 0x40
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	6039      	str	r1, [r7, #0]
	  float offset = effect->offset * 2;
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8010cb4:	005b      	lsls	r3, r3, #1
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7ef fff0 	bl	8000c9c <__aeabi_i2f>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float magnitude = effect->magnitude;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7ef ffe8 	bl	8000c9c <__aeabi_i2f>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	63bb      	str	r3, [r7, #56]	; 0x38
	  float elapsedTime = effect->elapsedTime;
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7ef ffdd 	bl	8000c94 <__aeabi_ui2f>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	637b      	str	r3, [r7, #52]	; 0x34
	  float phase = effect->phase;
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7ef ffd9 	bl	8000c9c <__aeabi_i2f>
 8010cea:	4603      	mov	r3, r0
 8010cec:	633b      	str	r3, [r7, #48]	; 0x30
	  uint32_t period = effect->period;
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float periodF = effect->period;
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7ef ffcb 	bl	8000c94 <__aeabi_ui2f>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	62bb      	str	r3, [r7, #40]	; 0x28

	  float maxMagnitude = offset + magnitude;
 8010d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d06:	f7ef ff15 	bl	8000b34 <__addsf3>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	627b      	str	r3, [r7, #36]	; 0x24
	  float minMagnitude = offset - magnitude;
 8010d0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d12:	f7ef ff0d 	bl	8000b30 <__aeabi_fsub>
 8010d16:	4603      	mov	r3, r0
 8010d18:	623b      	str	r3, [r7, #32]
	  int32_t phasetime = (phase * period) / 255;
 8010d1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010d1c:	f7ef ffba 	bl	8000c94 <__aeabi_ui2f>
 8010d20:	4603      	mov	r3, r0
 8010d22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7f0 f80d 	bl	8000d44 <__aeabi_fmul>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	492a      	ldr	r1, [pc, #168]	; (8010dd8 <_ZN6HidFFB27SawtoothDownForceCalculatorEP10FFB_Effect+0x134>)
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7f0 f8bc 	bl	8000eac <__aeabi_fdiv>
 8010d34:	4603      	mov	r3, r0
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7f0 f9ca 	bl	80010d0 <__aeabi_f2iz>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	61fb      	str	r3, [r7, #28]
	  uint32_t timeTemp = elapsedTime + phasetime;
 8010d40:	69f8      	ldr	r0, [r7, #28]
 8010d42:	f7ef ffab 	bl	8000c9c <__aeabi_i2f>
 8010d46:	4603      	mov	r3, r0
 8010d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7ef fef2 	bl	8000b34 <__addsf3>
 8010d50:	4603      	mov	r3, r0
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7f0 f9e2 	bl	800111c <__aeabi_f2uiz>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	61bb      	str	r3, [r7, #24]
	  float reminder = timeTemp % period;
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d60:	fbb3 f2f2 	udiv	r2, r3, r2
 8010d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d66:	fb01 f202 	mul.w	r2, r1, r2
 8010d6a:	1a9b      	subs	r3, r3, r2
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7ef ff91 	bl	8000c94 <__aeabi_ui2f>
 8010d72:	4603      	mov	r3, r0
 8010d74:	617b      	str	r3, [r7, #20]
	  float slope = (maxMagnitude - minMagnitude) / periodF;
 8010d76:	6a39      	ldr	r1, [r7, #32]
 8010d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d7a:	f7ef fed9 	bl	8000b30 <__aeabi_fsub>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7f0 f892 	bl	8000eac <__aeabi_fdiv>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	613b      	str	r3, [r7, #16]
	  float tempforce = 0;
 8010d8c:	f04f 0300 	mov.w	r3, #0
 8010d90:	60fb      	str	r3, [r7, #12]
	  tempforce = slope * (period - reminder);
 8010d92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010d94:	f7ef ff7e 	bl	8000c94 <__aeabi_ui2f>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	6979      	ldr	r1, [r7, #20]
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7ef fec7 	bl	8000b30 <__aeabi_fsub>
 8010da2:	4603      	mov	r3, r0
 8010da4:	4619      	mov	r1, r3
 8010da6:	6938      	ldr	r0, [r7, #16]
 8010da8:	f7ef ffcc 	bl	8000d44 <__aeabi_fmul>
 8010dac:	4603      	mov	r3, r0
 8010dae:	60fb      	str	r3, [r7, #12]
	  tempforce += minMagnitude;
 8010db0:	6a39      	ldr	r1, [r7, #32]
 8010db2:	68f8      	ldr	r0, [r7, #12]
 8010db4:	f7ef febe 	bl	8000b34 <__addsf3>
 8010db8:	4603      	mov	r3, r0
 8010dba:	60fb      	str	r3, [r7, #12]
	  return ApplyEnvelope(effect, tempforce);
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f7f0 f987 	bl	80010d0 <__aeabi_f2iz>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	6839      	ldr	r1, [r7, #0]
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f000 f963 	bl	8011094 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>
 8010dce:	4603      	mov	r3, r0
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3740      	adds	r7, #64	; 0x40
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	437f0000 	.word	0x437f0000

08010ddc <_ZN6HidFFB25SawtoothUpForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::SawtoothUpForceCalculator(FFB_Effect *effect)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b090      	sub	sp, #64	; 0x40
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	6039      	str	r1, [r7, #0]
	  float offset = effect->offset * 2;
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8010dec:	005b      	lsls	r3, r3, #1
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7ef ff54 	bl	8000c9c <__aeabi_i2f>
 8010df4:	4603      	mov	r3, r0
 8010df6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float magnitude = effect->magnitude;
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7ef ff4c 	bl	8000c9c <__aeabi_i2f>
 8010e04:	4603      	mov	r3, r0
 8010e06:	63bb      	str	r3, [r7, #56]	; 0x38
	  float elapsedTime = effect->elapsedTime;
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7ef ff41 	bl	8000c94 <__aeabi_ui2f>
 8010e12:	4603      	mov	r3, r0
 8010e14:	637b      	str	r3, [r7, #52]	; 0x34
	  uint32_t phase = effect->phase;
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8010e1c:	633b      	str	r3, [r7, #48]	; 0x30
	  uint32_t period = effect->period;
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010e22:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float periodF = effect->period;
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7ef ff33 	bl	8000c94 <__aeabi_ui2f>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	62bb      	str	r3, [r7, #40]	; 0x28

	  float maxMagnitude = offset + magnitude;
 8010e32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e36:	f7ef fe7d 	bl	8000b34 <__addsf3>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	627b      	str	r3, [r7, #36]	; 0x24
	  float minMagnitude = offset - magnitude;
 8010e3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e42:	f7ef fe75 	bl	8000b30 <__aeabi_fsub>
 8010e46:	4603      	mov	r3, r0
 8010e48:	623b      	str	r3, [r7, #32]
	  int32_t phasetime = (phase * period) / 255;
 8010e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e4e:	fb02 f303 	mul.w	r3, r2, r3
 8010e52:	4a24      	ldr	r2, [pc, #144]	; (8010ee4 <_ZN6HidFFB25SawtoothUpForceCalculatorEP10FFB_Effect+0x108>)
 8010e54:	fba2 2303 	umull	r2, r3, r2, r3
 8010e58:	09db      	lsrs	r3, r3, #7
 8010e5a:	61fb      	str	r3, [r7, #28]
	  uint32_t timeTemp = elapsedTime + phasetime;
 8010e5c:	69f8      	ldr	r0, [r7, #28]
 8010e5e:	f7ef ff1d 	bl	8000c9c <__aeabi_i2f>
 8010e62:	4603      	mov	r3, r0
 8010e64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7ef fe64 	bl	8000b34 <__addsf3>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7f0 f954 	bl	800111c <__aeabi_f2uiz>
 8010e74:	4603      	mov	r3, r0
 8010e76:	61bb      	str	r3, [r7, #24]
	  float reminder = timeTemp % period;
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e82:	fb01 f202 	mul.w	r2, r1, r2
 8010e86:	1a9b      	subs	r3, r3, r2
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7ef ff03 	bl	8000c94 <__aeabi_ui2f>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	617b      	str	r3, [r7, #20]
	  float slope = (maxMagnitude - minMagnitude) / periodF;
 8010e92:	6a39      	ldr	r1, [r7, #32]
 8010e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e96:	f7ef fe4b 	bl	8000b30 <__aeabi_fsub>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7f0 f804 	bl	8000eac <__aeabi_fdiv>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	613b      	str	r3, [r7, #16]
	  float tempforce = 0;
 8010ea8:	f04f 0300 	mov.w	r3, #0
 8010eac:	60fb      	str	r3, [r7, #12]
	  tempforce = slope * reminder;
 8010eae:	6979      	ldr	r1, [r7, #20]
 8010eb0:	6938      	ldr	r0, [r7, #16]
 8010eb2:	f7ef ff47 	bl	8000d44 <__aeabi_fmul>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	60fb      	str	r3, [r7, #12]
	  tempforce += minMagnitude;
 8010eba:	6a39      	ldr	r1, [r7, #32]
 8010ebc:	68f8      	ldr	r0, [r7, #12]
 8010ebe:	f7ef fe39 	bl	8000b34 <__addsf3>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	60fb      	str	r3, [r7, #12]
	  return ApplyEnvelope(effect, tempforce);
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	f7f0 f902 	bl	80010d0 <__aeabi_f2iz>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	461a      	mov	r2, r3
 8010ed0:	6839      	ldr	r1, [r7, #0]
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f000 f8de 	bl	8011094 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>
 8010ed8:	4603      	mov	r3, r0
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3740      	adds	r7, #64	; 0x40
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	80808081 	.word	0x80808081

08010ee8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>:

int32_t HidFFB::ConditionForceCalculator(FFB_Effect *effect, float metric)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b08a      	sub	sp, #40	; 0x28
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	607a      	str	r2, [r7, #4]
	  float deadBand = effect->deadBand;
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7ef fecb 	bl	8000c94 <__aeabi_ui2f>
 8010efe:	4603      	mov	r3, r0
 8010f00:	623b      	str	r3, [r7, #32]
	  float cpOffset = effect->cpOffset;
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7ef fec7 	bl	8000c9c <__aeabi_i2f>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	61fb      	str	r3, [r7, #28]
	  float negativeCoefficient = -effect->negativeCoefficient;
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010f18:	425b      	negs	r3, r3
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7ef febe 	bl	8000c9c <__aeabi_i2f>
 8010f20:	4603      	mov	r3, r0
 8010f22:	61bb      	str	r3, [r7, #24]
	  float positiveSaturation = effect->positiveSaturation;
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	899b      	ldrh	r3, [r3, #12]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7ef feb3 	bl	8000c94 <__aeabi_ui2f>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	617b      	str	r3, [r7, #20]
	  float positiveCoefficient = effect->positiveCoefficient;
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7ef feaf 	bl	8000c9c <__aeabi_i2f>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	613b      	str	r3, [r7, #16]
	  float  tempForce = 0;
 8010f42:	f04f 0300 	mov.w	r3, #0
 8010f46:	627b      	str	r3, [r7, #36]	; 0x24
	  if (metric < (cpOffset - deadBand)) {
 8010f48:	6a39      	ldr	r1, [r7, #32]
 8010f4a:	69f8      	ldr	r0, [r7, #28]
 8010f4c:	f7ef fdf0 	bl	8000b30 <__aeabi_fsub>
 8010f50:	4603      	mov	r3, r0
 8010f52:	4619      	mov	r1, r3
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f7f0 f893 	bl	8001080 <__aeabi_fcmplt>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d015      	beq.n	8010f8c <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0xa4>
	    tempForce = ((float)1.00 * (cpOffset - deadBand) / 10000 - metric) * negativeCoefficient;
 8010f60:	6a39      	ldr	r1, [r7, #32]
 8010f62:	69f8      	ldr	r0, [r7, #28]
 8010f64:	f7ef fde4 	bl	8000b30 <__aeabi_fsub>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	493d      	ldr	r1, [pc, #244]	; (8011060 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x178>)
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7ef ff9d 	bl	8000eac <__aeabi_fdiv>
 8010f72:	4603      	mov	r3, r0
 8010f74:	6879      	ldr	r1, [r7, #4]
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7ef fdda 	bl	8000b30 <__aeabi_fsub>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	4619      	mov	r1, r3
 8010f80:	69b8      	ldr	r0, [r7, #24]
 8010f82:	f7ef fedf 	bl	8000d44 <__aeabi_fmul>
 8010f86:	4603      	mov	r3, r0
 8010f88:	627b      	str	r3, [r7, #36]	; 0x24
 8010f8a:	e02b      	b.n	8010fe4 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0xfc>
	  }
	  else if (metric > (cpOffset + deadBand)) {
 8010f8c:	6a39      	ldr	r1, [r7, #32]
 8010f8e:	69f8      	ldr	r0, [r7, #28]
 8010f90:	f7ef fdd0 	bl	8000b34 <__addsf3>
 8010f94:	4603      	mov	r3, r0
 8010f96:	4619      	mov	r1, r3
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f7f0 f88f 	bl	80010bc <__aeabi_fcmpgt>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d01f      	beq.n	8010fe4 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0xfc>
	    tempForce = (metric - (float)1.00 * (cpOffset + deadBand) / 10000) * positiveCoefficient;
 8010fa4:	6a39      	ldr	r1, [r7, #32]
 8010fa6:	69f8      	ldr	r0, [r7, #28]
 8010fa8:	f7ef fdc4 	bl	8000b34 <__addsf3>
 8010fac:	4603      	mov	r3, r0
 8010fae:	492c      	ldr	r1, [pc, #176]	; (8011060 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x178>)
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7ef ff7b 	bl	8000eac <__aeabi_fdiv>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	4619      	mov	r1, r3
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f7ef fdb8 	bl	8000b30 <__aeabi_fsub>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	6938      	ldr	r0, [r7, #16]
 8010fc6:	f7ef febd 	bl	8000d44 <__aeabi_fmul>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	627b      	str	r3, [r7, #36]	; 0x24
	    tempForce = (tempForce > positiveSaturation ? positiveSaturation : tempForce);
 8010fce:	6979      	ldr	r1, [r7, #20]
 8010fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fd2:	f7f0 f873 	bl	80010bc <__aeabi_fcmpgt>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d001      	beq.n	8010fe0 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0xf8>
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	e000      	b.n	8010fe2 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0xfa>
 8010fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe2:	627b      	str	r3, [r7, #36]	; 0x24
	  }
	  tempForce = tempForce * effect->gain / 255;
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	789b      	ldrb	r3, [r3, #2]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7ef fe57 	bl	8000c9c <__aeabi_i2f>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7ef fea6 	bl	8000d44 <__aeabi_fmul>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	491a      	ldr	r1, [pc, #104]	; (8011064 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x17c>)
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7ef ff55 	bl	8000eac <__aeabi_fdiv>
 8011002:	4603      	mov	r3, r0
 8011004:	627b      	str	r3, [r7, #36]	; 0x24
	  switch (effect->type) {
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	785b      	ldrb	r3, [r3, #1]
 801100a:	2b0a      	cmp	r3, #10
 801100c:	d00d      	beq.n	801102a <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x142>
 801100e:	2b0b      	cmp	r3, #11
 8011010:	d014      	beq.n	801103c <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x154>
 8011012:	2b09      	cmp	r3, #9
 8011014:	d000      	beq.n	8011018 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x130>
	      break;
	    case FFB_EFFECT_FRICTION:
	      tempForce = frictionFilter.filterIn(tempForce);
	      break;
	    default:
	      break;
 8011016:	e01a      	b.n	801104e <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x166>
	      tempForce = damperFilter.filterIn(tempForce);
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 801101e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011020:	4618      	mov	r0, r3
 8011022:	f7fd fbea 	bl	800e7fa <_ZN7Filters8filterInEf>
 8011026:	6278      	str	r0, [r7, #36]	; 0x24
	      break;
 8011028:	e011      	b.n	801104e <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x166>
	      tempForce = interiaFilter.filterIn(tempForce);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8011030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011032:	4618      	mov	r0, r3
 8011034:	f7fd fbe1 	bl	800e7fa <_ZN7Filters8filterInEf>
 8011038:	6278      	str	r0, [r7, #36]	; 0x24
	      break;
 801103a:	e008      	b.n	801104e <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x166>
	      tempForce = frictionFilter.filterIn(tempForce);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8011042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011044:	4618      	mov	r0, r3
 8011046:	f7fd fbd8 	bl	800e7fa <_ZN7Filters8filterInEf>
 801104a:	6278      	str	r0, [r7, #36]	; 0x24
	      break;
 801104c:	bf00      	nop
	  }

	  return (int32_t) tempForce;
 801104e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011050:	f7f0 f83e 	bl	80010d0 <__aeabi_f2iz>
 8011054:	4603      	mov	r3, r0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3728      	adds	r7, #40	; 0x28
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	461c4000 	.word	0x461c4000
 8011064:	437f0000 	.word	0x437f0000

08011068 <_ZN6HidFFB9ApplyGainEmh>:

int32_t HidFFB::ApplyGain(uint32_t value, uint8_t gain)
{
 8011068:	b480      	push	{r7}
 801106a:	b085      	sub	sp, #20
 801106c:	af00      	add	r7, sp, #0
 801106e:	60f8      	str	r0, [r7, #12]
 8011070:	60b9      	str	r1, [r7, #8]
 8011072:	4613      	mov	r3, r2
 8011074:	71fb      	strb	r3, [r7, #7]
	  return ((value * gain) / 255);
 8011076:	79fb      	ldrb	r3, [r7, #7]
 8011078:	68ba      	ldr	r2, [r7, #8]
 801107a:	fb02 f303 	mul.w	r3, r2, r3
 801107e:	4a04      	ldr	r2, [pc, #16]	; (8011090 <_ZN6HidFFB9ApplyGainEmh+0x28>)
 8011080:	fba2 2303 	umull	r2, r3, r2, r3
 8011084:	09db      	lsrs	r3, r3, #7
}
 8011086:	4618      	mov	r0, r3
 8011088:	3714      	adds	r7, #20
 801108a:	46bd      	mov	sp, r7
 801108c:	bc80      	pop	{r7}
 801108e:	4770      	bx	lr
 8011090:	80808081 	.word	0x80808081

08011094 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>:

int32_t HidFFB::ApplyEnvelope(FFB_Effect* effect, int32_t value)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b08e      	sub	sp, #56	; 0x38
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	607a      	str	r2, [r7, #4]
	  int32_t magnitude = ApplyGain(effect->magnitude, effect->gain);
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80110a6:	4619      	mov	r1, r3
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	789b      	ldrb	r3, [r3, #2]
 80110ac:	461a      	mov	r2, r3
 80110ae:	68f8      	ldr	r0, [r7, #12]
 80110b0:	f7ff ffda 	bl	8011068 <_ZN6HidFFB9ApplyGainEmh>
 80110b4:	6338      	str	r0, [r7, #48]	; 0x30
	  int32_t attackLevel = ApplyGain(effect->attackLevel, effect->gain);
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80110bc:	4619      	mov	r1, r3
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	789b      	ldrb	r3, [r3, #2]
 80110c2:	461a      	mov	r2, r3
 80110c4:	68f8      	ldr	r0, [r7, #12]
 80110c6:	f7ff ffcf 	bl	8011068 <_ZN6HidFFB9ApplyGainEmh>
 80110ca:	62f8      	str	r0, [r7, #44]	; 0x2c
	  int32_t fadeLevel = ApplyGain(effect->fadeLevel, effect->gain);
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80110d2:	4619      	mov	r1, r3
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	789b      	ldrb	r3, [r3, #2]
 80110d8:	461a      	mov	r2, r3
 80110da:	68f8      	ldr	r0, [r7, #12]
 80110dc:	f7ff ffc4 	bl	8011068 <_ZN6HidFFB9ApplyGainEmh>
 80110e0:	62b8      	str	r0, [r7, #40]	; 0x28
	  int32_t newValue = magnitude;
 80110e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e4:	637b      	str	r3, [r7, #52]	; 0x34
	  int32_t attackTime = effect->attackTime;
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80110ea:	627b      	str	r3, [r7, #36]	; 0x24
	  int32_t fadeTime = effect->fadeTime;
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80110f0:	623b      	str	r3, [r7, #32]
	  int32_t elapsedTime = effect->elapsedTime;
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80110f6:	61fb      	str	r3, [r7, #28]
	  int32_t duration = effect->duration;
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110fc:	61bb      	str	r3, [r7, #24]

	  if (elapsedTime < attackTime)
 80110fe:	69fa      	ldr	r2, [r7, #28]
 8011100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011102:	429a      	cmp	r2, r3
 8011104:	da0f      	bge.n	8011126 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl+0x92>
	  {
	    newValue = (magnitude - attackLevel) * elapsedTime;
 8011106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110a:	1ad2      	subs	r2, r2, r3
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	fb02 f303 	mul.w	r3, r2, r3
 8011112:	637b      	str	r3, [r7, #52]	; 0x34
	    newValue /= attackTime;
 8011114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011118:	fb92 f3f3 	sdiv	r3, r2, r3
 801111c:	637b      	str	r3, [r7, #52]	; 0x34
	    newValue += attackLevel;
 801111e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011122:	4413      	add	r3, r2
 8011124:	637b      	str	r3, [r7, #52]	; 0x34
	  }
	  if (elapsedTime > (duration - fadeTime))
 8011126:	69ba      	ldr	r2, [r7, #24]
 8011128:	6a3b      	ldr	r3, [r7, #32]
 801112a:	1ad3      	subs	r3, r2, r3
 801112c:	69fa      	ldr	r2, [r7, #28]
 801112e:	429a      	cmp	r2, r3
 8011130:	dd11      	ble.n	8011156 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl+0xc2>
	  {
	    newValue = (magnitude - fadeLevel) * (duration - elapsedTime);
 8011132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011136:	1ad3      	subs	r3, r2, r3
 8011138:	69b9      	ldr	r1, [r7, #24]
 801113a:	69fa      	ldr	r2, [r7, #28]
 801113c:	1a8a      	subs	r2, r1, r2
 801113e:	fb02 f303 	mul.w	r3, r2, r3
 8011142:	637b      	str	r3, [r7, #52]	; 0x34
	    newValue /= fadeTime;
 8011144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011146:	6a3b      	ldr	r3, [r7, #32]
 8011148:	fb92 f3f3 	sdiv	r3, r2, r3
 801114c:	637b      	str	r3, [r7, #52]	; 0x34
	    newValue += fadeLevel;
 801114e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011152:	4413      	add	r3, r2
 8011154:	637b      	str	r3, [r7, #52]	; 0x34
	  }
	  float scale = (float)value / (int32_t)0x7fff;
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f7ef fda0 	bl	8000c9c <__aeabi_i2f>
 801115c:	4603      	mov	r3, r0
 801115e:	490c      	ldr	r1, [pc, #48]	; (8011190 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl+0xfc>)
 8011160:	4618      	mov	r0, r3
 8011162:	f7ef fea3 	bl	8000eac <__aeabi_fdiv>
 8011166:	4603      	mov	r3, r0
 8011168:	617b      	str	r3, [r7, #20]
	  float fvalue = scale * newValue;
 801116a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801116c:	f7ef fd96 	bl	8000c9c <__aeabi_i2f>
 8011170:	4603      	mov	r3, r0
 8011172:	4619      	mov	r1, r3
 8011174:	6978      	ldr	r0, [r7, #20]
 8011176:	f7ef fde5 	bl	8000d44 <__aeabi_fmul>
 801117a:	4603      	mov	r3, r0
 801117c:	613b      	str	r3, [r7, #16]

	  return (int32_t)fvalue;
 801117e:	6938      	ldr	r0, [r7, #16]
 8011180:	f7ef ffa6 	bl	80010d0 <__aeabi_f2iz>
 8011184:	4603      	mov	r3, r0
}
 8011186:	4618      	mov	r0, r3
 8011188:	3738      	adds	r7, #56	; 0x38
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop
 8011190:	46fffe00 	.word	0x46fffe00

08011194 <_ZN6HidFFB14NormalizeRangeEll>:

float HidFFB::NormalizeRange(int32_t x, int32_t maxValue)
{
 8011194:	b5b0      	push	{r4, r5, r7, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	af00      	add	r7, sp, #0
 801119a:	60f8      	str	r0, [r7, #12]
 801119c:	60b9      	str	r1, [r7, #8]
 801119e:	607a      	str	r2, [r7, #4]
	  return (float)x * 1.00 / maxValue;
 80111a0:	68b8      	ldr	r0, [r7, #8]
 80111a2:	f7ef fd7b 	bl	8000c9c <__aeabi_i2f>
 80111a6:	4603      	mov	r3, r0
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7ef f93d 	bl	8000428 <__aeabi_f2d>
 80111ae:	4604      	mov	r4, r0
 80111b0:	460d      	mov	r5, r1
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f7ef f926 	bl	8000404 <__aeabi_i2d>
 80111b8:	4602      	mov	r2, r0
 80111ba:	460b      	mov	r3, r1
 80111bc:	4620      	mov	r0, r4
 80111be:	4629      	mov	r1, r5
 80111c0:	f7ef fab4 	bl	800072c <__aeabi_ddiv>
 80111c4:	4603      	mov	r3, r0
 80111c6:	460c      	mov	r4, r1
 80111c8:	4618      	mov	r0, r3
 80111ca:	4621      	mov	r1, r4
 80111cc:	f7ef fc5c 	bl	8000a88 <__aeabi_d2f>
 80111d0:	4603      	mov	r3, r0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3710      	adds	r7, #16
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bdb0      	pop	{r4, r5, r7, pc}

080111da <_ZN6HidFFB10set_configEP14FFBWheelConfig>:

void HidFFB::set_config(FFBWheelConfig *conf)
{
 80111da:	b480      	push	{r7}
 80111dc:	b083      	sub	sp, #12
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
 80111e2:	6039      	str	r1, [r7, #0]
	this->conf = conf;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	683a      	ldr	r2, [r7, #0]
 80111e8:	621a      	str	r2, [r3, #32]
}
 80111ea:	bf00      	nop
 80111ec:	370c      	adds	r7, #12
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bc80      	pop	{r7}
 80111f2:	4770      	bx	lr

080111f4 <_ZN12LocalButtonsC1Ev>:
 *      Author: Yannick
 */

#include <LocalButtons.h>

LocalButtons::LocalButtons() {
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b084      	sub	sp, #16
 80111f8:	af02      	add	r7, sp, #8
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	4a18      	ldr	r2, [pc, #96]	; (8011260 <_ZN12LocalButtonsC1Ev+0x6c>)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	601a      	str	r2, [r3, #0]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2201      	movs	r2, #1
 8011206:	809a      	strh	r2, [r3, #4]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2201      	movs	r2, #1
 801120c:	80da      	strh	r2, [r3, #6]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2208      	movs	r2, #8
 8011212:	811a      	strh	r2, [r3, #8]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	4a13      	ldr	r2, [pc, #76]	; (8011264 <_ZN12LocalButtonsC1Ev+0x70>)
 8011218:	60da      	str	r2, [r3, #12]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2227      	movs	r2, #39	; 0x27
 801121e:	74da      	strb	r2, [r3, #19]
	//Initialize I2C buttons
	button_buf[0] = 0xff;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	22ff      	movs	r2, #255	; 0xff
 8011224:	741a      	strb	r2, [r3, #16]
	button_buf[1] = 0xff;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	22ff      	movs	r2, #255	; 0xff
 801122a:	745a      	strb	r2, [r3, #17]

	I2C_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f103 0210 	add.w	r2, r3, #16
 8011232:	230a      	movs	r3, #10
 8011234:	9300      	str	r3, [sp, #0]
 8011236:	2302      	movs	r3, #2
 8011238:	214e      	movs	r1, #78	; 0x4e
 801123a:	480b      	ldr	r0, [pc, #44]	; (8011268 <_ZN12LocalButtonsC1Ev+0x74>)
 801123c:	f7f2 faf6 	bl	800382c <HAL_I2C_Master_Transmit>
 8011240:	4603      	mov	r3, r0
 8011242:	461a      	mov	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	751a      	strb	r2, [r3, #20]
	if ( I2C_status != HAL_OK ) {
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	7d1b      	ldrb	r3, [r3, #20]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d001      	beq.n	8011254 <_ZN12LocalButtonsC1Ev+0x60>
		pulseSysLed();
 8011250:	f001 fb26 	bl	80128a0 <_Z11pulseSysLedv>
	}

}
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	4618      	mov	r0, r3
 8011258:	3708      	adds	r7, #8
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	08018e24 	.word	0x08018e24
 8011264:	40010c00 	.word	0x40010c00
 8011268:	20001594 	.word	0x20001594

0801126c <_ZN12LocalButtonsD1Ev>:

LocalButtons::~LocalButtons() {
 801126c:	b480      	push	{r7}
 801126e:	b083      	sub	sp, #12
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	4a04      	ldr	r2, [pc, #16]	; (8011288 <_ZN12LocalButtonsD1Ev+0x1c>)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	4618      	mov	r0, r3
 801127e:	370c      	adds	r7, #12
 8011280:	46bd      	mov	sp, r7
 8011282:	bc80      	pop	{r7}
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	08018e24 	.word	0x08018e24

0801128c <_ZN12LocalButtonsD0Ev>:
LocalButtons::~LocalButtons() {
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
}
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f7ff ffe9 	bl	801126c <_ZN12LocalButtonsD1Ev>
 801129a:	2118      	movs	r1, #24
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f004 f8a7 	bl	80153f0 <_ZdlPvj>
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	4618      	mov	r0, r3
 80112a6:	3708      	adds	r7, #8
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}

080112ac <_ZN12LocalButtons11readButtonsEPm>:


void LocalButtons::readButtons(uint32_t* buf){
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b086      	sub	sp, #24
 80112b0:	af02      	add	r7, sp, #8
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
	I2C_status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f103 0210 	add.w	r2, r3, #16
 80112bc:	230a      	movs	r3, #10
 80112be:	9300      	str	r3, [sp, #0]
 80112c0:	2302      	movs	r3, #2
 80112c2:	214e      	movs	r1, #78	; 0x4e
 80112c4:	482b      	ldr	r0, [pc, #172]	; (8011374 <_ZN12LocalButtons11readButtonsEPm+0xc8>)
 80112c6:	f7f2 fbaf 	bl	8003a28 <HAL_I2C_Master_Receive>
 80112ca:	4603      	mov	r3, r0
 80112cc:	461a      	mov	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	751a      	strb	r2, [r3, #20]
	if(I2C_status == HAL_OK)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	7d1b      	ldrb	r3, [r3, #20]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d11e      	bne.n	8011318 <_ZN12LocalButtons11readButtonsEPm+0x6c>
	{
		button_buf[0]=~button_buf[0];
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	7c1b      	ldrb	r3, [r3, #16]
 80112de:	43db      	mvns	r3, r3
 80112e0:	b2da      	uxtb	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	741a      	strb	r2, [r3, #16]
		button_buf[1]=~button_buf[1];
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	7c5b      	ldrb	r3, [r3, #17]
 80112ea:	43db      	mvns	r3, r3
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	745a      	strb	r2, [r3, #17]
		*buf |= button_buf[0];
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	7c12      	ldrb	r2, [r2, #16]
 80112fa:	431a      	orrs	r2, r3
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	601a      	str	r2, [r3, #0]
		*buf <<= 8;
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	021a      	lsls	r2, r3, #8
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	601a      	str	r2, [r3, #0]
		*buf |= button_buf[1];
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	687a      	ldr	r2, [r7, #4]
 8011310:	7c52      	ldrb	r2, [r2, #17]
 8011312:	431a      	orrs	r2, r3
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	601a      	str	r2, [r3, #0]
	}
	uint8_t buttons = this->nButtons;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	88db      	ldrh	r3, [r3, #6]
 801131c:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0;i<buttons;i++){
 801131e:	2300      	movs	r3, #0
 8011320:	73fb      	strb	r3, [r7, #15]
 8011322:	7bfa      	ldrb	r2, [r7, #15]
 8011324:	7bbb      	ldrb	r3, [r7, #14]
 8011326:	429a      	cmp	r2, r3
 8011328:	d220      	bcs.n	801136c <_ZN12LocalButtons11readButtonsEPm+0xc0>
		*buf |= !HAL_GPIO_ReadPin(button_ports[i],button_pins[i]) << (i + 16);
 801132a:	7bfb      	ldrb	r3, [r7, #15]
 801132c:	687a      	ldr	r2, [r7, #4]
 801132e:	3302      	adds	r3, #2
 8011330:	009b      	lsls	r3, r3, #2
 8011332:	4413      	add	r3, r2
 8011334:	6858      	ldr	r0, [r3, #4]
 8011336:	7bfa      	ldrb	r2, [r7, #15]
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	3204      	adds	r2, #4
 801133c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011340:	4619      	mov	r1, r3
 8011342:	f7f2 f8eb 	bl	800351c <HAL_GPIO_ReadPin>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	bf0c      	ite	eq
 801134c:	2301      	moveq	r3, #1
 801134e:	2300      	movne	r3, #0
 8011350:	b2db      	uxtb	r3, r3
 8011352:	461a      	mov	r2, r3
 8011354:	7bfb      	ldrb	r3, [r7, #15]
 8011356:	3310      	adds	r3, #16
 8011358:	409a      	lsls	r2, r3
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	431a      	orrs	r2, r3
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0;i<buttons;i++){
 8011364:	7bfb      	ldrb	r3, [r7, #15]
 8011366:	3301      	adds	r3, #1
 8011368:	73fb      	strb	r3, [r7, #15]
 801136a:	e7da      	b.n	8011322 <_ZN12LocalButtons11readButtonsEPm+0x76>
	}
}
 801136c:	bf00      	nop
 801136e:	3710      	adds	r7, #16
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}
 8011374:	20001594 	.word	0x20001594

08011378 <_ZN12MotorBTS79604turnEs>:
#include <MotorBTS7960.h>

void MotorBTS7960::turn(int16_t power){
 8011378:	b480      	push	{r7}
 801137a:	b085      	sub	sp, #20
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	460b      	mov	r3, r1
 8011382:	807b      	strh	r3, [r7, #2]
	if(!active)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	7a1b      	ldrb	r3, [r3, #8]
 8011388:	f083 0301 	eor.w	r3, r3, #1
 801138c:	b2db      	uxtb	r3, r3
 801138e:	2b00      	cmp	r3, #0
 8011390:	d12b      	bne.n	80113ea <_ZN12MotorBTS79604turnEs+0x72>
		return;

	int32_t val = (uint32_t)((abs(power) * period)/0x7fff);
 8011392:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011396:	2b00      	cmp	r3, #0
 8011398:	bfb8      	it	lt
 801139a:	425b      	neglt	r3, r3
 801139c:	461a      	mov	r2, r3
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	fb03 f202 	mul.w	r2, r3, r2
 80113a6:	4b13      	ldr	r3, [pc, #76]	; (80113f4 <_ZN12MotorBTS79604turnEs+0x7c>)
 80113a8:	fba3 1302 	umull	r1, r3, r3, r2
 80113ac:	1ad2      	subs	r2, r2, r3
 80113ae:	0852      	lsrs	r2, r2, #1
 80113b0:	4413      	add	r3, r2
 80113b2:	0b9b      	lsrs	r3, r3, #14
 80113b4:	60fb      	str	r3, [r7, #12]

	if(power < 0){
 80113b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	da0a      	bge.n	80113d4 <_ZN12MotorBTS79604turnEs+0x5c>
		timer->Instance->CCR1 = 0;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	695b      	ldr	r3, [r3, #20]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2200      	movs	r2, #0
 80113c6:	635a      	str	r2, [r3, #52]	; 0x34
		timer->Instance->CCR2 = val;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	695b      	ldr	r3, [r3, #20]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	68fa      	ldr	r2, [r7, #12]
 80113d0:	639a      	str	r2, [r3, #56]	; 0x38
 80113d2:	e00b      	b.n	80113ec <_ZN12MotorBTS79604turnEs+0x74>
	}else{
		timer->Instance->CCR1 = val;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	695b      	ldr	r3, [r3, #20]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	68fa      	ldr	r2, [r7, #12]
 80113dc:	635a      	str	r2, [r3, #52]	; 0x34
		timer->Instance->CCR2 = 0;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	695b      	ldr	r3, [r3, #20]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2200      	movs	r2, #0
 80113e6:	639a      	str	r2, [r3, #56]	; 0x38
 80113e8:	e000      	b.n	80113ec <_ZN12MotorBTS79604turnEs+0x74>
		return;
 80113ea:	bf00      	nop
	}

}
 80113ec:	3714      	adds	r7, #20
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bc80      	pop	{r7}
 80113f2:	4770      	bx	lr
 80113f4:	00020005 	.word	0x00020005

080113f8 <_ZN12MotorBTS7960C1Ev>:

MotorBTS7960::MotorBTS7960() {
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	4a18      	ldr	r2, [pc, #96]	; (8011464 <_ZN12MotorBTS7960C1Ev+0x6c>)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	601a      	str	r2, [r3, #0]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f640 620f 	movw	r2, #3599	; 0xe0f
 801140c:	605a      	str	r2, [r3, #4]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2200      	movs	r2, #0
 8011412:	721a      	strb	r2, [r3, #8]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2200      	movs	r2, #0
 8011418:	60da      	str	r2, [r3, #12]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2204      	movs	r2, #4
 801141e:	611a      	str	r2, [r3, #16]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	4a11      	ldr	r2, [pc, #68]	; (8011468 <_ZN12MotorBTS7960C1Ev+0x70>)
 8011424:	615a      	str	r2, [r3, #20]
	timer->Instance->CCR1 = 0;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	695b      	ldr	r3, [r3, #20]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	2200      	movs	r2, #0
 801142e:	635a      	str	r2, [r3, #52]	; 0x34
	timer->Instance->CCR2 = 0;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	695b      	ldr	r3, [r3, #20]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	2200      	movs	r2, #0
 8011438:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(timer, channel1);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	695a      	ldr	r2, [r3, #20]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	68db      	ldr	r3, [r3, #12]
 8011442:	4619      	mov	r1, r3
 8011444:	4610      	mov	r0, r2
 8011446:	f7f4 fc47 	bl	8005cd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, channel2);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	695a      	ldr	r2, [r3, #20]
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	691b      	ldr	r3, [r3, #16]
 8011452:	4619      	mov	r1, r3
 8011454:	4610      	mov	r0, r2
 8011456:	f7f4 fc3f 	bl	8005cd8 <HAL_TIM_PWM_Start>
}
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	4618      	mov	r0, r3
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	08018e34 	.word	0x08018e34
 8011468:	2000169c 	.word	0x2000169c

0801146c <_ZN12MotorBTS7960D1Ev>:

MotorBTS7960::~MotorBTS7960() {
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	4a0b      	ldr	r2, [pc, #44]	; (80114a4 <_ZN12MotorBTS7960D1Ev+0x38>)
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop(timer, channel1);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	695a      	ldr	r2, [r3, #20]
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	68db      	ldr	r3, [r3, #12]
 8011482:	4619      	mov	r1, r3
 8011484:	4610      	mov	r0, r2
 8011486:	f7f4 fc59 	bl	8005d3c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer, channel2);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	695a      	ldr	r2, [r3, #20]
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	691b      	ldr	r3, [r3, #16]
 8011492:	4619      	mov	r1, r3
 8011494:	4610      	mov	r0, r2
 8011496:	f7f4 fc51 	bl	8005d3c <HAL_TIM_PWM_Stop>
}
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	4618      	mov	r0, r3
 801149e:	3708      	adds	r7, #8
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}
 80114a4:	08018e34 	.word	0x08018e34

080114a8 <_ZN12MotorBTS7960D0Ev>:
MotorBTS7960::~MotorBTS7960() {
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
}
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f7ff ffdb 	bl	801146c <_ZN12MotorBTS7960D1Ev>
 80114b6:	2118      	movs	r1, #24
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f003 ff99 	bl	80153f0 <_ZdlPvj>
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	4618      	mov	r0, r3
 80114c2:	3708      	adds	r7, #8
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <_ZN12MotorBTS79605startEv>:


void MotorBTS7960::start(){
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
	active = true;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2201      	movs	r2, #1
 80114d4:	721a      	strb	r2, [r3, #8]
}
 80114d6:	bf00      	nop
 80114d8:	370c      	adds	r7, #12
 80114da:	46bd      	mov	sp, r7
 80114dc:	bc80      	pop	{r7}
 80114de:	4770      	bx	lr

080114e0 <_ZN12MotorBTS79604stopEv>:

void MotorBTS7960::stop(){
 80114e0:	b480      	push	{r7}
 80114e2:	b083      	sub	sp, #12
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
	active = false;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2200      	movs	r2, #0
 80114ec:	721a      	strb	r2, [r3, #8]
	timer->Instance->CCR1 = 0;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	695b      	ldr	r3, [r3, #20]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2200      	movs	r2, #0
 80114f6:	635a      	str	r2, [r3, #52]	; 0x34
	timer->Instance->CCR2 = 0;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	695b      	ldr	r3, [r3, #20]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	2200      	movs	r2, #0
 8011500:	639a      	str	r2, [r3, #56]	; 0x38
}
 8011502:	bf00      	nop
 8011504:	370c      	adds	r7, #12
 8011506:	46bd      	mov	sp, r7
 8011508:	bc80      	pop	{r7}
 801150a:	4770      	bx	lr

0801150c <_ZN12TimerHandlerC1Ev>:
#include "TimerHandler.h"

TimerHandler::TimerHandler() {
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	4a07      	ldr	r2, [pc, #28]	; (8011534 <_ZN12TimerHandlerC1Ev+0x28>)
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	601a      	str	r2, [r3, #0]
	extern std::vector<TimerHandler*> timerHandlers;
	timerHandlers.push_back(this);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	60fb      	str	r3, [r7, #12]
 801151e:	f107 030c 	add.w	r3, r7, #12
 8011522:	4619      	mov	r1, r3
 8011524:	4804      	ldr	r0, [pc, #16]	; (8011538 <_ZN12TimerHandlerC1Ev+0x2c>)
 8011526:	f000 f879 	bl	801161c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE9push_backEOS1_>

}
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4618      	mov	r0, r3
 801152e:	3710      	adds	r7, #16
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	08018e44 	.word	0x08018e44
 8011538:	20000b6c 	.word	0x20000b6c

0801153c <_ZN12TimerHandlerD1Ev>:

TimerHandler::~TimerHandler() {
 801153c:	b590      	push	{r4, r7, lr}
 801153e:	b087      	sub	sp, #28
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	4a21      	ldr	r2, [pc, #132]	; (80115cc <_ZN12TimerHandlerD1Ev+0x90>)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	601a      	str	r2, [r3, #0]
	extern std::vector<TimerHandler*> timerHandlers;
	for (uint8_t i = 0; i < timerHandlers.size(); i++){
 801154a:	2300      	movs	r3, #0
 801154c:	75fb      	strb	r3, [r7, #23]
 801154e:	7dfc      	ldrb	r4, [r7, #23]
 8011550:	481f      	ldr	r0, [pc, #124]	; (80115d0 <_ZN12TimerHandlerD1Ev+0x94>)
 8011552:	f000 f874 	bl	801163e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8011556:	4603      	mov	r3, r0
 8011558:	429c      	cmp	r4, r3
 801155a:	bf34      	ite	cc
 801155c:	2301      	movcc	r3, #1
 801155e:	2300      	movcs	r3, #0
 8011560:	b2db      	uxtb	r3, r3
 8011562:	2b00      	cmp	r3, #0
 8011564:	d02d      	beq.n	80115c2 <_ZN12TimerHandlerD1Ev+0x86>
		if(timerHandlers[i] == this){
 8011566:	7dfb      	ldrb	r3, [r7, #23]
 8011568:	4619      	mov	r1, r3
 801156a:	4819      	ldr	r0, [pc, #100]	; (80115d0 <_ZN12TimerHandlerD1Ev+0x94>)
 801156c:	f000 f877 	bl	801165e <_ZNSt6vectorIP12TimerHandlerSaIS1_EEixEj>
 8011570:	4603      	mov	r3, r0
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	429a      	cmp	r2, r3
 8011578:	bf0c      	ite	eq
 801157a:	2301      	moveq	r3, #1
 801157c:	2300      	movne	r3, #0
 801157e:	b2db      	uxtb	r3, r3
 8011580:	2b00      	cmp	r3, #0
 8011582:	d01a      	beq.n	80115ba <_ZN12TimerHandlerD1Ev+0x7e>
			timerHandlers.erase(timerHandlers.begin()+i);
 8011584:	4812      	ldr	r0, [pc, #72]	; (80115d0 <_ZN12TimerHandlerD1Ev+0x94>)
 8011586:	f000 f879 	bl	801167c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 801158a:	4603      	mov	r3, r0
 801158c:	613b      	str	r3, [r7, #16]
 801158e:	7dfa      	ldrb	r2, [r7, #23]
 8011590:	f107 0310 	add.w	r3, r7, #16
 8011594:	4611      	mov	r1, r2
 8011596:	4618      	mov	r0, r3
 8011598:	f000 f880 	bl	801169c <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 801159c:	4603      	mov	r3, r0
 801159e:	60fb      	str	r3, [r7, #12]
 80115a0:	f107 020c 	add.w	r2, r7, #12
 80115a4:	f107 0308 	add.w	r3, r7, #8
 80115a8:	4611      	mov	r1, r2
 80115aa:	4618      	mov	r0, r3
 80115ac:	f000 f88e 	bl	80116cc <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 80115b0:	68b9      	ldr	r1, [r7, #8]
 80115b2:	4807      	ldr	r0, [pc, #28]	; (80115d0 <_ZN12TimerHandlerD1Ev+0x94>)
 80115b4:	f000 f89b 	bl	80116ee <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 80115b8:	e003      	b.n	80115c2 <_ZN12TimerHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < timerHandlers.size(); i++){
 80115ba:	7dfb      	ldrb	r3, [r7, #23]
 80115bc:	3301      	adds	r3, #1
 80115be:	75fb      	strb	r3, [r7, #23]
 80115c0:	e7c5      	b.n	801154e <_ZN12TimerHandlerD1Ev+0x12>
		}
	}
}
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4618      	mov	r0, r3
 80115c6:	371c      	adds	r7, #28
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd90      	pop	{r4, r7, pc}
 80115cc:	08018e44 	.word	0x08018e44
 80115d0:	20000b6c 	.word	0x20000b6c

080115d4 <_ZN12TimerHandlerD0Ev>:
TimerHandler::~TimerHandler() {
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
}
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f7ff ffad 	bl	801153c <_ZN12TimerHandlerD1Ev>
 80115e2:	2104      	movs	r1, #4
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f003 ff03 	bl	80153f0 <_ZdlPvj>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	4618      	mov	r0, r3
 80115ee:	3708      	adds	r7, #8
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <_ZN12TimerHandler12timerElapsedEP17TIM_HandleTypeDef>:

void TimerHandler::timerElapsed(TIM_HandleTypeDef* htim){
 80115f4:	b480      	push	{r7}
 80115f6:	b083      	sub	sp, #12
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]

}
 80115fe:	bf00      	nop
 8011600:	370c      	adds	r7, #12
 8011602:	46bd      	mov	sp, r7
 8011604:	bc80      	pop	{r7}
 8011606:	4770      	bx	lr

08011608 <_ZSt4moveIRP12TimerHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	4618      	mov	r0, r3
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	bc80      	pop	{r7}
 801161a:	4770      	bx	lr

0801161c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8011626:	6838      	ldr	r0, [r7, #0]
 8011628:	f7ff ffee 	bl	8011608 <_ZSt4moveIRP12TimerHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 801162c:	4603      	mov	r3, r0
 801162e:	4619      	mov	r1, r3
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f000 f88d 	bl	8011750 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8011636:	bf00      	nop
 8011638:	3708      	adds	r7, #8
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801163e:	b480      	push	{r7}
 8011640:	b083      	sub	sp, #12
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	461a      	mov	r2, r3
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	109b      	asrs	r3, r3, #2
 8011654:	4618      	mov	r0, r3
 8011656:	370c      	adds	r7, #12
 8011658:	46bd      	mov	sp, r7
 801165a:	bc80      	pop	{r7}
 801165c:	4770      	bx	lr

0801165e <_ZNSt6vectorIP12TimerHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 801165e:	b480      	push	{r7}
 8011660:	b083      	sub	sp, #12
 8011662:	af00      	add	r7, sp, #0
 8011664:	6078      	str	r0, [r7, #4]
 8011666:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	4413      	add	r3, r2
      }
 8011672:	4618      	mov	r0, r3
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	bc80      	pop	{r7}
 801167a:	4770      	bx	lr

0801167c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	f107 030c 	add.w	r3, r7, #12
 801168a:	4611      	mov	r1, r2
 801168c:	4618      	mov	r0, r3
 801168e:	f000 f88d 	bl	80117ac <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	4618      	mov	r0, r3
 8011696:	3710      	adds	r7, #16
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 801169c:	b580      	push	{r7, lr}
 801169e:	b084      	sub	sp, #16
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681a      	ldr	r2, [r3, #0]
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	009b      	lsls	r3, r3, #2
 80116ae:	4413      	add	r3, r2
 80116b0:	60fb      	str	r3, [r7, #12]
 80116b2:	f107 020c 	add.w	r2, r7, #12
 80116b6:	f107 0308 	add.w	r3, r7, #8
 80116ba:	4611      	mov	r1, r2
 80116bc:	4618      	mov	r0, r3
 80116be:	f000 f875 	bl	80117ac <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	4618      	mov	r0, r3
 80116c6:	3710      	adds	r7, #16
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}

080116cc <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
 80116d4:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 80116d6:	6838      	ldr	r0, [r7, #0]
 80116d8:	f000 f877 	bl	80117ca <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80116dc:	4603      	mov	r3, r0
 80116de:	681a      	ldr	r2, [r3, #0]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	601a      	str	r2, [r3, #0]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	4618      	mov	r0, r3
 80116e8:	3708      	adds	r7, #8
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}

080116ee <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 80116ee:	b580      	push	{r7, lr}
 80116f0:	b084      	sub	sp, #16
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
 80116f6:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7ff ffbf 	bl	801167c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 80116fe:	4603      	mov	r3, r0
 8011700:	60bb      	str	r3, [r7, #8]
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f000 f86b 	bl	80117de <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE6cbeginEv>
 8011708:	4603      	mov	r3, r0
 801170a:	60fb      	str	r3, [r7, #12]
 801170c:	f107 020c 	add.w	r2, r7, #12
 8011710:	463b      	mov	r3, r7
 8011712:	4611      	mov	r1, r2
 8011714:	4618      	mov	r0, r3
 8011716:	f000 f876 	bl	8011806 <_ZN9__gnu_cxxmiIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801171a:	4602      	mov	r2, r0
 801171c:	f107 0308 	add.w	r3, r7, #8
 8011720:	4611      	mov	r1, r2
 8011722:	4618      	mov	r0, r3
 8011724:	f7ff ffba 	bl	801169c <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8011728:	4603      	mov	r3, r0
 801172a:	4619      	mov	r1, r3
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f000 f880 	bl	8011832 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 8011732:	4603      	mov	r3, r0
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	4618      	mov	r0, r3
 8011748:	370c      	adds	r7, #12
 801174a:	46bd      	mov	sp, r7
 801174c:	bc80      	pop	{r7}
 801174e:	4770      	bx	lr

08011750 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8011750:	b5b0      	push	{r4, r5, r7, lr}
 8011752:	b082      	sub	sp, #8
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	685a      	ldr	r2, [r3, #4]
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	429a      	cmp	r2, r3
 8011764:	d011      	beq.n	801178a <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8011766:	687c      	ldr	r4, [r7, #4]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	685d      	ldr	r5, [r3, #4]
 801176c:	6838      	ldr	r0, [r7, #0]
 801176e:	f7ff ffe5 	bl	801173c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011772:	4603      	mov	r3, r0
 8011774:	461a      	mov	r2, r3
 8011776:	4629      	mov	r1, r5
 8011778:	4620      	mov	r0, r4
 801177a:	f000 f896 	bl	80118aa <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	1d1a      	adds	r2, r3, #4
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	605a      	str	r2, [r3, #4]
      }
 8011788:	e00c      	b.n	80117a4 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f000 f8a0 	bl	80118d0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 8011790:	4604      	mov	r4, r0
 8011792:	6838      	ldr	r0, [r7, #0]
 8011794:	f7ff ffd2 	bl	801173c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011798:	4603      	mov	r3, r0
 801179a:	461a      	mov	r2, r3
 801179c:	4621      	mov	r1, r4
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f000 f8a8 	bl	80118f4 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80117a4:	bf00      	nop
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bdb0      	pop	{r4, r5, r7, pc}

080117ac <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80117ac:	b480      	push	{r7}
 80117ae:	b083      	sub	sp, #12
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	681a      	ldr	r2, [r3, #0]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	601a      	str	r2, [r3, #0]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	4618      	mov	r0, r3
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bc80      	pop	{r7}
 80117c8:	4770      	bx	lr

080117ca <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80117ca:	b480      	push	{r7}
 80117cc:	b083      	sub	sp, #12
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	4618      	mov	r0, r3
 80117d6:	370c      	adds	r7, #12
 80117d8:	46bd      	mov	sp, r7
 80117da:	bc80      	pop	{r7}
 80117dc:	4770      	bx	lr

080117de <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 80117de:	b580      	push	{r7, lr}
 80117e0:	b084      	sub	sp, #16
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	60fb      	str	r3, [r7, #12]
 80117ec:	f107 020c 	add.w	r2, r7, #12
 80117f0:	f107 0308 	add.w	r3, r7, #8
 80117f4:	4611      	mov	r1, r2
 80117f6:	4618      	mov	r0, r3
 80117f8:	f000 f908 	bl	8011a0c <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	4618      	mov	r0, r3
 8011800:	3710      	adds	r7, #16
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}

08011806 <_ZN9__gnu_cxxmiIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011806:	b590      	push	{r4, r7, lr}
 8011808:	b083      	sub	sp, #12
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
 801180e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f000 f90a 	bl	8011a2a <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011816:	4603      	mov	r3, r0
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	461c      	mov	r4, r3
 801181c:	6838      	ldr	r0, [r7, #0]
 801181e:	f000 f904 	bl	8011a2a <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011822:	4603      	mov	r3, r0
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	1ae3      	subs	r3, r4, r3
 8011828:	109b      	asrs	r3, r3, #2
 801182a:	4618      	mov	r0, r3
 801182c:	370c      	adds	r7, #12
 801182e:	46bd      	mov	sp, r7
 8011830:	bd90      	pop	{r4, r7, pc}

08011832 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 8011832:	b590      	push	{r4, r7, lr}
 8011834:	b085      	sub	sp, #20
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
 801183a:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 801183c:	463b      	mov	r3, r7
 801183e:	2101      	movs	r1, #1
 8011840:	4618      	mov	r0, r3
 8011842:	f7ff ff2b 	bl	801169c <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8011846:	4603      	mov	r3, r0
 8011848:	60bb      	str	r3, [r7, #8]
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 f840 	bl	80118d0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 8011850:	4603      	mov	r3, r0
 8011852:	60fb      	str	r3, [r7, #12]
 8011854:	f107 020c 	add.w	r2, r7, #12
 8011858:	f107 0308 	add.w	r3, r7, #8
 801185c:	4611      	mov	r1, r2
 801185e:	4618      	mov	r0, r3
 8011860:	f000 f8ed 	bl	8011a3e <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8011864:	4603      	mov	r3, r0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d00e      	beq.n	8011888 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 801186a:	463b      	mov	r3, r7
 801186c:	2101      	movs	r1, #1
 801186e:	4618      	mov	r0, r3
 8011870:	f7ff ff14 	bl	801169c <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8011874:	4604      	mov	r4, r0
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f000 f82a 	bl	80118d0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 801187c:	4603      	mov	r3, r0
 801187e:	683a      	ldr	r2, [r7, #0]
 8011880:	4619      	mov	r1, r3
 8011882:	4620      	mov	r0, r4
 8011884:	f000 f8f3 	bl	8011a6e <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	1f1a      	subs	r2, r3, #4
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8011892:	687a      	ldr	r2, [r7, #4]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	4619      	mov	r1, r3
 801189a:	4610      	mov	r0, r2
 801189c:	f000 f8ff 	bl	8011a9e <_ZNSt16allocator_traitsISaIP12TimerHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 80118a0:	683b      	ldr	r3, [r7, #0]
    }
 80118a2:	4618      	mov	r0, r3
 80118a4:	3714      	adds	r7, #20
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd90      	pop	{r4, r7, pc}

080118aa <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80118aa:	b580      	push	{r7, lr}
 80118ac:	b084      	sub	sp, #16
 80118ae:	af00      	add	r7, sp, #0
 80118b0:	60f8      	str	r0, [r7, #12]
 80118b2:	60b9      	str	r1, [r7, #8]
 80118b4:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f7ff ff40 	bl	801173c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 80118bc:	4603      	mov	r3, r0
 80118be:	461a      	mov	r2, r3
 80118c0:	68b9      	ldr	r1, [r7, #8]
 80118c2:	68f8      	ldr	r0, [r7, #12]
 80118c4:	f000 f8f8 	bl	8011ab8 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 80118c8:	bf00      	nop
 80118ca:	3710      	adds	r7, #16
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	1d1a      	adds	r2, r3, #4
 80118dc:	f107 030c 	add.w	r3, r7, #12
 80118e0:	4611      	mov	r1, r2
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7ff ff62 	bl	80117ac <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	4618      	mov	r0, r3
 80118ec:	3710      	adds	r7, #16
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
	...

080118f4 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80118f4:	b5b0      	push	{r4, r5, r7, lr}
 80118f6:	b08a      	sub	sp, #40	; 0x28
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	60f8      	str	r0, [r7, #12]
 80118fc:	60b9      	str	r1, [r7, #8]
 80118fe:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8011900:	4a41      	ldr	r2, [pc, #260]	; (8011a08 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 8011902:	2101      	movs	r1, #1
 8011904:	68f8      	ldr	r0, [r7, #12]
 8011906:	f000 f8ef 	bl	8011ae8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc>
 801190a:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 801190c:	68f8      	ldr	r0, [r7, #12]
 801190e:	f7ff feb5 	bl	801167c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 8011912:	4603      	mov	r3, r0
 8011914:	617b      	str	r3, [r7, #20]
 8011916:	f107 0214 	add.w	r2, r7, #20
 801191a:	f107 0308 	add.w	r3, r7, #8
 801191e:	4611      	mov	r1, r2
 8011920:	4618      	mov	r0, r3
 8011922:	f000 f929 	bl	8011b78 <_ZN9__gnu_cxxmiIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011926:	4603      	mov	r3, r0
 8011928:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801192e:	4618      	mov	r0, r3
 8011930:	f000 f938 	bl	8011ba4 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj>
 8011934:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801193a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801193c:	6a3b      	ldr	r3, [r7, #32]
 801193e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011940:	69fa      	ldr	r2, [r7, #28]
 8011942:	18d5      	adds	r5, r2, r3
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f7ff fef9 	bl	801173c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 801194a:	4603      	mov	r3, r0
 801194c:	461a      	mov	r2, r3
 801194e:	4629      	mov	r1, r5
 8011950:	4620      	mov	r0, r4
 8011952:	f7ff ffaa 	bl	80118aa <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011956:	2300      	movs	r3, #0
 8011958:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681c      	ldr	r4, [r3, #0]
 801195e:	f107 0308 	add.w	r3, r7, #8
 8011962:	4618      	mov	r0, r3
 8011964:	f7ff ff31 	bl	80117ca <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011968:	4603      	mov	r3, r0
 801196a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	4618      	mov	r0, r3
 8011970:	f000 f92c 	bl	8011bcc <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011974:	4603      	mov	r3, r0
	  __new_finish
 8011976:	69fa      	ldr	r2, [r7, #28]
 8011978:	4629      	mov	r1, r5
 801197a:	4620      	mov	r0, r4
 801197c:	f000 f930 	bl	8011be0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8011980:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	3304      	adds	r3, #4
 8011986:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8011988:	f107 0308 	add.w	r3, r7, #8
 801198c:	4618      	mov	r0, r3
 801198e:	f7ff ff1c 	bl	80117ca <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011992:	4603      	mov	r3, r0
 8011994:	681c      	ldr	r4, [r3, #0]
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	4618      	mov	r0, r3
 801199e:	f000 f915 	bl	8011bcc <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80119a2:	4603      	mov	r3, r0
	  __new_finish
 80119a4:	69ba      	ldr	r2, [r7, #24]
 80119a6:	4629      	mov	r1, r5
 80119a8:	4620      	mov	r0, r4
 80119aa:	f000 f919 	bl	8011be0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 80119ae:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	681c      	ldr	r4, [r3, #0]
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	4618      	mov	r0, r3
 80119bc:	f000 f906 	bl	8011bcc <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80119c0:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80119c2:	461a      	mov	r2, r3
 80119c4:	4629      	mov	r1, r5
 80119c6:	4620      	mov	r0, r4
 80119c8:	f000 f923 	bl	8011c12 <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80119cc:	68f8      	ldr	r0, [r7, #12]
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80119d6:	461a      	mov	r2, r3
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	1ad3      	subs	r3, r2, r3
 80119de:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 80119e0:	461a      	mov	r2, r3
 80119e2:	f000 f924 	bl	8011c2e <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	69fa      	ldr	r2, [r7, #28]
 80119ea:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	69ba      	ldr	r2, [r7, #24]
 80119f0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80119f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f4:	009b      	lsls	r3, r3, #2
 80119f6:	69fa      	ldr	r2, [r7, #28]
 80119f8:	441a      	add	r2, r3
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	609a      	str	r2, [r3, #8]
    }
 80119fe:	bf00      	nop
 8011a00:	3728      	adds	r7, #40	; 0x28
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bdb0      	pop	{r4, r5, r7, pc}
 8011a06:	bf00      	nop
 8011a08:	08018ca4 	.word	0x08018ca4

08011a0c <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
 8011a14:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	601a      	str	r2, [r3, #0]
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	4618      	mov	r0, r3
 8011a22:	370c      	adds	r7, #12
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bc80      	pop	{r7}
 8011a28:	4770      	bx	lr

08011a2a <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8011a2a:	b480      	push	{r7}
 8011a2c:	b083      	sub	sp, #12
 8011a2e:	af00      	add	r7, sp, #0
 8011a30:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	4618      	mov	r0, r3
 8011a36:	370c      	adds	r7, #12
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bc80      	pop	{r7}
 8011a3c:	4770      	bx	lr

08011a3e <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011a3e:	b590      	push	{r4, r7, lr}
 8011a40:	b083      	sub	sp, #12
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	6078      	str	r0, [r7, #4]
 8011a46:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f7ff febe 	bl	80117ca <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	681c      	ldr	r4, [r3, #0]
 8011a52:	6838      	ldr	r0, [r7, #0]
 8011a54:	f7ff feb9 	bl	80117ca <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	429c      	cmp	r4, r3
 8011a5e:	bf14      	ite	ne
 8011a60:	2301      	movne	r3, #1
 8011a62:	2300      	moveq	r3, #0
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	4618      	mov	r0, r3
 8011a68:	370c      	adds	r7, #12
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd90      	pop	{r4, r7, pc}

08011a6e <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 8011a6e:	b590      	push	{r4, r7, lr}
 8011a70:	b085      	sub	sp, #20
 8011a72:	af00      	add	r7, sp, #0
 8011a74:	60f8      	str	r0, [r7, #12]
 8011a76:	60b9      	str	r1, [r7, #8]
 8011a78:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8011a7a:	68f8      	ldr	r0, [r7, #12]
 8011a7c:	f000 f8ea 	bl	8011c54 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8011a80:	4604      	mov	r4, r0
 8011a82:	68b8      	ldr	r0, [r7, #8]
 8011a84:	f000 f8e6 	bl	8011c54 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8011a88:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 8011a8a:	687a      	ldr	r2, [r7, #4]
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f000 f8ea 	bl	8011c68 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8011a94:	4603      	mov	r3, r0
    }
 8011a96:	4618      	mov	r0, r3
 8011a98:	3714      	adds	r7, #20
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd90      	pop	{r4, r7, pc}

08011a9e <_ZNSt16allocator_traitsISaIP12TimerHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b082      	sub	sp, #8
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	6078      	str	r0, [r7, #4]
 8011aa6:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8011aa8:	6839      	ldr	r1, [r7, #0]
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f000 f902 	bl	8011cb4 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE7destroyIS2_EEvPT_>
 8011ab0:	bf00      	nop
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011ab8:	b590      	push	{r4, r7, lr}
 8011aba:	b085      	sub	sp, #20
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f7ff fe39 	bl	801173c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011aca:	4603      	mov	r3, r0
 8011acc:	681c      	ldr	r4, [r3, #0]
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	2004      	movs	r0, #4
 8011ad4:	f7f6 faf4 	bl	80080c0 <_ZnwjPv>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d000      	beq.n	8011ae0 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 8011ade:	601c      	str	r4, [r3, #0]
 8011ae0:	bf00      	nop
 8011ae2:	3714      	adds	r7, #20
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd90      	pop	{r4, r7, pc}

08011ae8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011ae8:	b590      	push	{r4, r7, lr}
 8011aea:	b087      	sub	sp, #28
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011af4:	68f8      	ldr	r0, [r7, #12]
 8011af6:	f000 f8e7 	bl	8011cc8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 8011afa:	4604      	mov	r4, r0
 8011afc:	68f8      	ldr	r0, [r7, #12]
 8011afe:	f7ff fd9e 	bl	801163e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8011b02:	4603      	mov	r3, r0
 8011b04:	1ae2      	subs	r2, r4, r3
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	bf34      	ite	cc
 8011b0c:	2301      	movcc	r3, #1
 8011b0e:	2300      	movcs	r3, #0
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d003      	beq.n	8011b1e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f003 fc92 	bl	8015442 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8011b1e:	68f8      	ldr	r0, [r7, #12]
 8011b20:	f7ff fd8d 	bl	801163e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8011b24:	4604      	mov	r4, r0
 8011b26:	68f8      	ldr	r0, [r7, #12]
 8011b28:	f7ff fd89 	bl	801163e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	613b      	str	r3, [r7, #16]
 8011b30:	f107 0208 	add.w	r2, r7, #8
 8011b34:	f107 0310 	add.w	r3, r7, #16
 8011b38:	4611      	mov	r1, r2
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7f6 febb 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 8011b40:	4603      	mov	r3, r0
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	4423      	add	r3, r4
 8011b46:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011b48:	68f8      	ldr	r0, [r7, #12]
 8011b4a:	f7ff fd78 	bl	801163e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	4293      	cmp	r3, r2
 8011b54:	d306      	bcc.n	8011b64 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 8011b56:	68f8      	ldr	r0, [r7, #12]
 8011b58:	f000 f8b6 	bl	8011cc8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d904      	bls.n	8011b6e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011b64:	68f8      	ldr	r0, [r7, #12]
 8011b66:	f000 f8af 	bl	8011cc8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	e000      	b.n	8011b70 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 8011b6e:	697b      	ldr	r3, [r7, #20]
      }
 8011b70:	4618      	mov	r0, r3
 8011b72:	371c      	adds	r7, #28
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd90      	pop	{r4, r7, pc}

08011b78 <_ZN9__gnu_cxxmiIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011b78:	b590      	push	{r4, r7, lr}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f7ff fe21 	bl	80117ca <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	461c      	mov	r4, r3
 8011b8e:	6838      	ldr	r0, [r7, #0]
 8011b90:	f7ff fe1b 	bl	80117ca <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011b94:	4603      	mov	r3, r0
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	1ae3      	subs	r3, r4, r3
 8011b9a:	109b      	asrs	r3, r3, #2
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd90      	pop	{r4, r7, pc}

08011ba4 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d006      	beq.n	8011bc2 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj+0x1e>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6839      	ldr	r1, [r7, #0]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f000 f896 	bl	8011cea <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8allocateERS2_j>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	e000      	b.n	8011bc4 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj+0x20>
 8011bc2:	2300      	movs	r3, #0
      }
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8011bcc:	b480      	push	{r7}
 8011bce:	b083      	sub	sp, #12
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	370c      	adds	r7, #12
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bc80      	pop	{r7}
 8011bde:	4770      	bx	lr

08011be0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8011be0:	b590      	push	{r4, r7, lr}
 8011be2:	b085      	sub	sp, #20
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	60f8      	str	r0, [r7, #12]
 8011be8:	60b9      	str	r1, [r7, #8]
 8011bea:	607a      	str	r2, [r7, #4]
 8011bec:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8011bee:	68f8      	ldr	r0, [r7, #12]
 8011bf0:	f000 f88a 	bl	8011d08 <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>
 8011bf4:	4604      	mov	r4, r0
 8011bf6:	68b8      	ldr	r0, [r7, #8]
 8011bf8:	f000 f886 	bl	8011d08 <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>
 8011bfc:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	687a      	ldr	r2, [r7, #4]
 8011c02:	4620      	mov	r0, r4
 8011c04:	f000 f88f 	bl	8011d26 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12TimerHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8011c08:	4603      	mov	r3, r0
    }
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3714      	adds	r7, #20
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd90      	pop	{r4, r7, pc}

08011c12 <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8011c12:	b580      	push	{r7, lr}
 8011c14:	b084      	sub	sp, #16
 8011c16:	af00      	add	r7, sp, #0
 8011c18:	60f8      	str	r0, [r7, #12]
 8011c1a:	60b9      	str	r1, [r7, #8]
 8011c1c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8011c1e:	68b9      	ldr	r1, [r7, #8]
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f000 f891 	bl	8011d48 <_ZSt8_DestroyIPP12TimerHandlerEvT_S3_>
    }
 8011c26:	bf00      	nop
 8011c28:	3710      	adds	r7, #16
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}

08011c2e <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8011c2e:	b580      	push	{r7, lr}
 8011c30:	b084      	sub	sp, #16
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	60f8      	str	r0, [r7, #12]
 8011c36:	60b9      	str	r1, [r7, #8]
 8011c38:	607a      	str	r2, [r7, #4]
	if (__p)
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d005      	beq.n	8011c4c <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	687a      	ldr	r2, [r7, #4]
 8011c44:	68b9      	ldr	r1, [r7, #8]
 8011c46:	4618      	mov	r0, r3
 8011c48:	f000 f88b 	bl	8011d62 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE10deallocateERS2_PS1_j>
      }
 8011c4c:	bf00      	nop
 8011c4e:	3710      	adds	r7, #16
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 8011c54:	b480      	push	{r7}
 8011c56:	b083      	sub	sp, #12
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	370c      	adds	r7, #12
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bc80      	pop	{r7}
 8011c66:	4770      	bx	lr

08011c68 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011c68:	b5b0      	push	{r4, r5, r7, lr}
 8011c6a:	b086      	sub	sp, #24
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	60f8      	str	r0, [r7, #12]
 8011c70:	60b9      	str	r1, [r7, #8]
 8011c72:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f000 f883 	bl	8011d80 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	68b8      	ldr	r0, [r7, #8]
 8011c7e:	f000 f87f 	bl	8011d80 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011c82:	4605      	mov	r5, r0
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f000 f87b 	bl	8011d80 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	4629      	mov	r1, r5
 8011c90:	4620      	mov	r0, r4
 8011c92:	f000 f883 	bl	8011d9c <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 8011c96:	4603      	mov	r3, r0
 8011c98:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8011c9a:	f107 0214 	add.w	r2, r7, #20
 8011c9e:	f107 0310 	add.w	r3, r7, #16
 8011ca2:	4611      	mov	r1, r2
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7ff fd81 	bl	80117ac <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011caa:	693b      	ldr	r3, [r7, #16]
    }
 8011cac:	4618      	mov	r0, r3
 8011cae:	3718      	adds	r7, #24
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bdb0      	pop	{r4, r5, r7, pc}

08011cb4 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8011cb4:	b480      	push	{r7}
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	6039      	str	r1, [r7, #0]
 8011cbe:	bf00      	nop
 8011cc0:	370c      	adds	r7, #12
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bc80      	pop	{r7}
 8011cc6:	4770      	bx	lr

08011cc8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b082      	sub	sp, #8
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f000 f880 	bl	8011dd8 <_ZNKSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f000 f870 	bl	8011dc0 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8max_sizeERKS2_>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3708      	adds	r7, #8
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b082      	sub	sp, #8
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
 8011cf2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	6839      	ldr	r1, [r7, #0]
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f000 f877 	bl	8011dec <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	4618      	mov	r0, r3
 8011d02:	3708      	adds	r7, #8
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8011d10:	f107 030c 	add.w	r3, r7, #12
 8011d14:	6879      	ldr	r1, [r7, #4]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f000 f886 	bl	8011e28 <_ZNSt13move_iteratorIPP12TimerHandlerEC1ES2_>
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3710      	adds	r7, #16
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}

08011d26 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12TimerHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8011d26:	b580      	push	{r7, lr}
 8011d28:	b084      	sub	sp, #16
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	60f8      	str	r0, [r7, #12]
 8011d2e:	60b9      	str	r1, [r7, #8]
 8011d30:	607a      	str	r2, [r7, #4]
 8011d32:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8011d34:	687a      	ldr	r2, [r7, #4]
 8011d36:	68b9      	ldr	r1, [r7, #8]
 8011d38:	68f8      	ldr	r0, [r7, #12]
 8011d3a:	f000 f883 	bl	8011e44 <_ZSt18uninitialized_copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	4618      	mov	r0, r3
 8011d42:	3710      	adds	r7, #16
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}

08011d48 <_ZSt8_DestroyIPP12TimerHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8011d52:	6839      	ldr	r1, [r7, #0]
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f000 f887 	bl	8011e68 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12TimerHandlerEEvT_S5_>
    }
 8011d5a:	bf00      	nop
 8011d5c:	3708      	adds	r7, #8
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b084      	sub	sp, #16
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	60f8      	str	r0, [r7, #12]
 8011d6a:	60b9      	str	r1, [r7, #8]
 8011d6c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011d6e:	687a      	ldr	r2, [r7, #4]
 8011d70:	68b9      	ldr	r1, [r7, #8]
 8011d72:	68f8      	ldr	r0, [r7, #12]
 8011d74:	f000 f882 	bl	8011e7c <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE10deallocateEPS2_j>
 8011d78:	bf00      	nop
 8011d7a:	3710      	adds	r7, #16
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8011d88:	1d3b      	adds	r3, r7, #4
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7ff fd1d 	bl	80117ca <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011d90:	4603      	mov	r3, r0
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4618      	mov	r0, r3
 8011d96:	3708      	adds	r7, #8
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}

08011d9c <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b086      	sub	sp, #24
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	60f8      	str	r0, [r7, #12]
 8011da4:	60b9      	str	r1, [r7, #8]
 8011da6:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8011da8:	2301      	movs	r3, #1
 8011daa:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	68b9      	ldr	r1, [r7, #8]
 8011db0:	68f8      	ldr	r0, [r7, #12]
 8011db2:	f000 f870 	bl	8011e96 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_>
 8011db6:	4603      	mov	r3, r0
    }
 8011db8:	4618      	mov	r0, r3
 8011dba:	3718      	adds	r7, #24
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f000 f881 	bl	8011ed0 <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3708      	adds	r7, #8
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}

08011dd8 <_ZNKSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	4618      	mov	r0, r3
 8011de4:	370c      	adds	r7, #12
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bc80      	pop	{r7}
 8011dea:	4770      	bx	lr

08011dec <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8011df8:	68f8      	ldr	r0, [r7, #12]
 8011dfa:	f000 f869 	bl	8011ed0 <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>
 8011dfe:	4602      	mov	r2, r0
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	4293      	cmp	r3, r2
 8011e04:	bf8c      	ite	hi
 8011e06:	2301      	movhi	r3, #1
 8011e08:	2300      	movls	r3, #0
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d001      	beq.n	8011e14 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8011e10:	f003 fb0e 	bl	8015430 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	009b      	lsls	r3, r3, #2
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f003 faeb 	bl	80153f4 <_Znwj>
 8011e1e:	4603      	mov	r3, r0
      }
 8011e20:	4618      	mov	r0, r3
 8011e22:	3710      	adds	r7, #16
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <_ZNSt13move_iteratorIPP12TimerHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 8011e28:	b480      	push	{r7}
 8011e2a:	b083      	sub	sp, #12
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	683a      	ldr	r2, [r7, #0]
 8011e36:	601a      	str	r2, [r3, #0]
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	370c      	adds	r7, #12
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bc80      	pop	{r7}
 8011e42:	4770      	bx	lr

08011e44 <_ZSt18uninitialized_copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b086      	sub	sp, #24
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	60f8      	str	r0, [r7, #12]
 8011e4c:	60b9      	str	r1, [r7, #8]
 8011e4e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8011e50:	2301      	movs	r3, #1
 8011e52:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	68b9      	ldr	r1, [r7, #8]
 8011e58:	68f8      	ldr	r0, [r7, #12]
 8011e5a:	f000 f844 	bl	8011ee6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12TimerHandlerES5_EET0_T_S8_S7_>
 8011e5e:	4603      	mov	r3, r0
    }
 8011e60:	4618      	mov	r0, r3
 8011e62:	3718      	adds	r7, #24
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}

08011e68 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12TimerHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8011e68:	b480      	push	{r7}
 8011e6a:	b083      	sub	sp, #12
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	6039      	str	r1, [r7, #0]
 8011e72:	bf00      	nop
 8011e74:	370c      	adds	r7, #12
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bc80      	pop	{r7}
 8011e7a:	4770      	bx	lr

08011e7c <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	60f8      	str	r0, [r7, #12]
 8011e84:	60b9      	str	r1, [r7, #8]
 8011e86:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8011e88:	68b8      	ldr	r0, [r7, #8]
 8011e8a:	f003 facd 	bl	8015428 <_ZdlPv>
      }
 8011e8e:	bf00      	nop
 8011e90:	3710      	adds	r7, #16
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}

08011e96 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011e96:	b580      	push	{r7, lr}
 8011e98:	b086      	sub	sp, #24
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	60f8      	str	r0, [r7, #12]
 8011e9e:	60b9      	str	r1, [r7, #8]
 8011ea0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011ea2:	68ba      	ldr	r2, [r7, #8]
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	1ad3      	subs	r3, r2, r3
 8011ea8:	109b      	asrs	r3, r3, #2
 8011eaa:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d006      	beq.n	8011ec0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	68f9      	ldr	r1, [r7, #12]
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f005 ff8a 	bl	8017dd4 <memmove>
	  return __result + _Num;
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	009b      	lsls	r3, r3, #2
 8011ec4:	687a      	ldr	r2, [r7, #4]
 8011ec6:	4413      	add	r3, r2
	}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3718      	adds	r7, #24
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8011ed0:	b480      	push	{r7}
 8011ed2:	b083      	sub	sp, #12
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8011ed8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011edc:	4618      	mov	r0, r3
 8011ede:	370c      	adds	r7, #12
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bc80      	pop	{r7}
 8011ee4:	4770      	bx	lr

08011ee6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12TimerHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8011ee6:	b580      	push	{r7, lr}
 8011ee8:	b084      	sub	sp, #16
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	60f8      	str	r0, [r7, #12]
 8011eee:	60b9      	str	r1, [r7, #8]
 8011ef0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	68b9      	ldr	r1, [r7, #8]
 8011ef6:	68f8      	ldr	r0, [r7, #12]
 8011ef8:	f000 f805 	bl	8011f06 <_ZSt4copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>
 8011efc:	4603      	mov	r3, r0
 8011efe:	4618      	mov	r0, r3
 8011f00:	3710      	adds	r7, #16
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}

08011f06 <_ZSt4copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8011f06:	b590      	push	{r4, r7, lr}
 8011f08:	b085      	sub	sp, #20
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	60f8      	str	r0, [r7, #12]
 8011f0e:	60b9      	str	r1, [r7, #8]
 8011f10:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8011f12:	68f8      	ldr	r0, [r7, #12]
 8011f14:	f000 f80f 	bl	8011f36 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8011f18:	4604      	mov	r4, r0
 8011f1a:	68b8      	ldr	r0, [r7, #8]
 8011f1c:	f000 f80b 	bl	8011f36 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8011f20:	4603      	mov	r3, r0
	       __result));
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	4619      	mov	r1, r3
 8011f26:	4620      	mov	r0, r4
 8011f28:	f000 f816 	bl	8011f58 <_ZSt14__copy_move_a2ILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 8011f2c:	4603      	mov	r3, r0
    }
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3714      	adds	r7, #20
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd90      	pop	{r4, r7, pc}

08011f36 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8011f36:	b580      	push	{r7, lr}
 8011f38:	b082      	sub	sp, #8
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8011f3e:	1d3b      	adds	r3, r7, #4
 8011f40:	4618      	mov	r0, r3
 8011f42:	f000 f825 	bl	8011f90 <_ZNKSt13move_iteratorIPP12TimerHandlerE4baseEv>
 8011f46:	4603      	mov	r3, r0
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f000 f82c 	bl	8011fa6 <_ZSt12__miter_baseIPP12TimerHandlerET_S3_>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	4618      	mov	r0, r3
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <_ZSt14__copy_move_a2ILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011f58:	b5b0      	push	{r4, r5, r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	60b9      	str	r1, [r7, #8]
 8011f62:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8011f64:	68f8      	ldr	r0, [r7, #12]
 8011f66:	f000 f828 	bl	8011fba <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8011f6a:	4604      	mov	r4, r0
 8011f6c:	68b8      	ldr	r0, [r7, #8]
 8011f6e:	f000 f824 	bl	8011fba <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8011f72:	4605      	mov	r5, r0
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f000 f820 	bl	8011fba <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8011f7a:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8011f7c:	461a      	mov	r2, r3
 8011f7e:	4629      	mov	r1, r5
 8011f80:	4620      	mov	r0, r4
 8011f82:	f7ff ff0b 	bl	8011d9c <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 8011f86:	4603      	mov	r3, r0
    }
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bdb0      	pop	{r4, r5, r7, pc}

08011f90 <_ZNKSt13move_iteratorIPP12TimerHandlerE4baseEv>:
      base() const
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	370c      	adds	r7, #12
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bc80      	pop	{r7}
 8011fa4:	4770      	bx	lr

08011fa6 <_ZSt12__miter_baseIPP12TimerHandlerET_S3_>:
    __miter_base(_Iterator __it)
 8011fa6:	b480      	push	{r7}
 8011fa8:	b083      	sub	sp, #12
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	370c      	adds	r7, #12
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bc80      	pop	{r7}
 8011fb8:	4770      	bx	lr

08011fba <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>:
    __niter_base(_Iterator __it)
 8011fba:	b480      	push	{r7}
 8011fbc:	b083      	sub	sp, #12
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bc80      	pop	{r7}
 8011fcc:	4770      	bx	lr
	...

08011fd0 <_ZN13UsbHidHandlerC1Ev>:
 */

#include "UsbHidHandler.h"
#include "global_callbacks.h"

UsbHidHandler::UsbHidHandler() {
 8011fd0:	b480      	push	{r7}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	4a04      	ldr	r2, [pc, #16]	; (8011fec <_ZN13UsbHidHandlerC1Ev+0x1c>)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	601a      	str	r2, [r3, #0]
	// Don't auto register. Call registerCallback()
	// There should only be one hid handler for now
}
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	370c      	adds	r7, #12
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bc80      	pop	{r7}
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop
 8011fec:	08018e58 	.word	0x08018e58

08011ff0 <_ZN13UsbHidHandlerD1Ev>:

UsbHidHandler::~UsbHidHandler() {
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	4a04      	ldr	r2, [pc, #16]	; (801200c <_ZN13UsbHidHandlerD1Ev+0x1c>)
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	4618      	mov	r0, r3
 8012002:	370c      	adds	r7, #12
 8012004:	46bd      	mov	sp, r7
 8012006:	bc80      	pop	{r7}
 8012008:	4770      	bx	lr
 801200a:	bf00      	nop
 801200c:	08018e58 	.word	0x08018e58

08012010 <_ZN13UsbHidHandlerD0Ev>:
UsbHidHandler::~UsbHidHandler() {
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
}
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f7ff ffe9 	bl	8011ff0 <_ZN13UsbHidHandlerD1Ev>
 801201e:	2104      	movs	r1, #4
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f003 f9e5 	bl	80153f0 <_ZdlPvj>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4618      	mov	r0, r3
 801202a:	3708      	adds	r7, #8
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}

08012030 <_ZN13UsbHidHandler6hidGetEhtPPh>:



void UsbHidHandler::hidGet(uint8_t id,uint16_t len,uint8_t** return_buf){
 8012030:	b480      	push	{r7}
 8012032:	b085      	sub	sp, #20
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	607b      	str	r3, [r7, #4]
 801203a:	460b      	mov	r3, r1
 801203c:	72fb      	strb	r3, [r7, #11]
 801203e:	4613      	mov	r3, r2
 8012040:	813b      	strh	r3, [r7, #8]

}
 8012042:	bf00      	nop
 8012044:	3714      	adds	r7, #20
 8012046:	46bd      	mov	sp, r7
 8012048:	bc80      	pop	{r7}
 801204a:	4770      	bx	lr

0801204c <_ZN13UsbHidHandler6hidOutEPh>:

void UsbHidHandler::hidOut(uint8_t* report){
 801204c:	b480      	push	{r7}
 801204e:	b083      	sub	sp, #12
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6039      	str	r1, [r7, #0]

}
 8012056:	bf00      	nop
 8012058:	370c      	adds	r7, #12
 801205a:	46bd      	mov	sp, r7
 801205c:	bc80      	pop	{r7}
 801205e:	4770      	bx	lr

08012060 <_ZN13UsbHidHandler19registerHidCallbackEv>:

void UsbHidHandler::registerHidCallback(){
 8012060:	b480      	push	{r7}
 8012062:	b083      	sub	sp, #12
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
	extern UsbHidHandler* globalHidHandler;
	globalHidHandler = this;
 8012068:	4a03      	ldr	r2, [pc, #12]	; (8012078 <_ZN13UsbHidHandler19registerHidCallbackEv+0x18>)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6013      	str	r3, [r2, #0]
}
 801206e:	bf00      	nop
 8012070:	370c      	adds	r7, #12
 8012072:	46bd      	mov	sp, r7
 8012074:	bc80      	pop	{r7}
 8012076:	4770      	bx	lr
 8012078:	20000b84 	.word	0x20000b84

0801207c <HAL_ADC_ConvCpltCallback>:
std::vector<CommandHandler*> cmdHandlers;

volatile uint32_t ADC_BUF[ADC_CHANNELS] = {0};


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 801207c:	b580      	push	{r7, lr}
 801207e:	b086      	sub	sp, #24
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
		for(AdcHandler* c : adcHandlers){
 8012084:	4b17      	ldr	r3, [pc, #92]	; (80120e4 <HAL_ADC_ConvCpltCallback+0x68>)
 8012086:	617b      	str	r3, [r7, #20]
 8012088:	6978      	ldr	r0, [r7, #20]
 801208a:	f7f6 f8dd 	bl	8008248 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 801208e:	4603      	mov	r3, r0
 8012090:	60fb      	str	r3, [r7, #12]
 8012092:	6978      	ldr	r0, [r7, #20]
 8012094:	f7f6 fa02 	bl	800849c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 8012098:	4603      	mov	r3, r0
 801209a:	60bb      	str	r3, [r7, #8]
 801209c:	f107 0208 	add.w	r2, r7, #8
 80120a0:	f107 030c 	add.w	r3, r7, #12
 80120a4:	4611      	mov	r1, r2
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7f6 faaf 	bl	800860a <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d014      	beq.n	80120dc <HAL_ADC_ConvCpltCallback+0x60>
 80120b2:	f107 030c 	add.w	r3, r7, #12
 80120b6:	4618      	mov	r0, r3
 80120b8:	f000 f913 	bl	80122e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 80120bc:	4603      	mov	r3, r0
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	613b      	str	r3, [r7, #16]
			c->adcUpd(ADC_BUF);
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	3308      	adds	r3, #8
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	4907      	ldr	r1, [pc, #28]	; (80120e8 <HAL_ADC_ConvCpltCallback+0x6c>)
 80120cc:	6938      	ldr	r0, [r7, #16]
 80120ce:	4798      	blx	r3
		for(AdcHandler* c : adcHandlers){
 80120d0:	f107 030c 	add.w	r3, r7, #12
 80120d4:	4618      	mov	r0, r3
 80120d6:	f000 f8f5 	bl	80122c4 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEppEv>
 80120da:	e7df      	b.n	801209c <HAL_ADC_ConvCpltCallback+0x20>
		}
}
 80120dc:	bf00      	nop
 80120de:	3718      	adds	r7, #24
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}
 80120e4:	20000b4c 	.word	0x20000b4c
 80120e8:	20000b64 	.word	0x20000b64

080120ec <HAL_TIM_PeriodElapsedCallback>:

std::vector<TimerHandler*> timerHandlers;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b086      	sub	sp, #24
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
	for(TimerHandler* c : timerHandlers){
 80120f4:	4b17      	ldr	r3, [pc, #92]	; (8012154 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80120f6:	617b      	str	r3, [r7, #20]
 80120f8:	6978      	ldr	r0, [r7, #20]
 80120fa:	f7ff fabf 	bl	801167c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 80120fe:	4603      	mov	r3, r0
 8012100:	60fb      	str	r3, [r7, #12]
 8012102:	6978      	ldr	r0, [r7, #20]
 8012104:	f7ff fbe4 	bl	80118d0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 8012108:	4603      	mov	r3, r0
 801210a:	60bb      	str	r3, [r7, #8]
 801210c:	f107 0208 	add.w	r2, r7, #8
 8012110:	f107 030c 	add.w	r3, r7, #12
 8012114:	4611      	mov	r1, r2
 8012116:	4618      	mov	r0, r3
 8012118:	f7ff fc91 	bl	8011a3e <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 801211c:	4603      	mov	r3, r0
 801211e:	2b00      	cmp	r3, #0
 8012120:	d014      	beq.n	801214c <HAL_TIM_PeriodElapsedCallback+0x60>
 8012122:	f107 030c 	add.w	r3, r7, #12
 8012126:	4618      	mov	r0, r3
 8012128:	f000 f902 	bl	8012330 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 801212c:	4603      	mov	r3, r0
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	613b      	str	r3, [r7, #16]
			c->timerElapsed(htim);
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	3308      	adds	r3, #8
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	6879      	ldr	r1, [r7, #4]
 801213c:	6938      	ldr	r0, [r7, #16]
 801213e:	4798      	blx	r3
	for(TimerHandler* c : timerHandlers){
 8012140:	f107 030c 	add.w	r3, r7, #12
 8012144:	4618      	mov	r0, r3
 8012146:	f000 f8e4 	bl	8012312 <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEppEv>
 801214a:	e7df      	b.n	801210c <HAL_TIM_PeriodElapsedCallback+0x20>
		}
}
 801214c:	bf00      	nop
 801214e:	3718      	adds	r7, #24
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}
 8012154:	20000b6c 	.word	0x20000b6c

08012158 <HAL_GPIO_EXTI_Callback>:

std::vector<ExtiHandler*> extiHandlers;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8012158:	b580      	push	{r7, lr}
 801215a:	b086      	sub	sp, #24
 801215c:	af00      	add	r7, sp, #0
 801215e:	4603      	mov	r3, r0
 8012160:	80fb      	strh	r3, [r7, #6]
	for(ExtiHandler* c : extiHandlers){
 8012162:	4b18      	ldr	r3, [pc, #96]	; (80121c4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8012164:	617b      	str	r3, [r7, #20]
 8012166:	6978      	ldr	r0, [r7, #20]
 8012168:	f7f9 f9df 	bl	800b52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 801216c:	4603      	mov	r3, r0
 801216e:	60fb      	str	r3, [r7, #12]
 8012170:	6978      	ldr	r0, [r7, #20]
 8012172:	f7f9 fb04 	bl	800b77e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 8012176:	4603      	mov	r3, r0
 8012178:	60bb      	str	r3, [r7, #8]
 801217a:	f107 0208 	add.w	r2, r7, #8
 801217e:	f107 030c 	add.w	r3, r7, #12
 8012182:	4611      	mov	r1, r2
 8012184:	4618      	mov	r0, r3
 8012186:	f7f9 fbb0 	bl	800b8ea <_ZN9__gnu_cxxneIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d015      	beq.n	80121bc <HAL_GPIO_EXTI_Callback+0x64>
 8012190:	f107 030c 	add.w	r3, r7, #12
 8012194:	4618      	mov	r0, r3
 8012196:	f000 f8f2 	bl	801237e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 801219a:	4603      	mov	r3, r0
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	613b      	str	r3, [r7, #16]
		c->exti(GPIO_Pin);
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	3308      	adds	r3, #8
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	88fa      	ldrh	r2, [r7, #6]
 80121aa:	4611      	mov	r1, r2
 80121ac:	6938      	ldr	r0, [r7, #16]
 80121ae:	4798      	blx	r3
	for(ExtiHandler* c : extiHandlers){
 80121b0:	f107 030c 	add.w	r3, r7, #12
 80121b4:	4618      	mov	r0, r3
 80121b6:	f000 f8d3 	bl	8012360 <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEppEv>
 80121ba:	e7de      	b.n	801217a <HAL_GPIO_EXTI_Callback+0x22>
	}
}
 80121bc:	bf00      	nop
 80121be:	3718      	adds	r7, #24
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	20000b78 	.word	0x20000b78

080121c8 <CDC_Callback>:

void CDC_Callback(uint8_t* Buf, uint32_t *Len){
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //DEBUG
 80121d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80121d6:	4809      	ldr	r0, [pc, #36]	; (80121fc <CDC_Callback+0x34>)
 80121d8:	f7f1 f9cf 	bl	800357a <HAL_GPIO_TogglePin>
	if(mainclass!=nullptr)
 80121dc:	4b08      	ldr	r3, [pc, #32]	; (8012200 <CDC_Callback+0x38>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d006      	beq.n	80121f2 <CDC_Callback+0x2a>
		mainclass->cdcRcv((char*)Buf,Len);
 80121e4:	4b06      	ldr	r3, [pc, #24]	; (8012200 <CDC_Callback+0x38>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	683a      	ldr	r2, [r7, #0]
 80121ea:	6879      	ldr	r1, [r7, #4]
 80121ec:	4618      	mov	r0, r3
 80121ee:	f7fa fca7 	bl	800cb40 <_ZN8FFBWheel6cdcRcvEPcPm>
}
 80121f2:	bf00      	nop
 80121f4:	3708      	adds	r7, #8
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
 80121fa:	bf00      	nop
 80121fc:	40011000 	.word	0x40011000
 8012200:	20000914 	.word	0x20000914

08012204 <USBD_OutEvent_HID>:

UsbHidHandler* globalHidHandler = nullptr;
void USBD_OutEvent_HID(uint8_t* report){
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
	if(globalHidHandler!=nullptr)
 801220c:	4b08      	ldr	r3, [pc, #32]	; (8012230 <USBD_OutEvent_HID+0x2c>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d009      	beq.n	8012228 <USBD_OutEvent_HID+0x24>
			globalHidHandler->hidOut(report);
 8012214:	4b06      	ldr	r3, [pc, #24]	; (8012230 <USBD_OutEvent_HID+0x2c>)
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	4b05      	ldr	r3, [pc, #20]	; (8012230 <USBD_OutEvent_HID+0x2c>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	3308      	adds	r3, #8
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	6879      	ldr	r1, [r7, #4]
 8012224:	4610      	mov	r0, r2
 8012226:	4798      	blx	r3
}
 8012228:	bf00      	nop
 801222a:	3708      	adds	r7, #8
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}
 8012230:	20000b84 	.word	0x20000b84

08012234 <USBD_GetEvent_HID>:
void USBD_GetEvent_HID(uint8_t id,uint16_t len,uint8_t** return_buf){
 8012234:	b590      	push	{r4, r7, lr}
 8012236:	b083      	sub	sp, #12
 8012238:	af00      	add	r7, sp, #0
 801223a:	4603      	mov	r3, r0
 801223c:	603a      	str	r2, [r7, #0]
 801223e:	71fb      	strb	r3, [r7, #7]
 8012240:	460b      	mov	r3, r1
 8012242:	80bb      	strh	r3, [r7, #4]
	if(globalHidHandler!=nullptr)
 8012244:	4b09      	ldr	r3, [pc, #36]	; (801226c <USBD_GetEvent_HID+0x38>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d00a      	beq.n	8012262 <USBD_GetEvent_HID+0x2e>
		globalHidHandler->hidGet(id, len, return_buf);
 801224c:	4b07      	ldr	r3, [pc, #28]	; (801226c <USBD_GetEvent_HID+0x38>)
 801224e:	6818      	ldr	r0, [r3, #0]
 8012250:	4b06      	ldr	r3, [pc, #24]	; (801226c <USBD_GetEvent_HID+0x38>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	330c      	adds	r3, #12
 8012258:	681c      	ldr	r4, [r3, #0]
 801225a:	88ba      	ldrh	r2, [r7, #4]
 801225c:	79f9      	ldrb	r1, [r7, #7]
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	47a0      	blx	r4
}
 8012262:	bf00      	nop
 8012264:	370c      	adds	r7, #12
 8012266:	46bd      	mov	sp, r7
 8012268:	bd90      	pop	{r4, r7, pc}
 801226a:	bf00      	nop
 801226c:	20000b84 	.word	0x20000b84

08012270 <USB_SOF>:

void USB_SOF(){
 8012270:	b580      	push	{r7, lr}
 8012272:	af00      	add	r7, sp, #0
	if(mainclass!=nullptr)
 8012274:	4b05      	ldr	r3, [pc, #20]	; (801228c <USB_SOF+0x1c>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d004      	beq.n	8012286 <USB_SOF+0x16>
		mainclass->SOF();
 801227c:	4b03      	ldr	r3, [pc, #12]	; (801228c <USB_SOF+0x1c>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4618      	mov	r0, r3
 8012282:	f7fa fc8f 	bl	800cba4 <_ZN8FFBWheel3SOFEv>
}
 8012286:	bf00      	nop
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	20000914 	.word	0x20000914

08012290 <_ZNSt6vectorIP10AdcHandlerSaIS1_EEC1Ev>:
      vector()
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	4618      	mov	r0, r3
 801229c:	f000 f886 	bl	80123ac <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EEC1Ev>
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	4618      	mov	r0, r3
 80122a4:	3708      	adds	r7, #8
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <_ZNSt6vectorIP14CommandHandlerSaIS1_EEC1Ev>:
      vector()
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b082      	sub	sp, #8
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f000 f8ac 	bl	8012412 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EEC1Ev>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	4618      	mov	r0, r3
 80122be:	3708      	adds	r7, #8
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80122c4:	b480      	push	{r7}
 80122c6:	b083      	sub	sp, #12
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
	++_M_current;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	1d1a      	adds	r2, r3, #4
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	601a      	str	r2, [r3, #0]
	return *this;
 80122d6:	687b      	ldr	r3, [r7, #4]
      }
 80122d8:	4618      	mov	r0, r3
 80122da:	370c      	adds	r7, #12
 80122dc:	46bd      	mov	sp, r7
 80122de:	bc80      	pop	{r7}
 80122e0:	4770      	bx	lr

080122e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80122e2:	b480      	push	{r7}
 80122e4:	b083      	sub	sp, #12
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	4618      	mov	r0, r3
 80122f0:	370c      	adds	r7, #12
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bc80      	pop	{r7}
 80122f6:	4770      	bx	lr

080122f8 <_ZNSt6vectorIP12TimerHandlerSaIS1_EEC1Ev>:
      vector()
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	4618      	mov	r0, r3
 8012304:	f000 f8b8 	bl	8012478 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EEC1Ev>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	4618      	mov	r0, r3
 801230c:	3708      	adds	r7, #8
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}

08012312 <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8012312:	b480      	push	{r7}
 8012314:	b083      	sub	sp, #12
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
	++_M_current;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	1d1a      	adds	r2, r3, #4
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	601a      	str	r2, [r3, #0]
	return *this;
 8012324:	687b      	ldr	r3, [r7, #4]
      }
 8012326:	4618      	mov	r0, r3
 8012328:	370c      	adds	r7, #12
 801232a:	46bd      	mov	sp, r7
 801232c:	bc80      	pop	{r7}
 801232e:	4770      	bx	lr

08012330 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8012330:	b480      	push	{r7}
 8012332:	b083      	sub	sp, #12
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	4618      	mov	r0, r3
 801233e:	370c      	adds	r7, #12
 8012340:	46bd      	mov	sp, r7
 8012342:	bc80      	pop	{r7}
 8012344:	4770      	bx	lr

08012346 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEC1Ev>:
      vector()
 8012346:	b580      	push	{r7, lr}
 8012348:	b082      	sub	sp, #8
 801234a:	af00      	add	r7, sp, #0
 801234c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4618      	mov	r0, r3
 8012352:	f000 f8c4 	bl	80124de <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EEC1Ev>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	4618      	mov	r0, r3
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8012360:	b480      	push	{r7}
 8012362:	b083      	sub	sp, #12
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
	++_M_current;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	1d1a      	adds	r2, r3, #4
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	601a      	str	r2, [r3, #0]
	return *this;
 8012372:	687b      	ldr	r3, [r7, #4]
      }
 8012374:	4618      	mov	r0, r3
 8012376:	370c      	adds	r7, #12
 8012378:	46bd      	mov	sp, r7
 801237a:	bc80      	pop	{r7}
 801237c:	4770      	bx	lr

0801237e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801237e:	b480      	push	{r7}
 8012380:	b083      	sub	sp, #12
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4618      	mov	r0, r3
 801238c:	370c      	adds	r7, #12
 801238e:	46bd      	mov	sp, r7
 8012390:	bc80      	pop	{r7}
 8012392:	4770      	bx	lr

08012394 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f000 f8da 	bl	8012556 <_ZNSaIP10AdcHandlerED1Ev>
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	4618      	mov	r0, r3
 80123a6:	3708      	adds	r7, #8
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	4618      	mov	r0, r3
 80123b8:	f000 f8b8 	bl	801252c <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implC1Ev>
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	4618      	mov	r0, r3
 80123c0:	3708      	adds	r7, #8
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}

080123c6 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b082      	sub	sp, #8
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6819      	ldr	r1, [r3, #0]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80123d6:	461a      	mov	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	1ad3      	subs	r3, r2, r3
 80123de:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80123e0:	461a      	mov	r2, r3
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f7f6 fa09 	bl	80087fa <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7ff ffd2 	bl	8012394 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implD1Ev>
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	4618      	mov	r0, r3
 80123f4:	3708      	adds	r7, #8
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}

080123fa <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80123fa:	b580      	push	{r7, lr}
 80123fc:	b082      	sub	sp, #8
 80123fe:	af00      	add	r7, sp, #0
 8012400:	6078      	str	r0, [r7, #4]
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f000 f8c8 	bl	8012598 <_ZNSaIP14CommandHandlerED1Ev>
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	4618      	mov	r0, r3
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 8012412:	b580      	push	{r7, lr}
 8012414:	b082      	sub	sp, #8
 8012416:	af00      	add	r7, sp, #0
 8012418:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	4618      	mov	r0, r3
 801241e:	f000 f8a6 	bl	801256e <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implC1Ev>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	4618      	mov	r0, r3
 8012426:	3708      	adds	r7, #8
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6819      	ldr	r1, [r3, #0]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 801243c:	461a      	mov	r2, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	1ad3      	subs	r3, r2, r3
 8012444:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8012446:	461a      	mov	r2, r3
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f7f8 fccc 	bl	800ade6 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	4618      	mov	r0, r3
 8012452:	f7ff ffd2 	bl	80123fa <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implD1Ev>
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	4618      	mov	r0, r3
 801245a:	3708      	adds	r7, #8
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}

08012460 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f000 f8b6 	bl	80125da <_ZNSaIP12TimerHandlerED1Ev>
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	4618      	mov	r0, r3
 8012472:	3708      	adds	r7, #8
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}

08012478 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	4618      	mov	r0, r3
 8012484:	f000 f894 	bl	80125b0 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implC1Ev>
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	4618      	mov	r0, r3
 801248c:	3708      	adds	r7, #8
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8012492:	b580      	push	{r7, lr}
 8012494:	b082      	sub	sp, #8
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6819      	ldr	r1, [r3, #0]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80124a2:	461a      	mov	r2, r3
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	1ad3      	subs	r3, r2, r3
 80124aa:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80124ac:	461a      	mov	r2, r3
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f7ff fbbd 	bl	8011c2e <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7ff ffd2 	bl	8012460 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implD1Ev>
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	4618      	mov	r0, r3
 80124c0:	3708      	adds	r7, #8
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}

080124c6 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80124c6:	b580      	push	{r7, lr}
 80124c8:	b082      	sub	sp, #8
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 f8a4 	bl	801261c <_ZNSaIP11ExtiHandlerED1Ev>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	4618      	mov	r0, r3
 80124d8:	3708      	adds	r7, #8
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}

080124de <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 80124de:	b580      	push	{r7, lr}
 80124e0:	b082      	sub	sp, #8
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	4618      	mov	r0, r3
 80124ea:	f000 f882 	bl	80125f2 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implC1Ev>
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	4618      	mov	r0, r3
 80124f2:	3708      	adds	r7, #8
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b082      	sub	sp, #8
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6819      	ldr	r1, [r3, #0]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8012508:	461a      	mov	r2, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8012512:	461a      	mov	r2, r3
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f7f9 fae0 	bl	800bada <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	4618      	mov	r0, r3
 801251e:	f7ff ffd2 	bl	80124c6 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implD1Ev>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	4618      	mov	r0, r3
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f000 f87d 	bl	8012634 <_ZNSaIP10AdcHandlerEC1Ev>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2200      	movs	r2, #0
 801253e:	601a      	str	r2, [r3, #0]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2200      	movs	r2, #0
 8012544:	605a      	str	r2, [r3, #4]
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2200      	movs	r2, #0
 801254a:	609a      	str	r2, [r3, #8]
	{ }
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	4618      	mov	r0, r3
 8012550:	3708      	adds	r7, #8
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <_ZNSaIP10AdcHandlerED1Ev>:
 8012556:	b580      	push	{r7, lr}
 8012558:	b082      	sub	sp, #8
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f000 f874 	bl	801264c <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerED1Ev>
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	4618      	mov	r0, r3
 8012568:	3708      	adds	r7, #8
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 801256e:	b580      	push	{r7, lr}
 8012570:	b082      	sub	sp, #8
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f000 f872 	bl	8012660 <_ZNSaIP14CommandHandlerEC1Ev>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2200      	movs	r2, #0
 8012580:	601a      	str	r2, [r3, #0]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2200      	movs	r2, #0
 8012586:	605a      	str	r2, [r3, #4]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2200      	movs	r2, #0
 801258c:	609a      	str	r2, [r3, #8]
	{ }
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	4618      	mov	r0, r3
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <_ZNSaIP14CommandHandlerED1Ev>:
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 f869 	bl	8012678 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerED1Ev>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	4618      	mov	r0, r3
 80125aa:	3708      	adds	r7, #8
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f000 f867 	bl	801268c <_ZNSaIP12TimerHandlerEC1Ev>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2200      	movs	r2, #0
 80125c2:	601a      	str	r2, [r3, #0]
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2200      	movs	r2, #0
 80125c8:	605a      	str	r2, [r3, #4]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2200      	movs	r2, #0
 80125ce:	609a      	str	r2, [r3, #8]
	{ }
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	4618      	mov	r0, r3
 80125d4:	3708      	adds	r7, #8
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <_ZNSaIP12TimerHandlerED1Ev>:
 80125da:	b580      	push	{r7, lr}
 80125dc:	b082      	sub	sp, #8
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f000 f85e 	bl	80126a4 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerED1Ev>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4618      	mov	r0, r3
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80125f2:	b580      	push	{r7, lr}
 80125f4:	b082      	sub	sp, #8
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f000 f85c 	bl	80126b8 <_ZNSaIP11ExtiHandlerEC1Ev>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2200      	movs	r2, #0
 8012604:	601a      	str	r2, [r3, #0]
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2200      	movs	r2, #0
 801260a:	605a      	str	r2, [r3, #4]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2200      	movs	r2, #0
 8012610:	609a      	str	r2, [r3, #8]
	{ }
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	4618      	mov	r0, r3
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}

0801261c <_ZNSaIP11ExtiHandlerED1Ev>:
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f000 f853 	bl	80126d0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerED1Ev>
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4618      	mov	r0, r3
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <_ZNSaIP10AdcHandlerEC1Ev>:
      allocator() throw() { }
 8012634:	b580      	push	{r7, lr}
 8012636:	b082      	sub	sp, #8
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 f851 	bl	80126e4 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerEC1Ev>
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	4618      	mov	r0, r3
 8012646:	3708      	adds	r7, #8
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801264c:	b480      	push	{r7}
 801264e:	b083      	sub	sp, #12
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	4618      	mov	r0, r3
 8012658:	370c      	adds	r7, #12
 801265a:	46bd      	mov	sp, r7
 801265c:	bc80      	pop	{r7}
 801265e:	4770      	bx	lr

08012660 <_ZNSaIP14CommandHandlerEC1Ev>:
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f000 f845 	bl	80126f8 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerEC1Ev>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	3708      	adds	r7, #8
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}

08012678 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerED1Ev>:
 8012678:	b480      	push	{r7}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4618      	mov	r0, r3
 8012684:	370c      	adds	r7, #12
 8012686:	46bd      	mov	sp, r7
 8012688:	bc80      	pop	{r7}
 801268a:	4770      	bx	lr

0801268c <_ZNSaIP12TimerHandlerEC1Ev>:
 801268c:	b580      	push	{r7, lr}
 801268e:	b082      	sub	sp, #8
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f000 f839 	bl	801270c <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerEC1Ev>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	4618      	mov	r0, r3
 801269e:	3708      	adds	r7, #8
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerED1Ev>:
 80126a4:	b480      	push	{r7}
 80126a6:	b083      	sub	sp, #12
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	4618      	mov	r0, r3
 80126b0:	370c      	adds	r7, #12
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bc80      	pop	{r7}
 80126b6:	4770      	bx	lr

080126b8 <_ZNSaIP11ExtiHandlerEC1Ev>:
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f000 f82d 	bl	8012720 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerEC1Ev>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	4618      	mov	r0, r3
 80126ca:	3708      	adds	r7, #8
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}

080126d0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerED1Ev>:
 80126d0:	b480      	push	{r7}
 80126d2:	b083      	sub	sp, #12
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	4618      	mov	r0, r3
 80126dc:	370c      	adds	r7, #12
 80126de:	46bd      	mov	sp, r7
 80126e0:	bc80      	pop	{r7}
 80126e2:	4770      	bx	lr

080126e4 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80126e4:	b480      	push	{r7}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	4618      	mov	r0, r3
 80126f0:	370c      	adds	r7, #12
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bc80      	pop	{r7}
 80126f6:	4770      	bx	lr

080126f8 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerEC1Ev>:
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	4618      	mov	r0, r3
 8012704:	370c      	adds	r7, #12
 8012706:	46bd      	mov	sp, r7
 8012708:	bc80      	pop	{r7}
 801270a:	4770      	bx	lr

0801270c <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerEC1Ev>:
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	4618      	mov	r0, r3
 8012718:	370c      	adds	r7, #12
 801271a:	46bd      	mov	sp, r7
 801271c:	bc80      	pop	{r7}
 801271e:	4770      	bx	lr

08012720 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerEC1Ev>:
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	4618      	mov	r0, r3
 801272c:	370c      	adds	r7, #12
 801272e:	46bd      	mov	sp, r7
 8012730:	bc80      	pop	{r7}
 8012732:	4770      	bx	lr

08012734 <_Z41__static_initialization_and_destruction_0ii>:
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2b01      	cmp	r3, #1
 8012742:	d110      	bne.n	8012766 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801274a:	4293      	cmp	r3, r2
 801274c:	d10b      	bne.n	8012766 <_Z41__static_initialization_and_destruction_0ii+0x32>
std::vector<AdcHandler*> adcHandlers;
 801274e:	4812      	ldr	r0, [pc, #72]	; (8012798 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8012750:	f7ff fd9e 	bl	8012290 <_ZNSt6vectorIP10AdcHandlerSaIS1_EEC1Ev>
std::vector<CommandHandler*> cmdHandlers;
 8012754:	4811      	ldr	r0, [pc, #68]	; (801279c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012756:	f7ff fda8 	bl	80122aa <_ZNSt6vectorIP14CommandHandlerSaIS1_EEC1Ev>
std::vector<TimerHandler*> timerHandlers;
 801275a:	4811      	ldr	r0, [pc, #68]	; (80127a0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801275c:	f7ff fdcc 	bl	80122f8 <_ZNSt6vectorIP12TimerHandlerSaIS1_EEC1Ev>
std::vector<ExtiHandler*> extiHandlers;
 8012760:	4810      	ldr	r0, [pc, #64]	; (80127a4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8012762:	f7ff fdf0 	bl	8012346 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEC1Ev>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d110      	bne.n	801278e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012772:	4293      	cmp	r3, r2
 8012774:	d10b      	bne.n	801278e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8012776:	480b      	ldr	r0, [pc, #44]	; (80127a4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8012778:	f000 f816 	bl	80127a8 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EED1Ev>
std::vector<TimerHandler*> timerHandlers;
 801277c:	4808      	ldr	r0, [pc, #32]	; (80127a0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801277e:	f000 f82e 	bl	80127de <_ZNSt6vectorIP12TimerHandlerSaIS1_EED1Ev>
std::vector<CommandHandler*> cmdHandlers;
 8012782:	4806      	ldr	r0, [pc, #24]	; (801279c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012784:	f000 f846 	bl	8012814 <_ZNSt6vectorIP14CommandHandlerSaIS1_EED1Ev>
std::vector<AdcHandler*> adcHandlers;
 8012788:	4803      	ldr	r0, [pc, #12]	; (8012798 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801278a:	f000 f85e 	bl	801284a <_ZNSt6vectorIP10AdcHandlerSaIS1_EED1Ev>
}
 801278e:	bf00      	nop
 8012790:	3708      	adds	r7, #8
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	20000b4c 	.word	0x20000b4c
 801279c:	20000b58 	.word	0x20000b58
 80127a0:	20000b6c 	.word	0x20000b6c
 80127a4:	20000b78 	.word	0x20000b78

080127a8 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80127a8:	b5b0      	push	{r4, r5, r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681c      	ldr	r4, [r3, #0]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7f9 f95c 	bl	800ba78 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80127c0:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80127c2:	461a      	mov	r2, r3
 80127c4:	4629      	mov	r1, r5
 80127c6:	4620      	mov	r0, r4
 80127c8:	f7f9 f979 	bl	800babe <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	4618      	mov	r0, r3
 80127d0:	f7ff fe92 	bl	80124f8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EED1Ev>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	4618      	mov	r0, r3
 80127d8:	3708      	adds	r7, #8
 80127da:	46bd      	mov	sp, r7
 80127dc:	bdb0      	pop	{r4, r5, r7, pc}

080127de <_ZNSt6vectorIP12TimerHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80127de:	b5b0      	push	{r4, r5, r7, lr}
 80127e0:	b082      	sub	sp, #8
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681c      	ldr	r4, [r3, #0]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7ff f9eb 	bl	8011bcc <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80127f6:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80127f8:	461a      	mov	r2, r3
 80127fa:	4629      	mov	r1, r5
 80127fc:	4620      	mov	r0, r4
 80127fe:	f7ff fa08 	bl	8011c12 <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	4618      	mov	r0, r3
 8012806:	f7ff fe44 	bl	8012492 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EED1Ev>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	4618      	mov	r0, r3
 801280e:	3708      	adds	r7, #8
 8012810:	46bd      	mov	sp, r7
 8012812:	bdb0      	pop	{r4, r5, r7, pc}

08012814 <_ZNSt6vectorIP14CommandHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8012814:	b5b0      	push	{r4, r5, r7, lr}
 8012816:	b082      	sub	sp, #8
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681c      	ldr	r4, [r3, #0]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	4618      	mov	r0, r3
 8012828:	f7f8 faac 	bl	800ad84 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 801282c:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801282e:	461a      	mov	r2, r3
 8012830:	4629      	mov	r1, r5
 8012832:	4620      	mov	r0, r4
 8012834:	f7f8 fac9 	bl	800adca <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	4618      	mov	r0, r3
 801283c:	f7ff fdf6 	bl	801242c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EED1Ev>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	4618      	mov	r0, r3
 8012844:	3708      	adds	r7, #8
 8012846:	46bd      	mov	sp, r7
 8012848:	bdb0      	pop	{r4, r5, r7, pc}

0801284a <_ZNSt6vectorIP10AdcHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801284a:	b5b0      	push	{r4, r5, r7, lr}
 801284c:	b082      	sub	sp, #8
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681c      	ldr	r4, [r3, #0]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	4618      	mov	r0, r3
 801285e:	f7f5 ff9b 	bl	8008798 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8012862:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012864:	461a      	mov	r2, r3
 8012866:	4629      	mov	r1, r5
 8012868:	4620      	mov	r0, r4
 801286a:	f7f5 ffb8 	bl	80087de <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	4618      	mov	r0, r3
 8012872:	f7ff fda8 	bl	80123c6 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EED1Ev>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	4618      	mov	r0, r3
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bdb0      	pop	{r4, r5, r7, pc}

08012880 <_GLOBAL__sub_I_adcHandlers>:
 8012880:	b580      	push	{r7, lr}
 8012882:	af00      	add	r7, sp, #0
 8012884:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012888:	2001      	movs	r0, #1
 801288a:	f7ff ff53 	bl	8012734 <_Z41__static_initialization_and_destruction_0ii>
 801288e:	bd80      	pop	{r7, pc}

08012890 <_GLOBAL__sub_D_adcHandlers>:
 8012890:	b580      	push	{r7, lr}
 8012892:	af00      	add	r7, sp, #0
 8012894:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012898:	2000      	movs	r0, #0
 801289a:	f7ff ff4b 	bl	8012734 <_Z41__static_initialization_and_destruction_0ii>
 801289e:	bd80      	pop	{r7, pc}

080128a0 <_Z11pulseSysLedv>:
#include "ledEffects.h"
#include "main.h"

uint32_t sysledtick=0;

void pulseSysLed(){
 80128a0:	b580      	push	{r7, lr}
 80128a2:	af00      	add	r7, sp, #0
	sysledtick = HAL_GetTick();
 80128a4:	f7ef fc28 	bl	80020f8 <HAL_GetTick>
 80128a8:	4602      	mov	r2, r0
 80128aa:	4b05      	ldr	r3, [pc, #20]	; (80128c0 <_Z11pulseSysLedv+0x20>)
 80128ac:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80128ae:	2201      	movs	r2, #1
 80128b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80128b4:	4803      	ldr	r0, [pc, #12]	; (80128c4 <_Z11pulseSysLedv+0x24>)
 80128b6:	f7f0 fe48 	bl	800354a <HAL_GPIO_WritePin>
}
 80128ba:	bf00      	nop
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	20000b88 	.word	0x20000b88
 80128c4:	40011000 	.word	0x40011000

080128c8 <_Z10updateLedsv>:

void updateLeds(){
 80128c8:	b580      	push	{r7, lr}
 80128ca:	af00      	add	r7, sp, #0
	if(sysledtick!=0 && HAL_GetTick() > sysledtick+35){
 80128cc:	4b0d      	ldr	r3, [pc, #52]	; (8012904 <_Z10updateLedsv+0x3c>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d009      	beq.n	80128e8 <_Z10updateLedsv+0x20>
 80128d4:	f7ef fc10 	bl	80020f8 <HAL_GetTick>
 80128d8:	4602      	mov	r2, r0
 80128da:	4b0a      	ldr	r3, [pc, #40]	; (8012904 <_Z10updateLedsv+0x3c>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	3323      	adds	r3, #35	; 0x23
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d901      	bls.n	80128e8 <_Z10updateLedsv+0x20>
 80128e4:	2301      	movs	r3, #1
 80128e6:	e000      	b.n	80128ea <_Z10updateLedsv+0x22>
 80128e8:	2300      	movs	r3, #0
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d008      	beq.n	8012900 <_Z10updateLedsv+0x38>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80128ee:	2200      	movs	r2, #0
 80128f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80128f4:	4804      	ldr	r0, [pc, #16]	; (8012908 <_Z10updateLedsv+0x40>)
 80128f6:	f7f0 fe28 	bl	800354a <HAL_GPIO_WritePin>
		sysledtick = 0;
 80128fa:	4b02      	ldr	r3, [pc, #8]	; (8012904 <_Z10updateLedsv+0x3c>)
 80128fc:	2200      	movs	r2, #0
 80128fe:	601a      	str	r2, [r3, #0]
	}
}
 8012900:	bf00      	nop
 8012902:	bd80      	pop	{r7, pc}
 8012904:	20000b88 	.word	0x20000b88
 8012908:	40011000 	.word	0x40011000

0801290c <_Z11ws2812_initv>:
		{0, 0, bright},
		{0, 0, bright}
};

void ws2812_init(void)
{
 801290c:	b480      	push	{r7}
 801290e:	b083      	sub	sp, #12
 8012910:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<ARRAY_LEN;i++)
 8012912:	2330      	movs	r3, #48	; 0x30
 8012914:	607b      	str	r3, [r7, #4]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 801291c:	da08      	bge.n	8012930 <_Z11ws2812_initv+0x24>
	  BUF_DMA[i] = LOW;
 801291e:	4a07      	ldr	r2, [pc, #28]	; (801293c <_Z11ws2812_initv+0x30>)
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	211a      	movs	r1, #26
 8012924:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=DELAY_LEN;i<ARRAY_LEN;i++)
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	3301      	adds	r3, #1
 801292c:	607b      	str	r3, [r7, #4]
 801292e:	e7f2      	b.n	8012916 <_Z11ws2812_initv+0xa>
}
 8012930:	bf00      	nop
 8012932:	370c      	adds	r7, #12
 8012934:	46bd      	mov	sp, r7
 8012936:	bc80      	pop	{r7}
 8012938:	4770      	bx	lr
 801293a:	bf00      	nop
 801293c:	20000b8c 	.word	0x20000b8c

08012940 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>:

void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 8012940:	b490      	push	{r4, r7}
 8012942:	b084      	sub	sp, #16
 8012944:	af00      	add	r7, sp, #0
 8012946:	4604      	mov	r4, r0
 8012948:	4608      	mov	r0, r1
 801294a:	4611      	mov	r1, r2
 801294c:	461a      	mov	r2, r3
 801294e:	4623      	mov	r3, r4
 8012950:	71fb      	strb	r3, [r7, #7]
 8012952:	4603      	mov	r3, r0
 8012954:	71bb      	strb	r3, [r7, #6]
 8012956:	460b      	mov	r3, r1
 8012958:	717b      	strb	r3, [r7, #5]
 801295a:	4613      	mov	r3, r2
 801295c:	807b      	strh	r3, [r7, #2]
  for(uint16_t i = 0; i < 8; i++)
 801295e:	2300      	movs	r3, #0
 8012960:	81fb      	strh	r3, [r7, #14]
 8012962:	89fb      	ldrh	r3, [r7, #14]
 8012964:	2b07      	cmp	r3, #7
 8012966:	d850      	bhi.n	8012a0a <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xca>
  {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = BitIsSet(Rpixel,(7-i)) ? HIGH : LOW;
 8012968:	79fa      	ldrb	r2, [r7, #7]
 801296a:	89fb      	ldrh	r3, [r7, #14]
 801296c:	f1c3 0307 	rsb	r3, r3, #7
 8012970:	fa42 f303 	asr.w	r3, r2, r3
 8012974:	f003 0301 	and.w	r3, r3, #1
 8012978:	2b00      	cmp	r3, #0
 801297a:	d001      	beq.n	8012980 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x40>
 801297c:	2141      	movs	r1, #65	; 0x41
 801297e:	e000      	b.n	8012982 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x42>
 8012980:	211a      	movs	r1, #26
 8012982:	887a      	ldrh	r2, [r7, #2]
 8012984:	4613      	mov	r3, r2
 8012986:	005b      	lsls	r3, r3, #1
 8012988:	4413      	add	r3, r2
 801298a:	00db      	lsls	r3, r3, #3
 801298c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012990:	89fb      	ldrh	r3, [r7, #14]
 8012992:	4413      	add	r3, r2
 8012994:	4a1f      	ldr	r2, [pc, #124]	; (8012a14 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 8012996:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      BUF_DMA[DELAY_LEN+posX*24+i+8] = BitIsSet(Gpixel,(7-i)) ? HIGH : LOW;
 801299a:	79ba      	ldrb	r2, [r7, #6]
 801299c:	89fb      	ldrh	r3, [r7, #14]
 801299e:	f1c3 0307 	rsb	r3, r3, #7
 80129a2:	fa42 f303 	asr.w	r3, r2, r3
 80129a6:	f003 0301 	and.w	r3, r3, #1
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d001      	beq.n	80129b2 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x72>
 80129ae:	2141      	movs	r1, #65	; 0x41
 80129b0:	e000      	b.n	80129b4 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x74>
 80129b2:	211a      	movs	r1, #26
 80129b4:	887a      	ldrh	r2, [r7, #2]
 80129b6:	4613      	mov	r3, r2
 80129b8:	005b      	lsls	r3, r3, #1
 80129ba:	4413      	add	r3, r2
 80129bc:	00db      	lsls	r3, r3, #3
 80129be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80129c2:	89fb      	ldrh	r3, [r7, #14]
 80129c4:	4413      	add	r3, r2
 80129c6:	3308      	adds	r3, #8
 80129c8:	4a12      	ldr	r2, [pc, #72]	; (8012a14 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 80129ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      BUF_DMA[DELAY_LEN+posX*24+i+16] = BitIsSet(Bpixel,(7-i)) ? HIGH : LOW;
 80129ce:	797a      	ldrb	r2, [r7, #5]
 80129d0:	89fb      	ldrh	r3, [r7, #14]
 80129d2:	f1c3 0307 	rsb	r3, r3, #7
 80129d6:	fa42 f303 	asr.w	r3, r2, r3
 80129da:	f003 0301 	and.w	r3, r3, #1
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d001      	beq.n	80129e6 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xa6>
 80129e2:	2141      	movs	r1, #65	; 0x41
 80129e4:	e000      	b.n	80129e8 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xa8>
 80129e6:	211a      	movs	r1, #26
 80129e8:	887a      	ldrh	r2, [r7, #2]
 80129ea:	4613      	mov	r3, r2
 80129ec:	005b      	lsls	r3, r3, #1
 80129ee:	4413      	add	r3, r2
 80129f0:	00db      	lsls	r3, r3, #3
 80129f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80129f6:	89fb      	ldrh	r3, [r7, #14]
 80129f8:	4413      	add	r3, r2
 80129fa:	3310      	adds	r3, #16
 80129fc:	4a05      	ldr	r2, [pc, #20]	; (8012a14 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 80129fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint16_t i = 0; i < 8; i++)
 8012a02:	89fb      	ldrh	r3, [r7, #14]
 8012a04:	3301      	adds	r3, #1
 8012a06:	81fb      	strh	r3, [r7, #14]
 8012a08:	e7ab      	b.n	8012962 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x22>
  }
}
 8012a0a:	bf00      	nop
 8012a0c:	3710      	adds	r7, #16
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bc90      	pop	{r4, r7}
 8012a12:	4770      	bx	lr
 8012a14:	20000b8c 	.word	0x20000b8c

08012a18 <_Z16setup_rpm_ws2812h>:

void setup_rpm_ws2812(uint8_t rgb_array)
{
 8012a18:	b590      	push	{r4, r7, lr}
 8012a1a:	b085      	sub	sp, #20
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	4603      	mov	r3, r0
 8012a20:	71fb      	strb	r3, [r7, #7]
	for(uint16_t i = 0; i < LED_COUNT; i++)
 8012a22:	2300      	movs	r3, #0
 8012a24:	81fb      	strh	r3, [r7, #14]
 8012a26:	89fb      	ldrh	r3, [r7, #14]
 8012a28:	2b0f      	cmp	r3, #15
 8012a2a:	d82a      	bhi.n	8012a82 <_Z16setup_rpm_ws2812h+0x6a>
	{
		if(i < rgb_array)
 8012a2c:	79fb      	ldrb	r3, [r7, #7]
 8012a2e:	b29b      	uxth	r3, r3
 8012a30:	89fa      	ldrh	r2, [r7, #14]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d21b      	bcs.n	8012a6e <_Z16setup_rpm_ws2812h+0x56>
			ws2812_pixel_rgb_to_buf_dma(LED_RPM[i].R, LED_RPM[i].G, LED_RPM[i].B, i);
 8012a36:	89fa      	ldrh	r2, [r7, #14]
 8012a38:	4914      	ldr	r1, [pc, #80]	; (8012a8c <_Z16setup_rpm_ws2812h+0x74>)
 8012a3a:	4613      	mov	r3, r2
 8012a3c:	005b      	lsls	r3, r3, #1
 8012a3e:	4413      	add	r3, r2
 8012a40:	440b      	add	r3, r1
 8012a42:	7818      	ldrb	r0, [r3, #0]
 8012a44:	89fa      	ldrh	r2, [r7, #14]
 8012a46:	4911      	ldr	r1, [pc, #68]	; (8012a8c <_Z16setup_rpm_ws2812h+0x74>)
 8012a48:	4613      	mov	r3, r2
 8012a4a:	005b      	lsls	r3, r3, #1
 8012a4c:	4413      	add	r3, r2
 8012a4e:	440b      	add	r3, r1
 8012a50:	3301      	adds	r3, #1
 8012a52:	781c      	ldrb	r4, [r3, #0]
 8012a54:	89fa      	ldrh	r2, [r7, #14]
 8012a56:	490d      	ldr	r1, [pc, #52]	; (8012a8c <_Z16setup_rpm_ws2812h+0x74>)
 8012a58:	4613      	mov	r3, r2
 8012a5a:	005b      	lsls	r3, r3, #1
 8012a5c:	4413      	add	r3, r2
 8012a5e:	440b      	add	r3, r1
 8012a60:	3302      	adds	r3, #2
 8012a62:	781a      	ldrb	r2, [r3, #0]
 8012a64:	89fb      	ldrh	r3, [r7, #14]
 8012a66:	4621      	mov	r1, r4
 8012a68:	f7ff ff6a 	bl	8012940 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
 8012a6c:	e005      	b.n	8012a7a <_Z16setup_rpm_ws2812h+0x62>
		else
			ws2812_pixel_rgb_to_buf_dma(0, 0, 0, i);
 8012a6e:	89fb      	ldrh	r3, [r7, #14]
 8012a70:	2200      	movs	r2, #0
 8012a72:	2100      	movs	r1, #0
 8012a74:	2000      	movs	r0, #0
 8012a76:	f7ff ff63 	bl	8012940 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
	for(uint16_t i = 0; i < LED_COUNT; i++)
 8012a7a:	89fb      	ldrh	r3, [r7, #14]
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	81fb      	strh	r3, [r7, #14]
 8012a80:	e7d1      	b.n	8012a26 <_Z16setup_rpm_ws2812h+0xe>
	}
}
 8012a82:	bf00      	nop
 8012a84:	3714      	adds	r7, #20
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd90      	pop	{r4, r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	2000127c 	.word	0x2000127c

08012a90 <_Z12setup_ws2812P3RGBh>:

void setup_ws2812(RGB* rgb_array, uint8_t size)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	460b      	mov	r3, r1
 8012a9a:	70fb      	strb	r3, [r7, #3]
	for(uint16_t i = 0; i < size; i++)
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	81fb      	strh	r3, [r7, #14]
 8012aa0:	78fb      	ldrb	r3, [r7, #3]
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	89fa      	ldrh	r2, [r7, #14]
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d21b      	bcs.n	8012ae2 <_Z12setup_ws2812P3RGBh+0x52>
	{
		ws2812_pixel_rgb_to_buf_dma(rgb_array[i].R, rgb_array[i].G, rgb_array[i].B, i);
 8012aaa:	89fa      	ldrh	r2, [r7, #14]
 8012aac:	4613      	mov	r3, r2
 8012aae:	005b      	lsls	r3, r3, #1
 8012ab0:	4413      	add	r3, r2
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	7818      	ldrb	r0, [r3, #0]
 8012ab8:	89fa      	ldrh	r2, [r7, #14]
 8012aba:	4613      	mov	r3, r2
 8012abc:	005b      	lsls	r3, r3, #1
 8012abe:	4413      	add	r3, r2
 8012ac0:	687a      	ldr	r2, [r7, #4]
 8012ac2:	4413      	add	r3, r2
 8012ac4:	7859      	ldrb	r1, [r3, #1]
 8012ac6:	89fa      	ldrh	r2, [r7, #14]
 8012ac8:	4613      	mov	r3, r2
 8012aca:	005b      	lsls	r3, r3, #1
 8012acc:	4413      	add	r3, r2
 8012ace:	687a      	ldr	r2, [r7, #4]
 8012ad0:	4413      	add	r3, r2
 8012ad2:	789a      	ldrb	r2, [r3, #2]
 8012ad4:	89fb      	ldrh	r3, [r7, #14]
 8012ad6:	f7ff ff33 	bl	8012940 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
	for(uint16_t i = 0; i < size; i++)
 8012ada:	89fb      	ldrh	r3, [r7, #14]
 8012adc:	3301      	adds	r3, #1
 8012ade:	81fb      	strh	r3, [r7, #14]
 8012ae0:	e7de      	b.n	8012aa0 <_Z12setup_ws2812P3RGBh+0x10>
	}
}
 8012ae2:	bf00      	nop
 8012ae4:	3710      	adds	r7, #16
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
	...

08012aec <_Z41__static_initialization_and_destruction_0ii>:
 8012aec:	b480      	push	{r7}
 8012aee:	b083      	sub	sp, #12
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	d159      	bne.n	8012bb0 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d154      	bne.n	8012bb0 <_Z41__static_initialization_and_destruction_0ii+0xc4>
};
 8012b06:	4b2d      	ldr	r3, [pc, #180]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b08:	781a      	ldrb	r2, [r3, #0]
 8012b0a:	4b2d      	ldr	r3, [pc, #180]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b0c:	705a      	strb	r2, [r3, #1]
 8012b0e:	4b2b      	ldr	r3, [pc, #172]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b10:	781a      	ldrb	r2, [r3, #0]
 8012b12:	4b2b      	ldr	r3, [pc, #172]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b14:	711a      	strb	r2, [r3, #4]
 8012b16:	4b29      	ldr	r3, [pc, #164]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b18:	781a      	ldrb	r2, [r3, #0]
 8012b1a:	4b29      	ldr	r3, [pc, #164]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b1c:	71da      	strb	r2, [r3, #7]
 8012b1e:	4b27      	ldr	r3, [pc, #156]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b20:	781a      	ldrb	r2, [r3, #0]
 8012b22:	4b27      	ldr	r3, [pc, #156]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b24:	729a      	strb	r2, [r3, #10]
 8012b26:	4b25      	ldr	r3, [pc, #148]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b28:	781a      	ldrb	r2, [r3, #0]
 8012b2a:	4b25      	ldr	r3, [pc, #148]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b2c:	731a      	strb	r2, [r3, #12]
 8012b2e:	4b23      	ldr	r3, [pc, #140]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b30:	781a      	ldrb	r2, [r3, #0]
 8012b32:	4b23      	ldr	r3, [pc, #140]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b34:	735a      	strb	r2, [r3, #13]
 8012b36:	4b21      	ldr	r3, [pc, #132]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b38:	781a      	ldrb	r2, [r3, #0]
 8012b3a:	4b21      	ldr	r3, [pc, #132]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b3c:	73da      	strb	r2, [r3, #15]
 8012b3e:	4b1f      	ldr	r3, [pc, #124]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b40:	781a      	ldrb	r2, [r3, #0]
 8012b42:	4b1f      	ldr	r3, [pc, #124]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b44:	741a      	strb	r2, [r3, #16]
 8012b46:	4b1d      	ldr	r3, [pc, #116]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b48:	781a      	ldrb	r2, [r3, #0]
 8012b4a:	4b1d      	ldr	r3, [pc, #116]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b4c:	749a      	strb	r2, [r3, #18]
 8012b4e:	4b1b      	ldr	r3, [pc, #108]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b50:	781a      	ldrb	r2, [r3, #0]
 8012b52:	4b1b      	ldr	r3, [pc, #108]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b54:	74da      	strb	r2, [r3, #19]
 8012b56:	4b19      	ldr	r3, [pc, #100]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b58:	781a      	ldrb	r2, [r3, #0]
 8012b5a:	4b19      	ldr	r3, [pc, #100]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b5c:	755a      	strb	r2, [r3, #21]
 8012b5e:	4b17      	ldr	r3, [pc, #92]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b60:	781a      	ldrb	r2, [r3, #0]
 8012b62:	4b17      	ldr	r3, [pc, #92]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b64:	759a      	strb	r2, [r3, #22]
 8012b66:	4b15      	ldr	r3, [pc, #84]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b68:	781a      	ldrb	r2, [r3, #0]
 8012b6a:	4b15      	ldr	r3, [pc, #84]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b6c:	761a      	strb	r2, [r3, #24]
 8012b6e:	4b13      	ldr	r3, [pc, #76]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b70:	781a      	ldrb	r2, [r3, #0]
 8012b72:	4b13      	ldr	r3, [pc, #76]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b74:	76da      	strb	r2, [r3, #27]
 8012b76:	4b11      	ldr	r3, [pc, #68]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b78:	781a      	ldrb	r2, [r3, #0]
 8012b7a:	4b11      	ldr	r3, [pc, #68]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b7c:	779a      	strb	r2, [r3, #30]
 8012b7e:	4b0f      	ldr	r3, [pc, #60]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b80:	781a      	ldrb	r2, [r3, #0]
 8012b82:	4b0f      	ldr	r3, [pc, #60]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8012b88:	4b0c      	ldr	r3, [pc, #48]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b8a:	781a      	ldrb	r2, [r3, #0]
 8012b8c:	4b0c      	ldr	r3, [pc, #48]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012b92:	4b0a      	ldr	r3, [pc, #40]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b94:	781a      	ldrb	r2, [r3, #0]
 8012b96:	4b0a      	ldr	r3, [pc, #40]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b98:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8012b9c:	4b07      	ldr	r3, [pc, #28]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b9e:	781a      	ldrb	r2, [r3, #0]
 8012ba0:	4b07      	ldr	r3, [pc, #28]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012ba2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012ba6:	4b05      	ldr	r3, [pc, #20]	; (8012bbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012ba8:	781a      	ldrb	r2, [r3, #0]
 8012baa:	4b05      	ldr	r3, [pc, #20]	; (8012bc0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012bac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8012bb0:	bf00      	nop
 8012bb2:	370c      	adds	r7, #12
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bc80      	pop	{r7}
 8012bb8:	4770      	bx	lr
 8012bba:	bf00      	nop
 8012bbc:	2000001c 	.word	0x2000001c
 8012bc0:	2000127c 	.word	0x2000127c

08012bc4 <_GLOBAL__sub_I_BUF_DMA>:
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012bcc:	2001      	movs	r0, #1
 8012bce:	f7ff ff8d 	bl	8012aec <_Z41__static_initialization_and_destruction_0ii>
 8012bd2:	bd80      	pop	{r7, pc}

08012bd4 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	460b      	mov	r3, r1
 8012bde:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8012be0:	2300      	movs	r3, #0
 8012be2:	73fb      	strb	r3, [r7, #15]

  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	7c1b      	ldrb	r3, [r3, #16]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d10c      	bne.n	8012c06 <USBD_CDC_Init+0x32>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8012bec:	2340      	movs	r3, #64	; 0x40
 8012bee:	2202      	movs	r2, #2
 8012bf0:	2181      	movs	r1, #129	; 0x81
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f000 ff1f 	bl	8013a36 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8012bf8:	2340      	movs	r3, #64	; 0x40
 8012bfa:	2202      	movs	r2, #2
 8012bfc:	2101      	movs	r1, #1
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f000 ff19 	bl	8013a36 <USBD_LL_OpenEP>
 8012c04:	e00b      	b.n	8012c1e <USBD_CDC_Init+0x4a>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8012c06:	2340      	movs	r3, #64	; 0x40
 8012c08:	2202      	movs	r2, #2
 8012c0a:	2181      	movs	r1, #129	; 0x81
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f000 ff12 	bl	8013a36 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8012c12:	2340      	movs	r3, #64	; 0x40
 8012c14:	2202      	movs	r2, #2
 8012c16:	2101      	movs	r1, #1
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f000 ff0c 	bl	8013a36 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8012c1e:	2308      	movs	r3, #8
 8012c20:	2203      	movs	r2, #3
 8012c22:	2182      	movs	r1, #130	; 0x82
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f000 ff06 	bl	8013a36 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  hcdc = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8012c2a:	205a      	movs	r0, #90	; 0x5a
 8012c2c:	f005 f89a 	bl	8017d64 <malloc>
 8012c30:	4603      	mov	r3, r0
 8012c32:	461a      	mov	r2, r3
 8012c34:	4b2c      	ldr	r3, [pc, #176]	; (8012ce8 <USBD_CDC_Init+0x114>)
 8012c36:	601a      	str	r2, [r3, #0]
  pdev->pClassData = hcdc;
 8012c38:	4b2b      	ldr	r3, [pc, #172]	; (8012ce8 <USBD_CDC_Init+0x114>)
 8012c3a:	681a      	ldr	r2, [r3, #0]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(hcdc == NULL)
 8012c42:	4b29      	ldr	r3, [pc, #164]	; (8012ce8 <USBD_CDC_Init+0x114>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d102      	bne.n	8012c50 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	73fb      	strb	r3, [r7, #15]
 8012c4e:	e046      	b.n	8012cde <USBD_CDC_Init+0x10a>
  else
  {

    
    /* Init  physical Interface components */
    fops_cdc_p->Init();
 8012c50:	4b26      	ldr	r3, [pc, #152]	; (8012cec <USBD_CDC_Init+0x118>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8012c58:	4b23      	ldr	r3, [pc, #140]	; (8012ce8 <USBD_CDC_Init+0x114>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8012c60:	2200      	movs	r2, #0
 8012c62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8012c66:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8012c70:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8012c74:	2200      	movs	r2, #0
 8012c76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012c7a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8012c7e:	2200      	movs	r2, #0
 8012c80:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    hcdc->RxState =0;
 8012c84:	4b18      	ldr	r3, [pc, #96]	; (8012ce8 <USBD_CDC_Init+0x114>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8012c92:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8012c96:	2200      	movs	r2, #0
 8012c98:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8012c9c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8012ca6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 8012caa:	2200      	movs	r2, #0
 8012cac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	7c1b      	ldrb	r3, [r3, #16]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d109      	bne.n	8012ccc <USBD_CDC_Init+0xf8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 8012cb8:	4b0b      	ldr	r3, [pc, #44]	; (8012ce8 <USBD_CDC_Init+0x114>)
 8012cba:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 8012cbc:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8012cc0:	2340      	movs	r3, #64	; 0x40
 8012cc2:	2101      	movs	r1, #1
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f000 ffa0 	bl	8013c0a <USBD_LL_PrepareReceive>
 8012cca:	e008      	b.n	8012cde <USBD_CDC_Init+0x10a>
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 8012ccc:	4b06      	ldr	r3, [pc, #24]	; (8012ce8 <USBD_CDC_Init+0x114>)
 8012cce:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 8012cd0:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8012cd4:	2340      	movs	r3, #64	; 0x40
 8012cd6:	2101      	movs	r1, #1
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f000 ff96 	bl	8013c0a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8012cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3710      	adds	r7, #16
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	200019b0 	.word	0x200019b0
 8012cec:	200019b4 	.word	0x200019b4

08012cf0 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8012d00:	2181      	movs	r1, #129	; 0x81
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f000 febd 	bl	8013a82 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8012d08:	2101      	movs	r1, #1
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f000 feb9 	bl	8013a82 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8012d10:	2182      	movs	r1, #130	; 0x82
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f000 feb5 	bl	8013a82 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(hcdc != NULL)
 8012d18:	4b0a      	ldr	r3, [pc, #40]	; (8012d44 <USBD_CDC_DeInit+0x54>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d00b      	beq.n	8012d38 <USBD_CDC_DeInit+0x48>
  {
    fops_cdc_p->DeInit();
 8012d20:	4b09      	ldr	r3, [pc, #36]	; (8012d48 <USBD_CDC_DeInit+0x58>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	685b      	ldr	r3, [r3, #4]
 8012d26:	4798      	blx	r3
    USBD_free(hcdc);
 8012d28:	4b06      	ldr	r3, [pc, #24]	; (8012d44 <USBD_CDC_DeInit+0x54>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f005 f821 	bl	8017d74 <free>
    hcdc = NULL;
 8012d32:	4b04      	ldr	r3, [pc, #16]	; (8012d44 <USBD_CDC_DeInit+0x54>)
 8012d34:	2200      	movs	r2, #0
 8012d36:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8012d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3710      	adds	r7, #16
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	200019b0 	.word	0x200019b0
 8012d48:	200019b4 	.word	0x200019b4

08012d4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b082      	sub	sp, #8
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	6039      	str	r1, [r7, #0]

  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d040      	beq.n	8012de4 <USBD_CDC_Setup+0x98>
 8012d62:	2b20      	cmp	r3, #32
 8012d64:	d000      	beq.n	8012d68 <USBD_CDC_Setup+0x1c>
*/
	  break;
    }
 
  default: 
    break;
 8012d66:	e04c      	b.n	8012e02 <USBD_CDC_Setup+0xb6>
    if (req->wLength)
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	88db      	ldrh	r3, [r3, #6]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d030      	beq.n	8012dd2 <USBD_CDC_Setup+0x86>
      if (req->bmRequest & 0x80)
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	b25b      	sxtb	r3, r3
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	da14      	bge.n	8012da4 <USBD_CDC_Setup+0x58>
        fops_cdc_p->Control(req->bRequest, (uint8_t *)hcdc->data,req->wLength);
 8012d7a:	4b25      	ldr	r3, [pc, #148]	; (8012e10 <USBD_CDC_Setup+0xc4>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	689b      	ldr	r3, [r3, #8]
 8012d80:	683a      	ldr	r2, [r7, #0]
 8012d82:	7850      	ldrb	r0, [r2, #1]
 8012d84:	4a23      	ldr	r2, [pc, #140]	; (8012e14 <USBD_CDC_Setup+0xc8>)
 8012d86:	6812      	ldr	r2, [r2, #0]
 8012d88:	4611      	mov	r1, r2
 8012d8a:	683a      	ldr	r2, [r7, #0]
 8012d8c:	88d2      	ldrh	r2, [r2, #6]
 8012d8e:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8012d90:	4b20      	ldr	r3, [pc, #128]	; (8012e14 <USBD_CDC_Setup+0xc8>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4619      	mov	r1, r3
          USBD_CtlSendData (pdev, 
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	88db      	ldrh	r3, [r3, #6]
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f002 faa1 	bl	80152e4 <USBD_CtlSendData>
    break;
 8012da2:	e02f      	b.n	8012e04 <USBD_CDC_Setup+0xb8>
        hcdc->CmdOpCode = req->bRequest;
 8012da4:	4b1b      	ldr	r3, [pc, #108]	; (8012e14 <USBD_CDC_Setup+0xc8>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	683a      	ldr	r2, [r7, #0]
 8012daa:	7852      	ldrb	r2, [r2, #1]
 8012dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hcdc->CmdLength = req->wLength;
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	88da      	ldrh	r2, [r3, #6]
 8012db4:	4b17      	ldr	r3, [pc, #92]	; (8012e14 <USBD_CDC_Setup+0xc8>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	b2d2      	uxtb	r2, r2
 8012dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                           (uint8_t *)hcdc->data,
 8012dbe:	4b15      	ldr	r3, [pc, #84]	; (8012e14 <USBD_CDC_Setup+0xc8>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	4619      	mov	r1, r3
        USBD_CtlPrepareRx (pdev, 
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	88db      	ldrh	r3, [r3, #6]
 8012dc8:	461a      	mov	r2, r3
 8012dca:	6878      	ldr	r0, [r7, #4]
 8012dcc:	f002 fab8 	bl	8015340 <USBD_CtlPrepareRx>
    break;
 8012dd0:	e018      	b.n	8012e04 <USBD_CDC_Setup+0xb8>
      fops_cdc_p->Control(req->bRequest, (uint8_t*)req,0);
 8012dd2:	4b0f      	ldr	r3, [pc, #60]	; (8012e10 <USBD_CDC_Setup+0xc4>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	689b      	ldr	r3, [r3, #8]
 8012dd8:	683a      	ldr	r2, [r7, #0]
 8012dda:	7850      	ldrb	r0, [r2, #1]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	6839      	ldr	r1, [r7, #0]
 8012de0:	4798      	blx	r3
    break;
 8012de2:	e00f      	b.n	8012e04 <USBD_CDC_Setup+0xb8>
    switch (req->bRequest)
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	785b      	ldrb	r3, [r3, #1]
 8012de8:	2b0a      	cmp	r3, #10
 8012dea:	d003      	beq.n	8012df4 <USBD_CDC_Setup+0xa8>
 8012dec:	2b0b      	cmp	r3, #11
 8012dee:	d007      	beq.n	8012e00 <USBD_CDC_Setup+0xb4>
 8012df0:	2b06      	cmp	r3, #6
	  break;
 8012df2:	e006      	b.n	8012e02 <USBD_CDC_Setup+0xb6>
      USBD_CtlSendData (pdev,
 8012df4:	2201      	movs	r2, #1
 8012df6:	4908      	ldr	r1, [pc, #32]	; (8012e18 <USBD_CDC_Setup+0xcc>)
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f002 fa73 	bl	80152e4 <USBD_CtlSendData>
      break;
 8012dfe:	e000      	b.n	8012e02 <USBD_CDC_Setup+0xb6>
      break;
 8012e00:	bf00      	nop
    break;
 8012e02:	bf00      	nop
  }
  return USBD_OK;
 8012e04:	2300      	movs	r3, #0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3708      	adds	r7, #8
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}
 8012e0e:	bf00      	nop
 8012e10:	200019b4 	.word	0x200019b4
 8012e14:	200019b0 	.word	0x200019b0
 8012e18:	200012ac 	.word	0x200012ac

08012e1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012e1c:	b480      	push	{r7}
 8012e1e:	b083      	sub	sp, #12
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	460b      	mov	r3, r1
 8012e26:	70fb      	strb	r3, [r7, #3]

  
  if(hcdc != NULL)
 8012e28:	4b10      	ldr	r3, [pc, #64]	; (8012e6c <USBD_CDC_DataIn+0x50>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d017      	beq.n	8012e60 <USBD_CDC_DataIn+0x44>
  {
    
    hcdc->TxState = 0;
 8012e30:	4b0e      	ldr	r3, [pc, #56]	; (8012e6c <USBD_CDC_DataIn+0x50>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8012e38:	2200      	movs	r2, #0
 8012e3a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8012e3e:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8012e42:	2200      	movs	r2, #0
 8012e44:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8012e48:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012e52:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8012e56:	2200      	movs	r2, #0
 8012e58:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    return USBD_OK;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	e000      	b.n	8012e62 <USBD_CDC_DataIn+0x46>
  }
  else
  {
    return USBD_FAIL;
 8012e60:	2302      	movs	r3, #2
  }
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	370c      	adds	r7, #12
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bc80      	pop	{r7}
 8012e6a:	4770      	bx	lr
 8012e6c:	200019b0 	.word	0x200019b0

08012e70 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8012e70:	b590      	push	{r4, r7, lr}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
 8012e78:	460b      	mov	r3, r1
 8012e7a:	70fb      	strb	r3, [r7, #3]

  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8012e7c:	4b10      	ldr	r3, [pc, #64]	; (8012ec0 <USBD_CDC_DataOut+0x50>)
 8012e7e:	681c      	ldr	r4, [r3, #0]
 8012e80:	78fb      	ldrb	r3, [r7, #3]
 8012e82:	4619      	mov	r1, r3
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f000 fee3 	bl	8013c50 <USBD_LL_GetRxDataSize>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	f8c4 304a 	str.w	r3, [r4, #74]	; 0x4a
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(hcdc != NULL)
 8012e90:	4b0b      	ldr	r3, [pc, #44]	; (8012ec0 <USBD_CDC_DataOut+0x50>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d00d      	beq.n	8012eb4 <USBD_CDC_DataOut+0x44>
  {
    fops_cdc_p->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012e98:	4b0a      	ldr	r3, [pc, #40]	; (8012ec4 <USBD_CDC_DataOut+0x54>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	68db      	ldr	r3, [r3, #12]
 8012e9e:	4a08      	ldr	r2, [pc, #32]	; (8012ec0 <USBD_CDC_DataOut+0x50>)
 8012ea0:	6812      	ldr	r2, [r2, #0]
 8012ea2:	f8d2 0042 	ldr.w	r0, [r2, #66]	; 0x42
 8012ea6:	4a06      	ldr	r2, [pc, #24]	; (8012ec0 <USBD_CDC_DataOut+0x50>)
 8012ea8:	6812      	ldr	r2, [r2, #0]
 8012eaa:	324a      	adds	r2, #74	; 0x4a
 8012eac:	4611      	mov	r1, r2
 8012eae:	4798      	blx	r3

    return USBD_OK;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	e000      	b.n	8012eb6 <USBD_CDC_DataOut+0x46>
  }
  else
  {
    return USBD_FAIL;
 8012eb4:	2302      	movs	r3, #2
  }
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	370c      	adds	r7, #12
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd90      	pop	{r4, r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	200019b0 	.word	0x200019b0
 8012ec4:	200019b4 	.word	0x200019b4

08012ec8 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b082      	sub	sp, #8
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]

  
  if((fops_cdc_p != NULL) && (hcdc->CmdOpCode != 0xFF))
 8012ed0:	4b11      	ldr	r3, [pc, #68]	; (8012f18 <USBD_CDC_EP0_RxReady+0x50>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d01a      	beq.n	8012f0e <USBD_CDC_EP0_RxReady+0x46>
 8012ed8:	4b10      	ldr	r3, [pc, #64]	; (8012f1c <USBD_CDC_EP0_RxReady+0x54>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012ee0:	2bff      	cmp	r3, #255	; 0xff
 8012ee2:	d014      	beq.n	8012f0e <USBD_CDC_EP0_RxReady+0x46>
  {
    fops_cdc_p->Control(hcdc->CmdOpCode,
 8012ee4:	4b0c      	ldr	r3, [pc, #48]	; (8012f18 <USBD_CDC_EP0_RxReady+0x50>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	689b      	ldr	r3, [r3, #8]
 8012eea:	4a0c      	ldr	r2, [pc, #48]	; (8012f1c <USBD_CDC_EP0_RxReady+0x54>)
 8012eec:	6812      	ldr	r2, [r2, #0]
 8012eee:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                      (uint8_t *)hcdc->data,
 8012ef2:	4a0a      	ldr	r2, [pc, #40]	; (8012f1c <USBD_CDC_EP0_RxReady+0x54>)
 8012ef4:	6812      	ldr	r2, [r2, #0]
 8012ef6:	4611      	mov	r1, r2
                                                      hcdc->CmdLength);
 8012ef8:	4a08      	ldr	r2, [pc, #32]	; (8012f1c <USBD_CDC_EP0_RxReady+0x54>)
 8012efa:	6812      	ldr	r2, [r2, #0]
 8012efc:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    fops_cdc_p->Control(hcdc->CmdOpCode,
 8012f00:	b292      	uxth	r2, r2
 8012f02:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8012f04:	4b05      	ldr	r3, [pc, #20]	; (8012f1c <USBD_CDC_EP0_RxReady+0x54>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	22ff      	movs	r2, #255	; 0xff
 8012f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
  }
  return USBD_OK;
 8012f0e:	2300      	movs	r3, #0
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3708      	adds	r7, #8
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	200019b4 	.word	0x200019b4
 8012f1c:	200019b0 	.word	0x200019b0

08012f20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8012f20:	b480      	push	{r7}
 8012f22:	b083      	sub	sp, #12
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	224b      	movs	r2, #75	; 0x4b
 8012f2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8012f2e:	4b03      	ldr	r3, [pc, #12]	; (8012f3c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	370c      	adds	r7, #12
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bc80      	pop	{r7}
 8012f38:	4770      	bx	lr
 8012f3a:	bf00      	nop
 8012f3c:	20000064 	.word	0x20000064

08012f40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8012f40:	b480      	push	{r7}
 8012f42:	b083      	sub	sp, #12
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	224b      	movs	r2, #75	; 0x4b
 8012f4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8012f4e:	4b03      	ldr	r3, [pc, #12]	; (8012f5c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012f50:	4618      	mov	r0, r3
 8012f52:	370c      	adds	r7, #12
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bc80      	pop	{r7}
 8012f58:	4770      	bx	lr
 8012f5a:	bf00      	nop
 8012f5c:	20000064 	.word	0x20000064

08012f60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b083      	sub	sp, #12
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	224b      	movs	r2, #75	; 0x4b
 8012f6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8012f6e:	4b03      	ldr	r3, [pc, #12]	; (8012f7c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012f70:	4618      	mov	r0, r3
 8012f72:	370c      	adds	r7, #12
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bc80      	pop	{r7}
 8012f78:	4770      	bx	lr
 8012f7a:	bf00      	nop
 8012f7c:	20000064 	.word	0x20000064

08012f80 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8012f80:	b480      	push	{r7}
 8012f82:	b083      	sub	sp, #12
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	220a      	movs	r2, #10
 8012f8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8012f8e:	4b03      	ldr	r3, [pc, #12]	; (8012f9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	370c      	adds	r7, #12
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bc80      	pop	{r7}
 8012f98:	4770      	bx	lr
 8012f9a:	bf00      	nop
 8012f9c:	20000020 	.word	0x20000020

08012fa0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b085      	sub	sp, #20
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8012faa:	2302      	movs	r3, #2
 8012fac:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d008      	beq.n	8012fc6 <USBD_CDC_RegisterInterface+0x26>
  {
    fops_cdc_p= fops;
 8012fb4:	4a07      	ldr	r2, [pc, #28]	; (8012fd4 <USBD_CDC_RegisterInterface+0x34>)
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	6013      	str	r3, [r2, #0]
    pdev->pUserData = fops;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	683a      	ldr	r2, [r7, #0]
 8012fbe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8012fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	3714      	adds	r7, #20
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bc80      	pop	{r7}
 8012fd0:	4770      	bx	lr
 8012fd2:	bf00      	nop
 8012fd4:	200019b4 	.word	0x200019b4

08012fd8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8012fd8:	b480      	push	{r7}
 8012fda:	b085      	sub	sp, #20
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	60b9      	str	r1, [r7, #8]
 8012fe2:	4613      	mov	r3, r2
 8012fe4:	80fb      	strh	r3, [r7, #6]

  
  hcdc->TxBuffer = pbuff;
 8012fe6:	4b08      	ldr	r3, [pc, #32]	; (8013008 <USBD_CDC_SetTxBuffer+0x30>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	68ba      	ldr	r2, [r7, #8]
 8012fec:	f8c3 2046 	str.w	r2, [r3, #70]	; 0x46
  hcdc->TxLength = length;  
 8012ff0:	4b05      	ldr	r3, [pc, #20]	; (8013008 <USBD_CDC_SetTxBuffer+0x30>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	88fa      	ldrh	r2, [r7, #6]
 8012ff6:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
  
  return USBD_OK;  
 8012ffa:	2300      	movs	r3, #0
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3714      	adds	r7, #20
 8013000:	46bd      	mov	sp, r7
 8013002:	bc80      	pop	{r7}
 8013004:	4770      	bx	lr
 8013006:	bf00      	nop
 8013008:	200019b0 	.word	0x200019b0

0801300c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 801300c:	b480      	push	{r7}
 801300e:	b083      	sub	sp, #12
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	6039      	str	r1, [r7, #0]
  
  hcdc->RxBuffer = pbuff;
 8013016:	4b05      	ldr	r3, [pc, #20]	; (801302c <USBD_CDC_SetRxBuffer+0x20>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	683a      	ldr	r2, [r7, #0]
 801301c:	f8c3 2042 	str.w	r2, [r3, #66]	; 0x42
  
  return USBD_OK;
 8013020:	2300      	movs	r3, #0
}
 8013022:	4618      	mov	r0, r3
 8013024:	370c      	adds	r7, #12
 8013026:	46bd      	mov	sp, r7
 8013028:	bc80      	pop	{r7}
 801302a:	4770      	bx	lr
 801302c:	200019b0 	.word	0x200019b0

08013030 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8013030:	b580      	push	{r7, lr}
 8013032:	b082      	sub	sp, #8
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]

  if(hcdc != NULL)
 8013038:	4b1b      	ldr	r3, [pc, #108]	; (80130a8 <USBD_CDC_TransmitPacket+0x78>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d02e      	beq.n	801309e <USBD_CDC_TransmitPacket+0x6e>
  {
    if(hcdc->TxState == 0)
 8013040:	4b19      	ldr	r3, [pc, #100]	; (80130a8 <USBD_CDC_TransmitPacket+0x78>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	f8d3 3052 	ldr.w	r3, [r3, #82]	; 0x52
 8013048:	2b00      	cmp	r3, #0
 801304a:	d126      	bne.n	801309a <USBD_CDC_TransmitPacket+0x6a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 801304c:	4b16      	ldr	r3, [pc, #88]	; (80130a8 <USBD_CDC_TransmitPacket+0x78>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8013054:	2200      	movs	r2, #0
 8013056:	f042 0201 	orr.w	r2, r2, #1
 801305a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 801305e:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8013062:	2200      	movs	r2, #0
 8013064:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8013068:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 801306c:	2200      	movs	r2, #0
 801306e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8013072:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8013076:	2200      	movs	r2, #0
 8013078:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
                       CDC_IN_EP,
                       hcdc->TxBuffer,
 801307c:	4b0a      	ldr	r3, [pc, #40]	; (80130a8 <USBD_CDC_TransmitPacket+0x78>)
 801307e:	681b      	ldr	r3, [r3, #0]
      USBD_LL_Transmit(pdev,
 8013080:	f8d3 2046 	ldr.w	r2, [r3, #70]	; 0x46
                       hcdc->TxLength);
 8013084:	4b08      	ldr	r3, [pc, #32]	; (80130a8 <USBD_CDC_TransmitPacket+0x78>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	f8d3 304e 	ldr.w	r3, [r3, #78]	; 0x4e
      USBD_LL_Transmit(pdev,
 801308c:	b29b      	uxth	r3, r3
 801308e:	2181      	movs	r1, #129	; 0x81
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f000 fd97 	bl	8013bc4 <USBD_LL_Transmit>
      
      return USBD_OK;
 8013096:	2300      	movs	r3, #0
 8013098:	e002      	b.n	80130a0 <USBD_CDC_TransmitPacket+0x70>
    }
    else
    {

      return USBD_BUSY;
 801309a:	2301      	movs	r3, #1
 801309c:	e000      	b.n	80130a0 <USBD_CDC_TransmitPacket+0x70>
    }
  }
  else
  {
    return USBD_FAIL;
 801309e:	2302      	movs	r3, #2
  }
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3708      	adds	r7, #8
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}
 80130a8:	200019b0 	.word	0x200019b0

080130ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]

  
  /* Suspend or Resume USB Out process */
  if(hcdc != NULL)
 80130b4:	4b10      	ldr	r3, [pc, #64]	; (80130f8 <USBD_CDC_ReceivePacket+0x4c>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d018      	beq.n	80130ee <USBD_CDC_ReceivePacket+0x42>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	7c1b      	ldrb	r3, [r3, #16]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d109      	bne.n	80130d8 <USBD_CDC_ReceivePacket+0x2c>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 80130c4:	4b0c      	ldr	r3, [pc, #48]	; (80130f8 <USBD_CDC_ReceivePacket+0x4c>)
 80130c6:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 80130c8:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 80130cc:	2340      	movs	r3, #64	; 0x40
 80130ce:	2101      	movs	r1, #1
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f000 fd9a 	bl	8013c0a <USBD_LL_PrepareReceive>
 80130d6:	e008      	b.n	80130ea <USBD_CDC_ReceivePacket+0x3e>
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 80130d8:	4b07      	ldr	r3, [pc, #28]	; (80130f8 <USBD_CDC_ReceivePacket+0x4c>)
 80130da:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 80130dc:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 80130e0:	2340      	movs	r3, #64	; 0x40
 80130e2:	2101      	movs	r1, #1
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 fd90 	bl	8013c0a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80130ea:	2300      	movs	r3, #0
 80130ec:	e000      	b.n	80130f0 <USBD_CDC_ReceivePacket+0x44>
  }
  else
  {
    return USBD_FAIL;
 80130ee:	2302      	movs	r3, #2
  }
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3708      	adds	r7, #8
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}
 80130f8:	200019b0 	.word	0x200019b0

080130fc <CDC_Init_FS>:
  CDC_Receive_FS
};


static int8_t CDC_Init_FS(void)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013100:	2200      	movs	r2, #0
 8013102:	4905      	ldr	r1, [pc, #20]	; (8013118 <CDC_Init_FS+0x1c>)
 8013104:	4805      	ldr	r0, [pc, #20]	; (801311c <CDC_Init_FS+0x20>)
 8013106:	f7ff ff67 	bl	8012fd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801310a:	4905      	ldr	r1, [pc, #20]	; (8013120 <CDC_Init_FS+0x24>)
 801310c:	4803      	ldr	r0, [pc, #12]	; (801311c <CDC_Init_FS+0x20>)
 801310e:	f7ff ff7d 	bl	801300c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013112:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013114:	4618      	mov	r0, r3
 8013116:	bd80      	pop	{r7, pc}
 8013118:	200012f0 	.word	0x200012f0
 801311c:	20000918 	.word	0x20000918
 8013120:	200012b0 	.word	0x200012b0

08013124 <CDC_DeInit_FS>:


static int8_t CDC_DeInit_FS(void)
{
 8013124:	b480      	push	{r7}
 8013126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013128:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801312a:	4618      	mov	r0, r3
 801312c:	46bd      	mov	sp, r7
 801312e:	bc80      	pop	{r7}
 8013130:	4770      	bx	lr
	...

08013134 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013134:	b480      	push	{r7}
 8013136:	b085      	sub	sp, #20
 8013138:	af00      	add	r7, sp, #0
 801313a:	4603      	mov	r3, r0
 801313c:	6039      	str	r1, [r7, #0]
 801313e:	71fb      	strb	r3, [r7, #7]
 8013140:	4613      	mov	r3, r2
 8013142:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013144:	79fb      	ldrb	r3, [r7, #7]
 8013146:	2b23      	cmp	r3, #35	; 0x23
 8013148:	d867      	bhi.n	801321a <CDC_Control_FS+0xe6>
 801314a:	a201      	add	r2, pc, #4	; (adr r2, 8013150 <CDC_Control_FS+0x1c>)
 801314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013150:	0801321b 	.word	0x0801321b
 8013154:	0801321b 	.word	0x0801321b
 8013158:	0801321b 	.word	0x0801321b
 801315c:	0801321b 	.word	0x0801321b
 8013160:	0801321b 	.word	0x0801321b
 8013164:	0801321b 	.word	0x0801321b
 8013168:	0801321b 	.word	0x0801321b
 801316c:	0801321b 	.word	0x0801321b
 8013170:	0801321b 	.word	0x0801321b
 8013174:	0801321b 	.word	0x0801321b
 8013178:	0801321b 	.word	0x0801321b
 801317c:	0801321b 	.word	0x0801321b
 8013180:	0801321b 	.word	0x0801321b
 8013184:	0801321b 	.word	0x0801321b
 8013188:	0801321b 	.word	0x0801321b
 801318c:	0801321b 	.word	0x0801321b
 8013190:	0801321b 	.word	0x0801321b
 8013194:	0801321b 	.word	0x0801321b
 8013198:	0801321b 	.word	0x0801321b
 801319c:	0801321b 	.word	0x0801321b
 80131a0:	0801321b 	.word	0x0801321b
 80131a4:	0801321b 	.word	0x0801321b
 80131a8:	0801321b 	.word	0x0801321b
 80131ac:	0801321b 	.word	0x0801321b
 80131b0:	0801321b 	.word	0x0801321b
 80131b4:	0801321b 	.word	0x0801321b
 80131b8:	0801321b 	.word	0x0801321b
 80131bc:	0801321b 	.word	0x0801321b
 80131c0:	0801321b 	.word	0x0801321b
 80131c4:	0801321b 	.word	0x0801321b
 80131c8:	0801321b 	.word	0x0801321b
 80131cc:	0801321b 	.word	0x0801321b
 80131d0:	080131e1 	.word	0x080131e1
 80131d4:	080131f3 	.word	0x080131f3
 80131d8:	08013205 	.word	0x08013205
 80131dc:	0801321b 	.word	0x0801321b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(&line_coding,pbuf,sizeof(USBD_CDC_LineCodingTypeDef));
 80131e0:	4b11      	ldr	r3, [pc, #68]	; (8013228 <CDC_Control_FS+0xf4>)
 80131e2:	683a      	ldr	r2, [r7, #0]
 80131e4:	6811      	ldr	r1, [r2, #0]
 80131e6:	6019      	str	r1, [r3, #0]
 80131e8:	8891      	ldrh	r1, [r2, #4]
 80131ea:	7992      	ldrb	r2, [r2, #6]
 80131ec:	8099      	strh	r1, [r3, #4]
 80131ee:	719a      	strb	r2, [r3, #6]
	break;
 80131f0:	e014      	b.n	801321c <CDC_Control_FS+0xe8>

    case CDC_GET_LINE_CODING:
	    memcpy(pbuf,&line_coding,sizeof(USBD_CDC_LineCodingTypeDef));
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	4a0c      	ldr	r2, [pc, #48]	; (8013228 <CDC_Control_FS+0xf4>)
 80131f6:	6811      	ldr	r1, [r2, #0]
 80131f8:	6019      	str	r1, [r3, #0]
 80131fa:	8891      	ldrh	r1, [r2, #4]
 80131fc:	7992      	ldrb	r2, [r2, #6]
 80131fe:	8099      	strh	r1, [r3, #4]
 8013200:	719a      	strb	r2, [r3, #6]
	break;
 8013202:	e00b      	b.n	801321c <CDC_Control_FS+0xe8>

    case CDC_SET_CONTROL_LINE_STATE:
    {
    	// DTR
    	USBD_SetupReqTypedef* req = (USBD_SetupReqTypedef*)pbuf;
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	60fb      	str	r3, [r7, #12]
    	cdc_dtr = (req->wValue & 0x0001);
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	885b      	ldrh	r3, [r3, #2]
 801320c:	b2db      	uxtb	r3, r3
 801320e:	f003 0301 	and.w	r3, r3, #1
 8013212:	b2da      	uxtb	r2, r3
 8013214:	4b05      	ldr	r3, [pc, #20]	; (801322c <CDC_Control_FS+0xf8>)
 8013216:	701a      	strb	r2, [r3, #0]
    }
    break;
 8013218:	e000      	b.n	801321c <CDC_Control_FS+0xe8>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801321a:	bf00      	nop
  }

  return (USBD_OK);
 801321c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801321e:	4618      	mov	r0, r3
 8013220:	3714      	adds	r7, #20
 8013222:	46bd      	mov	sp, r7
 8013224:	bc80      	pop	{r7}
 8013226:	4770      	bx	lr
 8013228:	200019b8 	.word	0x200019b8
 801322c:	200014f0 	.word	0x200014f0

08013230 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  //memcpy(Buf,UserRxBufferFS, length);
	//_write(0,(char*)UserRxBufferFS,*Len);
  CDC_Callback(Buf, Len);
 801323a:	6839      	ldr	r1, [r7, #0]
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f7fe ffc3 	bl	80121c8 <CDC_Callback>
  //CDC_Transmit_FS(UserRxBufferFS, *Len); //ECHO

	// Prepare next receive
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS); //next buffer
 8013242:	4906      	ldr	r1, [pc, #24]	; (801325c <CDC_Receive_FS+0x2c>)
 8013244:	4806      	ldr	r0, [pc, #24]	; (8013260 <CDC_Receive_FS+0x30>)
 8013246:	f7ff fee1 	bl	801300c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801324a:	4805      	ldr	r0, [pc, #20]	; (8013260 <CDC_Receive_FS+0x30>)
 801324c:	f7ff ff2e 	bl	80130ac <USBD_CDC_ReceivePacket>


  return (USBD_OK);
 8013250:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013252:	4618      	mov	r0, r3
 8013254:	3708      	adds	r7, #8
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	200012b0 	.word	0x200012b0
 8013260:	20000918 	.word	0x20000918

08013264 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(const char* Buf, uint16_t Len)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	460b      	mov	r3, r1
 801326e:	807b      	strh	r3, [r7, #2]

  /* USER CODE BEGIN 7 */
  if(hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8013270:	4b13      	ldr	r3, [pc, #76]	; (80132c0 <CDC_Transmit_FS+0x5c>)
 8013272:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8013276:	2b03      	cmp	r3, #3
 8013278:	d001      	beq.n	801327e <CDC_Transmit_FS+0x1a>
	  return USBD_FAIL;
 801327a:	2302      	movs	r3, #2
 801327c:	e01c      	b.n	80132b8 <CDC_Transmit_FS+0x54>
  uint8_t result = USBD_OK;
 801327e:	2300      	movs	r3, #0
 8013280:	73fb      	strb	r3, [r7, #15]
  uint32_t size = sizeof(uint8_t) * Len;
 8013282:	887b      	ldrh	r3, [r7, #2]
 8013284:	60bb      	str	r3, [r7, #8]
//  uint32_t additional_length = 0;

//  if(hcdc->TxState != 0)
//	  additional_length = hcdc->TxLength;

  size = size < APP_TX_DATA_SIZE ? size : APP_TX_DATA_SIZE;
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801328c:	bf28      	it	cs
 801328e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013292:	60bb      	str	r3, [r7, #8]

  memcpy(UserTxBufferFS, Buf, size);
 8013294:	68ba      	ldr	r2, [r7, #8]
 8013296:	6879      	ldr	r1, [r7, #4]
 8013298:	480a      	ldr	r0, [pc, #40]	; (80132c4 <CDC_Transmit_FS+0x60>)
 801329a:	f004 fd90 	bl	8017dbe <memcpy>


  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, size);
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	461a      	mov	r2, r3
 80132a4:	4907      	ldr	r1, [pc, #28]	; (80132c4 <CDC_Transmit_FS+0x60>)
 80132a6:	4806      	ldr	r0, [pc, #24]	; (80132c0 <CDC_Transmit_FS+0x5c>)
 80132a8:	f7ff fe96 	bl	8012fd8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80132ac:	4804      	ldr	r0, [pc, #16]	; (80132c0 <CDC_Transmit_FS+0x5c>)
 80132ae:	f7ff febf 	bl	8013030 <USBD_CDC_TransmitPacket>
 80132b2:	4603      	mov	r3, r0
 80132b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80132b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3710      	adds	r7, #16
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	20000918 	.word	0x20000918
 80132c4:	200012f0 	.word	0x200012f0

080132c8 <USBD_Composite_IsoINIncomplete>:
uint8_t config_descriptor_buf[CONFIG_DESC_BUF_SIZE];

uint16_t descriptor_size;


static uint8_t USBD_Composite_IsoINIncomplete  (USBD_HandleTypeDef *pdev , uint8_t epnum){
 80132c8:	b480      	push	{r7}
 80132ca:	b083      	sub	sp, #12
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	460b      	mov	r3, r1
 80132d2:	70fb      	strb	r3, [r7, #3]
	return USBD_OK;
 80132d4:	2300      	movs	r3, #0
}
 80132d6:	4618      	mov	r0, r3
 80132d8:	370c      	adds	r7, #12
 80132da:	46bd      	mov	sp, r7
 80132dc:	bc80      	pop	{r7}
 80132de:	4770      	bx	lr

080132e0 <USBD_Composite_IsoOUTIncomplete>:

static uint8_t USBD_Composite_IsoOUTIncomplete  (USBD_HandleTypeDef *pdev , uint8_t epnum){
 80132e0:	b480      	push	{r7}
 80132e2:	b083      	sub	sp, #12
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	460b      	mov	r3, r1
 80132ea:	70fb      	strb	r3, [r7, #3]
	return USBD_OK;
 80132ec:	2300      	movs	r3, #0
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	370c      	adds	r7, #12
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bc80      	pop	{r7}
 80132f6:	4770      	bx	lr

080132f8 <USBD_Composite_SOF>:
static uint8_t  USBD_Composite_SOF (USBD_HandleTypeDef *pdev){
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b084      	sub	sp, #16
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
	for(int cls = 0; cls < classes; cls++) {
 8013300:	2300      	movs	r3, #0
 8013302:	60fb      	str	r3, [r7, #12]
 8013304:	e010      	b.n	8013328 <USBD_Composite_SOF+0x30>
		if(USBD_Classes[cls]->SOF){
 8013306:	4a0e      	ldr	r2, [pc, #56]	; (8013340 <USBD_Composite_SOF+0x48>)
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801330e:	69db      	ldr	r3, [r3, #28]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d006      	beq.n	8013322 <USBD_Composite_SOF+0x2a>
			USBD_Classes[cls]->SOF(pdev);
 8013314:	4a0a      	ldr	r2, [pc, #40]	; (8013340 <USBD_Composite_SOF+0x48>)
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801331c:	69db      	ldr	r3, [r3, #28]
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	4798      	blx	r3
	for(int cls = 0; cls < classes; cls++) {
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	3301      	adds	r3, #1
 8013326:	60fb      	str	r3, [r7, #12]
 8013328:	4b06      	ldr	r3, [pc, #24]	; (8013344 <USBD_Composite_SOF+0x4c>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	429a      	cmp	r2, r3
 8013330:	dbe9      	blt.n	8013306 <USBD_Composite_SOF+0xe>
		}
	}
	USB_SOF();
 8013332:	f7fe ff9d 	bl	8012270 <USB_SOF>
	return USBD_OK;
 8013336:	2300      	movs	r3, #0
}
 8013338:	4618      	mov	r0, r3
 801333a:	3710      	adds	r7, #16
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}
 8013340:	200014f8 	.word	0x200014f8
 8013344:	200014f4 	.word	0x200014f4

08013348 <USBD_Composite_EPIN_To_Class>:

void USBD_Composite_EPIN_To_Class(uint8_t ep,uint8_t classid){
 8013348:	b480      	push	{r7}
 801334a:	b083      	sub	sp, #12
 801334c:	af00      	add	r7, sp, #0
 801334e:	4603      	mov	r3, r0
 8013350:	460a      	mov	r2, r1
 8013352:	71fb      	strb	r3, [r7, #7]
 8013354:	4613      	mov	r3, r2
 8013356:	71bb      	strb	r3, [r7, #6]
	in_endpoint_to_class[ep & 0x7F] = classid;
 8013358:	79fb      	ldrb	r3, [r7, #7]
 801335a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801335e:	79ba      	ldrb	r2, [r7, #6]
 8013360:	4903      	ldr	r1, [pc, #12]	; (8013370 <USBD_Composite_EPIN_To_Class+0x28>)
 8013362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013366:	bf00      	nop
 8013368:	370c      	adds	r7, #12
 801336a:	46bd      	mov	sp, r7
 801336c:	bc80      	pop	{r7}
 801336e:	4770      	bx	lr
 8013370:	20001f60 	.word	0x20001f60

08013374 <USBD_Composite_EPOUT_To_Class>:

void USBD_Composite_EPOUT_To_Class(uint8_t ep,uint8_t classid){
 8013374:	b480      	push	{r7}
 8013376:	b083      	sub	sp, #12
 8013378:	af00      	add	r7, sp, #0
 801337a:	4603      	mov	r3, r0
 801337c:	460a      	mov	r2, r1
 801337e:	71fb      	strb	r3, [r7, #7]
 8013380:	4613      	mov	r3, r2
 8013382:	71bb      	strb	r3, [r7, #6]
	out_endpoint_to_class[ep & 0x7F] = classid;
 8013384:	79fb      	ldrb	r3, [r7, #7]
 8013386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801338a:	79ba      	ldrb	r2, [r7, #6]
 801338c:	4903      	ldr	r1, [pc, #12]	; (801339c <USBD_Composite_EPOUT_To_Class+0x28>)
 801338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013392:	bf00      	nop
 8013394:	370c      	adds	r7, #12
 8013396:	46bd      	mov	sp, r7
 8013398:	bc80      	pop	{r7}
 801339a:	4770      	bx	lr
 801339c:	20001f20 	.word	0x20001f20

080133a0 <USBD_InitCompositeDescriptor>:
void USBD_Composite_Set_Descriptor(uint8_t *descriptor, uint16_t size) {
    config_descriptor = descriptor;
    descriptor_size = size;
}

void USBD_InitCompositeDescriptor(USB_ConfigDescType* base_desc){
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b084      	sub	sp, #16
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0;i<CONFIG_DESC_BUF_SIZE;i++){
 80133a8:	2300      	movs	r3, #0
 80133aa:	81fb      	strh	r3, [r7, #14]
 80133ac:	e006      	b.n	80133bc <USBD_InitCompositeDescriptor+0x1c>
		config_descriptor_buf[i] = 0;
 80133ae:	89fb      	ldrh	r3, [r7, #14]
 80133b0:	4a0b      	ldr	r2, [pc, #44]	; (80133e0 <USBD_InitCompositeDescriptor+0x40>)
 80133b2:	2100      	movs	r1, #0
 80133b4:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0;i<CONFIG_DESC_BUF_SIZE;i++){
 80133b6:	89fb      	ldrh	r3, [r7, #14]
 80133b8:	3301      	adds	r3, #1
 80133ba:	81fb      	strh	r3, [r7, #14]
 80133bc:	89fb      	ldrh	r3, [r7, #14]
 80133be:	2bff      	cmp	r3, #255	; 0xff
 80133c0:	d9f5      	bls.n	80133ae <USBD_InitCompositeDescriptor+0xe>
	}
	memcpy(config_descriptor_buf,base_desc,sizeof(USB_ConfigDescType));
 80133c2:	2209      	movs	r2, #9
 80133c4:	6879      	ldr	r1, [r7, #4]
 80133c6:	4806      	ldr	r0, [pc, #24]	; (80133e0 <USBD_InitCompositeDescriptor+0x40>)
 80133c8:	f004 fcf9 	bl	8017dbe <memcpy>
	descriptor_size = sizeof(USB_ConfigDescType);
 80133cc:	4b05      	ldr	r3, [pc, #20]	; (80133e4 <USBD_InitCompositeDescriptor+0x44>)
 80133ce:	2209      	movs	r2, #9
 80133d0:	801a      	strh	r2, [r3, #0]
	config_descriptor = (uint8_t*)&config_descriptor_buf;
 80133d2:	4b05      	ldr	r3, [pc, #20]	; (80133e8 <USBD_InitCompositeDescriptor+0x48>)
 80133d4:	4a02      	ldr	r2, [pc, #8]	; (80133e0 <USBD_InitCompositeDescriptor+0x40>)
 80133d6:	601a      	str	r2, [r3, #0]
}
 80133d8:	bf00      	nop
 80133da:	3710      	adds	r7, #16
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}
 80133e0:	20001e20 	.word	0x20001e20
 80133e4:	200019c0 	.word	0x200019c0
 80133e8:	200019c4 	.word	0x200019c4

080133ec <USBD_AddToCompositeDescriptor>:

void USBD_AddToCompositeDescriptor(uint8_t* dev, uint16_t len){
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	460b      	mov	r3, r1
 80133f6:	807b      	strh	r3, [r7, #2]
	uint16_t len_base = *dev; // first element contains size of header
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	81fb      	strh	r3, [r7, #14]
	memcpy(&config_descriptor_buf[descriptor_size],dev+len_base,len-len_base);
 80133fe:	4b0e      	ldr	r3, [pc, #56]	; (8013438 <USBD_AddToCompositeDescriptor+0x4c>)
 8013400:	881b      	ldrh	r3, [r3, #0]
 8013402:	461a      	mov	r2, r3
 8013404:	4b0d      	ldr	r3, [pc, #52]	; (801343c <USBD_AddToCompositeDescriptor+0x50>)
 8013406:	18d0      	adds	r0, r2, r3
 8013408:	89fb      	ldrh	r3, [r7, #14]
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	18d1      	adds	r1, r2, r3
 801340e:	887a      	ldrh	r2, [r7, #2]
 8013410:	89fb      	ldrh	r3, [r7, #14]
 8013412:	1ad3      	subs	r3, r2, r3
 8013414:	461a      	mov	r2, r3
 8013416:	f004 fcd2 	bl	8017dbe <memcpy>
	descriptor_size+=len-len_base;
 801341a:	887a      	ldrh	r2, [r7, #2]
 801341c:	89fb      	ldrh	r3, [r7, #14]
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	b29a      	uxth	r2, r3
 8013422:	4b05      	ldr	r3, [pc, #20]	; (8013438 <USBD_AddToCompositeDescriptor+0x4c>)
 8013424:	881b      	ldrh	r3, [r3, #0]
 8013426:	4413      	add	r3, r2
 8013428:	b29a      	uxth	r2, r3
 801342a:	4b03      	ldr	r3, [pc, #12]	; (8013438 <USBD_AddToCompositeDescriptor+0x4c>)
 801342c:	801a      	strh	r2, [r3, #0]
}
 801342e:	bf00      	nop
 8013430:	3710      	adds	r7, #16
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	200019c0 	.word	0x200019c0
 801343c:	20001e20 	.word	0x20001e20

08013440 <USBD_Composite_Set_Classes>:


void USBD_Composite_Set_Classes(USBD_ClassTypeDef* class[],uint8_t num,USB_ConfigDescType* base_desc) {
 8013440:	b580      	push	{r7, lr}
 8013442:	b088      	sub	sp, #32
 8013444:	af00      	add	r7, sp, #0
 8013446:	60f8      	str	r0, [r7, #12]
 8013448:	460b      	mov	r3, r1
 801344a:	607a      	str	r2, [r7, #4]
 801344c:	72fb      	strb	r3, [r7, #11]
	uint16_t size = 0;
 801344e:	2300      	movs	r3, #0
 8013450:	83fb      	strh	r3, [r7, #30]
	// Count length of descriptors
	for(uint8_t i = 0;i<num;i++){
 8013452:	2300      	movs	r3, #0
 8013454:	777b      	strb	r3, [r7, #29]
 8013456:	e018      	b.n	801348a <USBD_Composite_Set_Classes+0x4a>
		uint16_t ts = 0;
 8013458:	2300      	movs	r3, #0
 801345a:	827b      	strh	r3, [r7, #18]
		uint8_t* d = class[i]->GetFSConfigDescriptor(&ts);
 801345c:	7f7b      	ldrb	r3, [r7, #29]
 801345e:	009b      	lsls	r3, r3, #2
 8013460:	68fa      	ldr	r2, [r7, #12]
 8013462:	4413      	add	r3, r2
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013468:	f107 0212 	add.w	r2, r7, #18
 801346c:	4610      	mov	r0, r2
 801346e:	4798      	blx	r3
 8013470:	6178      	str	r0, [r7, #20]
		size += (ts - *d);
 8013472:	8a7a      	ldrh	r2, [r7, #18]
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	b29b      	uxth	r3, r3
 801347a:	1ad3      	subs	r3, r2, r3
 801347c:	b29a      	uxth	r2, r3
 801347e:	8bfb      	ldrh	r3, [r7, #30]
 8013480:	4413      	add	r3, r2
 8013482:	83fb      	strh	r3, [r7, #30]
	for(uint8_t i = 0;i<num;i++){
 8013484:	7f7b      	ldrb	r3, [r7, #29]
 8013486:	3301      	adds	r3, #1
 8013488:	777b      	strb	r3, [r7, #29]
 801348a:	7f7a      	ldrb	r2, [r7, #29]
 801348c:	7afb      	ldrb	r3, [r7, #11]
 801348e:	429a      	cmp	r2, r3
 8013490:	d3e2      	bcc.n	8013458 <USBD_Composite_Set_Classes+0x18>
	}
	// Assign length to base descriptor
	base_desc->wTotalLength = size+sizeof(USB_ConfigDescType);
 8013492:	8bfb      	ldrh	r3, [r7, #30]
 8013494:	3309      	adds	r3, #9
 8013496:	b29a      	uxth	r2, r3
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	805a      	strh	r2, [r3, #2]
	USBD_InitCompositeDescriptor(base_desc);
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f7ff ff7f 	bl	80133a0 <USBD_InitCompositeDescriptor>

	// Copy class descriptors into composite descriptor
	for(uint8_t i = 0;i<num;i++){
 80134a2:	2300      	movs	r3, #0
 80134a4:	773b      	strb	r3, [r7, #28]
 80134a6:	e01c      	b.n	80134e2 <USBD_Composite_Set_Classes+0xa2>
		uint16_t size = 0;
 80134a8:	2300      	movs	r3, #0
 80134aa:	823b      	strh	r3, [r7, #16]
		USBD_Classes[i] = class[i];
 80134ac:	7f3b      	ldrb	r3, [r7, #28]
 80134ae:	009b      	lsls	r3, r3, #2
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	441a      	add	r2, r3
 80134b4:	7f3b      	ldrb	r3, [r7, #28]
 80134b6:	6812      	ldr	r2, [r2, #0]
 80134b8:	490f      	ldr	r1, [pc, #60]	; (80134f8 <USBD_Composite_Set_Classes+0xb8>)
 80134ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		uint8_t* desc = USBD_Classes[i]->GetFSConfigDescriptor(&size);
 80134be:	7f3b      	ldrb	r3, [r7, #28]
 80134c0:	4a0d      	ldr	r2, [pc, #52]	; (80134f8 <USBD_Composite_Set_Classes+0xb8>)
 80134c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134c8:	f107 0210 	add.w	r2, r7, #16
 80134cc:	4610      	mov	r0, r2
 80134ce:	4798      	blx	r3
 80134d0:	61b8      	str	r0, [r7, #24]
		USBD_AddToCompositeDescriptor(desc, size);
 80134d2:	8a3b      	ldrh	r3, [r7, #16]
 80134d4:	4619      	mov	r1, r3
 80134d6:	69b8      	ldr	r0, [r7, #24]
 80134d8:	f7ff ff88 	bl	80133ec <USBD_AddToCompositeDescriptor>
	for(uint8_t i = 0;i<num;i++){
 80134dc:	7f3b      	ldrb	r3, [r7, #28]
 80134de:	3301      	adds	r3, #1
 80134e0:	773b      	strb	r3, [r7, #28]
 80134e2:	7f3a      	ldrb	r2, [r7, #28]
 80134e4:	7afb      	ldrb	r3, [r7, #11]
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d3de      	bcc.n	80134a8 <USBD_Composite_Set_Classes+0x68>
	}

	classes = num;
 80134ea:	7afb      	ldrb	r3, [r7, #11]
 80134ec:	4a03      	ldr	r2, [pc, #12]	; (80134fc <USBD_Composite_Set_Classes+0xbc>)
 80134ee:	6013      	str	r3, [r2, #0]
}
 80134f0:	bf00      	nop
 80134f2:	3720      	adds	r7, #32
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}
 80134f8:	200014f8 	.word	0x200014f8
 80134fc:	200014f4 	.word	0x200014f4

08013500 <USBD_Composite_Init>:

static uint8_t USBD_Composite_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8013500:	b580      	push	{r7, lr}
 8013502:	b084      	sub	sp, #16
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
 8013508:	460b      	mov	r3, r1
 801350a:	70fb      	strb	r3, [r7, #3]
  for(int cls = 0; cls < classes; cls++) {
 801350c:	2300      	movs	r3, #0
 801350e:	60fb      	str	r3, [r7, #12]
 8013510:	e012      	b.n	8013538 <USBD_Composite_Init+0x38>
	  uint8_t ret = USBD_Classes[cls]->Init(pdev, cfgidx);
 8013512:	4a0e      	ldr	r2, [pc, #56]	; (801354c <USBD_Composite_Init+0x4c>)
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	78fa      	ldrb	r2, [r7, #3]
 801351e:	4611      	mov	r1, r2
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	4798      	blx	r3
 8013524:	4603      	mov	r3, r0
 8013526:	72fb      	strb	r3, [r7, #11]
      if (ret != USBD_OK) {
 8013528:	7afb      	ldrb	r3, [r7, #11]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d001      	beq.n	8013532 <USBD_Composite_Init+0x32>
          return USBD_FAIL;
 801352e:	2302      	movs	r3, #2
 8013530:	e008      	b.n	8013544 <USBD_Composite_Init+0x44>
  for(int cls = 0; cls < classes; cls++) {
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	3301      	adds	r3, #1
 8013536:	60fb      	str	r3, [r7, #12]
 8013538:	4b05      	ldr	r3, [pc, #20]	; (8013550 <USBD_Composite_Init+0x50>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	68fa      	ldr	r2, [r7, #12]
 801353e:	429a      	cmp	r2, r3
 8013540:	dbe7      	blt.n	8013512 <USBD_Composite_Init+0x12>
      }

  }

  return USBD_OK;
 8013542:	2300      	movs	r3, #0
}
 8013544:	4618      	mov	r0, r3
 8013546:	3710      	adds	r7, #16
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	200014f8 	.word	0x200014f8
 8013550:	200014f4 	.word	0x200014f4

08013554 <USBD_Composite_DeInit>:

static uint8_t  USBD_Composite_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8013554:	b580      	push	{r7, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	460b      	mov	r3, r1
 801355e:	70fb      	strb	r3, [r7, #3]
  for(int cls = 0; cls < classes; cls++) {
 8013560:	2300      	movs	r3, #0
 8013562:	60fb      	str	r3, [r7, #12]
 8013564:	e012      	b.n	801358c <USBD_Composite_DeInit+0x38>
	  uint8_t ret = USBD_Classes[cls]->DeInit(pdev, cfgidx);
 8013566:	4a0e      	ldr	r2, [pc, #56]	; (80135a0 <USBD_Composite_DeInit+0x4c>)
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801356e:	685b      	ldr	r3, [r3, #4]
 8013570:	78fa      	ldrb	r2, [r7, #3]
 8013572:	4611      	mov	r1, r2
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	4798      	blx	r3
 8013578:	4603      	mov	r3, r0
 801357a:	72fb      	strb	r3, [r7, #11]
      if (ret != USBD_OK) {
 801357c:	7afb      	ldrb	r3, [r7, #11]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d001      	beq.n	8013586 <USBD_Composite_DeInit+0x32>
          return USBD_FAIL;
 8013582:	2302      	movs	r3, #2
 8013584:	e008      	b.n	8013598 <USBD_Composite_DeInit+0x44>
  for(int cls = 0; cls < classes; cls++) {
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	3301      	adds	r3, #1
 801358a:	60fb      	str	r3, [r7, #12]
 801358c:	4b05      	ldr	r3, [pc, #20]	; (80135a4 <USBD_Composite_DeInit+0x50>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	68fa      	ldr	r2, [r7, #12]
 8013592:	429a      	cmp	r2, r3
 8013594:	dbe7      	blt.n	8013566 <USBD_Composite_DeInit+0x12>
      }
  }

  return USBD_OK;
 8013596:	2300      	movs	r3, #0
}
 8013598:	4618      	mov	r0, r3
 801359a:	3710      	adds	r7, #16
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}
 80135a0:	200014f8 	.word	0x200014f8
 80135a4:	200014f4 	.word	0x200014f4

080135a8 <USBD_Composite_Setup>:

static uint8_t USBD_Composite_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	6039      	str	r1, [r7, #0]
  uint8_t idx = interface_to_class[req->wIndex & 0x7F];
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	889b      	ldrh	r3, [r3, #4]
 80135b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135ba:	4a21      	ldr	r2, [pc, #132]	; (8013640 <USBD_Composite_Setup+0x98>)
 80135bc:	5cd3      	ldrb	r3, [r2, r3]
 80135be:	72fb      	strb	r3, [r7, #11]

  switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d00b      	beq.n	80135e4 <USBD_Composite_Setup+0x3c>
 80135cc:	2b20      	cmp	r3, #32
 80135ce:	d132      	bne.n	8013636 <USBD_Composite_Setup+0x8e>
    case USB_REQ_TYPE_CLASS:
    	//TODO Correct class ids?
    	return USBD_Classes[idx]->Setup(pdev, req);
 80135d0:	7afb      	ldrb	r3, [r7, #11]
 80135d2:	4a1c      	ldr	r2, [pc, #112]	; (8013644 <USBD_Composite_Setup+0x9c>)
 80135d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135d8:	689b      	ldr	r3, [r3, #8]
 80135da:	6839      	ldr	r1, [r7, #0]
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	4798      	blx	r3
 80135e0:	4603      	mov	r3, r0
 80135e2:	e029      	b.n	8013638 <USBD_Composite_Setup+0x90>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest) {
 80135e4:	683b      	ldr	r3, [r7, #0]
 80135e6:	785b      	ldrb	r3, [r3, #1]
 80135e8:	2b06      	cmp	r3, #6
 80135ea:	d11a      	bne.n	8013622 <USBD_Composite_Setup+0x7a>

        case USB_REQ_GET_DESCRIPTOR :

          for(int cls = 0; cls < classes; cls++) {
 80135ec:	2300      	movs	r3, #0
 80135ee:	60fb      	str	r3, [r7, #12]
 80135f0:	e011      	b.n	8013616 <USBD_Composite_Setup+0x6e>
        	  uint8_t ret = USBD_Classes[cls]->Setup(pdev, req);
 80135f2:	4a14      	ldr	r2, [pc, #80]	; (8013644 <USBD_Composite_Setup+0x9c>)
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135fa:	689b      	ldr	r3, [r3, #8]
 80135fc:	6839      	ldr	r1, [r7, #0]
 80135fe:	6878      	ldr	r0, [r7, #4]
 8013600:	4798      	blx	r3
 8013602:	4603      	mov	r3, r0
 8013604:	72bb      	strb	r3, [r7, #10]
            if (ret != USBD_OK) {
 8013606:	7abb      	ldrb	r3, [r7, #10]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d001      	beq.n	8013610 <USBD_Composite_Setup+0x68>
              return USBD_FAIL;
 801360c:	2302      	movs	r3, #2
 801360e:	e013      	b.n	8013638 <USBD_Composite_Setup+0x90>
          for(int cls = 0; cls < classes; cls++) {
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	3301      	adds	r3, #1
 8013614:	60fb      	str	r3, [r7, #12]
 8013616:	4b0c      	ldr	r3, [pc, #48]	; (8013648 <USBD_Composite_Setup+0xa0>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	68fa      	ldr	r2, [r7, #12]
 801361c:	429a      	cmp	r2, r3
 801361e:	dbe8      	blt.n	80135f2 <USBD_Composite_Setup+0x4a>
            }
          }

        break;
 8013620:	e009      	b.n	8013636 <USBD_Composite_Setup+0x8e>

		case USB_REQ_GET_INTERFACE :
		case USB_REQ_SET_INTERFACE :
		default:

			return USBD_Classes[idx]->Setup(pdev, req);
 8013622:	7afb      	ldrb	r3, [r7, #11]
 8013624:	4a07      	ldr	r2, [pc, #28]	; (8013644 <USBD_Composite_Setup+0x9c>)
 8013626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801362a:	689b      	ldr	r3, [r3, #8]
 801362c:	6839      	ldr	r1, [r7, #0]
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	4798      	blx	r3
 8013632:	4603      	mov	r3, r0
 8013634:	e000      	b.n	8013638 <USBD_Composite_Setup+0x90>
		  }
  }
  return USBD_OK;
 8013636:	2300      	movs	r3, #0
}
 8013638:	4618      	mov	r0, r3
 801363a:	3710      	adds	r7, #16
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	200000f8 	.word	0x200000f8
 8013644:	200014f8 	.word	0x200014f8
 8013648:	200014f4 	.word	0x200014f4

0801364c <USBD_Composite_DataIn>:

static uint8_t USBD_Composite_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum) {
 801364c:	b580      	push	{r7, lr}
 801364e:	b084      	sub	sp, #16
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	460b      	mov	r3, r1
 8013656:	70fb      	strb	r3, [r7, #3]
  int class_index;

  class_index = in_endpoint_to_class[epnum];
 8013658:	78fb      	ldrb	r3, [r7, #3]
 801365a:	4a0a      	ldr	r2, [pc, #40]	; (8013684 <USBD_Composite_DataIn+0x38>)
 801365c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013660:	60fb      	str	r3, [r7, #12]
  uint8_t ret = USBD_Classes[class_index]->DataIn(pdev, epnum);
 8013662:	4a09      	ldr	r2, [pc, #36]	; (8013688 <USBD_Composite_DataIn+0x3c>)
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801366a:	695b      	ldr	r3, [r3, #20]
 801366c:	78fa      	ldrb	r2, [r7, #3]
 801366e:	4611      	mov	r1, r2
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	4798      	blx	r3
 8013674:	4603      	mov	r3, r0
 8013676:	72fb      	strb	r3, [r7, #11]
  return ret;
 8013678:	7afb      	ldrb	r3, [r7, #11]
}
 801367a:	4618      	mov	r0, r3
 801367c:	3710      	adds	r7, #16
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
 8013682:	bf00      	nop
 8013684:	20001f60 	.word	0x20001f60
 8013688:	200014f8 	.word	0x200014f8

0801368c <USBD_Composite_DataOut>:

static uint8_t USBD_Composite_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum) {
 801368c:	b580      	push	{r7, lr}
 801368e:	b084      	sub	sp, #16
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	460b      	mov	r3, r1
 8013696:	70fb      	strb	r3, [r7, #3]
  int class_index;

  class_index = out_endpoint_to_class[epnum];
 8013698:	78fb      	ldrb	r3, [r7, #3]
 801369a:	4a0a      	ldr	r2, [pc, #40]	; (80136c4 <USBD_Composite_DataOut+0x38>)
 801369c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136a0:	60fb      	str	r3, [r7, #12]

  uint8_t ret = USBD_Classes[class_index]->DataOut(pdev, epnum);
 80136a2:	4a09      	ldr	r2, [pc, #36]	; (80136c8 <USBD_Composite_DataOut+0x3c>)
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136aa:	699b      	ldr	r3, [r3, #24]
 80136ac:	78fa      	ldrb	r2, [r7, #3]
 80136ae:	4611      	mov	r1, r2
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	4798      	blx	r3
 80136b4:	4603      	mov	r3, r0
 80136b6:	72fb      	strb	r3, [r7, #11]
  return ret;
 80136b8:	7afb      	ldrb	r3, [r7, #11]

}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3710      	adds	r7, #16
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}
 80136c2:	bf00      	nop
 80136c4:	20001f20 	.word	0x20001f20
 80136c8:	200014f8 	.word	0x200014f8

080136cc <USBD_Composite_EP0_RxReady>:

static uint8_t USBD_Composite_EP0_RxReady (USBD_HandleTypeDef *pdev) {
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b084      	sub	sp, #16
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
  for(int cls = 0; cls < classes; cls++) {
 80136d4:	2300      	movs	r3, #0
 80136d6:	60fb      	str	r3, [r7, #12]
 80136d8:	e017      	b.n	801370a <USBD_Composite_EP0_RxReady+0x3e>
    if (USBD_Classes[cls]->EP0_RxReady != NULL) {
 80136da:	4a11      	ldr	r2, [pc, #68]	; (8013720 <USBD_Composite_EP0_RxReady+0x54>)
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136e2:	691b      	ldr	r3, [r3, #16]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d00d      	beq.n	8013704 <USBD_Composite_EP0_RxReady+0x38>
    	uint8_t ret = USBD_Classes[cls]->EP0_RxReady(pdev);
 80136e8:	4a0d      	ldr	r2, [pc, #52]	; (8013720 <USBD_Composite_EP0_RxReady+0x54>)
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136f0:	691b      	ldr	r3, [r3, #16]
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	4798      	blx	r3
 80136f6:	4603      	mov	r3, r0
 80136f8:	72fb      	strb	r3, [r7, #11]
        if (ret != USBD_OK) {
 80136fa:	7afb      	ldrb	r3, [r7, #11]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d001      	beq.n	8013704 <USBD_Composite_EP0_RxReady+0x38>
        	return USBD_FAIL;
 8013700:	2302      	movs	r3, #2
 8013702:	e008      	b.n	8013716 <USBD_Composite_EP0_RxReady+0x4a>
  for(int cls = 0; cls < classes; cls++) {
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	3301      	adds	r3, #1
 8013708:	60fb      	str	r3, [r7, #12]
 801370a:	4b06      	ldr	r3, [pc, #24]	; (8013724 <USBD_Composite_EP0_RxReady+0x58>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	68fa      	ldr	r2, [r7, #12]
 8013710:	429a      	cmp	r2, r3
 8013712:	dbe2      	blt.n	80136da <USBD_Composite_EP0_RxReady+0xe>
      }
    }
  }
  return USBD_OK;
 8013714:	2300      	movs	r3, #0
}
 8013716:	4618      	mov	r0, r3
 8013718:	3710      	adds	r7, #16
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}
 801371e:	bf00      	nop
 8013720:	200014f8 	.word	0x200014f8
 8013724:	200014f4 	.word	0x200014f4

08013728 <USBD_Composite_EP0_TxSent>:

static uint8_t USBD_Composite_EP0_TxSent (USBD_HandleTypeDef *pdev){
 8013728:	b480      	push	{r7}
 801372a:	b083      	sub	sp, #12
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
	return USBD_OK;
 8013730:	2300      	movs	r3, #0
}
 8013732:	4618      	mov	r0, r3
 8013734:	370c      	adds	r7, #12
 8013736:	46bd      	mov	sp, r7
 8013738:	bc80      	pop	{r7}
 801373a:	4770      	bx	lr

0801373c <USBD_Composite_GetFSCfgDesc>:

static uint8_t  *USBD_Composite_GetFSCfgDesc (uint16_t *length) {
 801373c:	b480      	push	{r7}
 801373e:	b083      	sub	sp, #12
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 8013744:	4b05      	ldr	r3, [pc, #20]	; (801375c <USBD_Composite_GetFSCfgDesc+0x20>)
 8013746:	881a      	ldrh	r2, [r3, #0]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 801374c:	4b04      	ldr	r3, [pc, #16]	; (8013760 <USBD_Composite_GetFSCfgDesc+0x24>)
 801374e:	681b      	ldr	r3, [r3, #0]
}
 8013750:	4618      	mov	r0, r3
 8013752:	370c      	adds	r7, #12
 8013754:	46bd      	mov	sp, r7
 8013756:	bc80      	pop	{r7}
 8013758:	4770      	bx	lr
 801375a:	bf00      	nop
 801375c:	200019c0 	.word	0x200019c0
 8013760:	200019c4 	.word	0x200019c4

08013764 <USBD_Composite_GetHSCfgDesc>:

static uint8_t  *USBD_Composite_GetHSCfgDesc (uint16_t *length) {
 8013764:	b480      	push	{r7}
 8013766:	b083      	sub	sp, #12
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 801376c:	4b05      	ldr	r3, [pc, #20]	; (8013784 <USBD_Composite_GetHSCfgDesc+0x20>)
 801376e:	881a      	ldrh	r2, [r3, #0]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 8013774:	4b04      	ldr	r3, [pc, #16]	; (8013788 <USBD_Composite_GetHSCfgDesc+0x24>)
 8013776:	681b      	ldr	r3, [r3, #0]
}
 8013778:	4618      	mov	r0, r3
 801377a:	370c      	adds	r7, #12
 801377c:	46bd      	mov	sp, r7
 801377e:	bc80      	pop	{r7}
 8013780:	4770      	bx	lr
 8013782:	bf00      	nop
 8013784:	200019c0 	.word	0x200019c0
 8013788:	200019c4 	.word	0x200019c4

0801378c <USBD_Composite_GetOtherSpeedCfgDesc>:

static uint8_t  *USBD_Composite_GetOtherSpeedCfgDesc (uint16_t *length) {
 801378c:	b480      	push	{r7}
 801378e:	b083      	sub	sp, #12
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 8013794:	4b05      	ldr	r3, [pc, #20]	; (80137ac <USBD_Composite_GetOtherSpeedCfgDesc+0x20>)
 8013796:	881a      	ldrh	r2, [r3, #0]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 801379c:	4b04      	ldr	r3, [pc, #16]	; (80137b0 <USBD_Composite_GetOtherSpeedCfgDesc+0x24>)
 801379e:	681b      	ldr	r3, [r3, #0]
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	370c      	adds	r7, #12
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bc80      	pop	{r7}
 80137a8:	4770      	bx	lr
 80137aa:	bf00      	nop
 80137ac:	200019c0 	.word	0x200019c0
 80137b0:	200019c4 	.word	0x200019c4

080137b4 <USBD_Composite_GetDeviceQualifierDescriptor>:
  0x40,
  0x01,
  0x00,
};

uint8_t  *USBD_Composite_GetDeviceQualifierDescriptor (uint16_t *length) {
 80137b4:	b480      	push	{r7}
 80137b6:	b083      	sub	sp, #12
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Composite_DeviceQualifierDesc);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	220a      	movs	r2, #10
 80137c0:	801a      	strh	r2, [r3, #0]
  return USBD_Composite_DeviceQualifierDesc;
 80137c2:	4b03      	ldr	r3, [pc, #12]	; (80137d0 <USBD_Composite_GetDeviceQualifierDescriptor+0x1c>)
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	370c      	adds	r7, #12
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bc80      	pop	{r7}
 80137cc:	4770      	bx	lr
 80137ce:	bf00      	nop
 80137d0:	20000108 	.word	0x20000108

080137d4 <USBD_Composite_InterfaceToClass>:


void USBD_Composite_InterfaceToClass(uint8_t ifid, uint8_t clsid){
 80137d4:	b480      	push	{r7}
 80137d6:	b083      	sub	sp, #12
 80137d8:	af00      	add	r7, sp, #0
 80137da:	4603      	mov	r3, r0
 80137dc:	460a      	mov	r2, r1
 80137de:	71fb      	strb	r3, [r7, #7]
 80137e0:	4613      	mov	r3, r2
 80137e2:	71bb      	strb	r3, [r7, #6]
	interface_to_class[ifid] = clsid;
 80137e4:	79fb      	ldrb	r3, [r7, #7]
 80137e6:	4904      	ldr	r1, [pc, #16]	; (80137f8 <USBD_Composite_InterfaceToClass+0x24>)
 80137e8:	79ba      	ldrb	r2, [r7, #6]
 80137ea:	54ca      	strb	r2, [r1, r3]
}
 80137ec:	bf00      	nop
 80137ee:	370c      	adds	r7, #12
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bc80      	pop	{r7}
 80137f4:	4770      	bx	lr
 80137f6:	bf00      	nop
 80137f8:	200000f8 	.word	0x200000f8

080137fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8013810:	4619      	mov	r1, r3
 8013812:	4610      	mov	r0, r2
 8013814:	f000 faf2 	bl	8013dfc <USBD_LL_SetupStage>
}
 8013818:	bf00      	nop
 801381a:	3708      	adds	r7, #8
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	460b      	mov	r3, r1
 801382a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8013832:	78fb      	ldrb	r3, [r7, #3]
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	015b      	lsls	r3, r3, #5
 8013838:	4413      	add	r3, r2
 801383a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801383e:	681a      	ldr	r2, [r3, #0]
 8013840:	78fb      	ldrb	r3, [r7, #3]
 8013842:	4619      	mov	r1, r3
 8013844:	f000 fb25 	bl	8013e92 <USBD_LL_DataOutStage>
}
 8013848:	bf00      	nop
 801384a:	3708      	adds	r7, #8
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}

08013850 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	460b      	mov	r3, r1
 801385a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8013862:	78fb      	ldrb	r3, [r7, #3]
 8013864:	687a      	ldr	r2, [r7, #4]
 8013866:	015b      	lsls	r3, r3, #5
 8013868:	4413      	add	r3, r2
 801386a:	333c      	adds	r3, #60	; 0x3c
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	78fb      	ldrb	r3, [r7, #3]
 8013870:	4619      	mov	r1, r3
 8013872:	f000 fb7f 	bl	8013f74 <USBD_LL_DataInStage>
}
 8013876:	bf00      	nop
 8013878:	3708      	adds	r7, #8
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}

0801387e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801387e:	b580      	push	{r7, lr}
 8013880:	b082      	sub	sp, #8
 8013882:	af00      	add	r7, sp, #0
 8013884:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801388c:	4618      	mov	r0, r3
 801388e:	f000 fc88 	bl	80141a2 <USBD_LL_SOF>
}
 8013892:	bf00      	nop
 8013894:	3708      	adds	r7, #8
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}

0801389a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801389a:	b580      	push	{r7, lr}
 801389c:	b084      	sub	sp, #16
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80138a2:	2301      	movs	r3, #1
 80138a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	689b      	ldr	r3, [r3, #8]
 80138aa:	2b02      	cmp	r3, #2
 80138ac:	d001      	beq.n	80138b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80138ae:	f7ee f885 	bl	80019bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80138b8:	7bfa      	ldrb	r2, [r7, #15]
 80138ba:	4611      	mov	r1, r2
 80138bc:	4618      	mov	r0, r3
 80138be:	f000 fc38 	bl	8014132 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80138c8:	4618      	mov	r0, r3
 80138ca:	f000 fbf8 	bl	80140be <USBD_LL_Reset>
}
 80138ce:	bf00      	nop
 80138d0:	3710      	adds	r7, #16
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
	...

080138d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80138e6:	4618      	mov	r0, r3
 80138e8:	f000 fc32 	bl	8014150 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	699b      	ldr	r3, [r3, #24]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d005      	beq.n	8013900 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138f4:	4b04      	ldr	r3, [pc, #16]	; (8013908 <HAL_PCD_SuspendCallback+0x30>)
 80138f6:	691b      	ldr	r3, [r3, #16]
 80138f8:	4a03      	ldr	r2, [pc, #12]	; (8013908 <HAL_PCD_SuspendCallback+0x30>)
 80138fa:	f043 0306 	orr.w	r3, r3, #6
 80138fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013900:	bf00      	nop
 8013902:	3708      	adds	r7, #8
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}
 8013908:	e000ed00 	.word	0xe000ed00

0801390c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801391a:	4618      	mov	r0, r3
 801391c:	f000 fc2c 	bl	8014178 <USBD_LL_Resume>
}
 8013920:	bf00      	nop
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}

08013928 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8013930:	4a31      	ldr	r2, [pc, #196]	; (80139f8 <USBD_LL_Init+0xd0>)
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	4a2f      	ldr	r2, [pc, #188]	; (80139f8 <USBD_LL_Init+0xd0>)
 801393c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8013940:	4b2d      	ldr	r3, [pc, #180]	; (80139f8 <USBD_LL_Init+0xd0>)
 8013942:	4a2e      	ldr	r2, [pc, #184]	; (80139fc <USBD_LL_Init+0xd4>)
 8013944:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013946:	4b2c      	ldr	r3, [pc, #176]	; (80139f8 <USBD_LL_Init+0xd0>)
 8013948:	2208      	movs	r2, #8
 801394a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801394c:	4b2a      	ldr	r3, [pc, #168]	; (80139f8 <USBD_LL_Init+0xd0>)
 801394e:	2202      	movs	r2, #2
 8013950:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8013952:	4b29      	ldr	r3, [pc, #164]	; (80139f8 <USBD_LL_Init+0xd0>)
 8013954:	2200      	movs	r2, #0
 8013956:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013958:	4b27      	ldr	r3, [pc, #156]	; (80139f8 <USBD_LL_Init+0xd0>)
 801395a:	2200      	movs	r2, #0
 801395c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801395e:	4b26      	ldr	r3, [pc, #152]	; (80139f8 <USBD_LL_Init+0xd0>)
 8013960:	2200      	movs	r2, #0
 8013962:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013964:	4824      	ldr	r0, [pc, #144]	; (80139f8 <USBD_LL_Init+0xd0>)
 8013966:	f7f0 fd95 	bl	8004494 <HAL_PCD_Init>
 801396a:	4603      	mov	r3, r0
 801396c:	2b00      	cmp	r3, #0
 801396e:	d001      	beq.n	8013974 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8013970:	f7ee f824 	bl	80019bc <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);*/


  //CDC ENDPOINTS
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x38);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801397a:	2338      	movs	r3, #56	; 0x38
 801397c:	2200      	movs	r2, #0
 801397e:	2100      	movs	r1, #0
 8013980:	f7f1 fc2e 	bl	80051e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x88);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801398a:	2388      	movs	r3, #136	; 0x88
 801398c:	2200      	movs	r2, #0
 801398e:	2180      	movs	r1, #128	; 0x80
 8013990:	f7f1 fc26 	bl	80051e0 <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xF0);
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801399a:	23f0      	movs	r3, #240	; 0xf0
 801399c:	2200      	movs	r2, #0
 801399e:	2181      	movs	r1, #129	; 0x81
 80139a0:	f7f1 fc1e 	bl	80051e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x140);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80139aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80139ae:	2200      	movs	r2, #0
 80139b0:	2101      	movs	r1, #1
 80139b2:	f7f1 fc15 	bl	80051e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x130);
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80139bc:	f44f 7398 	mov.w	r3, #304	; 0x130
 80139c0:	2200      	movs	r2, #0
 80139c2:	2182      	movs	r1, #130	; 0x82
 80139c4:	f7f1 fc0c 	bl	80051e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x83 , PCD_SNG_BUF, 0x180);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80139ce:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80139d2:	2200      	movs	r2, #0
 80139d4:	2183      	movs	r1, #131	; 0x83
 80139d6:	f7f1 fc03 	bl	80051e0 <HAL_PCDEx_PMAConfig>
   HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x02 , PCD_SNG_BUF, 0x1D0);
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80139e0:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80139e4:	2200      	movs	r2, #0
 80139e6:	2102      	movs	r1, #2
 80139e8:	f7f1 fbfa 	bl	80051e0 <HAL_PCDEx_PMAConfig>

  return USBD_OK;
 80139ec:	2300      	movs	r3, #0
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3708      	adds	r7, #8
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	2000171c 	.word	0x2000171c
 80139fc:	40005c00 	.word	0x40005c00

08013a00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b084      	sub	sp, #16
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7f0 fe1d 	bl	8004656 <HAL_PCD_Start>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a20:	7bfb      	ldrb	r3, [r7, #15]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f000 f932 	bl	8013c8c <USBD_Get_USB_Status>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8013a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a2e:	4618      	mov	r0, r3
 8013a30:	3710      	adds	r7, #16
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}

08013a36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013a36:	b580      	push	{r7, lr}
 8013a38:	b084      	sub	sp, #16
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	6078      	str	r0, [r7, #4]
 8013a3e:	4608      	mov	r0, r1
 8013a40:	4611      	mov	r1, r2
 8013a42:	461a      	mov	r2, r3
 8013a44:	4603      	mov	r3, r0
 8013a46:	70fb      	strb	r3, [r7, #3]
 8013a48:	460b      	mov	r3, r1
 8013a4a:	70bb      	strb	r3, [r7, #2]
 8013a4c:	4613      	mov	r3, r2
 8013a4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a50:	2300      	movs	r3, #0
 8013a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a54:	2300      	movs	r3, #0
 8013a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013a5e:	78bb      	ldrb	r3, [r7, #2]
 8013a60:	883a      	ldrh	r2, [r7, #0]
 8013a62:	78f9      	ldrb	r1, [r7, #3]
 8013a64:	f7f0 ff50 	bl	8004908 <HAL_PCD_EP_Open>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a6c:	7bfb      	ldrb	r3, [r7, #15]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f000 f90c 	bl	8013c8c <USBD_Get_USB_Status>
 8013a74:	4603      	mov	r3, r0
 8013a76:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8013a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3710      	adds	r7, #16
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}

08013a82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a82:	b580      	push	{r7, lr}
 8013a84:	b084      	sub	sp, #16
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
 8013a8a:	460b      	mov	r3, r1
 8013a8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a92:	2300      	movs	r3, #0
 8013a94:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013a9c:	78fa      	ldrb	r2, [r7, #3]
 8013a9e:	4611      	mov	r1, r2
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f7f0 ff91 	bl	80049c8 <HAL_PCD_EP_Close>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013aaa:	7bfb      	ldrb	r3, [r7, #15]
 8013aac:	4618      	mov	r0, r3
 8013aae:	f000 f8ed 	bl	8013c8c <USBD_Get_USB_Status>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8013ab6:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3710      	adds	r7, #16
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}

08013ac0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b084      	sub	sp, #16
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
 8013ac8:	460b      	mov	r3, r1
 8013aca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013acc:	2300      	movs	r3, #0
 8013ace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013ada:	78fa      	ldrb	r2, [r7, #3]
 8013adc:	4611      	mov	r1, r2
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7f1 f83b 	bl	8004b5a <HAL_PCD_EP_SetStall>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ae8:	7bfb      	ldrb	r3, [r7, #15]
 8013aea:	4618      	mov	r0, r3
 8013aec:	f000 f8ce 	bl	8013c8c <USBD_Get_USB_Status>
 8013af0:	4603      	mov	r3, r0
 8013af2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8013af4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3710      	adds	r7, #16
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}

08013afe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013afe:	b580      	push	{r7, lr}
 8013b00:	b084      	sub	sp, #16
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	6078      	str	r0, [r7, #4]
 8013b06:	460b      	mov	r3, r1
 8013b08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013b18:	78fa      	ldrb	r2, [r7, #3]
 8013b1a:	4611      	mov	r1, r2
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7f1 f876 	bl	8004c0e <HAL_PCD_EP_ClrStall>
 8013b22:	4603      	mov	r3, r0
 8013b24:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b26:	7bfb      	ldrb	r3, [r7, #15]
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f000 f8af 	bl	8013c8c <USBD_Get_USB_Status>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8013b32:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3710      	adds	r7, #16
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}

08013b3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b3c:	b480      	push	{r7}
 8013b3e:	b085      	sub	sp, #20
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	460b      	mov	r3, r1
 8013b46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013b4e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8013b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	da08      	bge.n	8013b6a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8013b58:	78fb      	ldrb	r3, [r7, #3]
 8013b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b5e:	68fa      	ldr	r2, [r7, #12]
 8013b60:	015b      	lsls	r3, r3, #5
 8013b62:	4413      	add	r3, r2
 8013b64:	332a      	adds	r3, #42	; 0x2a
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	e008      	b.n	8013b7c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8013b6a:	78fb      	ldrb	r3, [r7, #3]
 8013b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b70:	68fa      	ldr	r2, [r7, #12]
 8013b72:	015b      	lsls	r3, r3, #5
 8013b74:	4413      	add	r3, r2
 8013b76:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8013b7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3714      	adds	r7, #20
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bc80      	pop	{r7}
 8013b84:	4770      	bx	lr

08013b86 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013b86:	b580      	push	{r7, lr}
 8013b88:	b084      	sub	sp, #16
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
 8013b8e:	460b      	mov	r3, r1
 8013b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b92:	2300      	movs	r3, #0
 8013b94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b96:	2300      	movs	r3, #0
 8013b98:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013ba0:	78fa      	ldrb	r2, [r7, #3]
 8013ba2:	4611      	mov	r1, r2
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7f0 fe8a 	bl	80048be <HAL_PCD_SetAddress>
 8013baa:	4603      	mov	r3, r0
 8013bac:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013bae:	7bfb      	ldrb	r3, [r7, #15]
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f000 f86b 	bl	8013c8c <USBD_Get_USB_Status>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8013bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3710      	adds	r7, #16
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b086      	sub	sp, #24
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	60f8      	str	r0, [r7, #12]
 8013bcc:	607a      	str	r2, [r7, #4]
 8013bce:	461a      	mov	r2, r3
 8013bd0:	460b      	mov	r3, r1
 8013bd2:	72fb      	strb	r3, [r7, #11]
 8013bd4:	4613      	mov	r3, r2
 8013bd6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013be6:	893b      	ldrh	r3, [r7, #8]
 8013be8:	7af9      	ldrb	r1, [r7, #11]
 8013bea:	687a      	ldr	r2, [r7, #4]
 8013bec:	f7f0 ff7c 	bl	8004ae8 <HAL_PCD_EP_Transmit>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013bf4:	7dfb      	ldrb	r3, [r7, #23]
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f000 f848 	bl	8013c8c <USBD_Get_USB_Status>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8013c00:	7dbb      	ldrb	r3, [r7, #22]
}
 8013c02:	4618      	mov	r0, r3
 8013c04:	3718      	adds	r7, #24
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}

08013c0a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013c0a:	b580      	push	{r7, lr}
 8013c0c:	b086      	sub	sp, #24
 8013c0e:	af00      	add	r7, sp, #0
 8013c10:	60f8      	str	r0, [r7, #12]
 8013c12:	607a      	str	r2, [r7, #4]
 8013c14:	461a      	mov	r2, r3
 8013c16:	460b      	mov	r3, r1
 8013c18:	72fb      	strb	r3, [r7, #11]
 8013c1a:	4613      	mov	r3, r2
 8013c1c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c1e:	2300      	movs	r3, #0
 8013c20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c22:	2300      	movs	r3, #0
 8013c24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013c2c:	893b      	ldrh	r3, [r7, #8]
 8013c2e:	7af9      	ldrb	r1, [r7, #11]
 8013c30:	687a      	ldr	r2, [r7, #4]
 8013c32:	f7f0 ff0b 	bl	8004a4c <HAL_PCD_EP_Receive>
 8013c36:	4603      	mov	r3, r0
 8013c38:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c3a:	7dfb      	ldrb	r3, [r7, #23]
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f000 f825 	bl	8013c8c <USBD_Get_USB_Status>
 8013c42:	4603      	mov	r3, r0
 8013c44:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8013c46:	7dbb      	ldrb	r3, [r7, #22]
}
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3718      	adds	r7, #24
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b082      	sub	sp, #8
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	460b      	mov	r3, r1
 8013c5a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013c62:	78fa      	ldrb	r2, [r7, #3]
 8013c64:	4611      	mov	r1, r2
 8013c66:	4618      	mov	r0, r3
 8013c68:	f7f0 ff2a 	bl	8004ac0 <HAL_PCD_EP_GetRxCount>
 8013c6c:	4603      	mov	r3, r0
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3708      	adds	r7, #8
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}

08013c76 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c76:	b480      	push	{r7}
 8013c78:	b083      	sub	sp, #12
 8013c7a:	af00      	add	r7, sp, #0
 8013c7c:	6078      	str	r0, [r7, #4]
 8013c7e:	460b      	mov	r3, r1
 8013c80:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8013c82:	bf00      	nop
 8013c84:	370c      	adds	r7, #12
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bc80      	pop	{r7}
 8013c8a:	4770      	bx	lr

08013c8c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b085      	sub	sp, #20
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	4603      	mov	r3, r0
 8013c94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c96:	2300      	movs	r3, #0
 8013c98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013c9a:	79fb      	ldrb	r3, [r7, #7]
 8013c9c:	2b03      	cmp	r3, #3
 8013c9e:	d817      	bhi.n	8013cd0 <USBD_Get_USB_Status+0x44>
 8013ca0:	a201      	add	r2, pc, #4	; (adr r2, 8013ca8 <USBD_Get_USB_Status+0x1c>)
 8013ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ca6:	bf00      	nop
 8013ca8:	08013cb9 	.word	0x08013cb9
 8013cac:	08013cbf 	.word	0x08013cbf
 8013cb0:	08013cc5 	.word	0x08013cc5
 8013cb4:	08013ccb 	.word	0x08013ccb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	73fb      	strb	r3, [r7, #15]
    break;
 8013cbc:	e00b      	b.n	8013cd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013cbe:	2302      	movs	r3, #2
 8013cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8013cc2:	e008      	b.n	8013cd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8013cc8:	e005      	b.n	8013cd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013cca:	2302      	movs	r3, #2
 8013ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8013cce:	e002      	b.n	8013cd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013cd0:	2302      	movs	r3, #2
 8013cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8013cd4:	bf00      	nop
  }
  return usb_status;
 8013cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3714      	adds	r7, #20
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bc80      	pop	{r7}
 8013ce0:	4770      	bx	lr
 8013ce2:	bf00      	nop

08013ce4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b084      	sub	sp, #16
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	60f8      	str	r0, [r7, #12]
 8013cec:	60b9      	str	r1, [r7, #8]
 8013cee:	4613      	mov	r3, r2
 8013cf0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d101      	bne.n	8013cfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013cf8:	2302      	movs	r3, #2
 8013cfa:	e01a      	b.n	8013d32 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d003      	beq.n	8013d0e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013d0e:	68bb      	ldr	r3, [r7, #8]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d003      	beq.n	8013d1c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	68ba      	ldr	r2, [r7, #8]
 8013d18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	2201      	movs	r2, #1
 8013d20:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	79fa      	ldrb	r2, [r7, #7]
 8013d28:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	f7ff fdfc 	bl	8013928 <USBD_LL_Init>

  return USBD_OK;
 8013d30:	2300      	movs	r3, #0
}
 8013d32:	4618      	mov	r0, r3
 8013d34:	3710      	adds	r7, #16
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}

08013d3a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013d3a:	b480      	push	{r7}
 8013d3c:	b085      	sub	sp, #20
 8013d3e:	af00      	add	r7, sp, #0
 8013d40:	6078      	str	r0, [r7, #4]
 8013d42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8013d44:	2300      	movs	r3, #0
 8013d46:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d006      	beq.n	8013d5c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	683a      	ldr	r2, [r7, #0]
 8013d52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8013d56:	2300      	movs	r3, #0
 8013d58:	73fb      	strb	r3, [r7, #15]
 8013d5a:	e001      	b.n	8013d60 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8013d5c:	2302      	movs	r3, #2
 8013d5e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3714      	adds	r7, #20
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bc80      	pop	{r7}
 8013d6a:	4770      	bx	lr

08013d6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f7ff fe43 	bl	8013a00 <USBD_LL_Start>

  return USBD_OK;
 8013d7a:	2300      	movs	r3, #0
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3708      	adds	r7, #8
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}

08013d84 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013d84:	b480      	push	{r7}
 8013d86:	b083      	sub	sp, #12
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013d8c:	2300      	movs	r3, #0
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	370c      	adds	r7, #12
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bc80      	pop	{r7}
 8013d96:	4770      	bx	lr

08013d98 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	460b      	mov	r3, r1
 8013da2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013da4:	2302      	movs	r3, #2
 8013da6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d00c      	beq.n	8013dcc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	78fa      	ldrb	r2, [r7, #3]
 8013dbc:	4611      	mov	r1, r2
 8013dbe:	6878      	ldr	r0, [r7, #4]
 8013dc0:	4798      	blx	r3
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d101      	bne.n	8013dcc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3710      	adds	r7, #16
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013dd6:	b580      	push	{r7, lr}
 8013dd8:	b082      	sub	sp, #8
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	6078      	str	r0, [r7, #4]
 8013dde:	460b      	mov	r3, r1
 8013de0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013de8:	685b      	ldr	r3, [r3, #4]
 8013dea:	78fa      	ldrb	r2, [r7, #3]
 8013dec:	4611      	mov	r1, r2
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	4798      	blx	r3

  return USBD_OK;
 8013df2:	2300      	movs	r3, #0
}
 8013df4:	4618      	mov	r0, r3
 8013df6:	3708      	adds	r7, #8
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013e0c:	6839      	ldr	r1, [r7, #0]
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f000 fe8c 	bl	8014b2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2201      	movs	r2, #1
 8013e18:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  pdev->ep0_data_len = pdev->request.wLength;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8013e22:	461a      	mov	r2, r3
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

  switch (pdev->request.bmRequest & 0x1FU)
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8013e30:	f003 031f 	and.w	r3, r3, #31
 8013e34:	2b01      	cmp	r3, #1
 8013e36:	d00c      	beq.n	8013e52 <USBD_LL_SetupStage+0x56>
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d302      	bcc.n	8013e42 <USBD_LL_SetupStage+0x46>
 8013e3c:	2b02      	cmp	r3, #2
 8013e3e:	d010      	beq.n	8013e62 <USBD_LL_SetupStage+0x66>
 8013e40:	e017      	b.n	8013e72 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013e48:	4619      	mov	r1, r3
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f000 f9c4 	bl	80141d8 <USBD_StdDevReq>
      break;
 8013e50:	e01a      	b.n	8013e88 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013e58:	4619      	mov	r1, r3
 8013e5a:	6878      	ldr	r0, [r7, #4]
 8013e5c:	f000 fa26 	bl	80142ac <USBD_StdItfReq>
      break;
 8013e60:	e012      	b.n	8013e88 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013e68:	4619      	mov	r1, r3
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f000 fa64 	bl	8014338 <USBD_StdEPReq>
      break;
 8013e70:	e00a      	b.n	8013e88 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8013e78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013e7c:	b2db      	uxtb	r3, r3
 8013e7e:	4619      	mov	r1, r3
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f7ff fe1d 	bl	8013ac0 <USBD_LL_StallEP>
      break;
 8013e86:	bf00      	nop
  }

  return USBD_OK;
 8013e88:	2300      	movs	r3, #0
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3708      	adds	r7, #8
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}

08013e92 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013e92:	b580      	push	{r7, lr}
 8013e94:	b086      	sub	sp, #24
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	60f8      	str	r0, [r7, #12]
 8013e9a:	460b      	mov	r3, r1
 8013e9c:	607a      	str	r2, [r7, #4]
 8013e9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013ea0:	7afb      	ldrb	r3, [r7, #11]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d14b      	bne.n	8013f3e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8013eac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8013eb4:	2b03      	cmp	r3, #3
 8013eb6:	d134      	bne.n	8013f22 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	689a      	ldr	r2, [r3, #8]
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	68db      	ldr	r3, [r3, #12]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d919      	bls.n	8013ef8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	689a      	ldr	r2, [r3, #8]
 8013ec8:	697b      	ldr	r3, [r7, #20]
 8013eca:	68db      	ldr	r3, [r3, #12]
 8013ecc:	1ad2      	subs	r2, r2, r3
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	609a      	str	r2, [r3, #8]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	689a      	ldr	r2, [r3, #8]
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d203      	bcs.n	8013ee6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueRx(pdev, pdata,
 8013ee2:	b29b      	uxth	r3, r3
 8013ee4:	e002      	b.n	8013eec <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	461a      	mov	r2, r3
 8013eee:	6879      	ldr	r1, [r7, #4]
 8013ef0:	68f8      	ldr	r0, [r7, #12]
 8013ef2:	f001 fa43 	bl	801537c <USBD_CtlContinueRx>
 8013ef6:	e038      	b.n	8013f6a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013efe:	691b      	ldr	r3, [r3, #16]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d00a      	beq.n	8013f1a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013f0a:	2b03      	cmp	r3, #3
 8013f0c:	d105      	bne.n	8013f1a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f14:	691b      	ldr	r3, [r3, #16]
 8013f16:	68f8      	ldr	r0, [r7, #12]
 8013f18:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8013f1a:	68f8      	ldr	r0, [r7, #12]
 8013f1c:	f001 fa40 	bl	80153a0 <USBD_CtlSendStatus>
 8013f20:	e023      	b.n	8013f6a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8013f28:	2b05      	cmp	r3, #5
 8013f2a:	d11e      	bne.n	8013f6a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
        USBD_LL_StallEP(pdev, 0U);
 8013f34:	2100      	movs	r1, #0
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f7ff fdc2 	bl	8013ac0 <USBD_LL_StallEP>
 8013f3c:	e015      	b.n	8013f6a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f44:	699b      	ldr	r3, [r3, #24]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d00d      	beq.n	8013f66 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if ((pdev->pClass->DataOut != NULL) &&
 8013f50:	2b03      	cmp	r3, #3
 8013f52:	d108      	bne.n	8013f66 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f5a:	699b      	ldr	r3, [r3, #24]
 8013f5c:	7afa      	ldrb	r2, [r7, #11]
 8013f5e:	4611      	mov	r1, r2
 8013f60:	68f8      	ldr	r0, [r7, #12]
 8013f62:	4798      	blx	r3
 8013f64:	e001      	b.n	8013f6a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013f66:	2302      	movs	r3, #2
 8013f68:	e000      	b.n	8013f6c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8013f6a:	2300      	movs	r3, #0
}
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3718      	adds	r7, #24
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b086      	sub	sp, #24
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	60f8      	str	r0, [r7, #12]
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	607a      	str	r2, [r7, #4]
 8013f80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013f82:	7afb      	ldrb	r3, [r7, #11]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d17f      	bne.n	8014088 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	3314      	adds	r3, #20
 8013f8c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8013f94:	2b02      	cmp	r3, #2
 8013f96:	d15c      	bne.n	8014052 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	689a      	ldr	r2, [r3, #8]
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	68db      	ldr	r3, [r3, #12]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d915      	bls.n	8013fd0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	689a      	ldr	r2, [r3, #8]
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	1ad2      	subs	r2, r2, r3
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	609a      	str	r2, [r3, #8]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	689b      	ldr	r3, [r3, #8]
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	461a      	mov	r2, r3
 8013fba:	6879      	ldr	r1, [r7, #4]
 8013fbc:	68f8      	ldr	r0, [r7, #12]
 8013fbe:	f001 f9ad 	bl	801531c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	2100      	movs	r1, #0
 8013fc8:	68f8      	ldr	r0, [r7, #12]
 8013fca:	f7ff fe1e 	bl	8013c0a <USBD_LL_PrepareReceive>
 8013fce:	e04e      	b.n	801406e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	697a      	ldr	r2, [r7, #20]
 8013fd6:	68d2      	ldr	r2, [r2, #12]
 8013fd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013fdc:	fb02 f201 	mul.w	r2, r2, r1
 8013fe0:	1a9b      	subs	r3, r3, r2
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d11c      	bne.n	8014020 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	685a      	ldr	r2, [r3, #4]
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	68db      	ldr	r3, [r3, #12]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	d316      	bcc.n	8014020 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	685a      	ldr	r2, [r3, #4]
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
            (pep->total_length >= pep->maxpacket) &&
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d20f      	bcs.n	8014020 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014000:	2200      	movs	r2, #0
 8014002:	2100      	movs	r1, #0
 8014004:	68f8      	ldr	r0, [r7, #12]
 8014006:	f001 f989 	bl	801531c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2200      	movs	r2, #0
 801400e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014012:	2300      	movs	r3, #0
 8014014:	2200      	movs	r2, #0
 8014016:	2100      	movs	r1, #0
 8014018:	68f8      	ldr	r0, [r7, #12]
 801401a:	f7ff fdf6 	bl	8013c0a <USBD_LL_PrepareReceive>
 801401e:	e026      	b.n	801406e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d00a      	beq.n	8014042 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014032:	2b03      	cmp	r3, #3
 8014034:	d105      	bne.n	8014042 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801403c:	68db      	ldr	r3, [r3, #12]
 801403e:	68f8      	ldr	r0, [r7, #12]
 8014040:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8014042:	2180      	movs	r1, #128	; 0x80
 8014044:	68f8      	ldr	r0, [r7, #12]
 8014046:	f7ff fd3b 	bl	8013ac0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801404a:	68f8      	ldr	r0, [r7, #12]
 801404c:	f001 f9bb 	bl	80153c6 <USBD_CtlReceiveStatus>
 8014050:	e00d      	b.n	801406e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8014058:	2b04      	cmp	r3, #4
 801405a:	d004      	beq.n	8014066 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8014062:	2b00      	cmp	r3, #0
 8014064:	d103      	bne.n	801406e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8014066:	2180      	movs	r1, #128	; 0x80
 8014068:	68f8      	ldr	r0, [r7, #12]
 801406a:	f7ff fd29 	bl	8013ac0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014074:	2b01      	cmp	r3, #1
 8014076:	d11d      	bne.n	80140b4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8014078:	68f8      	ldr	r0, [r7, #12]
 801407a:	f7ff fe83 	bl	8013d84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	2200      	movs	r2, #0
 8014082:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8014086:	e015      	b.n	80140b4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801408e:	695b      	ldr	r3, [r3, #20]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d00d      	beq.n	80140b0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if ((pdev->pClass->DataIn != NULL) &&
 801409a:	2b03      	cmp	r3, #3
 801409c:	d108      	bne.n	80140b0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80140a4:	695b      	ldr	r3, [r3, #20]
 80140a6:	7afa      	ldrb	r2, [r7, #11]
 80140a8:	4611      	mov	r1, r2
 80140aa:	68f8      	ldr	r0, [r7, #12]
 80140ac:	4798      	blx	r3
 80140ae:	e001      	b.n	80140b4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80140b0:	2302      	movs	r3, #2
 80140b2:	e000      	b.n	80140b6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80140b4:	2300      	movs	r3, #0
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3718      	adds	r7, #24
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}

080140be <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80140be:	b580      	push	{r7, lr}
 80140c0:	b082      	sub	sp, #8
 80140c2:	af00      	add	r7, sp, #0
 80140c4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80140c6:	2340      	movs	r3, #64	; 0x40
 80140c8:	2200      	movs	r2, #0
 80140ca:	2100      	movs	r1, #0
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f7ff fcb2 	bl	8013a36 <USBD_LL_OpenEP>

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2240      	movs	r2, #64	; 0x40
 80140d6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80140da:	2340      	movs	r3, #64	; 0x40
 80140dc:	2200      	movs	r2, #0
 80140de:	2180      	movs	r1, #128	; 0x80
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f7ff fca8 	bl	8013a36 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2240      	movs	r2, #64	; 0x40
 80140ea:	621a      	str	r2, [r3, #32]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2201      	movs	r2, #1
 80140f0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->ep0_state = USBD_EP0_IDLE;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2200      	movs	r2, #0
 80140f8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->dev_config = 0U;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2200      	movs	r2, #0
 8014100:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2200      	movs	r2, #0
 8014106:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  if (pdev->pClassData)
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014110:	2b00      	cmp	r3, #0
 8014112:	d009      	beq.n	8014128 <USBD_LL_Reset+0x6a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	687a      	ldr	r2, [r7, #4]
 801411e:	6852      	ldr	r2, [r2, #4]
 8014120:	b2d2      	uxtb	r2, r2
 8014122:	4611      	mov	r1, r2
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	4798      	blx	r3
  }

  return USBD_OK;
 8014128:	2300      	movs	r3, #0
}
 801412a:	4618      	mov	r0, r3
 801412c:	3708      	adds	r7, #8
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}

08014132 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014132:	b480      	push	{r7}
 8014134:	b083      	sub	sp, #12
 8014136:	af00      	add	r7, sp, #0
 8014138:	6078      	str	r0, [r7, #4]
 801413a:	460b      	mov	r3, r1
 801413c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	78fa      	ldrb	r2, [r7, #3]
 8014142:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014144:	2300      	movs	r3, #0
}
 8014146:	4618      	mov	r0, r3
 8014148:	370c      	adds	r7, #12
 801414a:	46bd      	mov	sp, r7
 801414c:	bc80      	pop	{r7}
 801414e:	4770      	bx	lr

08014150 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014150:	b480      	push	{r7}
 8014152:	b083      	sub	sp, #12
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2204      	movs	r2, #4
 8014168:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc

  return USBD_OK;
 801416c:	2300      	movs	r3, #0
}
 801416e:	4618      	mov	r0, r3
 8014170:	370c      	adds	r7, #12
 8014172:	46bd      	mov	sp, r7
 8014174:	bc80      	pop	{r7}
 8014176:	4770      	bx	lr

08014178 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014178:	b480      	push	{r7}
 801417a:	b083      	sub	sp, #12
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014186:	2b04      	cmp	r3, #4
 8014188:	d105      	bne.n	8014196 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  }

  return USBD_OK;
 8014196:	2300      	movs	r3, #0
}
 8014198:	4618      	mov	r0, r3
 801419a:	370c      	adds	r7, #12
 801419c:	46bd      	mov	sp, r7
 801419e:	bc80      	pop	{r7}
 80141a0:	4770      	bx	lr

080141a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80141a2:	b580      	push	{r7, lr}
 80141a4:	b082      	sub	sp, #8
 80141a6:	af00      	add	r7, sp, #0
 80141a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80141b0:	2b03      	cmp	r3, #3
 80141b2:	d10b      	bne.n	80141cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80141ba:	69db      	ldr	r3, [r3, #28]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d005      	beq.n	80141cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80141c6:	69db      	ldr	r3, [r3, #28]
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80141cc:	2300      	movs	r3, #0
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3708      	adds	r7, #8
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
	...

080141d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b084      	sub	sp, #16
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80141e2:	2300      	movs	r3, #0
 80141e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	781b      	ldrb	r3, [r3, #0]
 80141ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80141ee:	2b20      	cmp	r3, #32
 80141f0:	d004      	beq.n	80141fc <USBD_StdDevReq+0x24>
 80141f2:	2b40      	cmp	r3, #64	; 0x40
 80141f4:	d002      	beq.n	80141fc <USBD_StdDevReq+0x24>
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d008      	beq.n	801420c <USBD_StdDevReq+0x34>
 80141fa:	e04c      	b.n	8014296 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014202:	689b      	ldr	r3, [r3, #8]
 8014204:	6839      	ldr	r1, [r7, #0]
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	4798      	blx	r3
      break;
 801420a:	e049      	b.n	80142a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	785b      	ldrb	r3, [r3, #1]
 8014210:	2b09      	cmp	r3, #9
 8014212:	d83a      	bhi.n	801428a <USBD_StdDevReq+0xb2>
 8014214:	a201      	add	r2, pc, #4	; (adr r2, 801421c <USBD_StdDevReq+0x44>)
 8014216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801421a:	bf00      	nop
 801421c:	0801426d 	.word	0x0801426d
 8014220:	08014281 	.word	0x08014281
 8014224:	0801428b 	.word	0x0801428b
 8014228:	08014277 	.word	0x08014277
 801422c:	0801428b 	.word	0x0801428b
 8014230:	0801424f 	.word	0x0801424f
 8014234:	08014245 	.word	0x08014245
 8014238:	0801428b 	.word	0x0801428b
 801423c:	08014263 	.word	0x08014263
 8014240:	08014259 	.word	0x08014259
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014244:	6839      	ldr	r1, [r7, #0]
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f000 f99c 	bl	8014584 <USBD_GetDescriptor>
          break;
 801424c:	e022      	b.n	8014294 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801424e:	6839      	ldr	r1, [r7, #0]
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 faff 	bl	8014854 <USBD_SetAddress>
          break;
 8014256:	e01d      	b.n	8014294 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8014258:	6839      	ldr	r1, [r7, #0]
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f000 fb3c 	bl	80148d8 <USBD_SetConfig>
          break;
 8014260:	e018      	b.n	8014294 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014262:	6839      	ldr	r1, [r7, #0]
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f000 fbc5 	bl	80149f4 <USBD_GetConfig>
          break;
 801426a:	e013      	b.n	8014294 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801426c:	6839      	ldr	r1, [r7, #0]
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	f000 fbf4 	bl	8014a5c <USBD_GetStatus>
          break;
 8014274:	e00e      	b.n	8014294 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014276:	6839      	ldr	r1, [r7, #0]
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f000 fc22 	bl	8014ac2 <USBD_SetFeature>
          break;
 801427e:	e009      	b.n	8014294 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014280:	6839      	ldr	r1, [r7, #0]
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 fc31 	bl	8014aea <USBD_ClrFeature>
          break;
 8014288:	e004      	b.n	8014294 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801428a:	6839      	ldr	r1, [r7, #0]
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f000 fc89 	bl	8014ba4 <USBD_CtlError>
          break;
 8014292:	bf00      	nop
      }
      break;
 8014294:	e004      	b.n	80142a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8014296:	6839      	ldr	r1, [r7, #0]
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f000 fc83 	bl	8014ba4 <USBD_CtlError>
      break;
 801429e:	bf00      	nop
  }

  return ret;
 80142a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3710      	adds	r7, #16
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop

080142ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b084      	sub	sp, #16
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
 80142b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80142b6:	2300      	movs	r3, #0
 80142b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80142c2:	2b20      	cmp	r3, #32
 80142c4:	d003      	beq.n	80142ce <USBD_StdItfReq+0x22>
 80142c6:	2b40      	cmp	r3, #64	; 0x40
 80142c8:	d001      	beq.n	80142ce <USBD_StdItfReq+0x22>
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d12a      	bne.n	8014324 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80142d4:	3b01      	subs	r3, #1
 80142d6:	2b02      	cmp	r3, #2
 80142d8:	d81d      	bhi.n	8014316 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	889b      	ldrh	r3, [r3, #4]
 80142de:	b2db      	uxtb	r3, r3
 80142e0:	2b03      	cmp	r3, #3
 80142e2:	d813      	bhi.n	801430c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80142ea:	689b      	ldr	r3, [r3, #8]
 80142ec:	6839      	ldr	r1, [r7, #0]
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	4798      	blx	r3
 80142f2:	4603      	mov	r3, r0
 80142f4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	88db      	ldrh	r3, [r3, #6]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d110      	bne.n	8014320 <USBD_StdItfReq+0x74>
 80142fe:	7bfb      	ldrb	r3, [r7, #15]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d10d      	bne.n	8014320 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f001 f84b 	bl	80153a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801430a:	e009      	b.n	8014320 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 801430c:	6839      	ldr	r1, [r7, #0]
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f000 fc48 	bl	8014ba4 <USBD_CtlError>
          break;
 8014314:	e004      	b.n	8014320 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8014316:	6839      	ldr	r1, [r7, #0]
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f000 fc43 	bl	8014ba4 <USBD_CtlError>
          break;
 801431e:	e000      	b.n	8014322 <USBD_StdItfReq+0x76>
          break;
 8014320:	bf00      	nop
      }
      break;
 8014322:	e004      	b.n	801432e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8014324:	6839      	ldr	r1, [r7, #0]
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f000 fc3c 	bl	8014ba4 <USBD_CtlError>
      break;
 801432c:	bf00      	nop
  }

  return USBD_OK;
 801432e:	2300      	movs	r3, #0
}
 8014330:	4618      	mov	r0, r3
 8014332:	3710      	adds	r7, #16
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b084      	sub	sp, #16
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014342:	2300      	movs	r3, #0
 8014344:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	889b      	ldrh	r3, [r3, #4]
 801434a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014354:	2b20      	cmp	r3, #32
 8014356:	d004      	beq.n	8014362 <USBD_StdEPReq+0x2a>
 8014358:	2b40      	cmp	r3, #64	; 0x40
 801435a:	d002      	beq.n	8014362 <USBD_StdEPReq+0x2a>
 801435c:	2b00      	cmp	r3, #0
 801435e:	d008      	beq.n	8014372 <USBD_StdEPReq+0x3a>
 8014360:	e106      	b.n	8014570 <USBD_StdEPReq+0x238>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014368:	689b      	ldr	r3, [r3, #8]
 801436a:	6839      	ldr	r1, [r7, #0]
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	4798      	blx	r3
      break;
 8014370:	e103      	b.n	801457a <USBD_StdEPReq+0x242>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	781b      	ldrb	r3, [r3, #0]
 8014376:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801437a:	2b20      	cmp	r3, #32
 801437c:	d10a      	bne.n	8014394 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014384:	689b      	ldr	r3, [r3, #8]
 8014386:	6839      	ldr	r1, [r7, #0]
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	4798      	blx	r3
 801438c:	4603      	mov	r3, r0
 801438e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8014390:	7bfb      	ldrb	r3, [r7, #15]
 8014392:	e0f3      	b.n	801457c <USBD_StdEPReq+0x244>
      }

      switch (req->bRequest)
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	785b      	ldrb	r3, [r3, #1]
 8014398:	2b01      	cmp	r3, #1
 801439a:	d03e      	beq.n	801441a <USBD_StdEPReq+0xe2>
 801439c:	2b03      	cmp	r3, #3
 801439e:	d002      	beq.n	80143a6 <USBD_StdEPReq+0x6e>
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d070      	beq.n	8014486 <USBD_StdEPReq+0x14e>
 80143a4:	e0de      	b.n	8014564 <USBD_StdEPReq+0x22c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80143ac:	2b02      	cmp	r3, #2
 80143ae:	d002      	beq.n	80143b6 <USBD_StdEPReq+0x7e>
 80143b0:	2b03      	cmp	r3, #3
 80143b2:	d015      	beq.n	80143e0 <USBD_StdEPReq+0xa8>
 80143b4:	e02b      	b.n	801440e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80143b6:	7bbb      	ldrb	r3, [r7, #14]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d00c      	beq.n	80143d6 <USBD_StdEPReq+0x9e>
 80143bc:	7bbb      	ldrb	r3, [r7, #14]
 80143be:	2b80      	cmp	r3, #128	; 0x80
 80143c0:	d009      	beq.n	80143d6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80143c2:	7bbb      	ldrb	r3, [r7, #14]
 80143c4:	4619      	mov	r1, r3
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f7ff fb7a 	bl	8013ac0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80143cc:	2180      	movs	r1, #128	; 0x80
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f7ff fb76 	bl	8013ac0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80143d4:	e020      	b.n	8014418 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80143d6:	6839      	ldr	r1, [r7, #0]
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f000 fbe3 	bl	8014ba4 <USBD_CtlError>
              break;
 80143de:	e01b      	b.n	8014418 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	885b      	ldrh	r3, [r3, #2]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d10e      	bne.n	8014406 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80143e8:	7bbb      	ldrb	r3, [r7, #14]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d00b      	beq.n	8014406 <USBD_StdEPReq+0xce>
 80143ee:	7bbb      	ldrb	r3, [r7, #14]
 80143f0:	2b80      	cmp	r3, #128	; 0x80
 80143f2:	d008      	beq.n	8014406 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	88db      	ldrh	r3, [r3, #6]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d104      	bne.n	8014406 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80143fc:	7bbb      	ldrb	r3, [r7, #14]
 80143fe:	4619      	mov	r1, r3
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f7ff fb5d 	bl	8013ac0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f000 ffca 	bl	80153a0 <USBD_CtlSendStatus>

              break;
 801440c:	e004      	b.n	8014418 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 801440e:	6839      	ldr	r1, [r7, #0]
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f000 fbc7 	bl	8014ba4 <USBD_CtlError>
              break;
 8014416:	bf00      	nop
          }
          break;
 8014418:	e0a9      	b.n	801456e <USBD_StdEPReq+0x236>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014420:	2b02      	cmp	r3, #2
 8014422:	d002      	beq.n	801442a <USBD_StdEPReq+0xf2>
 8014424:	2b03      	cmp	r3, #3
 8014426:	d015      	beq.n	8014454 <USBD_StdEPReq+0x11c>
 8014428:	e026      	b.n	8014478 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801442a:	7bbb      	ldrb	r3, [r7, #14]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d00c      	beq.n	801444a <USBD_StdEPReq+0x112>
 8014430:	7bbb      	ldrb	r3, [r7, #14]
 8014432:	2b80      	cmp	r3, #128	; 0x80
 8014434:	d009      	beq.n	801444a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8014436:	7bbb      	ldrb	r3, [r7, #14]
 8014438:	4619      	mov	r1, r3
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f7ff fb40 	bl	8013ac0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014440:	2180      	movs	r1, #128	; 0x80
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f7ff fb3c 	bl	8013ac0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014448:	e01c      	b.n	8014484 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801444a:	6839      	ldr	r1, [r7, #0]
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f000 fba9 	bl	8014ba4 <USBD_CtlError>
              break;
 8014452:	e017      	b.n	8014484 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	885b      	ldrh	r3, [r3, #2]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d112      	bne.n	8014482 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801445c:	7bbb      	ldrb	r3, [r7, #14]
 801445e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014462:	2b00      	cmp	r3, #0
 8014464:	d004      	beq.n	8014470 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8014466:	7bbb      	ldrb	r3, [r7, #14]
 8014468:	4619      	mov	r1, r3
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f7ff fb47 	bl	8013afe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f000 ff95 	bl	80153a0 <USBD_CtlSendStatus>
              }
              break;
 8014476:	e004      	b.n	8014482 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8014478:	6839      	ldr	r1, [r7, #0]
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f000 fb92 	bl	8014ba4 <USBD_CtlError>
              break;
 8014480:	e000      	b.n	8014484 <USBD_StdEPReq+0x14c>
              break;
 8014482:	bf00      	nop
          }
          break;
 8014484:	e073      	b.n	801456e <USBD_StdEPReq+0x236>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801448c:	2b02      	cmp	r3, #2
 801448e:	d002      	beq.n	8014496 <USBD_StdEPReq+0x15e>
 8014490:	2b03      	cmp	r3, #3
 8014492:	d02b      	beq.n	80144ec <USBD_StdEPReq+0x1b4>
 8014494:	e060      	b.n	8014558 <USBD_StdEPReq+0x220>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014496:	7bbb      	ldrb	r3, [r7, #14]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d007      	beq.n	80144ac <USBD_StdEPReq+0x174>
 801449c:	7bbb      	ldrb	r3, [r7, #14]
 801449e:	2b80      	cmp	r3, #128	; 0x80
 80144a0:	d004      	beq.n	80144ac <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80144a2:	6839      	ldr	r1, [r7, #0]
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f000 fb7d 	bl	8014ba4 <USBD_CtlError>
                break;
 80144aa:	e05a      	b.n	8014562 <USBD_StdEPReq+0x22a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	da08      	bge.n	80144c6 <USBD_StdEPReq+0x18e>
 80144b4:	7bbb      	ldrb	r3, [r7, #14]
 80144b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144ba:	3301      	adds	r3, #1
 80144bc:	011b      	lsls	r3, r3, #4
 80144be:	687a      	ldr	r2, [r7, #4]
 80144c0:	4413      	add	r3, r2
 80144c2:	3304      	adds	r3, #4
 80144c4:	e007      	b.n	80144d6 <USBD_StdEPReq+0x19e>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80144c6:	7bbb      	ldrb	r3, [r7, #14]
 80144c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144cc:	3310      	adds	r3, #16
 80144ce:	011b      	lsls	r3, r3, #4
 80144d0:	687a      	ldr	r2, [r7, #4]
 80144d2:	4413      	add	r3, r2
 80144d4:	3304      	adds	r3, #4
 80144d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	2200      	movs	r2, #0
 80144dc:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	2202      	movs	r2, #2
 80144e2:	4619      	mov	r1, r3
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f000 fefd 	bl	80152e4 <USBD_CtlSendData>
              break;
 80144ea:	e03a      	b.n	8014562 <USBD_StdEPReq+0x22a>

            case USBD_STATE_CONFIGURED:

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	da08      	bge.n	8014506 <USBD_StdEPReq+0x1ce>
 80144f4:	7bbb      	ldrb	r3, [r7, #14]
 80144f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144fa:	3301      	adds	r3, #1
 80144fc:	011b      	lsls	r3, r3, #4
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	4413      	add	r3, r2
 8014502:	3304      	adds	r3, #4
 8014504:	e007      	b.n	8014516 <USBD_StdEPReq+0x1de>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014506:	7bbb      	ldrb	r3, [r7, #14]
 8014508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801450c:	3310      	adds	r3, #16
 801450e:	011b      	lsls	r3, r3, #4
 8014510:	687a      	ldr	r2, [r7, #4]
 8014512:	4413      	add	r3, r2
 8014514:	3304      	adds	r3, #4
 8014516:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014518:	7bbb      	ldrb	r3, [r7, #14]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d002      	beq.n	8014524 <USBD_StdEPReq+0x1ec>
 801451e:	7bbb      	ldrb	r3, [r7, #14]
 8014520:	2b80      	cmp	r3, #128	; 0x80
 8014522:	d103      	bne.n	801452c <USBD_StdEPReq+0x1f4>
              {
                pep->status = 0x0000U;
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	2200      	movs	r2, #0
 8014528:	601a      	str	r2, [r3, #0]
 801452a:	e00e      	b.n	801454a <USBD_StdEPReq+0x212>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801452c:	7bbb      	ldrb	r3, [r7, #14]
 801452e:	4619      	mov	r1, r3
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f7ff fb03 	bl	8013b3c <USBD_LL_IsStallEP>
 8014536:	4603      	mov	r3, r0
 8014538:	2b00      	cmp	r3, #0
 801453a:	d003      	beq.n	8014544 <USBD_StdEPReq+0x20c>
              {
                pep->status = 0x0001U;
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	2201      	movs	r2, #1
 8014540:	601a      	str	r2, [r3, #0]
 8014542:	e002      	b.n	801454a <USBD_StdEPReq+0x212>
              }
              else
              {
                pep->status = 0x0000U;
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	2200      	movs	r2, #0
 8014548:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	2202      	movs	r2, #2
 801454e:	4619      	mov	r1, r3
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f000 fec7 	bl	80152e4 <USBD_CtlSendData>
              break;
 8014556:	e004      	b.n	8014562 <USBD_StdEPReq+0x22a>

            default:
              USBD_CtlError(pdev, req);
 8014558:	6839      	ldr	r1, [r7, #0]
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f000 fb22 	bl	8014ba4 <USBD_CtlError>
              break;
 8014560:	bf00      	nop
          }
          break;
 8014562:	e004      	b.n	801456e <USBD_StdEPReq+0x236>

        default:
          USBD_CtlError(pdev, req);
 8014564:	6839      	ldr	r1, [r7, #0]
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f000 fb1c 	bl	8014ba4 <USBD_CtlError>
          break;
 801456c:	bf00      	nop
      }
      break;
 801456e:	e004      	b.n	801457a <USBD_StdEPReq+0x242>

    default:
      USBD_CtlError(pdev, req);
 8014570:	6839      	ldr	r1, [r7, #0]
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f000 fb16 	bl	8014ba4 <USBD_CtlError>
      break;
 8014578:	bf00      	nop
  }

  return ret;
 801457a:	7bfb      	ldrb	r3, [r7, #15]
}
 801457c:	4618      	mov	r0, r3
 801457e:	3710      	adds	r7, #16
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}

08014584 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801458e:	2300      	movs	r3, #0
 8014590:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014592:	2300      	movs	r3, #0
 8014594:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014596:	2300      	movs	r3, #0
 8014598:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	885b      	ldrh	r3, [r3, #2]
 801459e:	0a1b      	lsrs	r3, r3, #8
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	3b01      	subs	r3, #1
 80145a4:	2b06      	cmp	r3, #6
 80145a6:	f200 8128 	bhi.w	80147fa <USBD_GetDescriptor+0x276>
 80145aa:	a201      	add	r2, pc, #4	; (adr r2, 80145b0 <USBD_GetDescriptor+0x2c>)
 80145ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b0:	080145cd 	.word	0x080145cd
 80145b4:	080145e5 	.word	0x080145e5
 80145b8:	08014625 	.word	0x08014625
 80145bc:	080147fb 	.word	0x080147fb
 80145c0:	080147fb 	.word	0x080147fb
 80145c4:	0801479b 	.word	0x0801479b
 80145c8:	080147c7 	.word	0x080147c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	687a      	ldr	r2, [r7, #4]
 80145d6:	7c12      	ldrb	r2, [r2, #16]
 80145d8:	f107 0108 	add.w	r1, r7, #8
 80145dc:	4610      	mov	r0, r2
 80145de:	4798      	blx	r3
 80145e0:	60f8      	str	r0, [r7, #12]
      break;
 80145e2:	e112      	b.n	801480a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	7c1b      	ldrb	r3, [r3, #16]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d10d      	bne.n	8014608 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80145f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145f4:	f107 0208 	add.w	r2, r7, #8
 80145f8:	4610      	mov	r0, r2
 80145fa:	4798      	blx	r3
 80145fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	3301      	adds	r3, #1
 8014602:	2202      	movs	r2, #2
 8014604:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014606:	e100      	b.n	801480a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014610:	f107 0208 	add.w	r2, r7, #8
 8014614:	4610      	mov	r0, r2
 8014616:	4798      	blx	r3
 8014618:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	3301      	adds	r3, #1
 801461e:	2202      	movs	r2, #2
 8014620:	701a      	strb	r2, [r3, #0]
      break;
 8014622:	e0f2      	b.n	801480a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	885b      	ldrh	r3, [r3, #2]
 8014628:	b2db      	uxtb	r3, r3
 801462a:	2b05      	cmp	r3, #5
 801462c:	f200 80ac 	bhi.w	8014788 <USBD_GetDescriptor+0x204>
 8014630:	a201      	add	r2, pc, #4	; (adr r2, 8014638 <USBD_GetDescriptor+0xb4>)
 8014632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014636:	bf00      	nop
 8014638:	08014651 	.word	0x08014651
 801463c:	08014685 	.word	0x08014685
 8014640:	080146b9 	.word	0x080146b9
 8014644:	080146ed 	.word	0x080146ed
 8014648:	08014721 	.word	0x08014721
 801464c:	08014755 	.word	0x08014755
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d00b      	beq.n	8014674 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	687a      	ldr	r2, [r7, #4]
 8014666:	7c12      	ldrb	r2, [r2, #16]
 8014668:	f107 0108 	add.w	r1, r7, #8
 801466c:	4610      	mov	r0, r2
 801466e:	4798      	blx	r3
 8014670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014672:	e091      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014674:	6839      	ldr	r1, [r7, #0]
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 fa94 	bl	8014ba4 <USBD_CtlError>
            err++;
 801467c:	7afb      	ldrb	r3, [r7, #11]
 801467e:	3301      	adds	r3, #1
 8014680:	72fb      	strb	r3, [r7, #11]
          break;
 8014682:	e089      	b.n	8014798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801468a:	689b      	ldr	r3, [r3, #8]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d00b      	beq.n	80146a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014696:	689b      	ldr	r3, [r3, #8]
 8014698:	687a      	ldr	r2, [r7, #4]
 801469a:	7c12      	ldrb	r2, [r2, #16]
 801469c:	f107 0108 	add.w	r1, r7, #8
 80146a0:	4610      	mov	r0, r2
 80146a2:	4798      	blx	r3
 80146a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146a6:	e077      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80146a8:	6839      	ldr	r1, [r7, #0]
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f000 fa7a 	bl	8014ba4 <USBD_CtlError>
            err++;
 80146b0:	7afb      	ldrb	r3, [r7, #11]
 80146b2:	3301      	adds	r3, #1
 80146b4:	72fb      	strb	r3, [r7, #11]
          break;
 80146b6:	e06f      	b.n	8014798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80146be:	68db      	ldr	r3, [r3, #12]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d00b      	beq.n	80146dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80146ca:	68db      	ldr	r3, [r3, #12]
 80146cc:	687a      	ldr	r2, [r7, #4]
 80146ce:	7c12      	ldrb	r2, [r2, #16]
 80146d0:	f107 0108 	add.w	r1, r7, #8
 80146d4:	4610      	mov	r0, r2
 80146d6:	4798      	blx	r3
 80146d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146da:	e05d      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80146dc:	6839      	ldr	r1, [r7, #0]
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f000 fa60 	bl	8014ba4 <USBD_CtlError>
            err++;
 80146e4:	7afb      	ldrb	r3, [r7, #11]
 80146e6:	3301      	adds	r3, #1
 80146e8:	72fb      	strb	r3, [r7, #11]
          break;
 80146ea:	e055      	b.n	8014798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80146f2:	691b      	ldr	r3, [r3, #16]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00b      	beq.n	8014710 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80146fe:	691b      	ldr	r3, [r3, #16]
 8014700:	687a      	ldr	r2, [r7, #4]
 8014702:	7c12      	ldrb	r2, [r2, #16]
 8014704:	f107 0108 	add.w	r1, r7, #8
 8014708:	4610      	mov	r0, r2
 801470a:	4798      	blx	r3
 801470c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801470e:	e043      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014710:	6839      	ldr	r1, [r7, #0]
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f000 fa46 	bl	8014ba4 <USBD_CtlError>
            err++;
 8014718:	7afb      	ldrb	r3, [r7, #11]
 801471a:	3301      	adds	r3, #1
 801471c:	72fb      	strb	r3, [r7, #11]
          break;
 801471e:	e03b      	b.n	8014798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014726:	695b      	ldr	r3, [r3, #20]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d00b      	beq.n	8014744 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014732:	695b      	ldr	r3, [r3, #20]
 8014734:	687a      	ldr	r2, [r7, #4]
 8014736:	7c12      	ldrb	r2, [r2, #16]
 8014738:	f107 0108 	add.w	r1, r7, #8
 801473c:	4610      	mov	r0, r2
 801473e:	4798      	blx	r3
 8014740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014742:	e029      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014744:	6839      	ldr	r1, [r7, #0]
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f000 fa2c 	bl	8014ba4 <USBD_CtlError>
            err++;
 801474c:	7afb      	ldrb	r3, [r7, #11]
 801474e:	3301      	adds	r3, #1
 8014750:	72fb      	strb	r3, [r7, #11]
          break;
 8014752:	e021      	b.n	8014798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801475a:	699b      	ldr	r3, [r3, #24]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d00b      	beq.n	8014778 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014766:	699b      	ldr	r3, [r3, #24]
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	7c12      	ldrb	r2, [r2, #16]
 801476c:	f107 0108 	add.w	r1, r7, #8
 8014770:	4610      	mov	r0, r2
 8014772:	4798      	blx	r3
 8014774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014776:	e00f      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014778:	6839      	ldr	r1, [r7, #0]
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f000 fa12 	bl	8014ba4 <USBD_CtlError>
            err++;
 8014780:	7afb      	ldrb	r3, [r7, #11]
 8014782:	3301      	adds	r3, #1
 8014784:	72fb      	strb	r3, [r7, #11]
          break;
 8014786:	e007      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014788:	6839      	ldr	r1, [r7, #0]
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 fa0a 	bl	8014ba4 <USBD_CtlError>
          err++;
 8014790:	7afb      	ldrb	r3, [r7, #11]
 8014792:	3301      	adds	r3, #1
 8014794:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8014796:	e038      	b.n	801480a <USBD_GetDescriptor+0x286>
 8014798:	e037      	b.n	801480a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	7c1b      	ldrb	r3, [r3, #16]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d109      	bne.n	80147b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80147a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147aa:	f107 0208 	add.w	r2, r7, #8
 80147ae:	4610      	mov	r0, r2
 80147b0:	4798      	blx	r3
 80147b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80147b4:	e029      	b.n	801480a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80147b6:	6839      	ldr	r1, [r7, #0]
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f000 f9f3 	bl	8014ba4 <USBD_CtlError>
        err++;
 80147be:	7afb      	ldrb	r3, [r7, #11]
 80147c0:	3301      	adds	r3, #1
 80147c2:	72fb      	strb	r3, [r7, #11]
      break;
 80147c4:	e021      	b.n	801480a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	7c1b      	ldrb	r3, [r3, #16]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d10d      	bne.n	80147ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80147d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147d6:	f107 0208 	add.w	r2, r7, #8
 80147da:	4610      	mov	r0, r2
 80147dc:	4798      	blx	r3
 80147de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	3301      	adds	r3, #1
 80147e4:	2207      	movs	r2, #7
 80147e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80147e8:	e00f      	b.n	801480a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80147ea:	6839      	ldr	r1, [r7, #0]
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f000 f9d9 	bl	8014ba4 <USBD_CtlError>
        err++;
 80147f2:	7afb      	ldrb	r3, [r7, #11]
 80147f4:	3301      	adds	r3, #1
 80147f6:	72fb      	strb	r3, [r7, #11]
      break;
 80147f8:	e007      	b.n	801480a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80147fa:	6839      	ldr	r1, [r7, #0]
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f000 f9d1 	bl	8014ba4 <USBD_CtlError>
      err++;
 8014802:	7afb      	ldrb	r3, [r7, #11]
 8014804:	3301      	adds	r3, #1
 8014806:	72fb      	strb	r3, [r7, #11]
      break;
 8014808:	bf00      	nop
  }

  if (err != 0U)
 801480a:	7afb      	ldrb	r3, [r7, #11]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d11c      	bne.n	801484a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014810:	893b      	ldrh	r3, [r7, #8]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d011      	beq.n	801483a <USBD_GetDescriptor+0x2b6>
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	88db      	ldrh	r3, [r3, #6]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d00d      	beq.n	801483a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	88da      	ldrh	r2, [r3, #6]
 8014822:	893b      	ldrh	r3, [r7, #8]
 8014824:	4293      	cmp	r3, r2
 8014826:	bf28      	it	cs
 8014828:	4613      	movcs	r3, r2
 801482a:	b29b      	uxth	r3, r3
 801482c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801482e:	893b      	ldrh	r3, [r7, #8]
 8014830:	461a      	mov	r2, r3
 8014832:	68f9      	ldr	r1, [r7, #12]
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f000 fd55 	bl	80152e4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	88db      	ldrh	r3, [r3, #6]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d104      	bne.n	801484c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014842:	6878      	ldr	r0, [r7, #4]
 8014844:	f000 fdac 	bl	80153a0 <USBD_CtlSendStatus>
 8014848:	e000      	b.n	801484c <USBD_GetDescriptor+0x2c8>
    return;
 801484a:	bf00      	nop
    }
  }
}
 801484c:	3710      	adds	r7, #16
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}
 8014852:	bf00      	nop

08014854 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b084      	sub	sp, #16
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	889b      	ldrh	r3, [r3, #4]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d130      	bne.n	80148c8 <USBD_SetAddress+0x74>
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	88db      	ldrh	r3, [r3, #6]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d12c      	bne.n	80148c8 <USBD_SetAddress+0x74>
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	885b      	ldrh	r3, [r3, #2]
 8014872:	2b7f      	cmp	r3, #127	; 0x7f
 8014874:	d828      	bhi.n	80148c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	885b      	ldrh	r3, [r3, #2]
 801487a:	b2db      	uxtb	r3, r3
 801487c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014880:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014888:	2b03      	cmp	r3, #3
 801488a:	d104      	bne.n	8014896 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801488c:	6839      	ldr	r1, [r7, #0]
 801488e:	6878      	ldr	r0, [r7, #4]
 8014890:	f000 f988 	bl	8014ba4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014894:	e01c      	b.n	80148d0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	7bfa      	ldrb	r2, [r7, #15]
 801489a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801489e:	7bfb      	ldrb	r3, [r7, #15]
 80148a0:	4619      	mov	r1, r3
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f7ff f96f 	bl	8013b86 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f000 fd79 	bl	80153a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80148ae:	7bfb      	ldrb	r3, [r7, #15]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d004      	beq.n	80148be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2202      	movs	r2, #2
 80148b8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148bc:	e008      	b.n	80148d0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	2201      	movs	r2, #1
 80148c2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148c6:	e003      	b.n	80148d0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80148c8:	6839      	ldr	r1, [r7, #0]
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 f96a 	bl	8014ba4 <USBD_CtlError>
  }
}
 80148d0:	bf00      	nop
 80148d2:	3710      	adds	r7, #16
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}

080148d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	885b      	ldrh	r3, [r3, #2]
 80148e6:	b2da      	uxtb	r2, r3
 80148e8:	4b41      	ldr	r3, [pc, #260]	; (80149f0 <USBD_SetConfig+0x118>)
 80148ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80148ec:	4b40      	ldr	r3, [pc, #256]	; (80149f0 <USBD_SetConfig+0x118>)
 80148ee:	781b      	ldrb	r3, [r3, #0]
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d904      	bls.n	80148fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80148f4:	6839      	ldr	r1, [r7, #0]
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f000 f954 	bl	8014ba4 <USBD_CtlError>
 80148fc:	e075      	b.n	80149ea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014904:	2b02      	cmp	r3, #2
 8014906:	d002      	beq.n	801490e <USBD_SetConfig+0x36>
 8014908:	2b03      	cmp	r3, #3
 801490a:	d023      	beq.n	8014954 <USBD_SetConfig+0x7c>
 801490c:	e062      	b.n	80149d4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801490e:	4b38      	ldr	r3, [pc, #224]	; (80149f0 <USBD_SetConfig+0x118>)
 8014910:	781b      	ldrb	r3, [r3, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d01a      	beq.n	801494c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8014916:	4b36      	ldr	r3, [pc, #216]	; (80149f0 <USBD_SetConfig+0x118>)
 8014918:	781b      	ldrb	r3, [r3, #0]
 801491a:	461a      	mov	r2, r3
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2203      	movs	r2, #3
 8014924:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014928:	4b31      	ldr	r3, [pc, #196]	; (80149f0 <USBD_SetConfig+0x118>)
 801492a:	781b      	ldrb	r3, [r3, #0]
 801492c:	4619      	mov	r1, r3
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f7ff fa32 	bl	8013d98 <USBD_SetClassConfig>
 8014934:	4603      	mov	r3, r0
 8014936:	2b02      	cmp	r3, #2
 8014938:	d104      	bne.n	8014944 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801493a:	6839      	ldr	r1, [r7, #0]
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f000 f931 	bl	8014ba4 <USBD_CtlError>
            return;
 8014942:	e052      	b.n	80149ea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f000 fd2b 	bl	80153a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801494a:	e04e      	b.n	80149ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f000 fd27 	bl	80153a0 <USBD_CtlSendStatus>
        break;
 8014952:	e04a      	b.n	80149ea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014954:	4b26      	ldr	r3, [pc, #152]	; (80149f0 <USBD_SetConfig+0x118>)
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d112      	bne.n	8014982 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2202      	movs	r2, #2
 8014960:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
          pdev->dev_config = cfgidx;
 8014964:	4b22      	ldr	r3, [pc, #136]	; (80149f0 <USBD_SetConfig+0x118>)
 8014966:	781b      	ldrb	r3, [r3, #0]
 8014968:	461a      	mov	r2, r3
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801496e:	4b20      	ldr	r3, [pc, #128]	; (80149f0 <USBD_SetConfig+0x118>)
 8014970:	781b      	ldrb	r3, [r3, #0]
 8014972:	4619      	mov	r1, r3
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f7ff fa2e 	bl	8013dd6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f000 fd10 	bl	80153a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014980:	e033      	b.n	80149ea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8014982:	4b1b      	ldr	r3, [pc, #108]	; (80149f0 <USBD_SetConfig+0x118>)
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	461a      	mov	r2, r3
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	685b      	ldr	r3, [r3, #4]
 801498c:	429a      	cmp	r2, r3
 801498e:	d01d      	beq.n	80149cc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	b2db      	uxtb	r3, r3
 8014996:	4619      	mov	r1, r3
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f7ff fa1c 	bl	8013dd6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801499e:	4b14      	ldr	r3, [pc, #80]	; (80149f0 <USBD_SetConfig+0x118>)
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	461a      	mov	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80149a8:	4b11      	ldr	r3, [pc, #68]	; (80149f0 <USBD_SetConfig+0x118>)
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	4619      	mov	r1, r3
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f7ff f9f2 	bl	8013d98 <USBD_SetClassConfig>
 80149b4:	4603      	mov	r3, r0
 80149b6:	2b02      	cmp	r3, #2
 80149b8:	d104      	bne.n	80149c4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80149ba:	6839      	ldr	r1, [r7, #0]
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f000 f8f1 	bl	8014ba4 <USBD_CtlError>
            return;
 80149c2:	e012      	b.n	80149ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f000 fceb 	bl	80153a0 <USBD_CtlSendStatus>
        break;
 80149ca:	e00e      	b.n	80149ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f000 fce7 	bl	80153a0 <USBD_CtlSendStatus>
        break;
 80149d2:	e00a      	b.n	80149ea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80149d4:	6839      	ldr	r1, [r7, #0]
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f000 f8e4 	bl	8014ba4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80149dc:	4b04      	ldr	r3, [pc, #16]	; (80149f0 <USBD_SetConfig+0x118>)
 80149de:	781b      	ldrb	r3, [r3, #0]
 80149e0:	4619      	mov	r1, r3
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f7ff f9f7 	bl	8013dd6 <USBD_ClrClassConfig>
        break;
 80149e8:	bf00      	nop
    }
  }
}
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	20001500 	.word	0x20001500

080149f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	88db      	ldrh	r3, [r3, #6]
 8014a02:	2b01      	cmp	r3, #1
 8014a04:	d004      	beq.n	8014a10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014a06:	6839      	ldr	r1, [r7, #0]
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f000 f8cb 	bl	8014ba4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014a0e:	e021      	b.n	8014a54 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014a16:	2b01      	cmp	r3, #1
 8014a18:	db17      	blt.n	8014a4a <USBD_GetConfig+0x56>
 8014a1a:	2b02      	cmp	r3, #2
 8014a1c:	dd02      	ble.n	8014a24 <USBD_GetConfig+0x30>
 8014a1e:	2b03      	cmp	r3, #3
 8014a20:	d00b      	beq.n	8014a3a <USBD_GetConfig+0x46>
 8014a22:	e012      	b.n	8014a4a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2200      	movs	r2, #0
 8014a28:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	3308      	adds	r3, #8
 8014a2e:	2201      	movs	r2, #1
 8014a30:	4619      	mov	r1, r3
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 fc56 	bl	80152e4 <USBD_CtlSendData>
        break;
 8014a38:	e00c      	b.n	8014a54 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	3304      	adds	r3, #4
 8014a3e:	2201      	movs	r2, #1
 8014a40:	4619      	mov	r1, r3
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f000 fc4e 	bl	80152e4 <USBD_CtlSendData>
        break;
 8014a48:	e004      	b.n	8014a54 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8014a4a:	6839      	ldr	r1, [r7, #0]
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f000 f8a9 	bl	8014ba4 <USBD_CtlError>
        break;
 8014a52:	bf00      	nop
}
 8014a54:	bf00      	nop
 8014a56:	3708      	adds	r7, #8
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}

08014a5c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b082      	sub	sp, #8
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
 8014a64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014a6c:	3b01      	subs	r3, #1
 8014a6e:	2b02      	cmp	r3, #2
 8014a70:	d81e      	bhi.n	8014ab0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	88db      	ldrh	r3, [r3, #6]
 8014a76:	2b02      	cmp	r3, #2
 8014a78:	d004      	beq.n	8014a84 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8014a7a:	6839      	ldr	r1, [r7, #0]
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f000 f891 	bl	8014ba4 <USBD_CtlError>
        break;
 8014a82:	e01a      	b.n	8014aba <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2201      	movs	r2, #1
 8014a88:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d005      	beq.n	8014aa0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	68db      	ldr	r3, [r3, #12]
 8014a98:	f043 0202 	orr.w	r2, r3, #2
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	330c      	adds	r3, #12
 8014aa4:	2202      	movs	r2, #2
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f000 fc1b 	bl	80152e4 <USBD_CtlSendData>
      break;
 8014aae:	e004      	b.n	8014aba <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8014ab0:	6839      	ldr	r1, [r7, #0]
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f000 f876 	bl	8014ba4 <USBD_CtlError>
      break;
 8014ab8:	bf00      	nop
  }
}
 8014aba:	bf00      	nop
 8014abc:	3708      	adds	r7, #8
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bd80      	pop	{r7, pc}

08014ac2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014ac2:	b580      	push	{r7, lr}
 8014ac4:	b082      	sub	sp, #8
 8014ac6:	af00      	add	r7, sp, #0
 8014ac8:	6078      	str	r0, [r7, #4]
 8014aca:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	885b      	ldrh	r3, [r3, #2]
 8014ad0:	2b01      	cmp	r3, #1
 8014ad2:	d106      	bne.n	8014ae2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2201      	movs	r2, #1
 8014ad8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    USBD_CtlSendStatus(pdev);
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f000 fc5f 	bl	80153a0 <USBD_CtlSendStatus>
  }
}
 8014ae2:	bf00      	nop
 8014ae4:	3708      	adds	r7, #8
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}

08014aea <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014aea:	b580      	push	{r7, lr}
 8014aec:	b082      	sub	sp, #8
 8014aee:	af00      	add	r7, sp, #0
 8014af0:	6078      	str	r0, [r7, #4]
 8014af2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014afa:	3b01      	subs	r3, #1
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	d80b      	bhi.n	8014b18 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	885b      	ldrh	r3, [r3, #2]
 8014b04:	2b01      	cmp	r3, #1
 8014b06:	d10c      	bne.n	8014b22 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        USBD_CtlSendStatus(pdev);
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f000 fc45 	bl	80153a0 <USBD_CtlSendStatus>
      }
      break;
 8014b16:	e004      	b.n	8014b22 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8014b18:	6839      	ldr	r1, [r7, #0]
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 f842 	bl	8014ba4 <USBD_CtlError>
      break;
 8014b20:	e000      	b.n	8014b24 <USBD_ClrFeature+0x3a>
      break;
 8014b22:	bf00      	nop
  }
}
 8014b24:	bf00      	nop
 8014b26:	3708      	adds	r7, #8
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}

08014b2c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014b2c:	b480      	push	{r7}
 8014b2e:	b083      	sub	sp, #12
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	781a      	ldrb	r2, [r3, #0]
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	785a      	ldrb	r2, [r3, #1]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	3302      	adds	r3, #2
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	b29a      	uxth	r2, r3
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	3303      	adds	r3, #3
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	021b      	lsls	r3, r3, #8
 8014b58:	b29b      	uxth	r3, r3
 8014b5a:	4413      	add	r3, r2
 8014b5c:	b29a      	uxth	r2, r3
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	3304      	adds	r3, #4
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	b29a      	uxth	r2, r3
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	3305      	adds	r3, #5
 8014b6e:	781b      	ldrb	r3, [r3, #0]
 8014b70:	b29b      	uxth	r3, r3
 8014b72:	021b      	lsls	r3, r3, #8
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	4413      	add	r3, r2
 8014b78:	b29a      	uxth	r2, r3
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	3306      	adds	r3, #6
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	b29a      	uxth	r2, r3
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	3307      	adds	r3, #7
 8014b8a:	781b      	ldrb	r3, [r3, #0]
 8014b8c:	b29b      	uxth	r3, r3
 8014b8e:	021b      	lsls	r3, r3, #8
 8014b90:	b29b      	uxth	r3, r3
 8014b92:	4413      	add	r3, r2
 8014b94:	b29a      	uxth	r2, r3
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	80da      	strh	r2, [r3, #6]

}
 8014b9a:	bf00      	nop
 8014b9c:	370c      	adds	r7, #12
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bc80      	pop	{r7}
 8014ba2:	4770      	bx	lr

08014ba4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
 8014bac:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8014bae:	2180      	movs	r1, #128	; 0x80
 8014bb0:	6878      	ldr	r0, [r7, #4]
 8014bb2:	f7fe ff85 	bl	8013ac0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8014bb6:	2100      	movs	r1, #0
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f7fe ff81 	bl	8013ac0 <USBD_LL_StallEP>
}
 8014bbe:	bf00      	nop
 8014bc0:	3708      	adds	r7, #8
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd80      	pop	{r7, pc}

08014bc6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014bc6:	b580      	push	{r7, lr}
 8014bc8:	b086      	sub	sp, #24
 8014bca:	af00      	add	r7, sp, #0
 8014bcc:	60f8      	str	r0, [r7, #12]
 8014bce:	60b9      	str	r1, [r7, #8]
 8014bd0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d032      	beq.n	8014c42 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8014bdc:	68f8      	ldr	r0, [r7, #12]
 8014bde:	f000 f834 	bl	8014c4a <USBD_GetLen>
 8014be2:	4603      	mov	r3, r0
 8014be4:	3301      	adds	r3, #1
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	005b      	lsls	r3, r3, #1
 8014bea:	b29a      	uxth	r2, r3
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8014bf0:	7dfb      	ldrb	r3, [r7, #23]
 8014bf2:	1c5a      	adds	r2, r3, #1
 8014bf4:	75fa      	strb	r2, [r7, #23]
 8014bf6:	461a      	mov	r2, r3
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	4413      	add	r3, r2
 8014bfc:	687a      	ldr	r2, [r7, #4]
 8014bfe:	7812      	ldrb	r2, [r2, #0]
 8014c00:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8014c02:	7dfb      	ldrb	r3, [r7, #23]
 8014c04:	1c5a      	adds	r2, r3, #1
 8014c06:	75fa      	strb	r2, [r7, #23]
 8014c08:	461a      	mov	r2, r3
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	4413      	add	r3, r2
 8014c0e:	2203      	movs	r2, #3
 8014c10:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8014c12:	e012      	b.n	8014c3a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	1c5a      	adds	r2, r3, #1
 8014c18:	60fa      	str	r2, [r7, #12]
 8014c1a:	7dfa      	ldrb	r2, [r7, #23]
 8014c1c:	1c51      	adds	r1, r2, #1
 8014c1e:	75f9      	strb	r1, [r7, #23]
 8014c20:	4611      	mov	r1, r2
 8014c22:	68ba      	ldr	r2, [r7, #8]
 8014c24:	440a      	add	r2, r1
 8014c26:	781b      	ldrb	r3, [r3, #0]
 8014c28:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8014c2a:	7dfb      	ldrb	r3, [r7, #23]
 8014c2c:	1c5a      	adds	r2, r3, #1
 8014c2e:	75fa      	strb	r2, [r7, #23]
 8014c30:	461a      	mov	r2, r3
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	4413      	add	r3, r2
 8014c36:	2200      	movs	r2, #0
 8014c38:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	781b      	ldrb	r3, [r3, #0]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d1e8      	bne.n	8014c14 <USBD_GetString+0x4e>
    }
  }
}
 8014c42:	bf00      	nop
 8014c44:	3718      	adds	r7, #24
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}

08014c4a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014c4a:	b480      	push	{r7}
 8014c4c:	b085      	sub	sp, #20
 8014c4e:	af00      	add	r7, sp, #0
 8014c50:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014c52:	2300      	movs	r3, #0
 8014c54:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8014c56:	e005      	b.n	8014c64 <USBD_GetLen+0x1a>
  {
    len++;
 8014c58:	7bfb      	ldrb	r3, [r7, #15]
 8014c5a:	3301      	adds	r3, #1
 8014c5c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	3301      	adds	r3, #1
 8014c62:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d1f5      	bne.n	8014c58 <USBD_GetLen+0xe>
  }

  return len;
 8014c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3714      	adds	r7, #20
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bc80      	pop	{r7}
 8014c76:	4770      	bx	lr

08014c78 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8014c78:	b480      	push	{r7}
 8014c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014c7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bc80      	pop	{r7}
 8014c84:	4770      	bx	lr

08014c86 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8014c86:	b480      	push	{r7}
 8014c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8014c8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bc80      	pop	{r7}
 8014c92:	4770      	bx	lr

08014c94 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* report)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b082      	sub	sp, #8
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
	 USBD_OutEvent_HID(report);
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f7fd fab1 	bl	8012204 <USBD_OutEvent_HID>
 /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8014ca2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3708      	adds	r7, #8
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}

08014cac <CUSTOM_HID_GetEvent_FS>:

/* USER CODE BEGIN 7 */
static int8_t CUSTOM_HID_GetEvent_FS(USBD_SetupReqTypedef* req,uint8_t** return_buf)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b082      	sub	sp, #8
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
 8014cb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_GetEvent_HID((req->wValue & 0xff),req->wLength,return_buf);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	885b      	ldrh	r3, [r3, #2]
 8014cba:	b2d8      	uxtb	r0, r3
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	88db      	ldrh	r3, [r3, #6]
 8014cc0:	683a      	ldr	r2, [r7, #0]
 8014cc2:	4619      	mov	r1, r3
 8014cc4:	f7fd fab6 	bl	8012234 <USBD_GetEvent_HID>
  return (USBD_OK);
 8014cc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014cca:	4618      	mov	r0, r3
 8014ccc:	3708      	adds	r7, #8
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}

08014cd2 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8014cd2:	b580      	push	{r7, lr}
 8014cd4:	b084      	sub	sp, #16
 8014cd6:	af00      	add	r7, sp, #0
 8014cd8:	6078      	str	r0, [r7, #4]
 8014cda:	460b      	mov	r3, r1
 8014cdc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8014ce2:	2340      	movs	r3, #64	; 0x40
 8014ce4:	2203      	movs	r2, #3
 8014ce6:	2183      	movs	r1, #131	; 0x83
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f7fe fea4 	bl	8013a36 <USBD_LL_OpenEP>
		  	  	 USBD_EP_TYPE_INTR,
				 CUSTOM_HID_EPIN_SIZE);


  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8014cee:	2340      	movs	r3, #64	; 0x40
 8014cf0:	2203      	movs	r2, #3
 8014cf2:	2102      	movs	r1, #2
 8014cf4:	6878      	ldr	r0, [r7, #4]
 8014cf6:	f7fe fe9e 	bl	8013a36 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);



  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8014cfa:	f44f 7005 	mov.w	r0, #532	; 0x214
 8014cfe:	f003 f831 	bl	8017d64 <malloc>
 8014d02:	4603      	mov	r3, r0
 8014d04:	461a      	mov	r2, r3
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->pClassData == NULL)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d102      	bne.n	8014d1c <USBD_CUSTOM_HID_Init+0x4a>
  {
    ret = 1U;
 8014d16:	2301      	movs	r3, #1
 8014d18:	73fb      	strb	r3, [r7, #15]
 8014d1a:	e013      	b.n	8014d44 <USBD_CUSTOM_HID_Init+0x72>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014d22:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	2200      	movs	r2, #0
 8014d28:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014d32:	685b      	ldr	r3, [r3, #4]
 8014d34:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8014d36:	68ba      	ldr	r2, [r7, #8]
 8014d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d3c:	2102      	movs	r1, #2
 8014d3e:	6878      	ldr	r0, [r7, #4]
 8014d40:	f7fe ff63 	bl	8013c0a <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8014d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	3710      	adds	r7, #16
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}

08014d4e <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8014d4e:	b580      	push	{r7, lr}
 8014d50:	b082      	sub	sp, #8
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	6078      	str	r0, [r7, #4]
 8014d56:	460b      	mov	r3, r1
 8014d58:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8014d5a:	2183      	movs	r1, #131	; 0x83
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f7fe fe90 	bl	8013a82 <USBD_LL_CloseEP>


  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8014d62:	2102      	movs	r1, #2
 8014d64:	6878      	ldr	r0, [r7, #4]
 8014d66:	f7fe fe8c 	bl	8013a82 <USBD_LL_CloseEP>


  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d00e      	beq.n	8014d92 <USBD_CUSTOM_HID_DeInit+0x44>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014d7a:	689b      	ldr	r3, [r3, #8]
 8014d7c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014d84:	4618      	mov	r0, r3
 8014d86:	f002 fff5 	bl	8017d74 <free>
    pdev->pClassData = NULL;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  return USBD_OK;
 8014d92:	2300      	movs	r3, #0
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	3708      	adds	r7, #8
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b088      	sub	sp, #32
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014dac:	613b      	str	r3, [r7, #16]

  uint8_t* get_feature_return_buf;
  uint16_t len = 0U;
 8014dae:	2300      	movs	r3, #0
 8014db0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8014db2:	2300      	movs	r3, #0
 8014db4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8014db6:	2300      	movs	r3, #0
 8014db8:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	781b      	ldrb	r3, [r3, #0]
 8014dc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d076      	beq.n	8014eb8 <USBD_CUSTOM_HID_Setup+0x11c>
 8014dca:	2b20      	cmp	r3, #32
 8014dcc:	f040 8102 	bne.w	8014fd4 <USBD_CUSTOM_HID_Setup+0x238>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	785b      	ldrb	r3, [r3, #1]
 8014dd4:	3b01      	subs	r3, #1
 8014dd6:	2b0a      	cmp	r3, #10
 8014dd8:	d866      	bhi.n	8014ea8 <USBD_CUSTOM_HID_Setup+0x10c>
 8014dda:	a201      	add	r2, pc, #4	; (adr r2, 8014de0 <USBD_CUSTOM_HID_Setup+0x44>)
 8014ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014de0:	08014e6d 	.word	0x08014e6d
 8014de4:	08014e43 	.word	0x08014e43
 8014de8:	08014e1d 	.word	0x08014e1d
 8014dec:	08014ea9 	.word	0x08014ea9
 8014df0:	08014ea9 	.word	0x08014ea9
 8014df4:	08014ea9 	.word	0x08014ea9
 8014df8:	08014ea9 	.word	0x08014ea9
 8014dfc:	08014ea9 	.word	0x08014ea9
 8014e00:	08014e55 	.word	0x08014e55
 8014e04:	08014e2f 	.word	0x08014e2f
 8014e08:	08014e0d 	.word	0x08014e0d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	885b      	ldrh	r3, [r3, #2]
 8014e10:	b2db      	uxtb	r3, r3
 8014e12:	461a      	mov	r2, r3
 8014e14:	693b      	ldr	r3, [r7, #16]
 8014e16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
          break;
 8014e1a:	e04c      	b.n	8014eb6 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8014e1c:	693b      	ldr	r3, [r7, #16]
 8014e1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014e22:	2201      	movs	r2, #1
 8014e24:	4619      	mov	r1, r3
 8014e26:	6878      	ldr	r0, [r7, #4]
 8014e28:	f000 fa5c 	bl	80152e4 <USBD_CtlSendData>
          break;
 8014e2c:	e043      	b.n	8014eb6 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	885b      	ldrh	r3, [r3, #2]
 8014e32:	0a1b      	lsrs	r3, r3, #8
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	b2db      	uxtb	r3, r3
 8014e38:	461a      	mov	r2, r3
 8014e3a:	693b      	ldr	r3, [r7, #16]
 8014e3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
          break;
 8014e40:	e039      	b.n	8014eb6 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8014e48:	2201      	movs	r2, #1
 8014e4a:	4619      	mov	r1, r3
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f000 fa49 	bl	80152e4 <USBD_CtlSendData>
          break;
 8014e52:	e030      	b.n	8014eb6 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	2201      	movs	r2, #1
 8014e58:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8014e5c:	6939      	ldr	r1, [r7, #16]
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	88db      	ldrh	r3, [r3, #6]
 8014e62:	461a      	mov	r2, r3
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f000 fa6b 	bl	8015340 <USBD_CtlPrepareRx>
          break;
 8014e6a:	e024      	b.n	8014eb6 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_REPORT: //TODO: check get reports
          get_feature_return_buf = 0;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	60fb      	str	r3, [r7, #12]
          ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->GetEvent(req, &get_feature_return_buf);
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014e76:	691b      	ldr	r3, [r3, #16]
 8014e78:	f107 020c 	add.w	r2, r7, #12
 8014e7c:	4611      	mov	r1, r2
 8014e7e:	6838      	ldr	r0, [r7, #0]
 8014e80:	4798      	blx	r3
          // user must set return buffer in callback now
          if(get_feature_return_buf == 0){
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d105      	bne.n	8014e94 <USBD_CUSTOM_HID_Setup+0xf8>
        	  USBD_CtlError (pdev, req);
 8014e88:	6839      	ldr	r1, [r7, #0]
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f7ff fe8a 	bl	8014ba4 <USBD_CtlError>
        	  return USBD_FAIL;
 8014e90:	2302      	movs	r3, #2
 8014e92:	e0a7      	b.n	8014fe4 <USBD_CUSTOM_HID_Setup+0x248>
           }else{
        	   USBD_CtlSendData (pdev, get_feature_return_buf, (uint8_t)(req->wLength));
 8014e94:	68f9      	ldr	r1, [r7, #12]
 8014e96:	683b      	ldr	r3, [r7, #0]
 8014e98:	88db      	ldrh	r3, [r3, #6]
 8014e9a:	b2db      	uxtb	r3, r3
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	461a      	mov	r2, r3
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f000 fa1f 	bl	80152e4 <USBD_CtlSendData>
            }

          break;
 8014ea6:	e006      	b.n	8014eb6 <USBD_CUSTOM_HID_Setup+0x11a>
        default:
          USBD_CtlError(pdev, req);
 8014ea8:	6839      	ldr	r1, [r7, #0]
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f7ff fe7a 	bl	8014ba4 <USBD_CtlError>
          ret = USBD_FAIL;
 8014eb0:	2302      	movs	r3, #2
 8014eb2:	75fb      	strb	r3, [r7, #23]
          break;
 8014eb4:	bf00      	nop
      }
      break;
 8014eb6:	e094      	b.n	8014fe2 <USBD_CUSTOM_HID_Setup+0x246>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	785b      	ldrb	r3, [r3, #1]
 8014ebc:	2b0b      	cmp	r3, #11
 8014ebe:	f200 8081 	bhi.w	8014fc4 <USBD_CUSTOM_HID_Setup+0x228>
 8014ec2:	a201      	add	r2, pc, #4	; (adr r2, 8014ec8 <USBD_CUSTOM_HID_Setup+0x12c>)
 8014ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ec8:	08014ef9 	.word	0x08014ef9
 8014ecc:	08014fc5 	.word	0x08014fc5
 8014ed0:	08014fc5 	.word	0x08014fc5
 8014ed4:	08014fc5 	.word	0x08014fc5
 8014ed8:	08014fc5 	.word	0x08014fc5
 8014edc:	08014fc5 	.word	0x08014fc5
 8014ee0:	08014f21 	.word	0x08014f21
 8014ee4:	08014fc5 	.word	0x08014fc5
 8014ee8:	08014fc5 	.word	0x08014fc5
 8014eec:	08014fc5 	.word	0x08014fc5
 8014ef0:	08014f73 	.word	0x08014f73
 8014ef4:	08014f9d 	.word	0x08014f9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014efe:	2b03      	cmp	r3, #3
 8014f00:	d107      	bne.n	8014f12 <USBD_CUSTOM_HID_Setup+0x176>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8014f02:	f107 030a 	add.w	r3, r7, #10
 8014f06:	2202      	movs	r2, #2
 8014f08:	4619      	mov	r1, r3
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f000 f9ea 	bl	80152e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f10:	e05f      	b.n	8014fd2 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 8014f12:	6839      	ldr	r1, [r7, #0]
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	f7ff fe45 	bl	8014ba4 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f1a:	2302      	movs	r3, #2
 8014f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8014f1e:	e058      	b.n	8014fd2 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8014f20:	683b      	ldr	r3, [r7, #0]
 8014f22:	885b      	ldrh	r3, [r3, #2]
 8014f24:	0a1b      	lsrs	r3, r3, #8
 8014f26:	b29b      	uxth	r3, r3
 8014f28:	2b22      	cmp	r3, #34	; 0x22
 8014f2a:	d10d      	bne.n	8014f48 <USBD_CUSTOM_HID_Setup+0x1ac>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	88db      	ldrh	r3, [r3, #6]
 8014f30:	f240 42f3 	movw	r2, #1267	; 0x4f3
 8014f34:	4293      	cmp	r3, r2
 8014f36:	bf28      	it	cs
 8014f38:	4613      	movcs	r3, r2
 8014f3a:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	61bb      	str	r3, [r7, #24]
 8014f46:	e00d      	b.n	8014f64 <USBD_CUSTOM_HID_Setup+0x1c8>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	885b      	ldrh	r3, [r3, #2]
 8014f4c:	0a1b      	lsrs	r3, r3, #8
 8014f4e:	b29b      	uxth	r3, r3
 8014f50:	2b21      	cmp	r3, #33	; 0x21
 8014f52:	d107      	bne.n	8014f64 <USBD_CUSTOM_HID_Setup+0x1c8>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8014f54:	4b25      	ldr	r3, [pc, #148]	; (8014fec <USBD_CUSTOM_HID_Setup+0x250>)
 8014f56:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	88db      	ldrh	r3, [r3, #6]
 8014f5c:	2b09      	cmp	r3, #9
 8014f5e:	bf28      	it	cs
 8014f60:	2309      	movcs	r3, #9
 8014f62:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8014f64:	8bfb      	ldrh	r3, [r7, #30]
 8014f66:	461a      	mov	r2, r3
 8014f68:	69b9      	ldr	r1, [r7, #24]
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	f000 f9ba 	bl	80152e4 <USBD_CtlSendData>
          break;
 8014f70:	e02f      	b.n	8014fd2 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014f78:	2b03      	cmp	r3, #3
 8014f7a:	d108      	bne.n	8014f8e <USBD_CUSTOM_HID_Setup+0x1f2>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014f82:	2201      	movs	r2, #1
 8014f84:	4619      	mov	r1, r3
 8014f86:	6878      	ldr	r0, [r7, #4]
 8014f88:	f000 f9ac 	bl	80152e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f8c:	e021      	b.n	8014fd2 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 8014f8e:	6839      	ldr	r1, [r7, #0]
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f7ff fe07 	bl	8014ba4 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f96:	2302      	movs	r3, #2
 8014f98:	75fb      	strb	r3, [r7, #23]
          break;
 8014f9a:	e01a      	b.n	8014fd2 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014fa2:	2b03      	cmp	r3, #3
 8014fa4:	d107      	bne.n	8014fb6 <USBD_CUSTOM_HID_Setup+0x21a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	885b      	ldrh	r3, [r3, #2]
 8014faa:	b2db      	uxtb	r3, r3
 8014fac:	461a      	mov	r2, r3
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014fb4:	e00d      	b.n	8014fd2 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 8014fb6:	6839      	ldr	r1, [r7, #0]
 8014fb8:	6878      	ldr	r0, [r7, #4]
 8014fba:	f7ff fdf3 	bl	8014ba4 <USBD_CtlError>
            ret = USBD_FAIL;
 8014fbe:	2302      	movs	r3, #2
 8014fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8014fc2:	e006      	b.n	8014fd2 <USBD_CUSTOM_HID_Setup+0x236>

        default:
          USBD_CtlError(pdev, req);
 8014fc4:	6839      	ldr	r1, [r7, #0]
 8014fc6:	6878      	ldr	r0, [r7, #4]
 8014fc8:	f7ff fdec 	bl	8014ba4 <USBD_CtlError>
          ret = USBD_FAIL;
 8014fcc:	2302      	movs	r3, #2
 8014fce:	75fb      	strb	r3, [r7, #23]
          break;
 8014fd0:	bf00      	nop
      }
      break;
 8014fd2:	e006      	b.n	8014fe2 <USBD_CUSTOM_HID_Setup+0x246>

    default:
      USBD_CtlError(pdev, req);
 8014fd4:	6839      	ldr	r1, [r7, #0]
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f7ff fde4 	bl	8014ba4 <USBD_CtlError>
      ret = USBD_FAIL;
 8014fdc:	2302      	movs	r3, #2
 8014fde:	75fb      	strb	r3, [r7, #23]
      break;
 8014fe0:	bf00      	nop
  }
  return ret;
 8014fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3720      	adds	r7, #32
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	200006d8 	.word	0x200006d8

08014ff0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b086      	sub	sp, #24
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	60f8      	str	r0, [r7, #12]
 8014ff8:	60b9      	str	r1, [r7, #8]
 8014ffa:	4613      	mov	r3, r2
 8014ffc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015004:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801500c:	2b03      	cmp	r3, #3
 801500e:	d111      	bne.n	8015034 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8015016:	2b00      	cmp	r3, #0
 8015018:	d10a      	bne.n	8015030 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 801501a:	697b      	ldr	r3, [r7, #20]
 801501c:	2201      	movs	r2, #1
 801501e:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8015022:	88fb      	ldrh	r3, [r7, #6]
 8015024:	68ba      	ldr	r2, [r7, #8]
 8015026:	2183      	movs	r1, #131	; 0x83
 8015028:	68f8      	ldr	r0, [r7, #12]
 801502a:	f7fe fdcb 	bl	8013bc4 <USBD_LL_Transmit>
 801502e:	e001      	b.n	8015034 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8015030:	2301      	movs	r3, #1
 8015032:	e000      	b.n	8015036 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8015034:	2300      	movs	r3, #0
}
 8015036:	4618      	mov	r0, r3
 8015038:	3718      	adds	r7, #24
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}
	...

08015040 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8015040:	b480      	push	{r7}
 8015042:	b083      	sub	sp, #12
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	2229      	movs	r2, #41	; 0x29
 801504c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 801504e:	4b03      	ldr	r3, [pc, #12]	; (801505c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8015050:	4618      	mov	r0, r3
 8015052:	370c      	adds	r7, #12
 8015054:	46bd      	mov	sp, r7
 8015056:	bc80      	pop	{r7}
 8015058:	4770      	bx	lr
 801505a:	bf00      	nop
 801505c:	20000654 	.word	0x20000654

08015060 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8015060:	b480      	push	{r7}
 8015062:	b083      	sub	sp, #12
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2229      	movs	r2, #41	; 0x29
 801506c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 801506e:	4b03      	ldr	r3, [pc, #12]	; (801507c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8015070:	4618      	mov	r0, r3
 8015072:	370c      	adds	r7, #12
 8015074:	46bd      	mov	sp, r7
 8015076:	bc80      	pop	{r7}
 8015078:	4770      	bx	lr
 801507a:	bf00      	nop
 801507c:	20000680 	.word	0x20000680

08015080 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015080:	b480      	push	{r7}
 8015082:	b083      	sub	sp, #12
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	2229      	movs	r2, #41	; 0x29
 801508c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 801508e:	4b03      	ldr	r3, [pc, #12]	; (801509c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8015090:	4618      	mov	r0, r3
 8015092:	370c      	adds	r7, #12
 8015094:	46bd      	mov	sp, r7
 8015096:	bc80      	pop	{r7}
 8015098:	4770      	bx	lr
 801509a:	bf00      	nop
 801509c:	200006ac 	.word	0x200006ac

080150a0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80150a0:	b480      	push	{r7}
 80150a2:	b083      	sub	sp, #12
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	460b      	mov	r3, r1
 80150aa:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80150b2:	2200      	movs	r2, #0
 80150b4:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80150b8:	2300      	movs	r3, #0
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	370c      	adds	r7, #12
 80150be:	46bd      	mov	sp, r7
 80150c0:	bc80      	pop	{r7}
 80150c2:	4770      	bx	lr

080150c4 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b084      	sub	sp, #16
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
 80150cc:	460b      	mov	r3, r1
 80150ce:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80150d6:	60fb      	str	r3, [r7, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],hhid->Report_buf[1]);

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80150de:	68db      	ldr	r3, [r3, #12]
 80150e0:	68fa      	ldr	r2, [r7, #12]
 80150e2:	4610      	mov	r0, r2
 80150e4:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80150e6:	68fa      	ldr	r2, [r7, #12]
 80150e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80150ec:	2102      	movs	r1, #2
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f7fe fd8b 	bl	8013c0a <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80150f4:	2300      	movs	r3, #0
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3710      	adds	r7, #16
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}

080150fe <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80150fe:	b580      	push	{r7, lr}
 8015100:	b084      	sub	sp, #16
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801510c:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8015114:	2b01      	cmp	r3, #1
 8015116:	d10a      	bne.n	801512e <USBD_CUSTOM_HID_EP0_RxReady+0x30>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801511e:	68db      	ldr	r3, [r3, #12]
 8015120:	68fa      	ldr	r2, [r7, #12]
 8015122:	4610      	mov	r0, r2
 8015124:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	2200      	movs	r2, #0
 801512a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  }

  return USBD_OK;
 801512e:	2300      	movs	r3, #0
}
 8015130:	4618      	mov	r0, r3
 8015132:	3710      	adds	r7, #16
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}

08015138 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8015138:	b480      	push	{r7}
 801513a:	b083      	sub	sp, #12
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	220a      	movs	r2, #10
 8015144:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8015146:	4b03      	ldr	r3, [pc, #12]	; (8015154 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8015148:	4618      	mov	r0, r3
 801514a:	370c      	adds	r7, #12
 801514c:	46bd      	mov	sp, r7
 801514e:	bc80      	pop	{r7}
 8015150:	4770      	bx	lr
 8015152:	bf00      	nop
 8015154:	200006e4 	.word	0x200006e4

08015158 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8015158:	b480      	push	{r7}
 801515a:	b085      	sub	sp, #20
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
 8015160:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8015162:	2302      	movs	r3, #2
 8015164:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8015166:	683b      	ldr	r3, [r7, #0]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d005      	beq.n	8015178 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	683a      	ldr	r2, [r7, #0]
 8015170:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;
 8015174:	2300      	movs	r3, #0
 8015176:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015178:	7bfb      	ldrb	r3, [r7, #15]
}
 801517a:	4618      	mov	r0, r3
 801517c:	3714      	adds	r7, #20
 801517e:	46bd      	mov	sp, r7
 8015180:	bc80      	pop	{r7}
 8015182:	4770      	bx	lr

08015184 <USBD_FS_DeviceDescriptor_Composite>:
    USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
    USBD_MAX_NUM_CONFIGURATION  /*bNumConfigurations*/
  } ;

uint8_t * USBD_FS_DeviceDescriptor_Composite(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015184:	b480      	push	{r7}
 8015186:	b083      	sub	sp, #12
 8015188:	af00      	add	r7, sp, #0
 801518a:	4603      	mov	r3, r0
 801518c:	6039      	str	r1, [r7, #0]
 801518e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc_Composite);
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	2212      	movs	r2, #18
 8015194:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc_Composite;
 8015196:	4b03      	ldr	r3, [pc, #12]	; (80151a4 <USBD_FS_DeviceDescriptor_Composite+0x20>)
}
 8015198:	4618      	mov	r0, r3
 801519a:	370c      	adds	r7, #12
 801519c:	46bd      	mov	sp, r7
 801519e:	bc80      	pop	{r7}
 80151a0:	4770      	bx	lr
 80151a2:	bf00      	nop
 80151a4:	2000070c 	.word	0x2000070c

080151a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151a8:	b480      	push	{r7}
 80151aa:	b083      	sub	sp, #12
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	4603      	mov	r3, r0
 80151b0:	6039      	str	r1, [r7, #0]
 80151b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	2204      	movs	r2, #4
 80151b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80151ba:	4b03      	ldr	r3, [pc, #12]	; (80151c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80151bc:	4618      	mov	r0, r3
 80151be:	370c      	adds	r7, #12
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bc80      	pop	{r7}
 80151c4:	4770      	bx	lr
 80151c6:	bf00      	nop
 80151c8:	20000720 	.word	0x20000720

080151cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	4603      	mov	r3, r0
 80151d4:	6039      	str	r1, [r7, #0]
 80151d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80151d8:	79fb      	ldrb	r3, [r7, #7]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d105      	bne.n	80151ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80151de:	683a      	ldr	r2, [r7, #0]
 80151e0:	4907      	ldr	r1, [pc, #28]	; (8015200 <USBD_FS_ProductStrDescriptor+0x34>)
 80151e2:	4808      	ldr	r0, [pc, #32]	; (8015204 <USBD_FS_ProductStrDescriptor+0x38>)
 80151e4:	f7ff fcef 	bl	8014bc6 <USBD_GetString>
 80151e8:	e004      	b.n	80151f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80151ea:	683a      	ldr	r2, [r7, #0]
 80151ec:	4904      	ldr	r1, [pc, #16]	; (8015200 <USBD_FS_ProductStrDescriptor+0x34>)
 80151ee:	4805      	ldr	r0, [pc, #20]	; (8015204 <USBD_FS_ProductStrDescriptor+0x38>)
 80151f0:	f7ff fce9 	bl	8014bc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80151f4:	4b02      	ldr	r3, [pc, #8]	; (8015200 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3708      	adds	r7, #8
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}
 80151fe:	bf00      	nop
 8015200:	20001fa0 	.word	0x20001fa0
 8015204:	08018cc0 	.word	0x08018cc0

08015208 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	4603      	mov	r3, r0
 8015210:	6039      	str	r1, [r7, #0]
 8015212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015214:	683a      	ldr	r2, [r7, #0]
 8015216:	4904      	ldr	r1, [pc, #16]	; (8015228 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015218:	4804      	ldr	r0, [pc, #16]	; (801522c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801521a:	f7ff fcd4 	bl	8014bc6 <USBD_GetString>
  return USBD_StrDesc;
 801521e:	4b02      	ldr	r3, [pc, #8]	; (8015228 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015220:	4618      	mov	r0, r3
 8015222:	3708      	adds	r7, #8
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}
 8015228:	20001fa0 	.word	0x20001fa0
 801522c:	08018ccc 	.word	0x08018ccc

08015230 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b082      	sub	sp, #8
 8015234:	af00      	add	r7, sp, #0
 8015236:	4603      	mov	r3, r0
 8015238:	6039      	str	r1, [r7, #0]
 801523a:	71fb      	strb	r3, [r7, #7]
	if(speed == USBD_SPEED_HIGH)
 801523c:	79fb      	ldrb	r3, [r7, #7]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d105      	bne.n	801524e <USBD_FS_SerialStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8015242:	683a      	ldr	r2, [r7, #0]
 8015244:	4907      	ldr	r1, [pc, #28]	; (8015264 <USBD_FS_SerialStrDescriptor+0x34>)
 8015246:	4808      	ldr	r0, [pc, #32]	; (8015268 <USBD_FS_SerialStrDescriptor+0x38>)
 8015248:	f7ff fcbd 	bl	8014bc6 <USBD_GetString>
 801524c:	e004      	b.n	8015258 <USBD_FS_SerialStrDescriptor+0x28>
	}
	else
	{
	    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 801524e:	683a      	ldr	r2, [r7, #0]
 8015250:	4904      	ldr	r1, [pc, #16]	; (8015264 <USBD_FS_SerialStrDescriptor+0x34>)
 8015252:	4805      	ldr	r0, [pc, #20]	; (8015268 <USBD_FS_SerialStrDescriptor+0x38>)
 8015254:	f7ff fcb7 	bl	8014bc6 <USBD_GetString>
	}
	return USBD_StrDesc;
 8015258:	4b02      	ldr	r3, [pc, #8]	; (8015264 <USBD_FS_SerialStrDescriptor+0x34>)
}
 801525a:	4618      	mov	r0, r3
 801525c:	3708      	adds	r7, #8
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}
 8015262:	bf00      	nop
 8015264:	20001fa0 	.word	0x20001fa0
 8015268:	08018cdc 	.word	0x08018cdc

0801526c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	4603      	mov	r3, r0
 8015274:	6039      	str	r1, [r7, #0]
 8015276:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015278:	79fb      	ldrb	r3, [r7, #7]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d105      	bne.n	801528a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801527e:	683a      	ldr	r2, [r7, #0]
 8015280:	4907      	ldr	r1, [pc, #28]	; (80152a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015282:	4808      	ldr	r0, [pc, #32]	; (80152a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015284:	f7ff fc9f 	bl	8014bc6 <USBD_GetString>
 8015288:	e004      	b.n	8015294 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801528a:	683a      	ldr	r2, [r7, #0]
 801528c:	4904      	ldr	r1, [pc, #16]	; (80152a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801528e:	4805      	ldr	r0, [pc, #20]	; (80152a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015290:	f7ff fc99 	bl	8014bc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015294:	4b02      	ldr	r3, [pc, #8]	; (80152a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015296:	4618      	mov	r0, r3
 8015298:	3708      	adds	r7, #8
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
 801529e:	bf00      	nop
 80152a0:	20001fa0 	.word	0x20001fa0
 80152a4:	08018cec 	.word	0x08018cec

080152a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	4603      	mov	r3, r0
 80152b0:	6039      	str	r1, [r7, #0]
 80152b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80152b4:	79fb      	ldrb	r3, [r7, #7]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d105      	bne.n	80152c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80152ba:	683a      	ldr	r2, [r7, #0]
 80152bc:	4907      	ldr	r1, [pc, #28]	; (80152dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80152be:	4808      	ldr	r0, [pc, #32]	; (80152e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80152c0:	f7ff fc81 	bl	8014bc6 <USBD_GetString>
 80152c4:	e004      	b.n	80152d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80152c6:	683a      	ldr	r2, [r7, #0]
 80152c8:	4904      	ldr	r1, [pc, #16]	; (80152dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80152ca:	4805      	ldr	r0, [pc, #20]	; (80152e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80152cc:	f7ff fc7b 	bl	8014bc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80152d0:	4b02      	ldr	r3, [pc, #8]	; (80152dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	3708      	adds	r7, #8
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	20001fa0 	.word	0x20001fa0
 80152e0:	08018cfc 	.word	0x08018cfc

080152e4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b084      	sub	sp, #16
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	60f8      	str	r0, [r7, #12]
 80152ec:	60b9      	str	r1, [r7, #8]
 80152ee:	4613      	mov	r3, r2
 80152f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	2202      	movs	r2, #2
 80152f6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80152fa:	88fa      	ldrh	r2, [r7, #6]
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8015300:	88fa      	ldrh	r2, [r7, #6]
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015306:	88fb      	ldrh	r3, [r7, #6]
 8015308:	68ba      	ldr	r2, [r7, #8]
 801530a:	2100      	movs	r1, #0
 801530c:	68f8      	ldr	r0, [r7, #12]
 801530e:	f7fe fc59 	bl	8013bc4 <USBD_LL_Transmit>

  return USBD_OK;
 8015312:	2300      	movs	r3, #0
}
 8015314:	4618      	mov	r0, r3
 8015316:	3710      	adds	r7, #16
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}

0801531c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b084      	sub	sp, #16
 8015320:	af00      	add	r7, sp, #0
 8015322:	60f8      	str	r0, [r7, #12]
 8015324:	60b9      	str	r1, [r7, #8]
 8015326:	4613      	mov	r3, r2
 8015328:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801532a:	88fb      	ldrh	r3, [r7, #6]
 801532c:	68ba      	ldr	r2, [r7, #8]
 801532e:	2100      	movs	r1, #0
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f7fe fc47 	bl	8013bc4 <USBD_LL_Transmit>

  return USBD_OK;
 8015336:	2300      	movs	r3, #0
}
 8015338:	4618      	mov	r0, r3
 801533a:	3710      	adds	r7, #16
 801533c:	46bd      	mov	sp, r7
 801533e:	bd80      	pop	{r7, pc}

08015340 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af00      	add	r7, sp, #0
 8015346:	60f8      	str	r0, [r7, #12]
 8015348:	60b9      	str	r1, [r7, #8]
 801534a:	4613      	mov	r3, r2
 801534c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	2203      	movs	r2, #3
 8015352:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8015356:	88fa      	ldrh	r2, [r7, #6]
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 801535e:	88fa      	ldrh	r2, [r7, #6]
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015366:	88fb      	ldrh	r3, [r7, #6]
 8015368:	68ba      	ldr	r2, [r7, #8]
 801536a:	2100      	movs	r1, #0
 801536c:	68f8      	ldr	r0, [r7, #12]
 801536e:	f7fe fc4c 	bl	8013c0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015372:	2300      	movs	r3, #0
}
 8015374:	4618      	mov	r0, r3
 8015376:	3710      	adds	r7, #16
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}

0801537c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	60f8      	str	r0, [r7, #12]
 8015384:	60b9      	str	r1, [r7, #8]
 8015386:	4613      	mov	r3, r2
 8015388:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801538a:	88fb      	ldrh	r3, [r7, #6]
 801538c:	68ba      	ldr	r2, [r7, #8]
 801538e:	2100      	movs	r1, #0
 8015390:	68f8      	ldr	r0, [r7, #12]
 8015392:	f7fe fc3a 	bl	8013c0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015396:	2300      	movs	r3, #0
}
 8015398:	4618      	mov	r0, r3
 801539a:	3710      	adds	r7, #16
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}

080153a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b082      	sub	sp, #8
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2204      	movs	r2, #4
 80153ac:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80153b0:	2300      	movs	r3, #0
 80153b2:	2200      	movs	r2, #0
 80153b4:	2100      	movs	r1, #0
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f7fe fc04 	bl	8013bc4 <USBD_LL_Transmit>

  return USBD_OK;
 80153bc:	2300      	movs	r3, #0
}
 80153be:	4618      	mov	r0, r3
 80153c0:	3708      	adds	r7, #8
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}

080153c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80153c6:	b580      	push	{r7, lr}
 80153c8:	b082      	sub	sp, #8
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2205      	movs	r2, #5
 80153d2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153d6:	2300      	movs	r3, #0
 80153d8:	2200      	movs	r2, #0
 80153da:	2100      	movs	r1, #0
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f7fe fc14 	bl	8013c0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80153e2:	2300      	movs	r3, #0
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3708      	adds	r7, #8
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}

080153ec <_Znaj>:
 80153ec:	f000 b802 	b.w	80153f4 <_Znwj>

080153f0 <_ZdlPvj>:
 80153f0:	f000 b81a 	b.w	8015428 <_ZdlPv>

080153f4 <_Znwj>:
 80153f4:	b510      	push	{r4, lr}
 80153f6:	2800      	cmp	r0, #0
 80153f8:	bf14      	ite	ne
 80153fa:	4604      	movne	r4, r0
 80153fc:	2401      	moveq	r4, #1
 80153fe:	4620      	mov	r0, r4
 8015400:	f002 fcb0 	bl	8017d64 <malloc>
 8015404:	b930      	cbnz	r0, 8015414 <_Znwj+0x20>
 8015406:	f000 f807 	bl	8015418 <_ZSt15get_new_handlerv>
 801540a:	b908      	cbnz	r0, 8015410 <_Znwj+0x1c>
 801540c:	f002 fc79 	bl	8017d02 <abort>
 8015410:	4780      	blx	r0
 8015412:	e7f4      	b.n	80153fe <_Znwj+0xa>
 8015414:	bd10      	pop	{r4, pc}
	...

08015418 <_ZSt15get_new_handlerv>:
 8015418:	4b02      	ldr	r3, [pc, #8]	; (8015424 <_ZSt15get_new_handlerv+0xc>)
 801541a:	6818      	ldr	r0, [r3, #0]
 801541c:	f3bf 8f5b 	dmb	ish
 8015420:	4770      	bx	lr
 8015422:	bf00      	nop
 8015424:	20001504 	.word	0x20001504

08015428 <_ZdlPv>:
 8015428:	f002 bca4 	b.w	8017d74 <free>

0801542c <_ZNSaIcEC1Ev>:
 801542c:	4770      	bx	lr

0801542e <_ZNSaIcED1Ev>:
 801542e:	4770      	bx	lr

08015430 <_ZSt17__throw_bad_allocv>:
 8015430:	b508      	push	{r3, lr}
 8015432:	f002 fc66 	bl	8017d02 <abort>

08015436 <_ZSt19__throw_logic_errorPKc>:
 8015436:	b508      	push	{r3, lr}
 8015438:	f002 fc63 	bl	8017d02 <abort>

0801543c <_ZSt24__throw_invalid_argumentPKc>:
 801543c:	b508      	push	{r3, lr}
 801543e:	f002 fc60 	bl	8017d02 <abort>

08015442 <_ZSt20__throw_length_errorPKc>:
 8015442:	b508      	push	{r3, lr}
 8015444:	f002 fc5d 	bl	8017d02 <abort>

08015448 <_ZSt20__throw_out_of_rangePKc>:
 8015448:	b508      	push	{r3, lr}
 801544a:	f002 fc5a 	bl	8017d02 <abort>

0801544e <_ZSt24__throw_out_of_range_fmtPKcz>:
 801544e:	b40f      	push	{r0, r1, r2, r3}
 8015450:	b580      	push	{r7, lr}
 8015452:	b082      	sub	sp, #8
 8015454:	af00      	add	r7, sp, #0
 8015456:	f107 0410 	add.w	r4, r7, #16
 801545a:	f854 5b04 	ldr.w	r5, [r4], #4
 801545e:	4628      	mov	r0, r5
 8015460:	f7ea fe76 	bl	8000150 <strlen>
 8015464:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8015468:	f023 0307 	bic.w	r3, r3, #7
 801546c:	ebad 0d03 	sub.w	sp, sp, r3
 8015470:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8015474:	4623      	mov	r3, r4
 8015476:	462a      	mov	r2, r5
 8015478:	4668      	mov	r0, sp
 801547a:	607c      	str	r4, [r7, #4]
 801547c:	f000 faa8 	bl	80159d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8015480:	f002 fc3f 	bl	8017d02 <abort>

08015484 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8015484:	b10a      	cbz	r2, 801548a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8015486:	f002 bc8b 	b.w	8017da0 <memcmp>
 801548a:	4610      	mov	r0, r2
 801548c:	4770      	bx	lr

0801548e <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 801548e:	4613      	mov	r3, r2
 8015490:	460a      	mov	r2, r1
 8015492:	b111      	cbz	r1, 801549a <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 8015494:	7819      	ldrb	r1, [r3, #0]
 8015496:	f002 bc75 	b.w	8017d84 <memchr>
 801549a:	4608      	mov	r0, r1
 801549c:	4770      	bx	lr

0801549e <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801549e:	b10a      	cbz	r2, 80154a4 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80154a0:	f002 bc8d 	b.w	8017dbe <memcpy>
 80154a4:	4770      	bx	lr

080154a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80154a6:	6001      	str	r1, [r0, #0]
 80154a8:	4770      	bx	lr

080154aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80154aa:	6800      	ldr	r0, [r0, #0]
 80154ac:	4770      	bx	lr

080154ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80154ae:	3008      	adds	r0, #8
 80154b0:	4770      	bx	lr

080154b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80154b2:	6081      	str	r1, [r0, #8]
 80154b4:	4770      	bx	lr

080154b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80154b6:	2200      	movs	r2, #0
 80154b8:	6803      	ldr	r3, [r0, #0]
 80154ba:	6041      	str	r1, [r0, #4]
 80154bc:	545a      	strb	r2, [r3, r1]
 80154be:	4770      	bx	lr

080154c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80154c0:	b508      	push	{r3, lr}
 80154c2:	680b      	ldr	r3, [r1, #0]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	da02      	bge.n	80154ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80154c8:	4809      	ldr	r0, [pc, #36]	; (80154f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80154ca:	f7ff ffba 	bl	8015442 <_ZSt20__throw_length_errorPKc>
 80154ce:	4293      	cmp	r3, r2
 80154d0:	d908      	bls.n	80154e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80154d2:	0052      	lsls	r2, r2, #1
 80154d4:	4293      	cmp	r3, r2
 80154d6:	d205      	bcs.n	80154e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80154d8:	2a00      	cmp	r2, #0
 80154da:	bfb6      	itet	lt
 80154dc:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80154e0:	600a      	strge	r2, [r1, #0]
 80154e2:	600b      	strlt	r3, [r1, #0]
 80154e4:	6808      	ldr	r0, [r1, #0]
 80154e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80154ea:	3001      	adds	r0, #1
 80154ec:	f7ff bf82 	b.w	80153f4 <_Znwj>
 80154f0:	08018ef3 	.word	0x08018ef3

080154f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80154f4:	4603      	mov	r3, r0
 80154f6:	f853 0b08 	ldr.w	r0, [r3], #8
 80154fa:	4298      	cmp	r0, r3
 80154fc:	d001      	beq.n	8015502 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80154fe:	f7ff bf93 	b.w	8015428 <_ZdlPv>
 8015502:	4770      	bx	lr

08015504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8015504:	b510      	push	{r4, lr}
 8015506:	6843      	ldr	r3, [r0, #4]
 8015508:	4614      	mov	r4, r2
 801550a:	4299      	cmp	r1, r3
 801550c:	d904      	bls.n	8015518 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 801550e:	460a      	mov	r2, r1
 8015510:	4802      	ldr	r0, [pc, #8]	; (801551c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8015512:	4621      	mov	r1, r4
 8015514:	f7ff ff9b 	bl	801544e <_ZSt24__throw_out_of_range_fmtPKcz>
 8015518:	4608      	mov	r0, r1
 801551a:	bd10      	pop	{r4, pc}
 801551c:	08018e7d 	.word	0x08018e7d

08015520 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8015520:	b508      	push	{r3, lr}
 8015522:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8015526:	6840      	ldr	r0, [r0, #4]
 8015528:	3901      	subs	r1, #1
 801552a:	1a09      	subs	r1, r1, r0
 801552c:	4291      	cmp	r1, r2
 801552e:	d202      	bcs.n	8015536 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8015530:	4618      	mov	r0, r3
 8015532:	f7ff ff86 	bl	8015442 <_ZSt20__throw_length_errorPKc>
 8015536:	bd08      	pop	{r3, pc}

08015538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8015538:	2a01      	cmp	r2, #1
 801553a:	b510      	push	{r4, lr}
 801553c:	d102      	bne.n	8015544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 801553e:	780a      	ldrb	r2, [r1, #0]
 8015540:	7002      	strb	r2, [r0, #0]
 8015542:	bd10      	pop	{r4, pc}
 8015544:	f7ff ffab 	bl	801549e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8015548:	e7fb      	b.n	8015542 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0801554a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801554a:	b508      	push	{r3, lr}
 801554c:	1a52      	subs	r2, r2, r1
 801554e:	f7ff fff3 	bl	8015538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015552:	bd08      	pop	{r3, pc}

08015554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8015554:	b508      	push	{r3, lr}
 8015556:	1a52      	subs	r2, r2, r1
 8015558:	f7ff ffee 	bl	8015538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801555c:	bd08      	pop	{r3, pc}

0801555e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 801555e:	4288      	cmp	r0, r1
 8015560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015562:	4604      	mov	r4, r0
 8015564:	460e      	mov	r6, r1
 8015566:	d020      	beq.n	80155aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8015568:	6802      	ldr	r2, [r0, #0]
 801556a:	f100 0308 	add.w	r3, r0, #8
 801556e:	429a      	cmp	r2, r3
 8015570:	bf08      	it	eq
 8015572:	220f      	moveq	r2, #15
 8015574:	684d      	ldr	r5, [r1, #4]
 8015576:	bf18      	it	ne
 8015578:	6882      	ldrne	r2, [r0, #8]
 801557a:	42aa      	cmp	r2, r5
 801557c:	d20b      	bcs.n	8015596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 801557e:	a902      	add	r1, sp, #8
 8015580:	f841 5d04 	str.w	r5, [r1, #-4]!
 8015584:	f7ff ff9c 	bl	80154c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015588:	4607      	mov	r7, r0
 801558a:	4620      	mov	r0, r4
 801558c:	f7ff ffb2 	bl	80154f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015590:	9b01      	ldr	r3, [sp, #4]
 8015592:	6027      	str	r7, [r4, #0]
 8015594:	60a3      	str	r3, [r4, #8]
 8015596:	b125      	cbz	r5, 80155a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8015598:	462a      	mov	r2, r5
 801559a:	6831      	ldr	r1, [r6, #0]
 801559c:	6820      	ldr	r0, [r4, #0]
 801559e:	f7ff ffcb 	bl	8015538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80155a2:	2200      	movs	r2, #0
 80155a4:	6823      	ldr	r3, [r4, #0]
 80155a6:	6065      	str	r5, [r4, #4]
 80155a8:	555a      	strb	r2, [r3, r5]
 80155aa:	b003      	add	sp, #12
 80155ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080155ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80155ae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80155b2:	4616      	mov	r6, r2
 80155b4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80155b8:	6842      	ldr	r2, [r0, #4]
 80155ba:	469a      	mov	sl, r3
 80155bc:	eba8 0306 	sub.w	r3, r8, r6
 80155c0:	1a57      	subs	r7, r2, r1
 80155c2:	4413      	add	r3, r2
 80155c4:	6802      	ldr	r2, [r0, #0]
 80155c6:	9301      	str	r3, [sp, #4]
 80155c8:	f100 0308 	add.w	r3, r0, #8
 80155cc:	429a      	cmp	r2, r3
 80155ce:	460d      	mov	r5, r1
 80155d0:	bf14      	ite	ne
 80155d2:	6882      	ldrne	r2, [r0, #8]
 80155d4:	220f      	moveq	r2, #15
 80155d6:	a901      	add	r1, sp, #4
 80155d8:	4604      	mov	r4, r0
 80155da:	f7ff ff71 	bl	80154c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80155de:	1bbf      	subs	r7, r7, r6
 80155e0:	4681      	mov	r9, r0
 80155e2:	b11d      	cbz	r5, 80155ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80155e4:	462a      	mov	r2, r5
 80155e6:	6821      	ldr	r1, [r4, #0]
 80155e8:	f7ff ffa6 	bl	8015538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80155ec:	f1ba 0f00 	cmp.w	sl, #0
 80155f0:	d008      	beq.n	8015604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80155f2:	f1b8 0f00 	cmp.w	r8, #0
 80155f6:	d005      	beq.n	8015604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80155f8:	4642      	mov	r2, r8
 80155fa:	4651      	mov	r1, sl
 80155fc:	eb09 0005 	add.w	r0, r9, r5
 8015600:	f7ff ff9a 	bl	8015538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015604:	b147      	cbz	r7, 8015618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8015606:	6821      	ldr	r1, [r4, #0]
 8015608:	442e      	add	r6, r5
 801560a:	eb05 0008 	add.w	r0, r5, r8
 801560e:	463a      	mov	r2, r7
 8015610:	4431      	add	r1, r6
 8015612:	4448      	add	r0, r9
 8015614:	f7ff ff90 	bl	8015538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015618:	4620      	mov	r0, r4
 801561a:	f7ff ff6b 	bl	80154f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801561e:	9b01      	ldr	r3, [sp, #4]
 8015620:	f8c4 9000 	str.w	r9, [r4]
 8015624:	60a3      	str	r3, [r4, #8]
 8015626:	b002      	add	sp, #8
 8015628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801562c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801562c:	f100 0208 	add.w	r2, r0, #8
 8015630:	6002      	str	r2, [r0, #0]
 8015632:	2200      	movs	r2, #0
 8015634:	6042      	str	r2, [r0, #4]
 8015636:	7202      	strb	r2, [r0, #8]
 8015638:	4770      	bx	lr

0801563a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 801563a:	b570      	push	{r4, r5, r6, lr}
 801563c:	4604      	mov	r4, r0
 801563e:	460e      	mov	r6, r1
 8015640:	3008      	adds	r0, #8
 8015642:	6020      	str	r0, [r4, #0]
 8015644:	f856 3b08 	ldr.w	r3, [r6], #8
 8015648:	460d      	mov	r5, r1
 801564a:	429e      	cmp	r6, r3
 801564c:	d10b      	bne.n	8015666 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 801564e:	2210      	movs	r2, #16
 8015650:	4631      	mov	r1, r6
 8015652:	f7ff ff24 	bl	801549e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8015656:	686b      	ldr	r3, [r5, #4]
 8015658:	4620      	mov	r0, r4
 801565a:	6063      	str	r3, [r4, #4]
 801565c:	2300      	movs	r3, #0
 801565e:	602e      	str	r6, [r5, #0]
 8015660:	606b      	str	r3, [r5, #4]
 8015662:	722b      	strb	r3, [r5, #8]
 8015664:	bd70      	pop	{r4, r5, r6, pc}
 8015666:	6023      	str	r3, [r4, #0]
 8015668:	688b      	ldr	r3, [r1, #8]
 801566a:	60a3      	str	r3, [r4, #8]
 801566c:	e7f3      	b.n	8015656 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0801566e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801566e:	b510      	push	{r4, lr}
 8015670:	4604      	mov	r4, r0
 8015672:	f7ff ff3f 	bl	80154f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015676:	4620      	mov	r0, r4
 8015678:	bd10      	pop	{r4, pc}

0801567a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 801567a:	b510      	push	{r4, lr}
 801567c:	4604      	mov	r4, r0
 801567e:	f7ff ff6e 	bl	801555e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8015682:	4620      	mov	r0, r4
 8015684:	bd10      	pop	{r4, pc}

08015686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8015686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015688:	460b      	mov	r3, r1
 801568a:	4606      	mov	r6, r0
 801568c:	f853 7b08 	ldr.w	r7, [r3], #8
 8015690:	4605      	mov	r5, r0
 8015692:	42bb      	cmp	r3, r7
 8015694:	460c      	mov	r4, r1
 8015696:	f856 2b08 	ldr.w	r2, [r6], #8
 801569a:	d016      	beq.n	80156ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 801569c:	4296      	cmp	r6, r2
 801569e:	bf08      	it	eq
 80156a0:	2200      	moveq	r2, #0
 80156a2:	6007      	str	r7, [r0, #0]
 80156a4:	6849      	ldr	r1, [r1, #4]
 80156a6:	bf18      	it	ne
 80156a8:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 80156ac:	6041      	str	r1, [r0, #4]
 80156ae:	68a1      	ldr	r1, [r4, #8]
 80156b0:	6081      	str	r1, [r0, #8]
 80156b2:	b142      	cbz	r2, 80156c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80156b4:	6022      	str	r2, [r4, #0]
 80156b6:	f8c4 c008 	str.w	ip, [r4, #8]
 80156ba:	2300      	movs	r3, #0
 80156bc:	6822      	ldr	r2, [r4, #0]
 80156be:	6063      	str	r3, [r4, #4]
 80156c0:	7013      	strb	r3, [r2, #0]
 80156c2:	4628      	mov	r0, r5
 80156c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156c6:	6023      	str	r3, [r4, #0]
 80156c8:	e7f7      	b.n	80156ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 80156ca:	f7ff ff48 	bl	801555e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80156ce:	e7f4      	b.n	80156ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

080156d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 80156d0:	6840      	ldr	r0, [r0, #4]
 80156d2:	4770      	bx	lr

080156d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 80156d4:	2300      	movs	r3, #0
 80156d6:	6802      	ldr	r2, [r0, #0]
 80156d8:	6043      	str	r3, [r0, #4]
 80156da:	7013      	strb	r3, [r2, #0]
 80156dc:	4770      	bx	lr

080156de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80156de:	6840      	ldr	r0, [r0, #4]
 80156e0:	fab0 f080 	clz	r0, r0
 80156e4:	0940      	lsrs	r0, r0, #5
 80156e6:	4770      	bx	lr

080156e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80156e8:	6800      	ldr	r0, [r0, #0]
 80156ea:	4408      	add	r0, r1
 80156ec:	4770      	bx	lr

080156ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>:
 80156ee:	6843      	ldr	r3, [r0, #4]
 80156f0:	6800      	ldr	r0, [r0, #0]
 80156f2:	3b01      	subs	r3, #1
 80156f4:	4418      	add	r0, r3
 80156f6:	4770      	bx	lr

080156f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80156f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156fa:	6802      	ldr	r2, [r0, #0]
 80156fc:	f100 0308 	add.w	r3, r0, #8
 8015700:	429a      	cmp	r2, r3
 8015702:	bf08      	it	eq
 8015704:	230f      	moveq	r3, #15
 8015706:	6846      	ldr	r6, [r0, #4]
 8015708:	bf18      	it	ne
 801570a:	6883      	ldrne	r3, [r0, #8]
 801570c:	1c75      	adds	r5, r6, #1
 801570e:	429d      	cmp	r5, r3
 8015710:	4604      	mov	r4, r0
 8015712:	460f      	mov	r7, r1
 8015714:	d906      	bls.n	8015724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 8015716:	2301      	movs	r3, #1
 8015718:	9300      	str	r3, [sp, #0]
 801571a:	2300      	movs	r3, #0
 801571c:	4631      	mov	r1, r6
 801571e:	461a      	mov	r2, r3
 8015720:	f7ff ff45 	bl	80155ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8015724:	2200      	movs	r2, #0
 8015726:	6823      	ldr	r3, [r4, #0]
 8015728:	559f      	strb	r7, [r3, r6]
 801572a:	6823      	ldr	r3, [r4, #0]
 801572c:	6065      	str	r5, [r4, #4]
 801572e:	555a      	strb	r2, [r3, r5]
 8015730:	b003      	add	sp, #12
 8015732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8015734:	b510      	push	{r4, lr}
 8015736:	4604      	mov	r4, r0
 8015738:	f7ff ffde 	bl	80156f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 801573c:	4620      	mov	r0, r4
 801573e:	bd10      	pop	{r4, pc}

08015740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8015740:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015742:	4604      	mov	r4, r0
 8015744:	4626      	mov	r6, r4
 8015746:	f856 3b08 	ldr.w	r3, [r6], #8
 801574a:	6840      	ldr	r0, [r0, #4]
 801574c:	42b3      	cmp	r3, r6
 801574e:	bf0c      	ite	eq
 8015750:	260f      	moveq	r6, #15
 8015752:	68a6      	ldrne	r6, [r4, #8]
 8015754:	1885      	adds	r5, r0, r2
 8015756:	42b5      	cmp	r5, r6
 8015758:	d80a      	bhi.n	8015770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 801575a:	b112      	cbz	r2, 8015762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 801575c:	4418      	add	r0, r3
 801575e:	f7ff feeb 	bl	8015538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015762:	2200      	movs	r2, #0
 8015764:	4620      	mov	r0, r4
 8015766:	6823      	ldr	r3, [r4, #0]
 8015768:	6065      	str	r5, [r4, #4]
 801576a:	555a      	strb	r2, [r3, r5]
 801576c:	b002      	add	sp, #8
 801576e:	bd70      	pop	{r4, r5, r6, pc}
 8015770:	9200      	str	r2, [sp, #0]
 8015772:	460b      	mov	r3, r1
 8015774:	2200      	movs	r2, #0
 8015776:	4601      	mov	r1, r0
 8015778:	4620      	mov	r0, r4
 801577a:	f7ff ff18 	bl	80155ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801577e:	e7f0      	b.n	8015762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08015780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8015780:	b508      	push	{r3, lr}
 8015782:	e9d1 1200 	ldrd	r1, r2, [r1]
 8015786:	f7ff ffdb 	bl	8015740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801578a:	bd08      	pop	{r3, pc}

0801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 801578c:	b508      	push	{r3, lr}
 801578e:	f7ff fff7 	bl	8015780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8015792:	bd08      	pop	{r3, pc}

08015794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8015794:	b570      	push	{r4, r5, r6, lr}
 8015796:	4604      	mov	r4, r0
 8015798:	460d      	mov	r5, r1
 801579a:	4616      	mov	r6, r2
 801579c:	4b04      	ldr	r3, [pc, #16]	; (80157b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 801579e:	2100      	movs	r1, #0
 80157a0:	f7ff febe 	bl	8015520 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80157a4:	4632      	mov	r2, r6
 80157a6:	4629      	mov	r1, r5
 80157a8:	4620      	mov	r0, r4
 80157aa:	f7ff ffc9 	bl	8015740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80157ae:	bd70      	pop	{r4, r5, r6, pc}
 80157b0:	08018ede 	.word	0x08018ede

080157b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80157b4:	b570      	push	{r4, r5, r6, lr}
 80157b6:	4604      	mov	r4, r0
 80157b8:	4608      	mov	r0, r1
 80157ba:	460d      	mov	r5, r1
 80157bc:	f7ea fcc8 	bl	8000150 <strlen>
 80157c0:	4606      	mov	r6, r0
 80157c2:	4602      	mov	r2, r0
 80157c4:	4b05      	ldr	r3, [pc, #20]	; (80157dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80157c6:	4620      	mov	r0, r4
 80157c8:	2100      	movs	r1, #0
 80157ca:	f7ff fea9 	bl	8015520 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80157ce:	4632      	mov	r2, r6
 80157d0:	4629      	mov	r1, r5
 80157d2:	4620      	mov	r0, r4
 80157d4:	f7ff ffb4 	bl	8015740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80157d8:	bd70      	pop	{r4, r5, r6, pc}
 80157da:	bf00      	nop
 80157dc:	08018ede 	.word	0x08018ede

080157e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 80157e0:	b508      	push	{r3, lr}
 80157e2:	f7ff ffe7 	bl	80157b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 80157e6:	bd08      	pop	{r3, pc}

080157e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80157e8:	6800      	ldr	r0, [r0, #0]
 80157ea:	4770      	bx	lr

080157ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 80157ec:	b513      	push	{r0, r1, r4, lr}
 80157ee:	f88d 1007 	strb.w	r1, [sp, #7]
 80157f2:	6841      	ldr	r1, [r0, #4]
 80157f4:	4613      	mov	r3, r2
 80157f6:	428a      	cmp	r2, r1
 80157f8:	d20a      	bcs.n	8015810 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80157fa:	6804      	ldr	r4, [r0, #0]
 80157fc:	f10d 0207 	add.w	r2, sp, #7
 8015800:	1ac9      	subs	r1, r1, r3
 8015802:	18e0      	adds	r0, r4, r3
 8015804:	f7ff fe43 	bl	801548e <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8015808:	b110      	cbz	r0, 8015810 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 801580a:	1b00      	subs	r0, r0, r4
 801580c:	b002      	add	sp, #8
 801580e:	bd10      	pop	{r4, pc}
 8015810:	f04f 30ff 	mov.w	r0, #4294967295
 8015814:	e7fa      	b.n	801580c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

08015816 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8015816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015818:	4606      	mov	r6, r0
 801581a:	6845      	ldr	r5, [r0, #4]
 801581c:	4608      	mov	r0, r1
 801581e:	460f      	mov	r7, r1
 8015820:	f7ea fc96 	bl	8000150 <strlen>
 8015824:	4285      	cmp	r5, r0
 8015826:	4604      	mov	r4, r0
 8015828:	462a      	mov	r2, r5
 801582a:	4639      	mov	r1, r7
 801582c:	bf28      	it	cs
 801582e:	4602      	movcs	r2, r0
 8015830:	6830      	ldr	r0, [r6, #0]
 8015832:	f7ff fe27 	bl	8015484 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8015836:	b900      	cbnz	r0, 801583a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8015838:	1b28      	subs	r0, r5, r4
 801583a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801583c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 801583c:	6001      	str	r1, [r0, #0]
 801583e:	4770      	bx	lr

08015840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8015840:	b510      	push	{r4, lr}
 8015842:	4604      	mov	r4, r0
 8015844:	f100 0208 	add.w	r2, r0, #8
 8015848:	6002      	str	r2, [r0, #0]
 801584a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801584e:	f04f 0300 	mov.w	r3, #0
 8015852:	440a      	add	r2, r1
 8015854:	f7f8 fe76 	bl	800e544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8015858:	4620      	mov	r0, r4
 801585a:	bd10      	pop	{r4, pc}

0801585c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801585c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801585e:	4604      	mov	r4, r0
 8015860:	4616      	mov	r6, r2
 8015862:	460d      	mov	r5, r1
 8015864:	b919      	cbnz	r1, 801586e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8015866:	b112      	cbz	r2, 801586e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8015868:	480d      	ldr	r0, [pc, #52]	; (80158a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801586a:	f7ff fde4 	bl	8015436 <_ZSt19__throw_logic_errorPKc>
 801586e:	1b73      	subs	r3, r6, r5
 8015870:	2b0f      	cmp	r3, #15
 8015872:	9301      	str	r3, [sp, #4]
 8015874:	d907      	bls.n	8015886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8015876:	2200      	movs	r2, #0
 8015878:	a901      	add	r1, sp, #4
 801587a:	4620      	mov	r0, r4
 801587c:	f7ff fe20 	bl	80154c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015880:	9b01      	ldr	r3, [sp, #4]
 8015882:	6020      	str	r0, [r4, #0]
 8015884:	60a3      	str	r3, [r4, #8]
 8015886:	4632      	mov	r2, r6
 8015888:	4629      	mov	r1, r5
 801588a:	6820      	ldr	r0, [r4, #0]
 801588c:	f7ff fe62 	bl	8015554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8015890:	2100      	movs	r1, #0
 8015892:	9b01      	ldr	r3, [sp, #4]
 8015894:	6822      	ldr	r2, [r4, #0]
 8015896:	6063      	str	r3, [r4, #4]
 8015898:	54d1      	strb	r1, [r2, r3]
 801589a:	b002      	add	sp, #8
 801589c:	bd70      	pop	{r4, r5, r6, pc}
 801589e:	bf00      	nop
 80158a0:	08018eb4 	.word	0x08018eb4

080158a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80158a4:	b538      	push	{r3, r4, r5, lr}
 80158a6:	f100 0308 	add.w	r3, r0, #8
 80158aa:	4604      	mov	r4, r0
 80158ac:	6003      	str	r3, [r0, #0]
 80158ae:	460d      	mov	r5, r1
 80158b0:	b159      	cbz	r1, 80158ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80158b2:	4608      	mov	r0, r1
 80158b4:	f7ea fc4c 	bl	8000150 <strlen>
 80158b8:	182a      	adds	r2, r5, r0
 80158ba:	4620      	mov	r0, r4
 80158bc:	f04f 0300 	mov.w	r3, #0
 80158c0:	4629      	mov	r1, r5
 80158c2:	f7ff ffcb 	bl	801585c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80158c6:	4620      	mov	r0, r4
 80158c8:	bd38      	pop	{r3, r4, r5, pc}
 80158ca:	f04f 32ff 	mov.w	r2, #4294967295
 80158ce:	e7f4      	b.n	80158ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080158d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80158d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158d2:	460d      	mov	r5, r1
 80158d4:	4616      	mov	r6, r2
 80158d6:	461f      	mov	r7, r3
 80158d8:	f100 0308 	add.w	r3, r0, #8
 80158dc:	4604      	mov	r4, r0
 80158de:	6003      	str	r3, [r0, #0]
 80158e0:	4631      	mov	r1, r6
 80158e2:	4a09      	ldr	r2, [pc, #36]	; (8015908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x38>)
 80158e4:	4628      	mov	r0, r5
 80158e6:	f7ff fe0d 	bl	8015504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80158ea:	6829      	ldr	r1, [r5, #0]
 80158ec:	686a      	ldr	r2, [r5, #4]
 80158ee:	4401      	add	r1, r0
 80158f0:	1b92      	subs	r2, r2, r6
 80158f2:	4620      	mov	r0, r4
 80158f4:	f04f 0300 	mov.w	r3, #0
 80158f8:	42ba      	cmp	r2, r7
 80158fa:	bf94      	ite	ls
 80158fc:	188a      	addls	r2, r1, r2
 80158fe:	19ca      	addhi	r2, r1, r7
 8015900:	f7ff ffac 	bl	801585c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8015904:	4620      	mov	r0, r4
 8015906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015908:	08018f0b 	.word	0x08018f0b

0801590c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 801590c:	b570      	push	{r4, r5, r6, lr}
 801590e:	460d      	mov	r5, r1
 8015910:	4604      	mov	r4, r0
 8015912:	4611      	mov	r1, r2
 8015914:	4628      	mov	r0, r5
 8015916:	4a06      	ldr	r2, [pc, #24]	; (8015930 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8015918:	461e      	mov	r6, r3
 801591a:	f7ff fdf3 	bl	8015504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 801591e:	4633      	mov	r3, r6
 8015920:	4602      	mov	r2, r0
 8015922:	4629      	mov	r1, r5
 8015924:	4620      	mov	r0, r4
 8015926:	f7ff ffd3 	bl	80158d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 801592a:	4620      	mov	r0, r4
 801592c:	bd70      	pop	{r4, r5, r6, pc}
 801592e:	bf00      	nop
 8015930:	08018e68 	.word	0x08018e68

08015934 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8015934:	b580      	push	{r7, lr}
 8015936:	b09c      	sub	sp, #112	; 0x70
 8015938:	af00      	add	r7, sp, #0
 801593a:	1a0e      	subs	r6, r1, r0
 801593c:	4680      	mov	r8, r0
 801593e:	2269      	movs	r2, #105	; 0x69
 8015940:	490e      	ldr	r1, [pc, #56]	; (801597c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8015942:	1d38      	adds	r0, r7, #4
 8015944:	f002 fa3b 	bl	8017dbe <memcpy>
 8015948:	f106 0377 	add.w	r3, r6, #119	; 0x77
 801594c:	f023 0307 	bic.w	r3, r3, #7
 8015950:	ebad 0d03 	sub.w	sp, sp, r3
 8015954:	466c      	mov	r4, sp
 8015956:	2268      	movs	r2, #104	; 0x68
 8015958:	1d39      	adds	r1, r7, #4
 801595a:	4620      	mov	r0, r4
 801595c:	f002 fa2f 	bl	8017dbe <memcpy>
 8015960:	4632      	mov	r2, r6
 8015962:	4641      	mov	r1, r8
 8015964:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015968:	f002 fa29 	bl	8017dbe <memcpy>
 801596c:	2300      	movs	r3, #0
 801596e:	1c75      	adds	r5, r6, #1
 8015970:	4425      	add	r5, r4
 8015972:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8015976:	4620      	mov	r0, r4
 8015978:	f7ff fd5d 	bl	8015436 <_ZSt19__throw_logic_errorPKc>
 801597c:	08018f31 	.word	0x08018f31

08015980 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8015980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015982:	af00      	add	r7, sp, #0
 8015984:	b086      	sub	sp, #24
 8015986:	466d      	mov	r5, sp
 8015988:	f105 040c 	add.w	r4, r5, #12
 801598c:	4623      	mov	r3, r4
 801598e:	f04f 0c0a 	mov.w	ip, #10
 8015992:	f8df e038 	ldr.w	lr, [pc, #56]	; 80159cc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8015996:	fbb2 f6fc 	udiv	r6, r2, ip
 801599a:	fb0c 2216 	mls	r2, ip, r6, r2
 801599e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80159a2:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80159a6:	4632      	mov	r2, r6
 80159a8:	2e00      	cmp	r6, #0
 80159aa:	d1f4      	bne.n	8015996 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 80159ac:	1ae4      	subs	r4, r4, r3
 80159ae:	428c      	cmp	r4, r1
 80159b0:	d808      	bhi.n	80159c4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80159b2:	f1c4 010c 	rsb	r1, r4, #12
 80159b6:	4622      	mov	r2, r4
 80159b8:	4429      	add	r1, r5
 80159ba:	f002 fa00 	bl	8017dbe <memcpy>
 80159be:	4620      	mov	r0, r4
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159c4:	f04f 34ff 	mov.w	r4, #4294967295
 80159c8:	e7f9      	b.n	80159be <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 80159ca:	bf00      	nop
 80159cc:	08018f26 	.word	0x08018f26

080159d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80159d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159d4:	4606      	mov	r6, r0
 80159d6:	4615      	mov	r5, r2
 80159d8:	4604      	mov	r4, r0
 80159da:	3901      	subs	r1, #1
 80159dc:	1847      	adds	r7, r0, r1
 80159de:	782a      	ldrb	r2, [r5, #0]
 80159e0:	b39a      	cbz	r2, 8015a4a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80159e2:	42bc      	cmp	r4, r7
 80159e4:	d22d      	bcs.n	8015a42 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80159e6:	2a25      	cmp	r2, #37	; 0x25
 80159e8:	d107      	bne.n	80159fa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80159ea:	786a      	ldrb	r2, [r5, #1]
 80159ec:	2a73      	cmp	r2, #115	; 0x73
 80159ee:	d00a      	beq.n	8015a06 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80159f0:	2a7a      	cmp	r2, #122	; 0x7a
 80159f2:	d013      	beq.n	8015a1c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80159f4:	2a25      	cmp	r2, #37	; 0x25
 80159f6:	d100      	bne.n	80159fa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80159f8:	3501      	adds	r5, #1
 80159fa:	782a      	ldrb	r2, [r5, #0]
 80159fc:	3401      	adds	r4, #1
 80159fe:	f804 2c01 	strb.w	r2, [r4, #-1]
 8015a02:	3501      	adds	r5, #1
 8015a04:	e7eb      	b.n	80159de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8015a06:	1d19      	adds	r1, r3, #4
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	3b01      	subs	r3, #1
 8015a0c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8015a10:	b1a2      	cbz	r2, 8015a3c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 8015a12:	42bc      	cmp	r4, r7
 8015a14:	d015      	beq.n	8015a42 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8015a16:	f804 2b01 	strb.w	r2, [r4], #1
 8015a1a:	e7f7      	b.n	8015a0c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8015a1c:	78aa      	ldrb	r2, [r5, #2]
 8015a1e:	2a75      	cmp	r2, #117	; 0x75
 8015a20:	d1eb      	bne.n	80159fa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8015a22:	681a      	ldr	r2, [r3, #0]
 8015a24:	1b39      	subs	r1, r7, r4
 8015a26:	4620      	mov	r0, r4
 8015a28:	f103 0804 	add.w	r8, r3, #4
 8015a2c:	f7ff ffa8 	bl	8015980 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8015a30:	2800      	cmp	r0, #0
 8015a32:	dd06      	ble.n	8015a42 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8015a34:	4404      	add	r4, r0
 8015a36:	3503      	adds	r5, #3
 8015a38:	4643      	mov	r3, r8
 8015a3a:	e7d0      	b.n	80159de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8015a3c:	3502      	adds	r5, #2
 8015a3e:	460b      	mov	r3, r1
 8015a40:	e7cd      	b.n	80159de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8015a42:	4621      	mov	r1, r4
 8015a44:	4630      	mov	r0, r6
 8015a46:	f7ff ff75 	bl	8015934 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8015a4a:	7022      	strb	r2, [r4, #0]
 8015a4c:	1ba0      	subs	r0, r4, r6
 8015a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08015a54 <cosf>:
 8015a54:	b507      	push	{r0, r1, r2, lr}
 8015a56:	4a18      	ldr	r2, [pc, #96]	; (8015ab8 <cosf+0x64>)
 8015a58:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015a5c:	4293      	cmp	r3, r2
 8015a5e:	4601      	mov	r1, r0
 8015a60:	dc03      	bgt.n	8015a6a <cosf+0x16>
 8015a62:	2100      	movs	r1, #0
 8015a64:	f001 fc08 	bl	8017278 <__kernel_cosf>
 8015a68:	e004      	b.n	8015a74 <cosf+0x20>
 8015a6a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015a6e:	db04      	blt.n	8015a7a <cosf+0x26>
 8015a70:	f7eb f85e 	bl	8000b30 <__aeabi_fsub>
 8015a74:	b003      	add	sp, #12
 8015a76:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a7a:	4669      	mov	r1, sp
 8015a7c:	f001 faa4 	bl	8016fc8 <__ieee754_rem_pio2f>
 8015a80:	f000 0203 	and.w	r2, r0, #3
 8015a84:	2a01      	cmp	r2, #1
 8015a86:	d005      	beq.n	8015a94 <cosf+0x40>
 8015a88:	2a02      	cmp	r2, #2
 8015a8a:	d00a      	beq.n	8015aa2 <cosf+0x4e>
 8015a8c:	b972      	cbnz	r2, 8015aac <cosf+0x58>
 8015a8e:	9901      	ldr	r1, [sp, #4]
 8015a90:	9800      	ldr	r0, [sp, #0]
 8015a92:	e7e7      	b.n	8015a64 <cosf+0x10>
 8015a94:	9901      	ldr	r1, [sp, #4]
 8015a96:	9800      	ldr	r0, [sp, #0]
 8015a98:	f001 ff0c 	bl	80178b4 <__kernel_sinf>
 8015a9c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015aa0:	e7e8      	b.n	8015a74 <cosf+0x20>
 8015aa2:	9901      	ldr	r1, [sp, #4]
 8015aa4:	9800      	ldr	r0, [sp, #0]
 8015aa6:	f001 fbe7 	bl	8017278 <__kernel_cosf>
 8015aaa:	e7f7      	b.n	8015a9c <cosf+0x48>
 8015aac:	2201      	movs	r2, #1
 8015aae:	9901      	ldr	r1, [sp, #4]
 8015ab0:	9800      	ldr	r0, [sp, #0]
 8015ab2:	f001 feff 	bl	80178b4 <__kernel_sinf>
 8015ab6:	e7dd      	b.n	8015a74 <cosf+0x20>
 8015ab8:	3f490fd8 	.word	0x3f490fd8

08015abc <sinf>:
 8015abc:	b507      	push	{r0, r1, r2, lr}
 8015abe:	4a19      	ldr	r2, [pc, #100]	; (8015b24 <sinf+0x68>)
 8015ac0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015ac4:	4293      	cmp	r3, r2
 8015ac6:	4601      	mov	r1, r0
 8015ac8:	dc04      	bgt.n	8015ad4 <sinf+0x18>
 8015aca:	2200      	movs	r2, #0
 8015acc:	2100      	movs	r1, #0
 8015ace:	f001 fef1 	bl	80178b4 <__kernel_sinf>
 8015ad2:	e004      	b.n	8015ade <sinf+0x22>
 8015ad4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015ad8:	db04      	blt.n	8015ae4 <sinf+0x28>
 8015ada:	f7eb f829 	bl	8000b30 <__aeabi_fsub>
 8015ade:	b003      	add	sp, #12
 8015ae0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ae4:	4669      	mov	r1, sp
 8015ae6:	f001 fa6f 	bl	8016fc8 <__ieee754_rem_pio2f>
 8015aea:	f000 0003 	and.w	r0, r0, #3
 8015aee:	2801      	cmp	r0, #1
 8015af0:	d006      	beq.n	8015b00 <sinf+0x44>
 8015af2:	2802      	cmp	r0, #2
 8015af4:	d009      	beq.n	8015b0a <sinf+0x4e>
 8015af6:	b980      	cbnz	r0, 8015b1a <sinf+0x5e>
 8015af8:	2201      	movs	r2, #1
 8015afa:	9901      	ldr	r1, [sp, #4]
 8015afc:	9800      	ldr	r0, [sp, #0]
 8015afe:	e7e6      	b.n	8015ace <sinf+0x12>
 8015b00:	9901      	ldr	r1, [sp, #4]
 8015b02:	9800      	ldr	r0, [sp, #0]
 8015b04:	f001 fbb8 	bl	8017278 <__kernel_cosf>
 8015b08:	e7e9      	b.n	8015ade <sinf+0x22>
 8015b0a:	2201      	movs	r2, #1
 8015b0c:	9901      	ldr	r1, [sp, #4]
 8015b0e:	9800      	ldr	r0, [sp, #0]
 8015b10:	f001 fed0 	bl	80178b4 <__kernel_sinf>
 8015b14:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015b18:	e7e1      	b.n	8015ade <sinf+0x22>
 8015b1a:	9901      	ldr	r1, [sp, #4]
 8015b1c:	9800      	ldr	r0, [sp, #0]
 8015b1e:	f001 fbab 	bl	8017278 <__kernel_cosf>
 8015b22:	e7f7      	b.n	8015b14 <sinf+0x58>
 8015b24:	3f490fd8 	.word	0x3f490fd8

08015b28 <exp>:
 8015b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b2c:	b08b      	sub	sp, #44	; 0x2c
 8015b2e:	4604      	mov	r4, r0
 8015b30:	460d      	mov	r5, r1
 8015b32:	f000 fa3d 	bl	8015fb0 <__ieee754_exp>
 8015b36:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8015c14 <exp+0xec>
 8015b3a:	4606      	mov	r6, r0
 8015b3c:	f998 3000 	ldrsb.w	r3, [r8]
 8015b40:	460f      	mov	r7, r1
 8015b42:	3301      	adds	r3, #1
 8015b44:	d02c      	beq.n	8015ba0 <exp+0x78>
 8015b46:	4620      	mov	r0, r4
 8015b48:	4629      	mov	r1, r5
 8015b4a:	f001 ff2d 	bl	80179a8 <finite>
 8015b4e:	b338      	cbz	r0, 8015ba0 <exp+0x78>
 8015b50:	a329      	add	r3, pc, #164	; (adr r3, 8015bf8 <exp+0xd0>)
 8015b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b56:	4620      	mov	r0, r4
 8015b58:	4629      	mov	r1, r5
 8015b5a:	f7ea ff4d 	bl	80009f8 <__aeabi_dcmpgt>
 8015b5e:	4681      	mov	r9, r0
 8015b60:	2800      	cmp	r0, #0
 8015b62:	d02d      	beq.n	8015bc0 <exp+0x98>
 8015b64:	2303      	movs	r3, #3
 8015b66:	9300      	str	r3, [sp, #0]
 8015b68:	4b27      	ldr	r3, [pc, #156]	; (8015c08 <exp+0xe0>)
 8015b6a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015b6e:	9301      	str	r3, [sp, #4]
 8015b70:	2300      	movs	r3, #0
 8015b72:	9308      	str	r3, [sp, #32]
 8015b74:	f998 3000 	ldrsb.w	r3, [r8]
 8015b78:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015b7c:	b9ab      	cbnz	r3, 8015baa <exp+0x82>
 8015b7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015b82:	4b22      	ldr	r3, [pc, #136]	; (8015c0c <exp+0xe4>)
 8015b84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015b88:	4668      	mov	r0, sp
 8015b8a:	f001 ff13 	bl	80179b4 <matherr>
 8015b8e:	b190      	cbz	r0, 8015bb6 <exp+0x8e>
 8015b90:	9b08      	ldr	r3, [sp, #32]
 8015b92:	b11b      	cbz	r3, 8015b9c <exp+0x74>
 8015b94:	f002 f8bc 	bl	8017d10 <__errno>
 8015b98:	9b08      	ldr	r3, [sp, #32]
 8015b9a:	6003      	str	r3, [r0, #0]
 8015b9c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8015ba0:	4630      	mov	r0, r6
 8015ba2:	4639      	mov	r1, r7
 8015ba4:	b00b      	add	sp, #44	; 0x2c
 8015ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015baa:	2000      	movs	r0, #0
 8015bac:	4918      	ldr	r1, [pc, #96]	; (8015c10 <exp+0xe8>)
 8015bae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015bb2:	2b02      	cmp	r3, #2
 8015bb4:	d1e8      	bne.n	8015b88 <exp+0x60>
 8015bb6:	f002 f8ab 	bl	8017d10 <__errno>
 8015bba:	2322      	movs	r3, #34	; 0x22
 8015bbc:	6003      	str	r3, [r0, #0]
 8015bbe:	e7e7      	b.n	8015b90 <exp+0x68>
 8015bc0:	a30f      	add	r3, pc, #60	; (adr r3, 8015c00 <exp+0xd8>)
 8015bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	4629      	mov	r1, r5
 8015bca:	f7ea fef7 	bl	80009bc <__aeabi_dcmplt>
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	d0e6      	beq.n	8015ba0 <exp+0x78>
 8015bd2:	2304      	movs	r3, #4
 8015bd4:	9300      	str	r3, [sp, #0]
 8015bd6:	4b0c      	ldr	r3, [pc, #48]	; (8015c08 <exp+0xe0>)
 8015bd8:	2200      	movs	r2, #0
 8015bda:	9301      	str	r3, [sp, #4]
 8015bdc:	2300      	movs	r3, #0
 8015bde:	f8cd 9020 	str.w	r9, [sp, #32]
 8015be2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015be6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015bea:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015bee:	f998 3000 	ldrsb.w	r3, [r8]
 8015bf2:	e7de      	b.n	8015bb2 <exp+0x8a>
 8015bf4:	f3af 8000 	nop.w
 8015bf8:	fefa39ef 	.word	0xfefa39ef
 8015bfc:	40862e42 	.word	0x40862e42
 8015c00:	d52d3051 	.word	0xd52d3051
 8015c04:	c0874910 	.word	0xc0874910
 8015c08:	08018f9a 	.word	0x08018f9a
 8015c0c:	47efffff 	.word	0x47efffff
 8015c10:	7ff00000 	.word	0x7ff00000
 8015c14:	20000724 	.word	0x20000724

08015c18 <pow>:
 8015c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c1c:	b08f      	sub	sp, #60	; 0x3c
 8015c1e:	461d      	mov	r5, r3
 8015c20:	4680      	mov	r8, r0
 8015c22:	4689      	mov	r9, r1
 8015c24:	4614      	mov	r4, r2
 8015c26:	f000 fb2b 	bl	8016280 <__ieee754_pow>
 8015c2a:	4fa1      	ldr	r7, [pc, #644]	; (8015eb0 <pow+0x298>)
 8015c2c:	e9cd 0100 	strd	r0, r1, [sp]
 8015c30:	f997 3000 	ldrsb.w	r3, [r7]
 8015c34:	463e      	mov	r6, r7
 8015c36:	9302      	str	r3, [sp, #8]
 8015c38:	3301      	adds	r3, #1
 8015c3a:	d05f      	beq.n	8015cfc <pow+0xe4>
 8015c3c:	4622      	mov	r2, r4
 8015c3e:	462b      	mov	r3, r5
 8015c40:	4620      	mov	r0, r4
 8015c42:	4629      	mov	r1, r5
 8015c44:	f7ea fee2 	bl	8000a0c <__aeabi_dcmpun>
 8015c48:	4682      	mov	sl, r0
 8015c4a:	2800      	cmp	r0, #0
 8015c4c:	d156      	bne.n	8015cfc <pow+0xe4>
 8015c4e:	4642      	mov	r2, r8
 8015c50:	464b      	mov	r3, r9
 8015c52:	4640      	mov	r0, r8
 8015c54:	4649      	mov	r1, r9
 8015c56:	f7ea fed9 	bl	8000a0c <__aeabi_dcmpun>
 8015c5a:	9003      	str	r0, [sp, #12]
 8015c5c:	b1e8      	cbz	r0, 8015c9a <pow+0x82>
 8015c5e:	2200      	movs	r2, #0
 8015c60:	2300      	movs	r3, #0
 8015c62:	4620      	mov	r0, r4
 8015c64:	4629      	mov	r1, r5
 8015c66:	f7ea fe9f 	bl	80009a8 <__aeabi_dcmpeq>
 8015c6a:	2800      	cmp	r0, #0
 8015c6c:	d046      	beq.n	8015cfc <pow+0xe4>
 8015c6e:	2301      	movs	r3, #1
 8015c70:	2200      	movs	r2, #0
 8015c72:	9304      	str	r3, [sp, #16]
 8015c74:	4b8f      	ldr	r3, [pc, #572]	; (8015eb4 <pow+0x29c>)
 8015c76:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8015c7a:	9305      	str	r3, [sp, #20]
 8015c7c:	4b8e      	ldr	r3, [pc, #568]	; (8015eb8 <pow+0x2a0>)
 8015c7e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015c82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015c86:	9b02      	ldr	r3, [sp, #8]
 8015c88:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015c8c:	2b02      	cmp	r3, #2
 8015c8e:	d031      	beq.n	8015cf4 <pow+0xdc>
 8015c90:	a804      	add	r0, sp, #16
 8015c92:	f001 fe8f 	bl	80179b4 <matherr>
 8015c96:	bb38      	cbnz	r0, 8015ce8 <pow+0xd0>
 8015c98:	e058      	b.n	8015d4c <pow+0x134>
 8015c9a:	f04f 0a00 	mov.w	sl, #0
 8015c9e:	f04f 0b00 	mov.w	fp, #0
 8015ca2:	4652      	mov	r2, sl
 8015ca4:	465b      	mov	r3, fp
 8015ca6:	4640      	mov	r0, r8
 8015ca8:	4649      	mov	r1, r9
 8015caa:	f7ea fe7d 	bl	80009a8 <__aeabi_dcmpeq>
 8015cae:	2800      	cmp	r0, #0
 8015cb0:	d051      	beq.n	8015d56 <pow+0x13e>
 8015cb2:	4652      	mov	r2, sl
 8015cb4:	465b      	mov	r3, fp
 8015cb6:	4620      	mov	r0, r4
 8015cb8:	4629      	mov	r1, r5
 8015cba:	f7ea fe75 	bl	80009a8 <__aeabi_dcmpeq>
 8015cbe:	4606      	mov	r6, r0
 8015cc0:	b308      	cbz	r0, 8015d06 <pow+0xee>
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	9304      	str	r3, [sp, #16]
 8015cc6:	4b7b      	ldr	r3, [pc, #492]	; (8015eb4 <pow+0x29c>)
 8015cc8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015ccc:	9305      	str	r3, [sp, #20]
 8015cce:	9b03      	ldr	r3, [sp, #12]
 8015cd0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015cd4:	930c      	str	r3, [sp, #48]	; 0x30
 8015cd6:	9b02      	ldr	r3, [sp, #8]
 8015cd8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d0d7      	beq.n	8015c90 <pow+0x78>
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	4b75      	ldr	r3, [pc, #468]	; (8015eb8 <pow+0x2a0>)
 8015ce4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cea:	b11b      	cbz	r3, 8015cf4 <pow+0xdc>
 8015cec:	f002 f810 	bl	8017d10 <__errno>
 8015cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cf2:	6003      	str	r3, [r0, #0]
 8015cf4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8015cf8:	e9cd 3400 	strd	r3, r4, [sp]
 8015cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015d00:	b00f      	add	sp, #60	; 0x3c
 8015d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d06:	4620      	mov	r0, r4
 8015d08:	4629      	mov	r1, r5
 8015d0a:	f001 fe4d 	bl	80179a8 <finite>
 8015d0e:	2800      	cmp	r0, #0
 8015d10:	d0f4      	beq.n	8015cfc <pow+0xe4>
 8015d12:	4652      	mov	r2, sl
 8015d14:	465b      	mov	r3, fp
 8015d16:	4620      	mov	r0, r4
 8015d18:	4629      	mov	r1, r5
 8015d1a:	f7ea fe4f 	bl	80009bc <__aeabi_dcmplt>
 8015d1e:	2800      	cmp	r0, #0
 8015d20:	d0ec      	beq.n	8015cfc <pow+0xe4>
 8015d22:	2301      	movs	r3, #1
 8015d24:	9304      	str	r3, [sp, #16]
 8015d26:	4b63      	ldr	r3, [pc, #396]	; (8015eb4 <pow+0x29c>)
 8015d28:	960c      	str	r6, [sp, #48]	; 0x30
 8015d2a:	9305      	str	r3, [sp, #20]
 8015d2c:	f997 3000 	ldrsb.w	r3, [r7]
 8015d30:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015d34:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015d38:	b913      	cbnz	r3, 8015d40 <pow+0x128>
 8015d3a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015d3e:	e7a7      	b.n	8015c90 <pow+0x78>
 8015d40:	2000      	movs	r0, #0
 8015d42:	495e      	ldr	r1, [pc, #376]	; (8015ebc <pow+0x2a4>)
 8015d44:	2b02      	cmp	r3, #2
 8015d46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015d4a:	d1a1      	bne.n	8015c90 <pow+0x78>
 8015d4c:	f001 ffe0 	bl	8017d10 <__errno>
 8015d50:	2321      	movs	r3, #33	; 0x21
 8015d52:	6003      	str	r3, [r0, #0]
 8015d54:	e7c8      	b.n	8015ce8 <pow+0xd0>
 8015d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015d5a:	f001 fe25 	bl	80179a8 <finite>
 8015d5e:	9002      	str	r0, [sp, #8]
 8015d60:	2800      	cmp	r0, #0
 8015d62:	d177      	bne.n	8015e54 <pow+0x23c>
 8015d64:	4640      	mov	r0, r8
 8015d66:	4649      	mov	r1, r9
 8015d68:	f001 fe1e 	bl	80179a8 <finite>
 8015d6c:	2800      	cmp	r0, #0
 8015d6e:	d071      	beq.n	8015e54 <pow+0x23c>
 8015d70:	4620      	mov	r0, r4
 8015d72:	4629      	mov	r1, r5
 8015d74:	f001 fe18 	bl	80179a8 <finite>
 8015d78:	2800      	cmp	r0, #0
 8015d7a:	d06b      	beq.n	8015e54 <pow+0x23c>
 8015d7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015d80:	4619      	mov	r1, r3
 8015d82:	4610      	mov	r0, r2
 8015d84:	f7ea fe42 	bl	8000a0c <__aeabi_dcmpun>
 8015d88:	f997 7000 	ldrsb.w	r7, [r7]
 8015d8c:	4b49      	ldr	r3, [pc, #292]	; (8015eb4 <pow+0x29c>)
 8015d8e:	b1a0      	cbz	r0, 8015dba <pow+0x1a2>
 8015d90:	2201      	movs	r2, #1
 8015d92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015d96:	9b02      	ldr	r3, [sp, #8]
 8015d98:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015d9c:	930c      	str	r3, [sp, #48]	; 0x30
 8015d9e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015da2:	2f00      	cmp	r7, #0
 8015da4:	d0c9      	beq.n	8015d3a <pow+0x122>
 8015da6:	4652      	mov	r2, sl
 8015da8:	465b      	mov	r3, fp
 8015daa:	4650      	mov	r0, sl
 8015dac:	4659      	mov	r1, fp
 8015dae:	f7ea fcbd 	bl	800072c <__aeabi_ddiv>
 8015db2:	2f02      	cmp	r7, #2
 8015db4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015db8:	e7c7      	b.n	8015d4a <pow+0x132>
 8015dba:	2203      	movs	r2, #3
 8015dbc:	900c      	str	r0, [sp, #48]	; 0x30
 8015dbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015dc2:	4620      	mov	r0, r4
 8015dc4:	4629      	mov	r1, r5
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	4b3d      	ldr	r3, [pc, #244]	; (8015ec0 <pow+0x2a8>)
 8015dca:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015dce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015dd2:	f7ea fb81 	bl	80004d8 <__aeabi_dmul>
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	460d      	mov	r5, r1
 8015dda:	bb17      	cbnz	r7, 8015e22 <pow+0x20a>
 8015ddc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015de0:	4b38      	ldr	r3, [pc, #224]	; (8015ec4 <pow+0x2ac>)
 8015de2:	4640      	mov	r0, r8
 8015de4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015de8:	4649      	mov	r1, r9
 8015dea:	4652      	mov	r2, sl
 8015dec:	465b      	mov	r3, fp
 8015dee:	f7ea fde5 	bl	80009bc <__aeabi_dcmplt>
 8015df2:	2800      	cmp	r0, #0
 8015df4:	d054      	beq.n	8015ea0 <pow+0x288>
 8015df6:	4620      	mov	r0, r4
 8015df8:	4629      	mov	r1, r5
 8015dfa:	f001 fde3 	bl	80179c4 <rint>
 8015dfe:	4622      	mov	r2, r4
 8015e00:	462b      	mov	r3, r5
 8015e02:	f7ea fdd1 	bl	80009a8 <__aeabi_dcmpeq>
 8015e06:	b920      	cbnz	r0, 8015e12 <pow+0x1fa>
 8015e08:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015e0c:	4b2e      	ldr	r3, [pc, #184]	; (8015ec8 <pow+0x2b0>)
 8015e0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015e12:	f996 3000 	ldrsb.w	r3, [r6]
 8015e16:	2b02      	cmp	r3, #2
 8015e18:	d142      	bne.n	8015ea0 <pow+0x288>
 8015e1a:	f001 ff79 	bl	8017d10 <__errno>
 8015e1e:	2322      	movs	r3, #34	; 0x22
 8015e20:	e797      	b.n	8015d52 <pow+0x13a>
 8015e22:	2200      	movs	r2, #0
 8015e24:	4b29      	ldr	r3, [pc, #164]	; (8015ecc <pow+0x2b4>)
 8015e26:	4640      	mov	r0, r8
 8015e28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015e2c:	4649      	mov	r1, r9
 8015e2e:	4652      	mov	r2, sl
 8015e30:	465b      	mov	r3, fp
 8015e32:	f7ea fdc3 	bl	80009bc <__aeabi_dcmplt>
 8015e36:	2800      	cmp	r0, #0
 8015e38:	d0eb      	beq.n	8015e12 <pow+0x1fa>
 8015e3a:	4620      	mov	r0, r4
 8015e3c:	4629      	mov	r1, r5
 8015e3e:	f001 fdc1 	bl	80179c4 <rint>
 8015e42:	4622      	mov	r2, r4
 8015e44:	462b      	mov	r3, r5
 8015e46:	f7ea fdaf 	bl	80009a8 <__aeabi_dcmpeq>
 8015e4a:	2800      	cmp	r0, #0
 8015e4c:	d1e1      	bne.n	8015e12 <pow+0x1fa>
 8015e4e:	2200      	movs	r2, #0
 8015e50:	4b1a      	ldr	r3, [pc, #104]	; (8015ebc <pow+0x2a4>)
 8015e52:	e7dc      	b.n	8015e0e <pow+0x1f6>
 8015e54:	2200      	movs	r2, #0
 8015e56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	f7ea fda4 	bl	80009a8 <__aeabi_dcmpeq>
 8015e60:	2800      	cmp	r0, #0
 8015e62:	f43f af4b 	beq.w	8015cfc <pow+0xe4>
 8015e66:	4640      	mov	r0, r8
 8015e68:	4649      	mov	r1, r9
 8015e6a:	f001 fd9d 	bl	80179a8 <finite>
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	f43f af44 	beq.w	8015cfc <pow+0xe4>
 8015e74:	4620      	mov	r0, r4
 8015e76:	4629      	mov	r1, r5
 8015e78:	f001 fd96 	bl	80179a8 <finite>
 8015e7c:	2800      	cmp	r0, #0
 8015e7e:	f43f af3d 	beq.w	8015cfc <pow+0xe4>
 8015e82:	2304      	movs	r3, #4
 8015e84:	9304      	str	r3, [sp, #16]
 8015e86:	4b0b      	ldr	r3, [pc, #44]	; (8015eb4 <pow+0x29c>)
 8015e88:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015e8c:	9305      	str	r3, [sp, #20]
 8015e8e:	2300      	movs	r3, #0
 8015e90:	2400      	movs	r4, #0
 8015e92:	930c      	str	r3, [sp, #48]	; 0x30
 8015e94:	2300      	movs	r3, #0
 8015e96:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015e9a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8015e9e:	e7b8      	b.n	8015e12 <pow+0x1fa>
 8015ea0:	a804      	add	r0, sp, #16
 8015ea2:	f001 fd87 	bl	80179b4 <matherr>
 8015ea6:	2800      	cmp	r0, #0
 8015ea8:	f47f af1e 	bne.w	8015ce8 <pow+0xd0>
 8015eac:	e7b5      	b.n	8015e1a <pow+0x202>
 8015eae:	bf00      	nop
 8015eb0:	20000724 	.word	0x20000724
 8015eb4:	08018f9e 	.word	0x08018f9e
 8015eb8:	3ff00000 	.word	0x3ff00000
 8015ebc:	fff00000 	.word	0xfff00000
 8015ec0:	3fe00000 	.word	0x3fe00000
 8015ec4:	47efffff 	.word	0x47efffff
 8015ec8:	c7efffff 	.word	0xc7efffff
 8015ecc:	7ff00000 	.word	0x7ff00000

08015ed0 <expf>:
 8015ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ed2:	b08b      	sub	sp, #44	; 0x2c
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	f000 ff89 	bl	8016dec <__ieee754_expf>
 8015eda:	4e2e      	ldr	r6, [pc, #184]	; (8015f94 <expf+0xc4>)
 8015edc:	4605      	mov	r5, r0
 8015ede:	f996 3000 	ldrsb.w	r3, [r6]
 8015ee2:	3301      	adds	r3, #1
 8015ee4:	d02f      	beq.n	8015f46 <expf+0x76>
 8015ee6:	4620      	mov	r0, r4
 8015ee8:	f001 fe67 	bl	8017bba <finitef>
 8015eec:	2800      	cmp	r0, #0
 8015eee:	d02a      	beq.n	8015f46 <expf+0x76>
 8015ef0:	4929      	ldr	r1, [pc, #164]	; (8015f98 <expf+0xc8>)
 8015ef2:	4620      	mov	r0, r4
 8015ef4:	f7eb f8e2 	bl	80010bc <__aeabi_fcmpgt>
 8015ef8:	4607      	mov	r7, r0
 8015efa:	2800      	cmp	r0, #0
 8015efc:	d031      	beq.n	8015f62 <expf+0x92>
 8015efe:	2303      	movs	r3, #3
 8015f00:	9300      	str	r3, [sp, #0]
 8015f02:	4b26      	ldr	r3, [pc, #152]	; (8015f9c <expf+0xcc>)
 8015f04:	4620      	mov	r0, r4
 8015f06:	9301      	str	r3, [sp, #4]
 8015f08:	2300      	movs	r3, #0
 8015f0a:	9308      	str	r3, [sp, #32]
 8015f0c:	f7ea fa8c 	bl	8000428 <__aeabi_f2d>
 8015f10:	f996 3000 	ldrsb.w	r3, [r6]
 8015f14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f1c:	b9b3      	cbnz	r3, 8015f4c <expf+0x7c>
 8015f1e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015f22:	4b1f      	ldr	r3, [pc, #124]	; (8015fa0 <expf+0xd0>)
 8015f24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f28:	4668      	mov	r0, sp
 8015f2a:	f001 fd43 	bl	80179b4 <matherr>
 8015f2e:	b198      	cbz	r0, 8015f58 <expf+0x88>
 8015f30:	9b08      	ldr	r3, [sp, #32]
 8015f32:	b11b      	cbz	r3, 8015f3c <expf+0x6c>
 8015f34:	f001 feec 	bl	8017d10 <__errno>
 8015f38:	9b08      	ldr	r3, [sp, #32]
 8015f3a:	6003      	str	r3, [r0, #0]
 8015f3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015f40:	f7ea fda2 	bl	8000a88 <__aeabi_d2f>
 8015f44:	4605      	mov	r5, r0
 8015f46:	4628      	mov	r0, r5
 8015f48:	b00b      	add	sp, #44	; 0x2c
 8015f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f4c:	2000      	movs	r0, #0
 8015f4e:	4915      	ldr	r1, [pc, #84]	; (8015fa4 <expf+0xd4>)
 8015f50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015f54:	2b02      	cmp	r3, #2
 8015f56:	d1e7      	bne.n	8015f28 <expf+0x58>
 8015f58:	f001 feda 	bl	8017d10 <__errno>
 8015f5c:	2322      	movs	r3, #34	; 0x22
 8015f5e:	6003      	str	r3, [r0, #0]
 8015f60:	e7e6      	b.n	8015f30 <expf+0x60>
 8015f62:	4911      	ldr	r1, [pc, #68]	; (8015fa8 <expf+0xd8>)
 8015f64:	4620      	mov	r0, r4
 8015f66:	f7eb f88b 	bl	8001080 <__aeabi_fcmplt>
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	d0eb      	beq.n	8015f46 <expf+0x76>
 8015f6e:	2304      	movs	r3, #4
 8015f70:	9300      	str	r3, [sp, #0]
 8015f72:	4b0a      	ldr	r3, [pc, #40]	; (8015f9c <expf+0xcc>)
 8015f74:	4620      	mov	r0, r4
 8015f76:	9301      	str	r3, [sp, #4]
 8015f78:	9708      	str	r7, [sp, #32]
 8015f7a:	f7ea fa55 	bl	8000428 <__aeabi_f2d>
 8015f7e:	2300      	movs	r3, #0
 8015f80:	2200      	movs	r2, #0
 8015f82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015f86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f8e:	f996 3000 	ldrsb.w	r3, [r6]
 8015f92:	e7df      	b.n	8015f54 <expf+0x84>
 8015f94:	20000724 	.word	0x20000724
 8015f98:	42b17180 	.word	0x42b17180
 8015f9c:	08018fa2 	.word	0x08018fa2
 8015fa0:	47efffff 	.word	0x47efffff
 8015fa4:	7ff00000 	.word	0x7ff00000
 8015fa8:	c2cff1b5 	.word	0xc2cff1b5
 8015fac:	00000000 	.word	0x00000000

08015fb0 <__ieee754_exp>:
 8015fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015fb4:	4aa8      	ldr	r2, [pc, #672]	; (8016258 <__ieee754_exp+0x2a8>)
 8015fb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015fba:	4296      	cmp	r6, r2
 8015fbc:	4605      	mov	r5, r0
 8015fbe:	460c      	mov	r4, r1
 8015fc0:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8015fc4:	d92c      	bls.n	8016020 <__ieee754_exp+0x70>
 8015fc6:	4aa5      	ldr	r2, [pc, #660]	; (801625c <__ieee754_exp+0x2ac>)
 8015fc8:	4296      	cmp	r6, r2
 8015fca:	d910      	bls.n	8015fee <__ieee754_exp+0x3e>
 8015fcc:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8015fd0:	4303      	orrs	r3, r0
 8015fd2:	4602      	mov	r2, r0
 8015fd4:	d005      	beq.n	8015fe2 <__ieee754_exp+0x32>
 8015fd6:	460b      	mov	r3, r1
 8015fd8:	f7ea f8c8 	bl	800016c <__adddf3>
 8015fdc:	4605      	mov	r5, r0
 8015fde:	460c      	mov	r4, r1
 8015fe0:	e000      	b.n	8015fe4 <__ieee754_exp+0x34>
 8015fe2:	b9d7      	cbnz	r7, 801601a <__ieee754_exp+0x6a>
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	4621      	mov	r1, r4
 8015fe8:	b004      	add	sp, #16
 8015fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fee:	a384      	add	r3, pc, #528	; (adr r3, 8016200 <__ieee754_exp+0x250>)
 8015ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ff4:	f7ea fd00 	bl	80009f8 <__aeabi_dcmpgt>
 8015ff8:	b138      	cbz	r0, 801600a <__ieee754_exp+0x5a>
 8015ffa:	a383      	add	r3, pc, #524	; (adr r3, 8016208 <__ieee754_exp+0x258>)
 8015ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016000:	4610      	mov	r0, r2
 8016002:	4619      	mov	r1, r3
 8016004:	f7ea fa68 	bl	80004d8 <__aeabi_dmul>
 8016008:	e7e8      	b.n	8015fdc <__ieee754_exp+0x2c>
 801600a:	a381      	add	r3, pc, #516	; (adr r3, 8016210 <__ieee754_exp+0x260>)
 801600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016010:	4628      	mov	r0, r5
 8016012:	4621      	mov	r1, r4
 8016014:	f7ea fcd2 	bl	80009bc <__aeabi_dcmplt>
 8016018:	b130      	cbz	r0, 8016028 <__ieee754_exp+0x78>
 801601a:	2500      	movs	r5, #0
 801601c:	462c      	mov	r4, r5
 801601e:	e7e1      	b.n	8015fe4 <__ieee754_exp+0x34>
 8016020:	4b8f      	ldr	r3, [pc, #572]	; (8016260 <__ieee754_exp+0x2b0>)
 8016022:	429e      	cmp	r6, r3
 8016024:	f240 80a6 	bls.w	8016174 <__ieee754_exp+0x1c4>
 8016028:	4b8e      	ldr	r3, [pc, #568]	; (8016264 <__ieee754_exp+0x2b4>)
 801602a:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 801602e:	429e      	cmp	r6, r3
 8016030:	d875      	bhi.n	801611e <__ieee754_exp+0x16e>
 8016032:	4b8d      	ldr	r3, [pc, #564]	; (8016268 <__ieee754_exp+0x2b8>)
 8016034:	4628      	mov	r0, r5
 8016036:	4443      	add	r3, r8
 8016038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603c:	4621      	mov	r1, r4
 801603e:	f7ea f893 	bl	8000168 <__aeabi_dsub>
 8016042:	4e8a      	ldr	r6, [pc, #552]	; (801626c <__ieee754_exp+0x2bc>)
 8016044:	e9cd 0100 	strd	r0, r1, [sp]
 8016048:	f1c7 0a01 	rsb	sl, r7, #1
 801604c:	4446      	add	r6, r8
 801604e:	ebaa 0a07 	sub.w	sl, sl, r7
 8016052:	e9d6 8900 	ldrd	r8, r9, [r6]
 8016056:	4642      	mov	r2, r8
 8016058:	e9dd 0100 	ldrd	r0, r1, [sp]
 801605c:	464b      	mov	r3, r9
 801605e:	f7ea f883 	bl	8000168 <__aeabi_dsub>
 8016062:	4605      	mov	r5, r0
 8016064:	460c      	mov	r4, r1
 8016066:	462a      	mov	r2, r5
 8016068:	4623      	mov	r3, r4
 801606a:	4628      	mov	r0, r5
 801606c:	4621      	mov	r1, r4
 801606e:	f7ea fa33 	bl	80004d8 <__aeabi_dmul>
 8016072:	a369      	add	r3, pc, #420	; (adr r3, 8016218 <__ieee754_exp+0x268>)
 8016074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016078:	4606      	mov	r6, r0
 801607a:	460f      	mov	r7, r1
 801607c:	f7ea fa2c 	bl	80004d8 <__aeabi_dmul>
 8016080:	a367      	add	r3, pc, #412	; (adr r3, 8016220 <__ieee754_exp+0x270>)
 8016082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016086:	f7ea f86f 	bl	8000168 <__aeabi_dsub>
 801608a:	4632      	mov	r2, r6
 801608c:	463b      	mov	r3, r7
 801608e:	f7ea fa23 	bl	80004d8 <__aeabi_dmul>
 8016092:	a365      	add	r3, pc, #404	; (adr r3, 8016228 <__ieee754_exp+0x278>)
 8016094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016098:	f7ea f868 	bl	800016c <__adddf3>
 801609c:	4632      	mov	r2, r6
 801609e:	463b      	mov	r3, r7
 80160a0:	f7ea fa1a 	bl	80004d8 <__aeabi_dmul>
 80160a4:	a362      	add	r3, pc, #392	; (adr r3, 8016230 <__ieee754_exp+0x280>)
 80160a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160aa:	f7ea f85d 	bl	8000168 <__aeabi_dsub>
 80160ae:	4632      	mov	r2, r6
 80160b0:	463b      	mov	r3, r7
 80160b2:	f7ea fa11 	bl	80004d8 <__aeabi_dmul>
 80160b6:	a360      	add	r3, pc, #384	; (adr r3, 8016238 <__ieee754_exp+0x288>)
 80160b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160bc:	f7ea f856 	bl	800016c <__adddf3>
 80160c0:	4632      	mov	r2, r6
 80160c2:	463b      	mov	r3, r7
 80160c4:	f7ea fa08 	bl	80004d8 <__aeabi_dmul>
 80160c8:	4602      	mov	r2, r0
 80160ca:	460b      	mov	r3, r1
 80160cc:	4628      	mov	r0, r5
 80160ce:	4621      	mov	r1, r4
 80160d0:	f7ea f84a 	bl	8000168 <__aeabi_dsub>
 80160d4:	4602      	mov	r2, r0
 80160d6:	460b      	mov	r3, r1
 80160d8:	4606      	mov	r6, r0
 80160da:	460f      	mov	r7, r1
 80160dc:	4628      	mov	r0, r5
 80160de:	4621      	mov	r1, r4
 80160e0:	f7ea f9fa 	bl	80004d8 <__aeabi_dmul>
 80160e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80160e8:	f1ba 0f00 	cmp.w	sl, #0
 80160ec:	d159      	bne.n	80161a2 <__ieee754_exp+0x1f2>
 80160ee:	2200      	movs	r2, #0
 80160f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80160f4:	4630      	mov	r0, r6
 80160f6:	4639      	mov	r1, r7
 80160f8:	f7ea f836 	bl	8000168 <__aeabi_dsub>
 80160fc:	4602      	mov	r2, r0
 80160fe:	460b      	mov	r3, r1
 8016100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016104:	f7ea fb12 	bl	800072c <__aeabi_ddiv>
 8016108:	462a      	mov	r2, r5
 801610a:	4623      	mov	r3, r4
 801610c:	f7ea f82c 	bl	8000168 <__aeabi_dsub>
 8016110:	4602      	mov	r2, r0
 8016112:	460b      	mov	r3, r1
 8016114:	2000      	movs	r0, #0
 8016116:	4956      	ldr	r1, [pc, #344]	; (8016270 <__ieee754_exp+0x2c0>)
 8016118:	f7ea f826 	bl	8000168 <__aeabi_dsub>
 801611c:	e75e      	b.n	8015fdc <__ieee754_exp+0x2c>
 801611e:	4e55      	ldr	r6, [pc, #340]	; (8016274 <__ieee754_exp+0x2c4>)
 8016120:	a347      	add	r3, pc, #284	; (adr r3, 8016240 <__ieee754_exp+0x290>)
 8016122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016126:	4446      	add	r6, r8
 8016128:	4628      	mov	r0, r5
 801612a:	4621      	mov	r1, r4
 801612c:	f7ea f9d4 	bl	80004d8 <__aeabi_dmul>
 8016130:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016134:	f7ea f81a 	bl	800016c <__adddf3>
 8016138:	f7ea fc7e 	bl	8000a38 <__aeabi_d2iz>
 801613c:	4682      	mov	sl, r0
 801613e:	f7ea f961 	bl	8000404 <__aeabi_i2d>
 8016142:	a341      	add	r3, pc, #260	; (adr r3, 8016248 <__ieee754_exp+0x298>)
 8016144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016148:	4606      	mov	r6, r0
 801614a:	460f      	mov	r7, r1
 801614c:	f7ea f9c4 	bl	80004d8 <__aeabi_dmul>
 8016150:	4602      	mov	r2, r0
 8016152:	460b      	mov	r3, r1
 8016154:	4628      	mov	r0, r5
 8016156:	4621      	mov	r1, r4
 8016158:	f7ea f806 	bl	8000168 <__aeabi_dsub>
 801615c:	a33c      	add	r3, pc, #240	; (adr r3, 8016250 <__ieee754_exp+0x2a0>)
 801615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016162:	e9cd 0100 	strd	r0, r1, [sp]
 8016166:	4630      	mov	r0, r6
 8016168:	4639      	mov	r1, r7
 801616a:	f7ea f9b5 	bl	80004d8 <__aeabi_dmul>
 801616e:	4680      	mov	r8, r0
 8016170:	4689      	mov	r9, r1
 8016172:	e770      	b.n	8016056 <__ieee754_exp+0xa6>
 8016174:	4b40      	ldr	r3, [pc, #256]	; (8016278 <__ieee754_exp+0x2c8>)
 8016176:	429e      	cmp	r6, r3
 8016178:	d80e      	bhi.n	8016198 <__ieee754_exp+0x1e8>
 801617a:	a323      	add	r3, pc, #140	; (adr r3, 8016208 <__ieee754_exp+0x258>)
 801617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016180:	f7e9 fff4 	bl	800016c <__adddf3>
 8016184:	2200      	movs	r2, #0
 8016186:	4b3a      	ldr	r3, [pc, #232]	; (8016270 <__ieee754_exp+0x2c0>)
 8016188:	f7ea fc36 	bl	80009f8 <__aeabi_dcmpgt>
 801618c:	b138      	cbz	r0, 801619e <__ieee754_exp+0x1ee>
 801618e:	2200      	movs	r2, #0
 8016190:	4b37      	ldr	r3, [pc, #220]	; (8016270 <__ieee754_exp+0x2c0>)
 8016192:	4628      	mov	r0, r5
 8016194:	4621      	mov	r1, r4
 8016196:	e71f      	b.n	8015fd8 <__ieee754_exp+0x28>
 8016198:	f04f 0a00 	mov.w	sl, #0
 801619c:	e763      	b.n	8016066 <__ieee754_exp+0xb6>
 801619e:	4682      	mov	sl, r0
 80161a0:	e761      	b.n	8016066 <__ieee754_exp+0xb6>
 80161a2:	4632      	mov	r2, r6
 80161a4:	463b      	mov	r3, r7
 80161a6:	2000      	movs	r0, #0
 80161a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80161ac:	f7e9 ffdc 	bl	8000168 <__aeabi_dsub>
 80161b0:	4602      	mov	r2, r0
 80161b2:	460b      	mov	r3, r1
 80161b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80161b8:	f7ea fab8 	bl	800072c <__aeabi_ddiv>
 80161bc:	4602      	mov	r2, r0
 80161be:	460b      	mov	r3, r1
 80161c0:	4640      	mov	r0, r8
 80161c2:	4649      	mov	r1, r9
 80161c4:	f7e9 ffd0 	bl	8000168 <__aeabi_dsub>
 80161c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161cc:	f7e9 ffcc 	bl	8000168 <__aeabi_dsub>
 80161d0:	4602      	mov	r2, r0
 80161d2:	460b      	mov	r3, r1
 80161d4:	2000      	movs	r0, #0
 80161d6:	4926      	ldr	r1, [pc, #152]	; (8016270 <__ieee754_exp+0x2c0>)
 80161d8:	f7e9 ffc6 	bl	8000168 <__aeabi_dsub>
 80161dc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80161e0:	4592      	cmp	sl, r2
 80161e2:	db02      	blt.n	80161ea <__ieee754_exp+0x23a>
 80161e4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80161e8:	e6f8      	b.n	8015fdc <__ieee754_exp+0x2c>
 80161ea:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80161ee:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80161f2:	2200      	movs	r2, #0
 80161f4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80161f8:	e704      	b.n	8016004 <__ieee754_exp+0x54>
 80161fa:	bf00      	nop
 80161fc:	f3af 8000 	nop.w
 8016200:	fefa39ef 	.word	0xfefa39ef
 8016204:	40862e42 	.word	0x40862e42
 8016208:	8800759c 	.word	0x8800759c
 801620c:	7e37e43c 	.word	0x7e37e43c
 8016210:	d52d3051 	.word	0xd52d3051
 8016214:	c0874910 	.word	0xc0874910
 8016218:	72bea4d0 	.word	0x72bea4d0
 801621c:	3e663769 	.word	0x3e663769
 8016220:	c5d26bf1 	.word	0xc5d26bf1
 8016224:	3ebbbd41 	.word	0x3ebbbd41
 8016228:	af25de2c 	.word	0xaf25de2c
 801622c:	3f11566a 	.word	0x3f11566a
 8016230:	16bebd93 	.word	0x16bebd93
 8016234:	3f66c16c 	.word	0x3f66c16c
 8016238:	5555553e 	.word	0x5555553e
 801623c:	3fc55555 	.word	0x3fc55555
 8016240:	652b82fe 	.word	0x652b82fe
 8016244:	3ff71547 	.word	0x3ff71547
 8016248:	fee00000 	.word	0xfee00000
 801624c:	3fe62e42 	.word	0x3fe62e42
 8016250:	35793c76 	.word	0x35793c76
 8016254:	3dea39ef 	.word	0x3dea39ef
 8016258:	40862e41 	.word	0x40862e41
 801625c:	7fefffff 	.word	0x7fefffff
 8016260:	3fd62e42 	.word	0x3fd62e42
 8016264:	3ff0a2b1 	.word	0x3ff0a2b1
 8016268:	08018fb8 	.word	0x08018fb8
 801626c:	08018fc8 	.word	0x08018fc8
 8016270:	3ff00000 	.word	0x3ff00000
 8016274:	08018fa8 	.word	0x08018fa8
 8016278:	3e2fffff 	.word	0x3e2fffff
 801627c:	00000000 	.word	0x00000000

08016280 <__ieee754_pow>:
 8016280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016284:	b091      	sub	sp, #68	; 0x44
 8016286:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801628a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 801628e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016292:	ea55 0302 	orrs.w	r3, r5, r2
 8016296:	4607      	mov	r7, r0
 8016298:	4688      	mov	r8, r1
 801629a:	f000 84b7 	beq.w	8016c0c <__ieee754_pow+0x98c>
 801629e:	4b80      	ldr	r3, [pc, #512]	; (80164a0 <__ieee754_pow+0x220>)
 80162a0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80162a4:	429c      	cmp	r4, r3
 80162a6:	4689      	mov	r9, r1
 80162a8:	4682      	mov	sl, r0
 80162aa:	dc09      	bgt.n	80162c0 <__ieee754_pow+0x40>
 80162ac:	d103      	bne.n	80162b6 <__ieee754_pow+0x36>
 80162ae:	b938      	cbnz	r0, 80162c0 <__ieee754_pow+0x40>
 80162b0:	42a5      	cmp	r5, r4
 80162b2:	dc0d      	bgt.n	80162d0 <__ieee754_pow+0x50>
 80162b4:	e001      	b.n	80162ba <__ieee754_pow+0x3a>
 80162b6:	429d      	cmp	r5, r3
 80162b8:	dc02      	bgt.n	80162c0 <__ieee754_pow+0x40>
 80162ba:	429d      	cmp	r5, r3
 80162bc:	d10e      	bne.n	80162dc <__ieee754_pow+0x5c>
 80162be:	b16a      	cbz	r2, 80162dc <__ieee754_pow+0x5c>
 80162c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80162c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80162c8:	ea54 030a 	orrs.w	r3, r4, sl
 80162cc:	f000 849e 	beq.w	8016c0c <__ieee754_pow+0x98c>
 80162d0:	4874      	ldr	r0, [pc, #464]	; (80164a4 <__ieee754_pow+0x224>)
 80162d2:	b011      	add	sp, #68	; 0x44
 80162d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162d8:	f001 bb6e 	b.w	80179b8 <nan>
 80162dc:	f1b9 0f00 	cmp.w	r9, #0
 80162e0:	da53      	bge.n	801638a <__ieee754_pow+0x10a>
 80162e2:	4b71      	ldr	r3, [pc, #452]	; (80164a8 <__ieee754_pow+0x228>)
 80162e4:	429d      	cmp	r5, r3
 80162e6:	dc4e      	bgt.n	8016386 <__ieee754_pow+0x106>
 80162e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80162ec:	429d      	cmp	r5, r3
 80162ee:	dd4c      	ble.n	801638a <__ieee754_pow+0x10a>
 80162f0:	152b      	asrs	r3, r5, #20
 80162f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80162f6:	2b14      	cmp	r3, #20
 80162f8:	dd28      	ble.n	801634c <__ieee754_pow+0xcc>
 80162fa:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80162fe:	fa22 f103 	lsr.w	r1, r2, r3
 8016302:	fa01 f303 	lsl.w	r3, r1, r3
 8016306:	4293      	cmp	r3, r2
 8016308:	d13f      	bne.n	801638a <__ieee754_pow+0x10a>
 801630a:	f001 0101 	and.w	r1, r1, #1
 801630e:	f1c1 0302 	rsb	r3, r1, #2
 8016312:	9300      	str	r3, [sp, #0]
 8016314:	2a00      	cmp	r2, #0
 8016316:	d15c      	bne.n	80163d2 <__ieee754_pow+0x152>
 8016318:	4b61      	ldr	r3, [pc, #388]	; (80164a0 <__ieee754_pow+0x220>)
 801631a:	429d      	cmp	r5, r3
 801631c:	d126      	bne.n	801636c <__ieee754_pow+0xec>
 801631e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016322:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016326:	ea53 030a 	orrs.w	r3, r3, sl
 801632a:	f000 846f 	beq.w	8016c0c <__ieee754_pow+0x98c>
 801632e:	4b5f      	ldr	r3, [pc, #380]	; (80164ac <__ieee754_pow+0x22c>)
 8016330:	429c      	cmp	r4, r3
 8016332:	dd2c      	ble.n	801638e <__ieee754_pow+0x10e>
 8016334:	2e00      	cmp	r6, #0
 8016336:	f280 846f 	bge.w	8016c18 <__ieee754_pow+0x998>
 801633a:	f04f 0b00 	mov.w	fp, #0
 801633e:	f04f 0c00 	mov.w	ip, #0
 8016342:	4658      	mov	r0, fp
 8016344:	4661      	mov	r1, ip
 8016346:	b011      	add	sp, #68	; 0x44
 8016348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801634c:	2a00      	cmp	r2, #0
 801634e:	d13e      	bne.n	80163ce <__ieee754_pow+0x14e>
 8016350:	f1c3 0314 	rsb	r3, r3, #20
 8016354:	fa45 f103 	asr.w	r1, r5, r3
 8016358:	fa01 f303 	lsl.w	r3, r1, r3
 801635c:	42ab      	cmp	r3, r5
 801635e:	f040 8463 	bne.w	8016c28 <__ieee754_pow+0x9a8>
 8016362:	f001 0101 	and.w	r1, r1, #1
 8016366:	f1c1 0302 	rsb	r3, r1, #2
 801636a:	9300      	str	r3, [sp, #0]
 801636c:	4b50      	ldr	r3, [pc, #320]	; (80164b0 <__ieee754_pow+0x230>)
 801636e:	429d      	cmp	r5, r3
 8016370:	d114      	bne.n	801639c <__ieee754_pow+0x11c>
 8016372:	2e00      	cmp	r6, #0
 8016374:	f280 8454 	bge.w	8016c20 <__ieee754_pow+0x9a0>
 8016378:	463a      	mov	r2, r7
 801637a:	4643      	mov	r3, r8
 801637c:	2000      	movs	r0, #0
 801637e:	494c      	ldr	r1, [pc, #304]	; (80164b0 <__ieee754_pow+0x230>)
 8016380:	f7ea f9d4 	bl	800072c <__aeabi_ddiv>
 8016384:	e013      	b.n	80163ae <__ieee754_pow+0x12e>
 8016386:	2302      	movs	r3, #2
 8016388:	e7c3      	b.n	8016312 <__ieee754_pow+0x92>
 801638a:	2300      	movs	r3, #0
 801638c:	e7c1      	b.n	8016312 <__ieee754_pow+0x92>
 801638e:	2e00      	cmp	r6, #0
 8016390:	dad3      	bge.n	801633a <__ieee754_pow+0xba>
 8016392:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8016396:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 801639a:	e7d2      	b.n	8016342 <__ieee754_pow+0xc2>
 801639c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80163a0:	d108      	bne.n	80163b4 <__ieee754_pow+0x134>
 80163a2:	463a      	mov	r2, r7
 80163a4:	4643      	mov	r3, r8
 80163a6:	4638      	mov	r0, r7
 80163a8:	4641      	mov	r1, r8
 80163aa:	f7ea f895 	bl	80004d8 <__aeabi_dmul>
 80163ae:	4683      	mov	fp, r0
 80163b0:	468c      	mov	ip, r1
 80163b2:	e7c6      	b.n	8016342 <__ieee754_pow+0xc2>
 80163b4:	4b3f      	ldr	r3, [pc, #252]	; (80164b4 <__ieee754_pow+0x234>)
 80163b6:	429e      	cmp	r6, r3
 80163b8:	d10b      	bne.n	80163d2 <__ieee754_pow+0x152>
 80163ba:	f1b9 0f00 	cmp.w	r9, #0
 80163be:	db08      	blt.n	80163d2 <__ieee754_pow+0x152>
 80163c0:	4638      	mov	r0, r7
 80163c2:	4641      	mov	r1, r8
 80163c4:	b011      	add	sp, #68	; 0x44
 80163c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ca:	f000 bc63 	b.w	8016c94 <__ieee754_sqrt>
 80163ce:	2300      	movs	r3, #0
 80163d0:	9300      	str	r3, [sp, #0]
 80163d2:	4638      	mov	r0, r7
 80163d4:	4641      	mov	r1, r8
 80163d6:	f001 fae3 	bl	80179a0 <fabs>
 80163da:	4683      	mov	fp, r0
 80163dc:	468c      	mov	ip, r1
 80163de:	f1ba 0f00 	cmp.w	sl, #0
 80163e2:	d12b      	bne.n	801643c <__ieee754_pow+0x1bc>
 80163e4:	b124      	cbz	r4, 80163f0 <__ieee754_pow+0x170>
 80163e6:	4b32      	ldr	r3, [pc, #200]	; (80164b0 <__ieee754_pow+0x230>)
 80163e8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80163ec:	429a      	cmp	r2, r3
 80163ee:	d125      	bne.n	801643c <__ieee754_pow+0x1bc>
 80163f0:	2e00      	cmp	r6, #0
 80163f2:	da07      	bge.n	8016404 <__ieee754_pow+0x184>
 80163f4:	465a      	mov	r2, fp
 80163f6:	4663      	mov	r3, ip
 80163f8:	2000      	movs	r0, #0
 80163fa:	492d      	ldr	r1, [pc, #180]	; (80164b0 <__ieee754_pow+0x230>)
 80163fc:	f7ea f996 	bl	800072c <__aeabi_ddiv>
 8016400:	4683      	mov	fp, r0
 8016402:	468c      	mov	ip, r1
 8016404:	f1b9 0f00 	cmp.w	r9, #0
 8016408:	da9b      	bge.n	8016342 <__ieee754_pow+0xc2>
 801640a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801640e:	9b00      	ldr	r3, [sp, #0]
 8016410:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016414:	4323      	orrs	r3, r4
 8016416:	d108      	bne.n	801642a <__ieee754_pow+0x1aa>
 8016418:	465a      	mov	r2, fp
 801641a:	4663      	mov	r3, ip
 801641c:	4658      	mov	r0, fp
 801641e:	4661      	mov	r1, ip
 8016420:	f7e9 fea2 	bl	8000168 <__aeabi_dsub>
 8016424:	4602      	mov	r2, r0
 8016426:	460b      	mov	r3, r1
 8016428:	e7aa      	b.n	8016380 <__ieee754_pow+0x100>
 801642a:	9b00      	ldr	r3, [sp, #0]
 801642c:	2b01      	cmp	r3, #1
 801642e:	d188      	bne.n	8016342 <__ieee754_pow+0xc2>
 8016430:	4658      	mov	r0, fp
 8016432:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8016436:	4683      	mov	fp, r0
 8016438:	469c      	mov	ip, r3
 801643a:	e782      	b.n	8016342 <__ieee754_pow+0xc2>
 801643c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8016440:	f109 33ff 	add.w	r3, r9, #4294967295
 8016444:	930d      	str	r3, [sp, #52]	; 0x34
 8016446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016448:	9b00      	ldr	r3, [sp, #0]
 801644a:	4313      	orrs	r3, r2
 801644c:	d104      	bne.n	8016458 <__ieee754_pow+0x1d8>
 801644e:	463a      	mov	r2, r7
 8016450:	4643      	mov	r3, r8
 8016452:	4638      	mov	r0, r7
 8016454:	4641      	mov	r1, r8
 8016456:	e7e3      	b.n	8016420 <__ieee754_pow+0x1a0>
 8016458:	4b17      	ldr	r3, [pc, #92]	; (80164b8 <__ieee754_pow+0x238>)
 801645a:	429d      	cmp	r5, r3
 801645c:	f340 80fe 	ble.w	801665c <__ieee754_pow+0x3dc>
 8016460:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016464:	429d      	cmp	r5, r3
 8016466:	dd0b      	ble.n	8016480 <__ieee754_pow+0x200>
 8016468:	4b10      	ldr	r3, [pc, #64]	; (80164ac <__ieee754_pow+0x22c>)
 801646a:	429c      	cmp	r4, r3
 801646c:	dc0e      	bgt.n	801648c <__ieee754_pow+0x20c>
 801646e:	2e00      	cmp	r6, #0
 8016470:	f6bf af63 	bge.w	801633a <__ieee754_pow+0xba>
 8016474:	a308      	add	r3, pc, #32	; (adr r3, 8016498 <__ieee754_pow+0x218>)
 8016476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801647a:	4610      	mov	r0, r2
 801647c:	4619      	mov	r1, r3
 801647e:	e794      	b.n	80163aa <__ieee754_pow+0x12a>
 8016480:	4b0e      	ldr	r3, [pc, #56]	; (80164bc <__ieee754_pow+0x23c>)
 8016482:	429c      	cmp	r4, r3
 8016484:	ddf3      	ble.n	801646e <__ieee754_pow+0x1ee>
 8016486:	4b0a      	ldr	r3, [pc, #40]	; (80164b0 <__ieee754_pow+0x230>)
 8016488:	429c      	cmp	r4, r3
 801648a:	dd19      	ble.n	80164c0 <__ieee754_pow+0x240>
 801648c:	2e00      	cmp	r6, #0
 801648e:	dcf1      	bgt.n	8016474 <__ieee754_pow+0x1f4>
 8016490:	e753      	b.n	801633a <__ieee754_pow+0xba>
 8016492:	bf00      	nop
 8016494:	f3af 8000 	nop.w
 8016498:	8800759c 	.word	0x8800759c
 801649c:	7e37e43c 	.word	0x7e37e43c
 80164a0:	7ff00000 	.word	0x7ff00000
 80164a4:	08018f99 	.word	0x08018f99
 80164a8:	433fffff 	.word	0x433fffff
 80164ac:	3fefffff 	.word	0x3fefffff
 80164b0:	3ff00000 	.word	0x3ff00000
 80164b4:	3fe00000 	.word	0x3fe00000
 80164b8:	41e00000 	.word	0x41e00000
 80164bc:	3feffffe 	.word	0x3feffffe
 80164c0:	4661      	mov	r1, ip
 80164c2:	2200      	movs	r2, #0
 80164c4:	4b60      	ldr	r3, [pc, #384]	; (8016648 <__ieee754_pow+0x3c8>)
 80164c6:	4658      	mov	r0, fp
 80164c8:	f7e9 fe4e 	bl	8000168 <__aeabi_dsub>
 80164cc:	a354      	add	r3, pc, #336	; (adr r3, 8016620 <__ieee754_pow+0x3a0>)
 80164ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d2:	4604      	mov	r4, r0
 80164d4:	460d      	mov	r5, r1
 80164d6:	f7e9 ffff 	bl	80004d8 <__aeabi_dmul>
 80164da:	a353      	add	r3, pc, #332	; (adr r3, 8016628 <__ieee754_pow+0x3a8>)
 80164dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e0:	4606      	mov	r6, r0
 80164e2:	460f      	mov	r7, r1
 80164e4:	4620      	mov	r0, r4
 80164e6:	4629      	mov	r1, r5
 80164e8:	f7e9 fff6 	bl	80004d8 <__aeabi_dmul>
 80164ec:	2200      	movs	r2, #0
 80164ee:	4682      	mov	sl, r0
 80164f0:	468b      	mov	fp, r1
 80164f2:	4b56      	ldr	r3, [pc, #344]	; (801664c <__ieee754_pow+0x3cc>)
 80164f4:	4620      	mov	r0, r4
 80164f6:	4629      	mov	r1, r5
 80164f8:	f7e9 ffee 	bl	80004d8 <__aeabi_dmul>
 80164fc:	4602      	mov	r2, r0
 80164fe:	460b      	mov	r3, r1
 8016500:	a14b      	add	r1, pc, #300	; (adr r1, 8016630 <__ieee754_pow+0x3b0>)
 8016502:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016506:	f7e9 fe2f 	bl	8000168 <__aeabi_dsub>
 801650a:	4622      	mov	r2, r4
 801650c:	462b      	mov	r3, r5
 801650e:	f7e9 ffe3 	bl	80004d8 <__aeabi_dmul>
 8016512:	4602      	mov	r2, r0
 8016514:	460b      	mov	r3, r1
 8016516:	2000      	movs	r0, #0
 8016518:	494d      	ldr	r1, [pc, #308]	; (8016650 <__ieee754_pow+0x3d0>)
 801651a:	f7e9 fe25 	bl	8000168 <__aeabi_dsub>
 801651e:	4622      	mov	r2, r4
 8016520:	462b      	mov	r3, r5
 8016522:	4680      	mov	r8, r0
 8016524:	4689      	mov	r9, r1
 8016526:	4620      	mov	r0, r4
 8016528:	4629      	mov	r1, r5
 801652a:	f7e9 ffd5 	bl	80004d8 <__aeabi_dmul>
 801652e:	4602      	mov	r2, r0
 8016530:	460b      	mov	r3, r1
 8016532:	4640      	mov	r0, r8
 8016534:	4649      	mov	r1, r9
 8016536:	f7e9 ffcf 	bl	80004d8 <__aeabi_dmul>
 801653a:	a33f      	add	r3, pc, #252	; (adr r3, 8016638 <__ieee754_pow+0x3b8>)
 801653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016540:	f7e9 ffca 	bl	80004d8 <__aeabi_dmul>
 8016544:	4602      	mov	r2, r0
 8016546:	460b      	mov	r3, r1
 8016548:	4650      	mov	r0, sl
 801654a:	4659      	mov	r1, fp
 801654c:	f7e9 fe0c 	bl	8000168 <__aeabi_dsub>
 8016550:	4602      	mov	r2, r0
 8016552:	460b      	mov	r3, r1
 8016554:	4604      	mov	r4, r0
 8016556:	460d      	mov	r5, r1
 8016558:	4630      	mov	r0, r6
 801655a:	4639      	mov	r1, r7
 801655c:	f7e9 fe06 	bl	800016c <__adddf3>
 8016560:	2000      	movs	r0, #0
 8016562:	468b      	mov	fp, r1
 8016564:	4682      	mov	sl, r0
 8016566:	4632      	mov	r2, r6
 8016568:	463b      	mov	r3, r7
 801656a:	f7e9 fdfd 	bl	8000168 <__aeabi_dsub>
 801656e:	4602      	mov	r2, r0
 8016570:	460b      	mov	r3, r1
 8016572:	4620      	mov	r0, r4
 8016574:	4629      	mov	r1, r5
 8016576:	f7e9 fdf7 	bl	8000168 <__aeabi_dsub>
 801657a:	9b00      	ldr	r3, [sp, #0]
 801657c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801657e:	3b01      	subs	r3, #1
 8016580:	4313      	orrs	r3, r2
 8016582:	f04f 0300 	mov.w	r3, #0
 8016586:	bf0c      	ite	eq
 8016588:	4c32      	ldreq	r4, [pc, #200]	; (8016654 <__ieee754_pow+0x3d4>)
 801658a:	4c2f      	ldrne	r4, [pc, #188]	; (8016648 <__ieee754_pow+0x3c8>)
 801658c:	4606      	mov	r6, r0
 801658e:	e9cd 3400 	strd	r3, r4, [sp]
 8016592:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016596:	2400      	movs	r4, #0
 8016598:	460f      	mov	r7, r1
 801659a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801659e:	4622      	mov	r2, r4
 80165a0:	462b      	mov	r3, r5
 80165a2:	f7e9 fde1 	bl	8000168 <__aeabi_dsub>
 80165a6:	4652      	mov	r2, sl
 80165a8:	465b      	mov	r3, fp
 80165aa:	f7e9 ff95 	bl	80004d8 <__aeabi_dmul>
 80165ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80165b2:	4680      	mov	r8, r0
 80165b4:	4689      	mov	r9, r1
 80165b6:	4630      	mov	r0, r6
 80165b8:	4639      	mov	r1, r7
 80165ba:	f7e9 ff8d 	bl	80004d8 <__aeabi_dmul>
 80165be:	4602      	mov	r2, r0
 80165c0:	460b      	mov	r3, r1
 80165c2:	4640      	mov	r0, r8
 80165c4:	4649      	mov	r1, r9
 80165c6:	f7e9 fdd1 	bl	800016c <__adddf3>
 80165ca:	4622      	mov	r2, r4
 80165cc:	462b      	mov	r3, r5
 80165ce:	4680      	mov	r8, r0
 80165d0:	4689      	mov	r9, r1
 80165d2:	4650      	mov	r0, sl
 80165d4:	4659      	mov	r1, fp
 80165d6:	f7e9 ff7f 	bl	80004d8 <__aeabi_dmul>
 80165da:	4604      	mov	r4, r0
 80165dc:	460d      	mov	r5, r1
 80165de:	460b      	mov	r3, r1
 80165e0:	4602      	mov	r2, r0
 80165e2:	4649      	mov	r1, r9
 80165e4:	4640      	mov	r0, r8
 80165e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80165ea:	f7e9 fdbf 	bl	800016c <__adddf3>
 80165ee:	4b1a      	ldr	r3, [pc, #104]	; (8016658 <__ieee754_pow+0x3d8>)
 80165f0:	4682      	mov	sl, r0
 80165f2:	4299      	cmp	r1, r3
 80165f4:	460f      	mov	r7, r1
 80165f6:	460e      	mov	r6, r1
 80165f8:	f340 82e1 	ble.w	8016bbe <__ieee754_pow+0x93e>
 80165fc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016600:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016604:	4303      	orrs	r3, r0
 8016606:	f000 81db 	beq.w	80169c0 <__ieee754_pow+0x740>
 801660a:	a30d      	add	r3, pc, #52	; (adr r3, 8016640 <__ieee754_pow+0x3c0>)
 801660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016614:	f7e9 ff60 	bl	80004d8 <__aeabi_dmul>
 8016618:	a309      	add	r3, pc, #36	; (adr r3, 8016640 <__ieee754_pow+0x3c0>)
 801661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801661e:	e6c4      	b.n	80163aa <__ieee754_pow+0x12a>
 8016620:	60000000 	.word	0x60000000
 8016624:	3ff71547 	.word	0x3ff71547
 8016628:	f85ddf44 	.word	0xf85ddf44
 801662c:	3e54ae0b 	.word	0x3e54ae0b
 8016630:	55555555 	.word	0x55555555
 8016634:	3fd55555 	.word	0x3fd55555
 8016638:	652b82fe 	.word	0x652b82fe
 801663c:	3ff71547 	.word	0x3ff71547
 8016640:	8800759c 	.word	0x8800759c
 8016644:	7e37e43c 	.word	0x7e37e43c
 8016648:	3ff00000 	.word	0x3ff00000
 801664c:	3fd00000 	.word	0x3fd00000
 8016650:	3fe00000 	.word	0x3fe00000
 8016654:	bff00000 	.word	0xbff00000
 8016658:	408fffff 	.word	0x408fffff
 801665c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016660:	f04f 0200 	mov.w	r2, #0
 8016664:	da08      	bge.n	8016678 <__ieee754_pow+0x3f8>
 8016666:	4658      	mov	r0, fp
 8016668:	4bcd      	ldr	r3, [pc, #820]	; (80169a0 <__ieee754_pow+0x720>)
 801666a:	4661      	mov	r1, ip
 801666c:	f7e9 ff34 	bl	80004d8 <__aeabi_dmul>
 8016670:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016674:	4683      	mov	fp, r0
 8016676:	460c      	mov	r4, r1
 8016678:	1523      	asrs	r3, r4, #20
 801667a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801667e:	4413      	add	r3, r2
 8016680:	930c      	str	r3, [sp, #48]	; 0x30
 8016682:	4bc8      	ldr	r3, [pc, #800]	; (80169a4 <__ieee754_pow+0x724>)
 8016684:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016688:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801668c:	429c      	cmp	r4, r3
 801668e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016692:	dd08      	ble.n	80166a6 <__ieee754_pow+0x426>
 8016694:	4bc4      	ldr	r3, [pc, #784]	; (80169a8 <__ieee754_pow+0x728>)
 8016696:	429c      	cmp	r4, r3
 8016698:	f340 815b 	ble.w	8016952 <__ieee754_pow+0x6d2>
 801669c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801669e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80166a2:	3301      	adds	r3, #1
 80166a4:	930c      	str	r3, [sp, #48]	; 0x30
 80166a6:	f04f 0800 	mov.w	r8, #0
 80166aa:	4658      	mov	r0, fp
 80166ac:	4629      	mov	r1, r5
 80166ae:	4bbf      	ldr	r3, [pc, #764]	; (80169ac <__ieee754_pow+0x72c>)
 80166b0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80166b4:	444b      	add	r3, r9
 80166b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80166ba:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80166be:	461a      	mov	r2, r3
 80166c0:	4623      	mov	r3, r4
 80166c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80166c6:	f7e9 fd4f 	bl	8000168 <__aeabi_dsub>
 80166ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80166ce:	4606      	mov	r6, r0
 80166d0:	460f      	mov	r7, r1
 80166d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80166d6:	f7e9 fd49 	bl	800016c <__adddf3>
 80166da:	4602      	mov	r2, r0
 80166dc:	460b      	mov	r3, r1
 80166de:	2000      	movs	r0, #0
 80166e0:	49b3      	ldr	r1, [pc, #716]	; (80169b0 <__ieee754_pow+0x730>)
 80166e2:	f7ea f823 	bl	800072c <__aeabi_ddiv>
 80166e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80166ea:	4602      	mov	r2, r0
 80166ec:	460b      	mov	r3, r1
 80166ee:	4630      	mov	r0, r6
 80166f0:	4639      	mov	r1, r7
 80166f2:	f7e9 fef1 	bl	80004d8 <__aeabi_dmul>
 80166f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80166fa:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80166fe:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8016702:	2300      	movs	r3, #0
 8016704:	2200      	movs	r2, #0
 8016706:	106d      	asrs	r5, r5, #1
 8016708:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801670c:	9304      	str	r3, [sp, #16]
 801670e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016712:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016716:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 801671a:	4650      	mov	r0, sl
 801671c:	4659      	mov	r1, fp
 801671e:	4614      	mov	r4, r2
 8016720:	461d      	mov	r5, r3
 8016722:	f7e9 fed9 	bl	80004d8 <__aeabi_dmul>
 8016726:	4602      	mov	r2, r0
 8016728:	460b      	mov	r3, r1
 801672a:	4630      	mov	r0, r6
 801672c:	4639      	mov	r1, r7
 801672e:	f7e9 fd1b 	bl	8000168 <__aeabi_dsub>
 8016732:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016736:	4606      	mov	r6, r0
 8016738:	460f      	mov	r7, r1
 801673a:	4620      	mov	r0, r4
 801673c:	4629      	mov	r1, r5
 801673e:	f7e9 fd13 	bl	8000168 <__aeabi_dsub>
 8016742:	4602      	mov	r2, r0
 8016744:	460b      	mov	r3, r1
 8016746:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801674a:	f7e9 fd0d 	bl	8000168 <__aeabi_dsub>
 801674e:	4652      	mov	r2, sl
 8016750:	465b      	mov	r3, fp
 8016752:	f7e9 fec1 	bl	80004d8 <__aeabi_dmul>
 8016756:	4602      	mov	r2, r0
 8016758:	460b      	mov	r3, r1
 801675a:	4630      	mov	r0, r6
 801675c:	4639      	mov	r1, r7
 801675e:	f7e9 fd03 	bl	8000168 <__aeabi_dsub>
 8016762:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016766:	f7e9 feb7 	bl	80004d8 <__aeabi_dmul>
 801676a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801676e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016772:	4610      	mov	r0, r2
 8016774:	4619      	mov	r1, r3
 8016776:	f7e9 feaf 	bl	80004d8 <__aeabi_dmul>
 801677a:	a377      	add	r3, pc, #476	; (adr r3, 8016958 <__ieee754_pow+0x6d8>)
 801677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016780:	4604      	mov	r4, r0
 8016782:	460d      	mov	r5, r1
 8016784:	f7e9 fea8 	bl	80004d8 <__aeabi_dmul>
 8016788:	a375      	add	r3, pc, #468	; (adr r3, 8016960 <__ieee754_pow+0x6e0>)
 801678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801678e:	f7e9 fced 	bl	800016c <__adddf3>
 8016792:	4622      	mov	r2, r4
 8016794:	462b      	mov	r3, r5
 8016796:	f7e9 fe9f 	bl	80004d8 <__aeabi_dmul>
 801679a:	a373      	add	r3, pc, #460	; (adr r3, 8016968 <__ieee754_pow+0x6e8>)
 801679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167a0:	f7e9 fce4 	bl	800016c <__adddf3>
 80167a4:	4622      	mov	r2, r4
 80167a6:	462b      	mov	r3, r5
 80167a8:	f7e9 fe96 	bl	80004d8 <__aeabi_dmul>
 80167ac:	a370      	add	r3, pc, #448	; (adr r3, 8016970 <__ieee754_pow+0x6f0>)
 80167ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167b2:	f7e9 fcdb 	bl	800016c <__adddf3>
 80167b6:	4622      	mov	r2, r4
 80167b8:	462b      	mov	r3, r5
 80167ba:	f7e9 fe8d 	bl	80004d8 <__aeabi_dmul>
 80167be:	a36e      	add	r3, pc, #440	; (adr r3, 8016978 <__ieee754_pow+0x6f8>)
 80167c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167c4:	f7e9 fcd2 	bl	800016c <__adddf3>
 80167c8:	4622      	mov	r2, r4
 80167ca:	462b      	mov	r3, r5
 80167cc:	f7e9 fe84 	bl	80004d8 <__aeabi_dmul>
 80167d0:	a36b      	add	r3, pc, #428	; (adr r3, 8016980 <__ieee754_pow+0x700>)
 80167d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167d6:	f7e9 fcc9 	bl	800016c <__adddf3>
 80167da:	4622      	mov	r2, r4
 80167dc:	4606      	mov	r6, r0
 80167de:	460f      	mov	r7, r1
 80167e0:	462b      	mov	r3, r5
 80167e2:	4620      	mov	r0, r4
 80167e4:	4629      	mov	r1, r5
 80167e6:	f7e9 fe77 	bl	80004d8 <__aeabi_dmul>
 80167ea:	4602      	mov	r2, r0
 80167ec:	460b      	mov	r3, r1
 80167ee:	4630      	mov	r0, r6
 80167f0:	4639      	mov	r1, r7
 80167f2:	f7e9 fe71 	bl	80004d8 <__aeabi_dmul>
 80167f6:	4604      	mov	r4, r0
 80167f8:	460d      	mov	r5, r1
 80167fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80167fe:	4652      	mov	r2, sl
 8016800:	465b      	mov	r3, fp
 8016802:	f7e9 fcb3 	bl	800016c <__adddf3>
 8016806:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801680a:	f7e9 fe65 	bl	80004d8 <__aeabi_dmul>
 801680e:	4622      	mov	r2, r4
 8016810:	462b      	mov	r3, r5
 8016812:	f7e9 fcab 	bl	800016c <__adddf3>
 8016816:	4652      	mov	r2, sl
 8016818:	4606      	mov	r6, r0
 801681a:	460f      	mov	r7, r1
 801681c:	465b      	mov	r3, fp
 801681e:	4650      	mov	r0, sl
 8016820:	4659      	mov	r1, fp
 8016822:	f7e9 fe59 	bl	80004d8 <__aeabi_dmul>
 8016826:	2200      	movs	r2, #0
 8016828:	4b62      	ldr	r3, [pc, #392]	; (80169b4 <__ieee754_pow+0x734>)
 801682a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801682e:	f7e9 fc9d 	bl	800016c <__adddf3>
 8016832:	4632      	mov	r2, r6
 8016834:	463b      	mov	r3, r7
 8016836:	f7e9 fc99 	bl	800016c <__adddf3>
 801683a:	9804      	ldr	r0, [sp, #16]
 801683c:	460d      	mov	r5, r1
 801683e:	4604      	mov	r4, r0
 8016840:	4602      	mov	r2, r0
 8016842:	460b      	mov	r3, r1
 8016844:	4650      	mov	r0, sl
 8016846:	4659      	mov	r1, fp
 8016848:	f7e9 fe46 	bl	80004d8 <__aeabi_dmul>
 801684c:	2200      	movs	r2, #0
 801684e:	4682      	mov	sl, r0
 8016850:	468b      	mov	fp, r1
 8016852:	4b58      	ldr	r3, [pc, #352]	; (80169b4 <__ieee754_pow+0x734>)
 8016854:	4620      	mov	r0, r4
 8016856:	4629      	mov	r1, r5
 8016858:	f7e9 fc86 	bl	8000168 <__aeabi_dsub>
 801685c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016860:	f7e9 fc82 	bl	8000168 <__aeabi_dsub>
 8016864:	4602      	mov	r2, r0
 8016866:	460b      	mov	r3, r1
 8016868:	4630      	mov	r0, r6
 801686a:	4639      	mov	r1, r7
 801686c:	f7e9 fc7c 	bl	8000168 <__aeabi_dsub>
 8016870:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016874:	f7e9 fe30 	bl	80004d8 <__aeabi_dmul>
 8016878:	4622      	mov	r2, r4
 801687a:	4606      	mov	r6, r0
 801687c:	460f      	mov	r7, r1
 801687e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016882:	462b      	mov	r3, r5
 8016884:	f7e9 fe28 	bl	80004d8 <__aeabi_dmul>
 8016888:	4602      	mov	r2, r0
 801688a:	460b      	mov	r3, r1
 801688c:	4630      	mov	r0, r6
 801688e:	4639      	mov	r1, r7
 8016890:	f7e9 fc6c 	bl	800016c <__adddf3>
 8016894:	4606      	mov	r6, r0
 8016896:	460f      	mov	r7, r1
 8016898:	4602      	mov	r2, r0
 801689a:	460b      	mov	r3, r1
 801689c:	4650      	mov	r0, sl
 801689e:	4659      	mov	r1, fp
 80168a0:	f7e9 fc64 	bl	800016c <__adddf3>
 80168a4:	a338      	add	r3, pc, #224	; (adr r3, 8016988 <__ieee754_pow+0x708>)
 80168a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168aa:	9804      	ldr	r0, [sp, #16]
 80168ac:	460d      	mov	r5, r1
 80168ae:	4604      	mov	r4, r0
 80168b0:	f7e9 fe12 	bl	80004d8 <__aeabi_dmul>
 80168b4:	4652      	mov	r2, sl
 80168b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80168ba:	465b      	mov	r3, fp
 80168bc:	4620      	mov	r0, r4
 80168be:	4629      	mov	r1, r5
 80168c0:	f7e9 fc52 	bl	8000168 <__aeabi_dsub>
 80168c4:	4602      	mov	r2, r0
 80168c6:	460b      	mov	r3, r1
 80168c8:	4630      	mov	r0, r6
 80168ca:	4639      	mov	r1, r7
 80168cc:	f7e9 fc4c 	bl	8000168 <__aeabi_dsub>
 80168d0:	a32f      	add	r3, pc, #188	; (adr r3, 8016990 <__ieee754_pow+0x710>)
 80168d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168d6:	f7e9 fdff 	bl	80004d8 <__aeabi_dmul>
 80168da:	a32f      	add	r3, pc, #188	; (adr r3, 8016998 <__ieee754_pow+0x718>)
 80168dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168e0:	4606      	mov	r6, r0
 80168e2:	460f      	mov	r7, r1
 80168e4:	4620      	mov	r0, r4
 80168e6:	4629      	mov	r1, r5
 80168e8:	f7e9 fdf6 	bl	80004d8 <__aeabi_dmul>
 80168ec:	4602      	mov	r2, r0
 80168ee:	460b      	mov	r3, r1
 80168f0:	4630      	mov	r0, r6
 80168f2:	4639      	mov	r1, r7
 80168f4:	f7e9 fc3a 	bl	800016c <__adddf3>
 80168f8:	4b2f      	ldr	r3, [pc, #188]	; (80169b8 <__ieee754_pow+0x738>)
 80168fa:	444b      	add	r3, r9
 80168fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016900:	f7e9 fc34 	bl	800016c <__adddf3>
 8016904:	4604      	mov	r4, r0
 8016906:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016908:	460d      	mov	r5, r1
 801690a:	f7e9 fd7b 	bl	8000404 <__aeabi_i2d>
 801690e:	4606      	mov	r6, r0
 8016910:	460f      	mov	r7, r1
 8016912:	4b2a      	ldr	r3, [pc, #168]	; (80169bc <__ieee754_pow+0x73c>)
 8016914:	4622      	mov	r2, r4
 8016916:	444b      	add	r3, r9
 8016918:	e9d3 8900 	ldrd	r8, r9, [r3]
 801691c:	462b      	mov	r3, r5
 801691e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016922:	f7e9 fc23 	bl	800016c <__adddf3>
 8016926:	4642      	mov	r2, r8
 8016928:	464b      	mov	r3, r9
 801692a:	f7e9 fc1f 	bl	800016c <__adddf3>
 801692e:	4632      	mov	r2, r6
 8016930:	463b      	mov	r3, r7
 8016932:	f7e9 fc1b 	bl	800016c <__adddf3>
 8016936:	9804      	ldr	r0, [sp, #16]
 8016938:	4632      	mov	r2, r6
 801693a:	463b      	mov	r3, r7
 801693c:	4682      	mov	sl, r0
 801693e:	468b      	mov	fp, r1
 8016940:	f7e9 fc12 	bl	8000168 <__aeabi_dsub>
 8016944:	4642      	mov	r2, r8
 8016946:	464b      	mov	r3, r9
 8016948:	f7e9 fc0e 	bl	8000168 <__aeabi_dsub>
 801694c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016950:	e60b      	b.n	801656a <__ieee754_pow+0x2ea>
 8016952:	f04f 0801 	mov.w	r8, #1
 8016956:	e6a8      	b.n	80166aa <__ieee754_pow+0x42a>
 8016958:	4a454eef 	.word	0x4a454eef
 801695c:	3fca7e28 	.word	0x3fca7e28
 8016960:	93c9db65 	.word	0x93c9db65
 8016964:	3fcd864a 	.word	0x3fcd864a
 8016968:	a91d4101 	.word	0xa91d4101
 801696c:	3fd17460 	.word	0x3fd17460
 8016970:	518f264d 	.word	0x518f264d
 8016974:	3fd55555 	.word	0x3fd55555
 8016978:	db6fabff 	.word	0xdb6fabff
 801697c:	3fdb6db6 	.word	0x3fdb6db6
 8016980:	33333303 	.word	0x33333303
 8016984:	3fe33333 	.word	0x3fe33333
 8016988:	e0000000 	.word	0xe0000000
 801698c:	3feec709 	.word	0x3feec709
 8016990:	dc3a03fd 	.word	0xdc3a03fd
 8016994:	3feec709 	.word	0x3feec709
 8016998:	145b01f5 	.word	0x145b01f5
 801699c:	be3e2fe0 	.word	0xbe3e2fe0
 80169a0:	43400000 	.word	0x43400000
 80169a4:	0003988e 	.word	0x0003988e
 80169a8:	000bb679 	.word	0x000bb679
 80169ac:	08018fd8 	.word	0x08018fd8
 80169b0:	3ff00000 	.word	0x3ff00000
 80169b4:	40080000 	.word	0x40080000
 80169b8:	08018ff8 	.word	0x08018ff8
 80169bc:	08018fe8 	.word	0x08018fe8
 80169c0:	a39b      	add	r3, pc, #620	; (adr r3, 8016c30 <__ieee754_pow+0x9b0>)
 80169c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c6:	4640      	mov	r0, r8
 80169c8:	4649      	mov	r1, r9
 80169ca:	f7e9 fbcf 	bl	800016c <__adddf3>
 80169ce:	4622      	mov	r2, r4
 80169d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80169d4:	462b      	mov	r3, r5
 80169d6:	4650      	mov	r0, sl
 80169d8:	4639      	mov	r1, r7
 80169da:	f7e9 fbc5 	bl	8000168 <__aeabi_dsub>
 80169de:	4602      	mov	r2, r0
 80169e0:	460b      	mov	r3, r1
 80169e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80169e6:	f7ea f807 	bl	80009f8 <__aeabi_dcmpgt>
 80169ea:	2800      	cmp	r0, #0
 80169ec:	f47f ae0d 	bne.w	801660a <__ieee754_pow+0x38a>
 80169f0:	4aa3      	ldr	r2, [pc, #652]	; (8016c80 <__ieee754_pow+0xa00>)
 80169f2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80169f6:	4293      	cmp	r3, r2
 80169f8:	f340 8103 	ble.w	8016c02 <__ieee754_pow+0x982>
 80169fc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016a00:	2000      	movs	r0, #0
 8016a02:	151b      	asrs	r3, r3, #20
 8016a04:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016a08:	fa4a f303 	asr.w	r3, sl, r3
 8016a0c:	4433      	add	r3, r6
 8016a0e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016a12:	4f9c      	ldr	r7, [pc, #624]	; (8016c84 <__ieee754_pow+0xa04>)
 8016a14:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016a18:	4117      	asrs	r7, r2
 8016a1a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016a1e:	ea23 0107 	bic.w	r1, r3, r7
 8016a22:	f1c2 0214 	rsb	r2, r2, #20
 8016a26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016a2a:	fa4a fa02 	asr.w	sl, sl, r2
 8016a2e:	2e00      	cmp	r6, #0
 8016a30:	4602      	mov	r2, r0
 8016a32:	460b      	mov	r3, r1
 8016a34:	4620      	mov	r0, r4
 8016a36:	4629      	mov	r1, r5
 8016a38:	bfb8      	it	lt
 8016a3a:	f1ca 0a00 	rsblt	sl, sl, #0
 8016a3e:	f7e9 fb93 	bl	8000168 <__aeabi_dsub>
 8016a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016a4a:	4642      	mov	r2, r8
 8016a4c:	464b      	mov	r3, r9
 8016a4e:	f7e9 fb8d 	bl	800016c <__adddf3>
 8016a52:	a379      	add	r3, pc, #484	; (adr r3, 8016c38 <__ieee754_pow+0x9b8>)
 8016a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a58:	2000      	movs	r0, #0
 8016a5a:	460d      	mov	r5, r1
 8016a5c:	4604      	mov	r4, r0
 8016a5e:	f7e9 fd3b 	bl	80004d8 <__aeabi_dmul>
 8016a62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a66:	4606      	mov	r6, r0
 8016a68:	460f      	mov	r7, r1
 8016a6a:	4620      	mov	r0, r4
 8016a6c:	4629      	mov	r1, r5
 8016a6e:	f7e9 fb7b 	bl	8000168 <__aeabi_dsub>
 8016a72:	4602      	mov	r2, r0
 8016a74:	460b      	mov	r3, r1
 8016a76:	4640      	mov	r0, r8
 8016a78:	4649      	mov	r1, r9
 8016a7a:	f7e9 fb75 	bl	8000168 <__aeabi_dsub>
 8016a7e:	a370      	add	r3, pc, #448	; (adr r3, 8016c40 <__ieee754_pow+0x9c0>)
 8016a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a84:	f7e9 fd28 	bl	80004d8 <__aeabi_dmul>
 8016a88:	a36f      	add	r3, pc, #444	; (adr r3, 8016c48 <__ieee754_pow+0x9c8>)
 8016a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a8e:	4680      	mov	r8, r0
 8016a90:	4689      	mov	r9, r1
 8016a92:	4620      	mov	r0, r4
 8016a94:	4629      	mov	r1, r5
 8016a96:	f7e9 fd1f 	bl	80004d8 <__aeabi_dmul>
 8016a9a:	4602      	mov	r2, r0
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	4640      	mov	r0, r8
 8016aa0:	4649      	mov	r1, r9
 8016aa2:	f7e9 fb63 	bl	800016c <__adddf3>
 8016aa6:	4604      	mov	r4, r0
 8016aa8:	460d      	mov	r5, r1
 8016aaa:	4602      	mov	r2, r0
 8016aac:	460b      	mov	r3, r1
 8016aae:	4630      	mov	r0, r6
 8016ab0:	4639      	mov	r1, r7
 8016ab2:	f7e9 fb5b 	bl	800016c <__adddf3>
 8016ab6:	4632      	mov	r2, r6
 8016ab8:	463b      	mov	r3, r7
 8016aba:	4680      	mov	r8, r0
 8016abc:	4689      	mov	r9, r1
 8016abe:	f7e9 fb53 	bl	8000168 <__aeabi_dsub>
 8016ac2:	4602      	mov	r2, r0
 8016ac4:	460b      	mov	r3, r1
 8016ac6:	4620      	mov	r0, r4
 8016ac8:	4629      	mov	r1, r5
 8016aca:	f7e9 fb4d 	bl	8000168 <__aeabi_dsub>
 8016ace:	4642      	mov	r2, r8
 8016ad0:	4606      	mov	r6, r0
 8016ad2:	460f      	mov	r7, r1
 8016ad4:	464b      	mov	r3, r9
 8016ad6:	4640      	mov	r0, r8
 8016ad8:	4649      	mov	r1, r9
 8016ada:	f7e9 fcfd 	bl	80004d8 <__aeabi_dmul>
 8016ade:	a35c      	add	r3, pc, #368	; (adr r3, 8016c50 <__ieee754_pow+0x9d0>)
 8016ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae4:	4604      	mov	r4, r0
 8016ae6:	460d      	mov	r5, r1
 8016ae8:	f7e9 fcf6 	bl	80004d8 <__aeabi_dmul>
 8016aec:	a35a      	add	r3, pc, #360	; (adr r3, 8016c58 <__ieee754_pow+0x9d8>)
 8016aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016af2:	f7e9 fb39 	bl	8000168 <__aeabi_dsub>
 8016af6:	4622      	mov	r2, r4
 8016af8:	462b      	mov	r3, r5
 8016afa:	f7e9 fced 	bl	80004d8 <__aeabi_dmul>
 8016afe:	a358      	add	r3, pc, #352	; (adr r3, 8016c60 <__ieee754_pow+0x9e0>)
 8016b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b04:	f7e9 fb32 	bl	800016c <__adddf3>
 8016b08:	4622      	mov	r2, r4
 8016b0a:	462b      	mov	r3, r5
 8016b0c:	f7e9 fce4 	bl	80004d8 <__aeabi_dmul>
 8016b10:	a355      	add	r3, pc, #340	; (adr r3, 8016c68 <__ieee754_pow+0x9e8>)
 8016b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b16:	f7e9 fb27 	bl	8000168 <__aeabi_dsub>
 8016b1a:	4622      	mov	r2, r4
 8016b1c:	462b      	mov	r3, r5
 8016b1e:	f7e9 fcdb 	bl	80004d8 <__aeabi_dmul>
 8016b22:	a353      	add	r3, pc, #332	; (adr r3, 8016c70 <__ieee754_pow+0x9f0>)
 8016b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b28:	f7e9 fb20 	bl	800016c <__adddf3>
 8016b2c:	4622      	mov	r2, r4
 8016b2e:	462b      	mov	r3, r5
 8016b30:	f7e9 fcd2 	bl	80004d8 <__aeabi_dmul>
 8016b34:	4602      	mov	r2, r0
 8016b36:	460b      	mov	r3, r1
 8016b38:	4640      	mov	r0, r8
 8016b3a:	4649      	mov	r1, r9
 8016b3c:	f7e9 fb14 	bl	8000168 <__aeabi_dsub>
 8016b40:	4604      	mov	r4, r0
 8016b42:	460d      	mov	r5, r1
 8016b44:	4602      	mov	r2, r0
 8016b46:	460b      	mov	r3, r1
 8016b48:	4640      	mov	r0, r8
 8016b4a:	4649      	mov	r1, r9
 8016b4c:	f7e9 fcc4 	bl	80004d8 <__aeabi_dmul>
 8016b50:	2200      	movs	r2, #0
 8016b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016b5a:	4620      	mov	r0, r4
 8016b5c:	4629      	mov	r1, r5
 8016b5e:	f7e9 fb03 	bl	8000168 <__aeabi_dsub>
 8016b62:	4602      	mov	r2, r0
 8016b64:	460b      	mov	r3, r1
 8016b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b6a:	f7e9 fddf 	bl	800072c <__aeabi_ddiv>
 8016b6e:	4632      	mov	r2, r6
 8016b70:	4604      	mov	r4, r0
 8016b72:	460d      	mov	r5, r1
 8016b74:	463b      	mov	r3, r7
 8016b76:	4640      	mov	r0, r8
 8016b78:	4649      	mov	r1, r9
 8016b7a:	f7e9 fcad 	bl	80004d8 <__aeabi_dmul>
 8016b7e:	4632      	mov	r2, r6
 8016b80:	463b      	mov	r3, r7
 8016b82:	f7e9 faf3 	bl	800016c <__adddf3>
 8016b86:	4602      	mov	r2, r0
 8016b88:	460b      	mov	r3, r1
 8016b8a:	4620      	mov	r0, r4
 8016b8c:	4629      	mov	r1, r5
 8016b8e:	f7e9 faeb 	bl	8000168 <__aeabi_dsub>
 8016b92:	4642      	mov	r2, r8
 8016b94:	464b      	mov	r3, r9
 8016b96:	f7e9 fae7 	bl	8000168 <__aeabi_dsub>
 8016b9a:	4602      	mov	r2, r0
 8016b9c:	460b      	mov	r3, r1
 8016b9e:	2000      	movs	r0, #0
 8016ba0:	4939      	ldr	r1, [pc, #228]	; (8016c88 <__ieee754_pow+0xa08>)
 8016ba2:	f7e9 fae1 	bl	8000168 <__aeabi_dsub>
 8016ba6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016baa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016bae:	da2b      	bge.n	8016c08 <__ieee754_pow+0x988>
 8016bb0:	4652      	mov	r2, sl
 8016bb2:	f000 ff91 	bl	8017ad8 <scalbn>
 8016bb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016bba:	f7ff bbf6 	b.w	80163aa <__ieee754_pow+0x12a>
 8016bbe:	4b33      	ldr	r3, [pc, #204]	; (8016c8c <__ieee754_pow+0xa0c>)
 8016bc0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8016bc4:	429f      	cmp	r7, r3
 8016bc6:	f77f af13 	ble.w	80169f0 <__ieee754_pow+0x770>
 8016bca:	4b31      	ldr	r3, [pc, #196]	; (8016c90 <__ieee754_pow+0xa10>)
 8016bcc:	440b      	add	r3, r1
 8016bce:	4303      	orrs	r3, r0
 8016bd0:	d00b      	beq.n	8016bea <__ieee754_pow+0x96a>
 8016bd2:	a329      	add	r3, pc, #164	; (adr r3, 8016c78 <__ieee754_pow+0x9f8>)
 8016bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016bdc:	f7e9 fc7c 	bl	80004d8 <__aeabi_dmul>
 8016be0:	a325      	add	r3, pc, #148	; (adr r3, 8016c78 <__ieee754_pow+0x9f8>)
 8016be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be6:	f7ff bbe0 	b.w	80163aa <__ieee754_pow+0x12a>
 8016bea:	4622      	mov	r2, r4
 8016bec:	462b      	mov	r3, r5
 8016bee:	f7e9 fabb 	bl	8000168 <__aeabi_dsub>
 8016bf2:	4642      	mov	r2, r8
 8016bf4:	464b      	mov	r3, r9
 8016bf6:	f7e9 fef5 	bl	80009e4 <__aeabi_dcmpge>
 8016bfa:	2800      	cmp	r0, #0
 8016bfc:	f43f aef8 	beq.w	80169f0 <__ieee754_pow+0x770>
 8016c00:	e7e7      	b.n	8016bd2 <__ieee754_pow+0x952>
 8016c02:	f04f 0a00 	mov.w	sl, #0
 8016c06:	e71e      	b.n	8016a46 <__ieee754_pow+0x7c6>
 8016c08:	4621      	mov	r1, r4
 8016c0a:	e7d4      	b.n	8016bb6 <__ieee754_pow+0x936>
 8016c0c:	f04f 0b00 	mov.w	fp, #0
 8016c10:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016c88 <__ieee754_pow+0xa08>
 8016c14:	f7ff bb95 	b.w	8016342 <__ieee754_pow+0xc2>
 8016c18:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8016c1c:	f7ff bb91 	b.w	8016342 <__ieee754_pow+0xc2>
 8016c20:	4638      	mov	r0, r7
 8016c22:	4641      	mov	r1, r8
 8016c24:	f7ff bbc3 	b.w	80163ae <__ieee754_pow+0x12e>
 8016c28:	9200      	str	r2, [sp, #0]
 8016c2a:	f7ff bb9f 	b.w	801636c <__ieee754_pow+0xec>
 8016c2e:	bf00      	nop
 8016c30:	652b82fe 	.word	0x652b82fe
 8016c34:	3c971547 	.word	0x3c971547
 8016c38:	00000000 	.word	0x00000000
 8016c3c:	3fe62e43 	.word	0x3fe62e43
 8016c40:	fefa39ef 	.word	0xfefa39ef
 8016c44:	3fe62e42 	.word	0x3fe62e42
 8016c48:	0ca86c39 	.word	0x0ca86c39
 8016c4c:	be205c61 	.word	0xbe205c61
 8016c50:	72bea4d0 	.word	0x72bea4d0
 8016c54:	3e663769 	.word	0x3e663769
 8016c58:	c5d26bf1 	.word	0xc5d26bf1
 8016c5c:	3ebbbd41 	.word	0x3ebbbd41
 8016c60:	af25de2c 	.word	0xaf25de2c
 8016c64:	3f11566a 	.word	0x3f11566a
 8016c68:	16bebd93 	.word	0x16bebd93
 8016c6c:	3f66c16c 	.word	0x3f66c16c
 8016c70:	5555553e 	.word	0x5555553e
 8016c74:	3fc55555 	.word	0x3fc55555
 8016c78:	c2f8f359 	.word	0xc2f8f359
 8016c7c:	01a56e1f 	.word	0x01a56e1f
 8016c80:	3fe00000 	.word	0x3fe00000
 8016c84:	000fffff 	.word	0x000fffff
 8016c88:	3ff00000 	.word	0x3ff00000
 8016c8c:	4090cbff 	.word	0x4090cbff
 8016c90:	3f6f3400 	.word	0x3f6f3400

08016c94 <__ieee754_sqrt>:
 8016c94:	4b54      	ldr	r3, [pc, #336]	; (8016de8 <__ieee754_sqrt+0x154>)
 8016c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c9a:	438b      	bics	r3, r1
 8016c9c:	4606      	mov	r6, r0
 8016c9e:	460d      	mov	r5, r1
 8016ca0:	460a      	mov	r2, r1
 8016ca2:	460c      	mov	r4, r1
 8016ca4:	d10f      	bne.n	8016cc6 <__ieee754_sqrt+0x32>
 8016ca6:	4602      	mov	r2, r0
 8016ca8:	460b      	mov	r3, r1
 8016caa:	f7e9 fc15 	bl	80004d8 <__aeabi_dmul>
 8016cae:	4602      	mov	r2, r0
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	4630      	mov	r0, r6
 8016cb4:	4629      	mov	r1, r5
 8016cb6:	f7e9 fa59 	bl	800016c <__adddf3>
 8016cba:	4606      	mov	r6, r0
 8016cbc:	460d      	mov	r5, r1
 8016cbe:	4630      	mov	r0, r6
 8016cc0:	4629      	mov	r1, r5
 8016cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cc6:	2900      	cmp	r1, #0
 8016cc8:	4607      	mov	r7, r0
 8016cca:	4603      	mov	r3, r0
 8016ccc:	dc0e      	bgt.n	8016cec <__ieee754_sqrt+0x58>
 8016cce:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8016cd2:	ea5c 0707 	orrs.w	r7, ip, r7
 8016cd6:	d0f2      	beq.n	8016cbe <__ieee754_sqrt+0x2a>
 8016cd8:	b141      	cbz	r1, 8016cec <__ieee754_sqrt+0x58>
 8016cda:	4602      	mov	r2, r0
 8016cdc:	460b      	mov	r3, r1
 8016cde:	f7e9 fa43 	bl	8000168 <__aeabi_dsub>
 8016ce2:	4602      	mov	r2, r0
 8016ce4:	460b      	mov	r3, r1
 8016ce6:	f7e9 fd21 	bl	800072c <__aeabi_ddiv>
 8016cea:	e7e6      	b.n	8016cba <__ieee754_sqrt+0x26>
 8016cec:	1512      	asrs	r2, r2, #20
 8016cee:	d074      	beq.n	8016dda <__ieee754_sqrt+0x146>
 8016cf0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016cf4:	07d5      	lsls	r5, r2, #31
 8016cf6:	f04f 0500 	mov.w	r5, #0
 8016cfa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016cfe:	bf48      	it	mi
 8016d00:	0fd9      	lsrmi	r1, r3, #31
 8016d02:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8016d06:	bf44      	itt	mi
 8016d08:	005b      	lslmi	r3, r3, #1
 8016d0a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8016d0e:	1051      	asrs	r1, r2, #1
 8016d10:	0fda      	lsrs	r2, r3, #31
 8016d12:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016d16:	4628      	mov	r0, r5
 8016d18:	2216      	movs	r2, #22
 8016d1a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016d1e:	005b      	lsls	r3, r3, #1
 8016d20:	1987      	adds	r7, r0, r6
 8016d22:	42a7      	cmp	r7, r4
 8016d24:	bfde      	ittt	le
 8016d26:	19b8      	addle	r0, r7, r6
 8016d28:	1be4      	suble	r4, r4, r7
 8016d2a:	19ad      	addle	r5, r5, r6
 8016d2c:	0fdf      	lsrs	r7, r3, #31
 8016d2e:	3a01      	subs	r2, #1
 8016d30:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8016d34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016d38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016d3c:	d1f0      	bne.n	8016d20 <__ieee754_sqrt+0x8c>
 8016d3e:	f04f 0c20 	mov.w	ip, #32
 8016d42:	4696      	mov	lr, r2
 8016d44:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016d48:	4284      	cmp	r4, r0
 8016d4a:	eb06 070e 	add.w	r7, r6, lr
 8016d4e:	dc02      	bgt.n	8016d56 <__ieee754_sqrt+0xc2>
 8016d50:	d112      	bne.n	8016d78 <__ieee754_sqrt+0xe4>
 8016d52:	429f      	cmp	r7, r3
 8016d54:	d810      	bhi.n	8016d78 <__ieee754_sqrt+0xe4>
 8016d56:	2f00      	cmp	r7, #0
 8016d58:	eb07 0e06 	add.w	lr, r7, r6
 8016d5c:	da42      	bge.n	8016de4 <__ieee754_sqrt+0x150>
 8016d5e:	f1be 0f00 	cmp.w	lr, #0
 8016d62:	db3f      	blt.n	8016de4 <__ieee754_sqrt+0x150>
 8016d64:	f100 0801 	add.w	r8, r0, #1
 8016d68:	1a24      	subs	r4, r4, r0
 8016d6a:	4640      	mov	r0, r8
 8016d6c:	429f      	cmp	r7, r3
 8016d6e:	bf88      	it	hi
 8016d70:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8016d74:	1bdb      	subs	r3, r3, r7
 8016d76:	4432      	add	r2, r6
 8016d78:	0064      	lsls	r4, r4, #1
 8016d7a:	f1bc 0c01 	subs.w	ip, ip, #1
 8016d7e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8016d82:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016d86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016d8a:	d1dd      	bne.n	8016d48 <__ieee754_sqrt+0xb4>
 8016d8c:	4323      	orrs	r3, r4
 8016d8e:	d006      	beq.n	8016d9e <__ieee754_sqrt+0x10a>
 8016d90:	1c54      	adds	r4, r2, #1
 8016d92:	bf0b      	itete	eq
 8016d94:	4662      	moveq	r2, ip
 8016d96:	3201      	addne	r2, #1
 8016d98:	3501      	addeq	r5, #1
 8016d9a:	f022 0201 	bicne.w	r2, r2, #1
 8016d9e:	106b      	asrs	r3, r5, #1
 8016da0:	0852      	lsrs	r2, r2, #1
 8016da2:	07e8      	lsls	r0, r5, #31
 8016da4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016da8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016dac:	bf48      	it	mi
 8016dae:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8016db2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8016db6:	4616      	mov	r6, r2
 8016db8:	e781      	b.n	8016cbe <__ieee754_sqrt+0x2a>
 8016dba:	0adc      	lsrs	r4, r3, #11
 8016dbc:	3915      	subs	r1, #21
 8016dbe:	055b      	lsls	r3, r3, #21
 8016dc0:	2c00      	cmp	r4, #0
 8016dc2:	d0fa      	beq.n	8016dba <__ieee754_sqrt+0x126>
 8016dc4:	02e6      	lsls	r6, r4, #11
 8016dc6:	d50a      	bpl.n	8016dde <__ieee754_sqrt+0x14a>
 8016dc8:	f1c2 0020 	rsb	r0, r2, #32
 8016dcc:	fa23 f000 	lsr.w	r0, r3, r0
 8016dd0:	1e55      	subs	r5, r2, #1
 8016dd2:	4093      	lsls	r3, r2
 8016dd4:	4304      	orrs	r4, r0
 8016dd6:	1b4a      	subs	r2, r1, r5
 8016dd8:	e78a      	b.n	8016cf0 <__ieee754_sqrt+0x5c>
 8016dda:	4611      	mov	r1, r2
 8016ddc:	e7f0      	b.n	8016dc0 <__ieee754_sqrt+0x12c>
 8016dde:	0064      	lsls	r4, r4, #1
 8016de0:	3201      	adds	r2, #1
 8016de2:	e7ef      	b.n	8016dc4 <__ieee754_sqrt+0x130>
 8016de4:	4680      	mov	r8, r0
 8016de6:	e7bf      	b.n	8016d68 <__ieee754_sqrt+0xd4>
 8016de8:	7ff00000 	.word	0x7ff00000

08016dec <__ieee754_expf>:
 8016dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016df0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8016df4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016df8:	4604      	mov	r4, r0
 8016dfa:	d904      	bls.n	8016e06 <__ieee754_expf+0x1a>
 8016dfc:	4601      	mov	r1, r0
 8016dfe:	f7e9 fe99 	bl	8000b34 <__addsf3>
 8016e02:	4604      	mov	r4, r0
 8016e04:	e005      	b.n	8016e12 <__ieee754_expf+0x26>
 8016e06:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 8016e0a:	d105      	bne.n	8016e18 <__ieee754_expf+0x2c>
 8016e0c:	2e00      	cmp	r6, #0
 8016e0e:	f040 80b9 	bne.w	8016f84 <__ieee754_expf+0x198>
 8016e12:	4620      	mov	r0, r4
 8016e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e18:	495b      	ldr	r1, [pc, #364]	; (8016f88 <__ieee754_expf+0x19c>)
 8016e1a:	4288      	cmp	r0, r1
 8016e1c:	dd04      	ble.n	8016e28 <__ieee754_expf+0x3c>
 8016e1e:	495b      	ldr	r1, [pc, #364]	; (8016f8c <__ieee754_expf+0x1a0>)
 8016e20:	4608      	mov	r0, r1
 8016e22:	f7e9 ff8f 	bl	8000d44 <__aeabi_fmul>
 8016e26:	e7ec      	b.n	8016e02 <__ieee754_expf+0x16>
 8016e28:	2800      	cmp	r0, #0
 8016e2a:	da03      	bge.n	8016e34 <__ieee754_expf+0x48>
 8016e2c:	4a58      	ldr	r2, [pc, #352]	; (8016f90 <__ieee754_expf+0x1a4>)
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	f200 80a8 	bhi.w	8016f84 <__ieee754_expf+0x198>
 8016e34:	4a57      	ldr	r2, [pc, #348]	; (8016f94 <__ieee754_expf+0x1a8>)
 8016e36:	4293      	cmp	r3, r2
 8016e38:	d96f      	bls.n	8016f1a <__ieee754_expf+0x12e>
 8016e3a:	4a57      	ldr	r2, [pc, #348]	; (8016f98 <__ieee754_expf+0x1ac>)
 8016e3c:	4293      	cmp	r3, r2
 8016e3e:	d84f      	bhi.n	8016ee0 <__ieee754_expf+0xf4>
 8016e40:	4b56      	ldr	r3, [pc, #344]	; (8016f9c <__ieee754_expf+0x1b0>)
 8016e42:	4620      	mov	r0, r4
 8016e44:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8016e48:	f7e9 fe72 	bl	8000b30 <__aeabi_fsub>
 8016e4c:	4607      	mov	r7, r0
 8016e4e:	4b54      	ldr	r3, [pc, #336]	; (8016fa0 <__ieee754_expf+0x1b4>)
 8016e50:	f1c6 0501 	rsb	r5, r6, #1
 8016e54:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8016e58:	1bad      	subs	r5, r5, r6
 8016e5a:	4641      	mov	r1, r8
 8016e5c:	4638      	mov	r0, r7
 8016e5e:	f7e9 fe67 	bl	8000b30 <__aeabi_fsub>
 8016e62:	4604      	mov	r4, r0
 8016e64:	4621      	mov	r1, r4
 8016e66:	4620      	mov	r0, r4
 8016e68:	f7e9 ff6c 	bl	8000d44 <__aeabi_fmul>
 8016e6c:	4606      	mov	r6, r0
 8016e6e:	494d      	ldr	r1, [pc, #308]	; (8016fa4 <__ieee754_expf+0x1b8>)
 8016e70:	f7e9 ff68 	bl	8000d44 <__aeabi_fmul>
 8016e74:	494c      	ldr	r1, [pc, #304]	; (8016fa8 <__ieee754_expf+0x1bc>)
 8016e76:	f7e9 fe5b 	bl	8000b30 <__aeabi_fsub>
 8016e7a:	4631      	mov	r1, r6
 8016e7c:	f7e9 ff62 	bl	8000d44 <__aeabi_fmul>
 8016e80:	494a      	ldr	r1, [pc, #296]	; (8016fac <__ieee754_expf+0x1c0>)
 8016e82:	f7e9 fe57 	bl	8000b34 <__addsf3>
 8016e86:	4631      	mov	r1, r6
 8016e88:	f7e9 ff5c 	bl	8000d44 <__aeabi_fmul>
 8016e8c:	4948      	ldr	r1, [pc, #288]	; (8016fb0 <__ieee754_expf+0x1c4>)
 8016e8e:	f7e9 fe4f 	bl	8000b30 <__aeabi_fsub>
 8016e92:	4631      	mov	r1, r6
 8016e94:	f7e9 ff56 	bl	8000d44 <__aeabi_fmul>
 8016e98:	4946      	ldr	r1, [pc, #280]	; (8016fb4 <__ieee754_expf+0x1c8>)
 8016e9a:	f7e9 fe4b 	bl	8000b34 <__addsf3>
 8016e9e:	4631      	mov	r1, r6
 8016ea0:	f7e9 ff50 	bl	8000d44 <__aeabi_fmul>
 8016ea4:	4601      	mov	r1, r0
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	f7e9 fe42 	bl	8000b30 <__aeabi_fsub>
 8016eac:	4601      	mov	r1, r0
 8016eae:	4606      	mov	r6, r0
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	f7e9 ff47 	bl	8000d44 <__aeabi_fmul>
 8016eb6:	4681      	mov	r9, r0
 8016eb8:	2d00      	cmp	r5, #0
 8016eba:	d142      	bne.n	8016f42 <__ieee754_expf+0x156>
 8016ebc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8016ec0:	4630      	mov	r0, r6
 8016ec2:	f7e9 fe35 	bl	8000b30 <__aeabi_fsub>
 8016ec6:	4601      	mov	r1, r0
 8016ec8:	4648      	mov	r0, r9
 8016eca:	f7e9 ffef 	bl	8000eac <__aeabi_fdiv>
 8016ece:	4621      	mov	r1, r4
 8016ed0:	f7e9 fe2e 	bl	8000b30 <__aeabi_fsub>
 8016ed4:	4601      	mov	r1, r0
 8016ed6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8016eda:	f7e9 fe29 	bl	8000b30 <__aeabi_fsub>
 8016ede:	e790      	b.n	8016e02 <__ieee754_expf+0x16>
 8016ee0:	4935      	ldr	r1, [pc, #212]	; (8016fb8 <__ieee754_expf+0x1cc>)
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	f7e9 ff2e 	bl	8000d44 <__aeabi_fmul>
 8016ee8:	4b34      	ldr	r3, [pc, #208]	; (8016fbc <__ieee754_expf+0x1d0>)
 8016eea:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8016eee:	f7e9 fe21 	bl	8000b34 <__addsf3>
 8016ef2:	f7ea f8ed 	bl	80010d0 <__aeabi_f2iz>
 8016ef6:	4605      	mov	r5, r0
 8016ef8:	f7e9 fed0 	bl	8000c9c <__aeabi_i2f>
 8016efc:	4930      	ldr	r1, [pc, #192]	; (8016fc0 <__ieee754_expf+0x1d4>)
 8016efe:	4606      	mov	r6, r0
 8016f00:	f7e9 ff20 	bl	8000d44 <__aeabi_fmul>
 8016f04:	4601      	mov	r1, r0
 8016f06:	4620      	mov	r0, r4
 8016f08:	f7e9 fe12 	bl	8000b30 <__aeabi_fsub>
 8016f0c:	492d      	ldr	r1, [pc, #180]	; (8016fc4 <__ieee754_expf+0x1d8>)
 8016f0e:	4607      	mov	r7, r0
 8016f10:	4630      	mov	r0, r6
 8016f12:	f7e9 ff17 	bl	8000d44 <__aeabi_fmul>
 8016f16:	4680      	mov	r8, r0
 8016f18:	e79f      	b.n	8016e5a <__ieee754_expf+0x6e>
 8016f1a:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8016f1e:	d20c      	bcs.n	8016f3a <__ieee754_expf+0x14e>
 8016f20:	491a      	ldr	r1, [pc, #104]	; (8016f8c <__ieee754_expf+0x1a0>)
 8016f22:	4620      	mov	r0, r4
 8016f24:	f7e9 fe06 	bl	8000b34 <__addsf3>
 8016f28:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8016f2c:	f7ea f8c6 	bl	80010bc <__aeabi_fcmpgt>
 8016f30:	b128      	cbz	r0, 8016f3e <__ieee754_expf+0x152>
 8016f32:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8016f36:	4620      	mov	r0, r4
 8016f38:	e761      	b.n	8016dfe <__ieee754_expf+0x12>
 8016f3a:	2500      	movs	r5, #0
 8016f3c:	e792      	b.n	8016e64 <__ieee754_expf+0x78>
 8016f3e:	4605      	mov	r5, r0
 8016f40:	e790      	b.n	8016e64 <__ieee754_expf+0x78>
 8016f42:	4631      	mov	r1, r6
 8016f44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8016f48:	f7e9 fdf2 	bl	8000b30 <__aeabi_fsub>
 8016f4c:	4601      	mov	r1, r0
 8016f4e:	4648      	mov	r0, r9
 8016f50:	f7e9 ffac 	bl	8000eac <__aeabi_fdiv>
 8016f54:	4601      	mov	r1, r0
 8016f56:	4640      	mov	r0, r8
 8016f58:	f7e9 fdea 	bl	8000b30 <__aeabi_fsub>
 8016f5c:	4639      	mov	r1, r7
 8016f5e:	f7e9 fde7 	bl	8000b30 <__aeabi_fsub>
 8016f62:	4601      	mov	r1, r0
 8016f64:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8016f68:	f7e9 fde2 	bl	8000b30 <__aeabi_fsub>
 8016f6c:	f115 0f7d 	cmn.w	r5, #125	; 0x7d
 8016f70:	db02      	blt.n	8016f78 <__ieee754_expf+0x18c>
 8016f72:	eb00 54c5 	add.w	r4, r0, r5, lsl #23
 8016f76:	e74c      	b.n	8016e12 <__ieee754_expf+0x26>
 8016f78:	3564      	adds	r5, #100	; 0x64
 8016f7a:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
 8016f7e:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
 8016f82:	e74e      	b.n	8016e22 <__ieee754_expf+0x36>
 8016f84:	2400      	movs	r4, #0
 8016f86:	e744      	b.n	8016e12 <__ieee754_expf+0x26>
 8016f88:	42b17217 	.word	0x42b17217
 8016f8c:	7149f2ca 	.word	0x7149f2ca
 8016f90:	42cff1b5 	.word	0x42cff1b5
 8016f94:	3eb17218 	.word	0x3eb17218
 8016f98:	3f851591 	.word	0x3f851591
 8016f9c:	08019010 	.word	0x08019010
 8016fa0:	08019018 	.word	0x08019018
 8016fa4:	3331bb4c 	.word	0x3331bb4c
 8016fa8:	35ddea0e 	.word	0x35ddea0e
 8016fac:	388ab355 	.word	0x388ab355
 8016fb0:	3b360b61 	.word	0x3b360b61
 8016fb4:	3e2aaaab 	.word	0x3e2aaaab
 8016fb8:	3fb8aa3b 	.word	0x3fb8aa3b
 8016fbc:	08019008 	.word	0x08019008
 8016fc0:	3f317180 	.word	0x3f317180
 8016fc4:	3717f7d1 	.word	0x3717f7d1

08016fc8 <__ieee754_rem_pio2f>:
 8016fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fcc:	4a9d      	ldr	r2, [pc, #628]	; (8017244 <__ieee754_rem_pio2f+0x27c>)
 8016fce:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8016fd2:	4295      	cmp	r5, r2
 8016fd4:	b087      	sub	sp, #28
 8016fd6:	460c      	mov	r4, r1
 8016fd8:	4607      	mov	r7, r0
 8016fda:	dc04      	bgt.n	8016fe6 <__ieee754_rem_pio2f+0x1e>
 8016fdc:	2300      	movs	r3, #0
 8016fde:	6020      	str	r0, [r4, #0]
 8016fe0:	604b      	str	r3, [r1, #4]
 8016fe2:	2600      	movs	r6, #0
 8016fe4:	e01a      	b.n	801701c <__ieee754_rem_pio2f+0x54>
 8016fe6:	4a98      	ldr	r2, [pc, #608]	; (8017248 <__ieee754_rem_pio2f+0x280>)
 8016fe8:	4295      	cmp	r5, r2
 8016fea:	dc4b      	bgt.n	8017084 <__ieee754_rem_pio2f+0xbc>
 8016fec:	2800      	cmp	r0, #0
 8016fee:	f025 050f 	bic.w	r5, r5, #15
 8016ff2:	4996      	ldr	r1, [pc, #600]	; (801724c <__ieee754_rem_pio2f+0x284>)
 8016ff4:	4e96      	ldr	r6, [pc, #600]	; (8017250 <__ieee754_rem_pio2f+0x288>)
 8016ff6:	dd23      	ble.n	8017040 <__ieee754_rem_pio2f+0x78>
 8016ff8:	f7e9 fd9a 	bl	8000b30 <__aeabi_fsub>
 8016ffc:	42b5      	cmp	r5, r6
 8016ffe:	4607      	mov	r7, r0
 8017000:	d010      	beq.n	8017024 <__ieee754_rem_pio2f+0x5c>
 8017002:	4994      	ldr	r1, [pc, #592]	; (8017254 <__ieee754_rem_pio2f+0x28c>)
 8017004:	f7e9 fd94 	bl	8000b30 <__aeabi_fsub>
 8017008:	4601      	mov	r1, r0
 801700a:	6020      	str	r0, [r4, #0]
 801700c:	4638      	mov	r0, r7
 801700e:	f7e9 fd8f 	bl	8000b30 <__aeabi_fsub>
 8017012:	4990      	ldr	r1, [pc, #576]	; (8017254 <__ieee754_rem_pio2f+0x28c>)
 8017014:	f7e9 fd8c 	bl	8000b30 <__aeabi_fsub>
 8017018:	2601      	movs	r6, #1
 801701a:	6060      	str	r0, [r4, #4]
 801701c:	4630      	mov	r0, r6
 801701e:	b007      	add	sp, #28
 8017020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017024:	498c      	ldr	r1, [pc, #560]	; (8017258 <__ieee754_rem_pio2f+0x290>)
 8017026:	f7e9 fd83 	bl	8000b30 <__aeabi_fsub>
 801702a:	498c      	ldr	r1, [pc, #560]	; (801725c <__ieee754_rem_pio2f+0x294>)
 801702c:	4605      	mov	r5, r0
 801702e:	f7e9 fd7f 	bl	8000b30 <__aeabi_fsub>
 8017032:	4601      	mov	r1, r0
 8017034:	6020      	str	r0, [r4, #0]
 8017036:	4628      	mov	r0, r5
 8017038:	f7e9 fd7a 	bl	8000b30 <__aeabi_fsub>
 801703c:	4987      	ldr	r1, [pc, #540]	; (801725c <__ieee754_rem_pio2f+0x294>)
 801703e:	e7e9      	b.n	8017014 <__ieee754_rem_pio2f+0x4c>
 8017040:	f7e9 fd78 	bl	8000b34 <__addsf3>
 8017044:	42b5      	cmp	r5, r6
 8017046:	4607      	mov	r7, r0
 8017048:	d00e      	beq.n	8017068 <__ieee754_rem_pio2f+0xa0>
 801704a:	4982      	ldr	r1, [pc, #520]	; (8017254 <__ieee754_rem_pio2f+0x28c>)
 801704c:	f7e9 fd72 	bl	8000b34 <__addsf3>
 8017050:	4601      	mov	r1, r0
 8017052:	6020      	str	r0, [r4, #0]
 8017054:	4638      	mov	r0, r7
 8017056:	f7e9 fd6b 	bl	8000b30 <__aeabi_fsub>
 801705a:	497e      	ldr	r1, [pc, #504]	; (8017254 <__ieee754_rem_pio2f+0x28c>)
 801705c:	f7e9 fd6a 	bl	8000b34 <__addsf3>
 8017060:	f04f 36ff 	mov.w	r6, #4294967295
 8017064:	6060      	str	r0, [r4, #4]
 8017066:	e7d9      	b.n	801701c <__ieee754_rem_pio2f+0x54>
 8017068:	497b      	ldr	r1, [pc, #492]	; (8017258 <__ieee754_rem_pio2f+0x290>)
 801706a:	f7e9 fd63 	bl	8000b34 <__addsf3>
 801706e:	497b      	ldr	r1, [pc, #492]	; (801725c <__ieee754_rem_pio2f+0x294>)
 8017070:	4605      	mov	r5, r0
 8017072:	f7e9 fd5f 	bl	8000b34 <__addsf3>
 8017076:	4601      	mov	r1, r0
 8017078:	6020      	str	r0, [r4, #0]
 801707a:	4628      	mov	r0, r5
 801707c:	f7e9 fd58 	bl	8000b30 <__aeabi_fsub>
 8017080:	4976      	ldr	r1, [pc, #472]	; (801725c <__ieee754_rem_pio2f+0x294>)
 8017082:	e7eb      	b.n	801705c <__ieee754_rem_pio2f+0x94>
 8017084:	4a76      	ldr	r2, [pc, #472]	; (8017260 <__ieee754_rem_pio2f+0x298>)
 8017086:	4295      	cmp	r5, r2
 8017088:	f300 808c 	bgt.w	80171a4 <__ieee754_rem_pio2f+0x1dc>
 801708c:	f000 fd92 	bl	8017bb4 <fabsf>
 8017090:	4974      	ldr	r1, [pc, #464]	; (8017264 <__ieee754_rem_pio2f+0x29c>)
 8017092:	4680      	mov	r8, r0
 8017094:	f7e9 fe56 	bl	8000d44 <__aeabi_fmul>
 8017098:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801709c:	f7e9 fd4a 	bl	8000b34 <__addsf3>
 80170a0:	f7ea f816 	bl	80010d0 <__aeabi_f2iz>
 80170a4:	4606      	mov	r6, r0
 80170a6:	f7e9 fdf9 	bl	8000c9c <__aeabi_i2f>
 80170aa:	4968      	ldr	r1, [pc, #416]	; (801724c <__ieee754_rem_pio2f+0x284>)
 80170ac:	4682      	mov	sl, r0
 80170ae:	f7e9 fe49 	bl	8000d44 <__aeabi_fmul>
 80170b2:	4601      	mov	r1, r0
 80170b4:	4640      	mov	r0, r8
 80170b6:	f7e9 fd3b 	bl	8000b30 <__aeabi_fsub>
 80170ba:	4966      	ldr	r1, [pc, #408]	; (8017254 <__ieee754_rem_pio2f+0x28c>)
 80170bc:	4680      	mov	r8, r0
 80170be:	4650      	mov	r0, sl
 80170c0:	f7e9 fe40 	bl	8000d44 <__aeabi_fmul>
 80170c4:	2e1f      	cmp	r6, #31
 80170c6:	4681      	mov	r9, r0
 80170c8:	dc0c      	bgt.n	80170e4 <__ieee754_rem_pio2f+0x11c>
 80170ca:	4a67      	ldr	r2, [pc, #412]	; (8017268 <__ieee754_rem_pio2f+0x2a0>)
 80170cc:	1e71      	subs	r1, r6, #1
 80170ce:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80170d2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80170d6:	4293      	cmp	r3, r2
 80170d8:	d004      	beq.n	80170e4 <__ieee754_rem_pio2f+0x11c>
 80170da:	4649      	mov	r1, r9
 80170dc:	4640      	mov	r0, r8
 80170de:	f7e9 fd27 	bl	8000b30 <__aeabi_fsub>
 80170e2:	e009      	b.n	80170f8 <__ieee754_rem_pio2f+0x130>
 80170e4:	4649      	mov	r1, r9
 80170e6:	4640      	mov	r0, r8
 80170e8:	f7e9 fd22 	bl	8000b30 <__aeabi_fsub>
 80170ec:	15ed      	asrs	r5, r5, #23
 80170ee:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80170f2:	1aeb      	subs	r3, r5, r3
 80170f4:	2b08      	cmp	r3, #8
 80170f6:	dc01      	bgt.n	80170fc <__ieee754_rem_pio2f+0x134>
 80170f8:	6020      	str	r0, [r4, #0]
 80170fa:	e024      	b.n	8017146 <__ieee754_rem_pio2f+0x17e>
 80170fc:	4956      	ldr	r1, [pc, #344]	; (8017258 <__ieee754_rem_pio2f+0x290>)
 80170fe:	4650      	mov	r0, sl
 8017100:	f7e9 fe20 	bl	8000d44 <__aeabi_fmul>
 8017104:	4681      	mov	r9, r0
 8017106:	4601      	mov	r1, r0
 8017108:	4640      	mov	r0, r8
 801710a:	f7e9 fd11 	bl	8000b30 <__aeabi_fsub>
 801710e:	4601      	mov	r1, r0
 8017110:	4683      	mov	fp, r0
 8017112:	4640      	mov	r0, r8
 8017114:	f7e9 fd0c 	bl	8000b30 <__aeabi_fsub>
 8017118:	4649      	mov	r1, r9
 801711a:	f7e9 fd09 	bl	8000b30 <__aeabi_fsub>
 801711e:	4680      	mov	r8, r0
 8017120:	494e      	ldr	r1, [pc, #312]	; (801725c <__ieee754_rem_pio2f+0x294>)
 8017122:	4650      	mov	r0, sl
 8017124:	f7e9 fe0e 	bl	8000d44 <__aeabi_fmul>
 8017128:	4641      	mov	r1, r8
 801712a:	f7e9 fd01 	bl	8000b30 <__aeabi_fsub>
 801712e:	4601      	mov	r1, r0
 8017130:	4681      	mov	r9, r0
 8017132:	4658      	mov	r0, fp
 8017134:	f7e9 fcfc 	bl	8000b30 <__aeabi_fsub>
 8017138:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801713c:	1aed      	subs	r5, r5, r3
 801713e:	2d19      	cmp	r5, #25
 8017140:	dc15      	bgt.n	801716e <__ieee754_rem_pio2f+0x1a6>
 8017142:	46d8      	mov	r8, fp
 8017144:	6020      	str	r0, [r4, #0]
 8017146:	6825      	ldr	r5, [r4, #0]
 8017148:	4640      	mov	r0, r8
 801714a:	4629      	mov	r1, r5
 801714c:	f7e9 fcf0 	bl	8000b30 <__aeabi_fsub>
 8017150:	4649      	mov	r1, r9
 8017152:	f7e9 fced 	bl	8000b30 <__aeabi_fsub>
 8017156:	2f00      	cmp	r7, #0
 8017158:	6060      	str	r0, [r4, #4]
 801715a:	f6bf af5f 	bge.w	801701c <__ieee754_rem_pio2f+0x54>
 801715e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8017162:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8017166:	6025      	str	r5, [r4, #0]
 8017168:	6060      	str	r0, [r4, #4]
 801716a:	4276      	negs	r6, r6
 801716c:	e756      	b.n	801701c <__ieee754_rem_pio2f+0x54>
 801716e:	493f      	ldr	r1, [pc, #252]	; (801726c <__ieee754_rem_pio2f+0x2a4>)
 8017170:	4650      	mov	r0, sl
 8017172:	f7e9 fde7 	bl	8000d44 <__aeabi_fmul>
 8017176:	4605      	mov	r5, r0
 8017178:	4601      	mov	r1, r0
 801717a:	4658      	mov	r0, fp
 801717c:	f7e9 fcd8 	bl	8000b30 <__aeabi_fsub>
 8017180:	4601      	mov	r1, r0
 8017182:	4680      	mov	r8, r0
 8017184:	4658      	mov	r0, fp
 8017186:	f7e9 fcd3 	bl	8000b30 <__aeabi_fsub>
 801718a:	4629      	mov	r1, r5
 801718c:	f7e9 fcd0 	bl	8000b30 <__aeabi_fsub>
 8017190:	4605      	mov	r5, r0
 8017192:	4937      	ldr	r1, [pc, #220]	; (8017270 <__ieee754_rem_pio2f+0x2a8>)
 8017194:	4650      	mov	r0, sl
 8017196:	f7e9 fdd5 	bl	8000d44 <__aeabi_fmul>
 801719a:	4629      	mov	r1, r5
 801719c:	f7e9 fcc8 	bl	8000b30 <__aeabi_fsub>
 80171a0:	4681      	mov	r9, r0
 80171a2:	e79a      	b.n	80170da <__ieee754_rem_pio2f+0x112>
 80171a4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80171a8:	db05      	blt.n	80171b6 <__ieee754_rem_pio2f+0x1ee>
 80171aa:	4601      	mov	r1, r0
 80171ac:	f7e9 fcc0 	bl	8000b30 <__aeabi_fsub>
 80171b0:	6060      	str	r0, [r4, #4]
 80171b2:	6020      	str	r0, [r4, #0]
 80171b4:	e715      	b.n	8016fe2 <__ieee754_rem_pio2f+0x1a>
 80171b6:	15ee      	asrs	r6, r5, #23
 80171b8:	3e86      	subs	r6, #134	; 0x86
 80171ba:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 80171be:	4628      	mov	r0, r5
 80171c0:	f7e9 ff86 	bl	80010d0 <__aeabi_f2iz>
 80171c4:	f7e9 fd6a 	bl	8000c9c <__aeabi_i2f>
 80171c8:	4601      	mov	r1, r0
 80171ca:	9003      	str	r0, [sp, #12]
 80171cc:	4628      	mov	r0, r5
 80171ce:	f7e9 fcaf 	bl	8000b30 <__aeabi_fsub>
 80171d2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80171d6:	f7e9 fdb5 	bl	8000d44 <__aeabi_fmul>
 80171da:	4680      	mov	r8, r0
 80171dc:	f7e9 ff78 	bl	80010d0 <__aeabi_f2iz>
 80171e0:	f7e9 fd5c 	bl	8000c9c <__aeabi_i2f>
 80171e4:	4601      	mov	r1, r0
 80171e6:	9004      	str	r0, [sp, #16]
 80171e8:	4605      	mov	r5, r0
 80171ea:	4640      	mov	r0, r8
 80171ec:	f7e9 fca0 	bl	8000b30 <__aeabi_fsub>
 80171f0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80171f4:	f7e9 fda6 	bl	8000d44 <__aeabi_fmul>
 80171f8:	2100      	movs	r1, #0
 80171fa:	9005      	str	r0, [sp, #20]
 80171fc:	f7e9 ff36 	bl	800106c <__aeabi_fcmpeq>
 8017200:	b1e8      	cbz	r0, 801723e <__ieee754_rem_pio2f+0x276>
 8017202:	2100      	movs	r1, #0
 8017204:	4628      	mov	r0, r5
 8017206:	f7e9 ff31 	bl	800106c <__aeabi_fcmpeq>
 801720a:	2800      	cmp	r0, #0
 801720c:	bf14      	ite	ne
 801720e:	2301      	movne	r3, #1
 8017210:	2302      	moveq	r3, #2
 8017212:	4a18      	ldr	r2, [pc, #96]	; (8017274 <__ieee754_rem_pio2f+0x2ac>)
 8017214:	4621      	mov	r1, r4
 8017216:	9201      	str	r2, [sp, #4]
 8017218:	2202      	movs	r2, #2
 801721a:	a803      	add	r0, sp, #12
 801721c:	9200      	str	r2, [sp, #0]
 801721e:	4632      	mov	r2, r6
 8017220:	f000 f8aa 	bl	8017378 <__kernel_rem_pio2f>
 8017224:	2f00      	cmp	r7, #0
 8017226:	4606      	mov	r6, r0
 8017228:	f6bf aef8 	bge.w	801701c <__ieee754_rem_pio2f+0x54>
 801722c:	6823      	ldr	r3, [r4, #0]
 801722e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017232:	6023      	str	r3, [r4, #0]
 8017234:	6863      	ldr	r3, [r4, #4]
 8017236:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801723a:	6063      	str	r3, [r4, #4]
 801723c:	e795      	b.n	801716a <__ieee754_rem_pio2f+0x1a2>
 801723e:	2303      	movs	r3, #3
 8017240:	e7e7      	b.n	8017212 <__ieee754_rem_pio2f+0x24a>
 8017242:	bf00      	nop
 8017244:	3f490fd8 	.word	0x3f490fd8
 8017248:	4016cbe3 	.word	0x4016cbe3
 801724c:	3fc90f80 	.word	0x3fc90f80
 8017250:	3fc90fd0 	.word	0x3fc90fd0
 8017254:	37354443 	.word	0x37354443
 8017258:	37354400 	.word	0x37354400
 801725c:	2e85a308 	.word	0x2e85a308
 8017260:	43490f80 	.word	0x43490f80
 8017264:	3f22f984 	.word	0x3f22f984
 8017268:	08019020 	.word	0x08019020
 801726c:	2e85a300 	.word	0x2e85a300
 8017270:	248d3132 	.word	0x248d3132
 8017274:	080190a0 	.word	0x080190a0

08017278 <__kernel_cosf>:
 8017278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801727c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8017280:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8017284:	4606      	mov	r6, r0
 8017286:	4688      	mov	r8, r1
 8017288:	da03      	bge.n	8017292 <__kernel_cosf+0x1a>
 801728a:	f7e9 ff21 	bl	80010d0 <__aeabi_f2iz>
 801728e:	2800      	cmp	r0, #0
 8017290:	d05c      	beq.n	801734c <__kernel_cosf+0xd4>
 8017292:	4631      	mov	r1, r6
 8017294:	4630      	mov	r0, r6
 8017296:	f7e9 fd55 	bl	8000d44 <__aeabi_fmul>
 801729a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801729e:	4605      	mov	r5, r0
 80172a0:	f7e9 fd50 	bl	8000d44 <__aeabi_fmul>
 80172a4:	492b      	ldr	r1, [pc, #172]	; (8017354 <__kernel_cosf+0xdc>)
 80172a6:	4607      	mov	r7, r0
 80172a8:	4628      	mov	r0, r5
 80172aa:	f7e9 fd4b 	bl	8000d44 <__aeabi_fmul>
 80172ae:	492a      	ldr	r1, [pc, #168]	; (8017358 <__kernel_cosf+0xe0>)
 80172b0:	f7e9 fc40 	bl	8000b34 <__addsf3>
 80172b4:	4629      	mov	r1, r5
 80172b6:	f7e9 fd45 	bl	8000d44 <__aeabi_fmul>
 80172ba:	4928      	ldr	r1, [pc, #160]	; (801735c <__kernel_cosf+0xe4>)
 80172bc:	f7e9 fc38 	bl	8000b30 <__aeabi_fsub>
 80172c0:	4629      	mov	r1, r5
 80172c2:	f7e9 fd3f 	bl	8000d44 <__aeabi_fmul>
 80172c6:	4926      	ldr	r1, [pc, #152]	; (8017360 <__kernel_cosf+0xe8>)
 80172c8:	f7e9 fc34 	bl	8000b34 <__addsf3>
 80172cc:	4629      	mov	r1, r5
 80172ce:	f7e9 fd39 	bl	8000d44 <__aeabi_fmul>
 80172d2:	4924      	ldr	r1, [pc, #144]	; (8017364 <__kernel_cosf+0xec>)
 80172d4:	f7e9 fc2c 	bl	8000b30 <__aeabi_fsub>
 80172d8:	4629      	mov	r1, r5
 80172da:	f7e9 fd33 	bl	8000d44 <__aeabi_fmul>
 80172de:	4922      	ldr	r1, [pc, #136]	; (8017368 <__kernel_cosf+0xf0>)
 80172e0:	f7e9 fc28 	bl	8000b34 <__addsf3>
 80172e4:	4629      	mov	r1, r5
 80172e6:	f7e9 fd2d 	bl	8000d44 <__aeabi_fmul>
 80172ea:	4629      	mov	r1, r5
 80172ec:	f7e9 fd2a 	bl	8000d44 <__aeabi_fmul>
 80172f0:	4641      	mov	r1, r8
 80172f2:	4605      	mov	r5, r0
 80172f4:	4630      	mov	r0, r6
 80172f6:	f7e9 fd25 	bl	8000d44 <__aeabi_fmul>
 80172fa:	4601      	mov	r1, r0
 80172fc:	4628      	mov	r0, r5
 80172fe:	f7e9 fc17 	bl	8000b30 <__aeabi_fsub>
 8017302:	4b1a      	ldr	r3, [pc, #104]	; (801736c <__kernel_cosf+0xf4>)
 8017304:	4605      	mov	r5, r0
 8017306:	429c      	cmp	r4, r3
 8017308:	dc0a      	bgt.n	8017320 <__kernel_cosf+0xa8>
 801730a:	4601      	mov	r1, r0
 801730c:	4638      	mov	r0, r7
 801730e:	f7e9 fc0f 	bl	8000b30 <__aeabi_fsub>
 8017312:	4601      	mov	r1, r0
 8017314:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017318:	f7e9 fc0a 	bl	8000b30 <__aeabi_fsub>
 801731c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017320:	4b13      	ldr	r3, [pc, #76]	; (8017370 <__kernel_cosf+0xf8>)
 8017322:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017326:	429c      	cmp	r4, r3
 8017328:	bfcc      	ite	gt
 801732a:	4c12      	ldrgt	r4, [pc, #72]	; (8017374 <__kernel_cosf+0xfc>)
 801732c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8017330:	4621      	mov	r1, r4
 8017332:	f7e9 fbfd 	bl	8000b30 <__aeabi_fsub>
 8017336:	4621      	mov	r1, r4
 8017338:	4606      	mov	r6, r0
 801733a:	4638      	mov	r0, r7
 801733c:	f7e9 fbf8 	bl	8000b30 <__aeabi_fsub>
 8017340:	4629      	mov	r1, r5
 8017342:	f7e9 fbf5 	bl	8000b30 <__aeabi_fsub>
 8017346:	4601      	mov	r1, r0
 8017348:	4630      	mov	r0, r6
 801734a:	e7e5      	b.n	8017318 <__kernel_cosf+0xa0>
 801734c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017350:	e7e4      	b.n	801731c <__kernel_cosf+0xa4>
 8017352:	bf00      	nop
 8017354:	ad47d74e 	.word	0xad47d74e
 8017358:	310f74f6 	.word	0x310f74f6
 801735c:	3493f27c 	.word	0x3493f27c
 8017360:	37d00d01 	.word	0x37d00d01
 8017364:	3ab60b61 	.word	0x3ab60b61
 8017368:	3d2aaaab 	.word	0x3d2aaaab
 801736c:	3e999999 	.word	0x3e999999
 8017370:	3f480000 	.word	0x3f480000
 8017374:	3e900000 	.word	0x3e900000

08017378 <__kernel_rem_pio2f>:
 8017378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801737c:	b0d9      	sub	sp, #356	; 0x164
 801737e:	9304      	str	r3, [sp, #16]
 8017380:	9101      	str	r1, [sp, #4]
 8017382:	4bc3      	ldr	r3, [pc, #780]	; (8017690 <__kernel_rem_pio2f+0x318>)
 8017384:	9962      	ldr	r1, [sp, #392]	; 0x188
 8017386:	1ed4      	subs	r4, r2, #3
 8017388:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801738c:	2500      	movs	r5, #0
 801738e:	9302      	str	r3, [sp, #8]
 8017390:	9b04      	ldr	r3, [sp, #16]
 8017392:	f04f 0a00 	mov.w	sl, #0
 8017396:	3b01      	subs	r3, #1
 8017398:	9303      	str	r3, [sp, #12]
 801739a:	2308      	movs	r3, #8
 801739c:	fb94 f4f3 	sdiv	r4, r4, r3
 80173a0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80173a4:	1c66      	adds	r6, r4, #1
 80173a6:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 80173aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80173ae:	eb03 0802 	add.w	r8, r3, r2
 80173b2:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80173b4:	1aa7      	subs	r7, r4, r2
 80173b6:	9005      	str	r0, [sp, #20]
 80173b8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80173bc:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 80173c0:	4545      	cmp	r5, r8
 80173c2:	dd7f      	ble.n	80174c4 <__kernel_rem_pio2f+0x14c>
 80173c4:	f04f 0800 	mov.w	r8, #0
 80173c8:	f04f 0a00 	mov.w	sl, #0
 80173cc:	f06f 0b03 	mvn.w	fp, #3
 80173d0:	9b04      	ldr	r3, [sp, #16]
 80173d2:	aa1c      	add	r2, sp, #112	; 0x70
 80173d4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80173d8:	ab44      	add	r3, sp, #272	; 0x110
 80173da:	9a02      	ldr	r2, [sp, #8]
 80173dc:	4590      	cmp	r8, r2
 80173de:	f340 8097 	ble.w	8017510 <__kernel_rem_pio2f+0x198>
 80173e2:	4613      	mov	r3, r2
 80173e4:	aa08      	add	r2, sp, #32
 80173e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80173ea:	9307      	str	r3, [sp, #28]
 80173ec:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80173ee:	9f02      	ldr	r7, [sp, #8]
 80173f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80173f4:	9306      	str	r3, [sp, #24]
 80173f6:	46ba      	mov	sl, r7
 80173f8:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 80173fc:	ab58      	add	r3, sp, #352	; 0x160
 80173fe:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8017402:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8017406:	ad07      	add	r5, sp, #28
 8017408:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801740c:	f1ba 0f00 	cmp.w	sl, #0
 8017410:	f300 8081 	bgt.w	8017516 <__kernel_rem_pio2f+0x19e>
 8017414:	4631      	mov	r1, r6
 8017416:	4620      	mov	r0, r4
 8017418:	f000 fc18 	bl	8017c4c <scalbnf>
 801741c:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8017420:	4604      	mov	r4, r0
 8017422:	f7e9 fc8f 	bl	8000d44 <__aeabi_fmul>
 8017426:	f000 fbd1 	bl	8017bcc <floorf>
 801742a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 801742e:	f7e9 fc89 	bl	8000d44 <__aeabi_fmul>
 8017432:	4601      	mov	r1, r0
 8017434:	4620      	mov	r0, r4
 8017436:	f7e9 fb7b 	bl	8000b30 <__aeabi_fsub>
 801743a:	4604      	mov	r4, r0
 801743c:	f7e9 fe48 	bl	80010d0 <__aeabi_f2iz>
 8017440:	4681      	mov	r9, r0
 8017442:	f7e9 fc2b 	bl	8000c9c <__aeabi_i2f>
 8017446:	4601      	mov	r1, r0
 8017448:	4620      	mov	r0, r4
 801744a:	f7e9 fb71 	bl	8000b30 <__aeabi_fsub>
 801744e:	2e00      	cmp	r6, #0
 8017450:	4604      	mov	r4, r0
 8017452:	dd7e      	ble.n	8017552 <__kernel_rem_pio2f+0x1da>
 8017454:	1e7b      	subs	r3, r7, #1
 8017456:	aa08      	add	r2, sp, #32
 8017458:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 801745c:	f1c6 0208 	rsb	r2, r6, #8
 8017460:	fa45 f002 	asr.w	r0, r5, r2
 8017464:	4481      	add	r9, r0
 8017466:	4090      	lsls	r0, r2
 8017468:	1a2d      	subs	r5, r5, r0
 801746a:	aa08      	add	r2, sp, #32
 801746c:	f1c6 0007 	rsb	r0, r6, #7
 8017470:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8017474:	4105      	asrs	r5, r0
 8017476:	2d00      	cmp	r5, #0
 8017478:	dd79      	ble.n	801756e <__kernel_rem_pio2f+0x1f6>
 801747a:	2200      	movs	r2, #0
 801747c:	4690      	mov	r8, r2
 801747e:	f109 0901 	add.w	r9, r9, #1
 8017482:	4297      	cmp	r7, r2
 8017484:	f300 80ae 	bgt.w	80175e4 <__kernel_rem_pio2f+0x26c>
 8017488:	2e00      	cmp	r6, #0
 801748a:	dd05      	ble.n	8017498 <__kernel_rem_pio2f+0x120>
 801748c:	2e01      	cmp	r6, #1
 801748e:	f000 80c0 	beq.w	8017612 <__kernel_rem_pio2f+0x29a>
 8017492:	2e02      	cmp	r6, #2
 8017494:	f000 80c7 	beq.w	8017626 <__kernel_rem_pio2f+0x2ae>
 8017498:	2d02      	cmp	r5, #2
 801749a:	d168      	bne.n	801756e <__kernel_rem_pio2f+0x1f6>
 801749c:	4621      	mov	r1, r4
 801749e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80174a2:	f7e9 fb45 	bl	8000b30 <__aeabi_fsub>
 80174a6:	4604      	mov	r4, r0
 80174a8:	f1b8 0f00 	cmp.w	r8, #0
 80174ac:	d05f      	beq.n	801756e <__kernel_rem_pio2f+0x1f6>
 80174ae:	4631      	mov	r1, r6
 80174b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80174b4:	f000 fbca 	bl	8017c4c <scalbnf>
 80174b8:	4601      	mov	r1, r0
 80174ba:	4620      	mov	r0, r4
 80174bc:	f7e9 fb38 	bl	8000b30 <__aeabi_fsub>
 80174c0:	4604      	mov	r4, r0
 80174c2:	e054      	b.n	801756e <__kernel_rem_pio2f+0x1f6>
 80174c4:	42ef      	cmn	r7, r5
 80174c6:	d407      	bmi.n	80174d8 <__kernel_rem_pio2f+0x160>
 80174c8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80174cc:	f7e9 fbe6 	bl	8000c9c <__aeabi_i2f>
 80174d0:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 80174d4:	3501      	adds	r5, #1
 80174d6:	e773      	b.n	80173c0 <__kernel_rem_pio2f+0x48>
 80174d8:	4650      	mov	r0, sl
 80174da:	e7f9      	b.n	80174d0 <__kernel_rem_pio2f+0x158>
 80174dc:	fb0b 5207 	mla	r2, fp, r7, r5
 80174e0:	9306      	str	r3, [sp, #24]
 80174e2:	9b05      	ldr	r3, [sp, #20]
 80174e4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80174e8:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80174ec:	f7e9 fc2a 	bl	8000d44 <__aeabi_fmul>
 80174f0:	4601      	mov	r1, r0
 80174f2:	4648      	mov	r0, r9
 80174f4:	f7e9 fb1e 	bl	8000b34 <__addsf3>
 80174f8:	4681      	mov	r9, r0
 80174fa:	9b06      	ldr	r3, [sp, #24]
 80174fc:	3701      	adds	r7, #1
 80174fe:	9a03      	ldr	r2, [sp, #12]
 8017500:	4297      	cmp	r7, r2
 8017502:	ddeb      	ble.n	80174dc <__kernel_rem_pio2f+0x164>
 8017504:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 8017508:	3504      	adds	r5, #4
 801750a:	f108 0801 	add.w	r8, r8, #1
 801750e:	e764      	b.n	80173da <__kernel_rem_pio2f+0x62>
 8017510:	46d1      	mov	r9, sl
 8017512:	2700      	movs	r7, #0
 8017514:	e7f3      	b.n	80174fe <__kernel_rem_pio2f+0x186>
 8017516:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 801751a:	4620      	mov	r0, r4
 801751c:	f7e9 fc12 	bl	8000d44 <__aeabi_fmul>
 8017520:	f7e9 fdd6 	bl	80010d0 <__aeabi_f2iz>
 8017524:	f7e9 fbba 	bl	8000c9c <__aeabi_i2f>
 8017528:	4641      	mov	r1, r8
 801752a:	4683      	mov	fp, r0
 801752c:	f7e9 fc0a 	bl	8000d44 <__aeabi_fmul>
 8017530:	4601      	mov	r1, r0
 8017532:	4620      	mov	r0, r4
 8017534:	f7e9 fafc 	bl	8000b30 <__aeabi_fsub>
 8017538:	f7e9 fdca 	bl	80010d0 <__aeabi_f2iz>
 801753c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017540:	f845 0f04 	str.w	r0, [r5, #4]!
 8017544:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8017548:	4658      	mov	r0, fp
 801754a:	f7e9 faf3 	bl	8000b34 <__addsf3>
 801754e:	4604      	mov	r4, r0
 8017550:	e75c      	b.n	801740c <__kernel_rem_pio2f+0x94>
 8017552:	d105      	bne.n	8017560 <__kernel_rem_pio2f+0x1e8>
 8017554:	1e7b      	subs	r3, r7, #1
 8017556:	aa08      	add	r2, sp, #32
 8017558:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 801755c:	122d      	asrs	r5, r5, #8
 801755e:	e78a      	b.n	8017476 <__kernel_rem_pio2f+0xfe>
 8017560:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017564:	f7e9 fda0 	bl	80010a8 <__aeabi_fcmpge>
 8017568:	2800      	cmp	r0, #0
 801756a:	d139      	bne.n	80175e0 <__kernel_rem_pio2f+0x268>
 801756c:	4605      	mov	r5, r0
 801756e:	2100      	movs	r1, #0
 8017570:	4620      	mov	r0, r4
 8017572:	f7e9 fd7b 	bl	800106c <__aeabi_fcmpeq>
 8017576:	2800      	cmp	r0, #0
 8017578:	f000 80a0 	beq.w	80176bc <__kernel_rem_pio2f+0x344>
 801757c:	1e7c      	subs	r4, r7, #1
 801757e:	4623      	mov	r3, r4
 8017580:	2200      	movs	r2, #0
 8017582:	9902      	ldr	r1, [sp, #8]
 8017584:	428b      	cmp	r3, r1
 8017586:	da55      	bge.n	8017634 <__kernel_rem_pio2f+0x2bc>
 8017588:	2a00      	cmp	r2, #0
 801758a:	d07e      	beq.n	801768a <__kernel_rem_pio2f+0x312>
 801758c:	ab08      	add	r3, sp, #32
 801758e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017592:	3e08      	subs	r6, #8
 8017594:	2b00      	cmp	r3, #0
 8017596:	f000 808f 	beq.w	80176b8 <__kernel_rem_pio2f+0x340>
 801759a:	4631      	mov	r1, r6
 801759c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80175a0:	f000 fb54 	bl	8017c4c <scalbnf>
 80175a4:	46a0      	mov	r8, r4
 80175a6:	4682      	mov	sl, r0
 80175a8:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 80175ac:	af44      	add	r7, sp, #272	; 0x110
 80175ae:	f1b8 0f00 	cmp.w	r8, #0
 80175b2:	f280 80b5 	bge.w	8017720 <__kernel_rem_pio2f+0x3a8>
 80175b6:	f04f 0a00 	mov.w	sl, #0
 80175ba:	2300      	movs	r3, #0
 80175bc:	00a6      	lsls	r6, r4, #2
 80175be:	4a35      	ldr	r2, [pc, #212]	; (8017694 <__kernel_rem_pio2f+0x31c>)
 80175c0:	4437      	add	r7, r6
 80175c2:	eba4 010a 	sub.w	r1, r4, sl
 80175c6:	2900      	cmp	r1, #0
 80175c8:	f280 80db 	bge.w	8017782 <__kernel_rem_pio2f+0x40a>
 80175cc:	9b62      	ldr	r3, [sp, #392]	; 0x188
 80175ce:	2b03      	cmp	r3, #3
 80175d0:	f200 80ff 	bhi.w	80177d2 <__kernel_rem_pio2f+0x45a>
 80175d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80175d8:	01200102 	.word	0x01200102
 80175dc:	00d90120 	.word	0x00d90120
 80175e0:	2502      	movs	r5, #2
 80175e2:	e74a      	b.n	801747a <__kernel_rem_pio2f+0x102>
 80175e4:	ab08      	add	r3, sp, #32
 80175e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175ea:	f1b8 0f00 	cmp.w	r8, #0
 80175ee:	d109      	bne.n	8017604 <__kernel_rem_pio2f+0x28c>
 80175f0:	b12b      	cbz	r3, 80175fe <__kernel_rem_pio2f+0x286>
 80175f2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80175f6:	a908      	add	r1, sp, #32
 80175f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80175fc:	2301      	movs	r3, #1
 80175fe:	3201      	adds	r2, #1
 8017600:	4698      	mov	r8, r3
 8017602:	e73e      	b.n	8017482 <__kernel_rem_pio2f+0x10a>
 8017604:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8017608:	a908      	add	r1, sp, #32
 801760a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801760e:	4643      	mov	r3, r8
 8017610:	e7f5      	b.n	80175fe <__kernel_rem_pio2f+0x286>
 8017612:	1e7a      	subs	r2, r7, #1
 8017614:	ab08      	add	r3, sp, #32
 8017616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801761a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801761e:	a908      	add	r1, sp, #32
 8017620:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017624:	e738      	b.n	8017498 <__kernel_rem_pio2f+0x120>
 8017626:	1e7a      	subs	r2, r7, #1
 8017628:	ab08      	add	r3, sp, #32
 801762a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801762e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017632:	e7f4      	b.n	801761e <__kernel_rem_pio2f+0x2a6>
 8017634:	a908      	add	r1, sp, #32
 8017636:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801763a:	3b01      	subs	r3, #1
 801763c:	430a      	orrs	r2, r1
 801763e:	e7a0      	b.n	8017582 <__kernel_rem_pio2f+0x20a>
 8017640:	3301      	adds	r3, #1
 8017642:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8017646:	2900      	cmp	r1, #0
 8017648:	d0fa      	beq.n	8017640 <__kernel_rem_pio2f+0x2c8>
 801764a:	f06f 0803 	mvn.w	r8, #3
 801764e:	9a04      	ldr	r2, [sp, #16]
 8017650:	1c7d      	adds	r5, r7, #1
 8017652:	18bc      	adds	r4, r7, r2
 8017654:	aa1c      	add	r2, sp, #112	; 0x70
 8017656:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801765a:	441f      	add	r7, r3
 801765c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8017660:	42af      	cmp	r7, r5
 8017662:	f6ff aec8 	blt.w	80173f6 <__kernel_rem_pio2f+0x7e>
 8017666:	9b06      	ldr	r3, [sp, #24]
 8017668:	f04f 0a00 	mov.w	sl, #0
 801766c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017670:	f7e9 fb14 	bl	8000c9c <__aeabi_i2f>
 8017674:	f04f 0b00 	mov.w	fp, #0
 8017678:	6020      	str	r0, [r4, #0]
 801767a:	9b03      	ldr	r3, [sp, #12]
 801767c:	459a      	cmp	sl, r3
 801767e:	dd0b      	ble.n	8017698 <__kernel_rem_pio2f+0x320>
 8017680:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8017684:	3404      	adds	r4, #4
 8017686:	3501      	adds	r5, #1
 8017688:	e7ea      	b.n	8017660 <__kernel_rem_pio2f+0x2e8>
 801768a:	9a07      	ldr	r2, [sp, #28]
 801768c:	2301      	movs	r3, #1
 801768e:	e7d8      	b.n	8017642 <__kernel_rem_pio2f+0x2ca>
 8017690:	080193e4 	.word	0x080193e4
 8017694:	080193b8 	.word	0x080193b8
 8017698:	fb08 f30a 	mul.w	r3, r8, sl
 801769c:	9a05      	ldr	r2, [sp, #20]
 801769e:	58e0      	ldr	r0, [r4, r3]
 80176a0:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 80176a4:	f7e9 fb4e 	bl	8000d44 <__aeabi_fmul>
 80176a8:	4601      	mov	r1, r0
 80176aa:	4658      	mov	r0, fp
 80176ac:	f7e9 fa42 	bl	8000b34 <__addsf3>
 80176b0:	f10a 0a01 	add.w	sl, sl, #1
 80176b4:	4683      	mov	fp, r0
 80176b6:	e7e0      	b.n	801767a <__kernel_rem_pio2f+0x302>
 80176b8:	3c01      	subs	r4, #1
 80176ba:	e767      	b.n	801758c <__kernel_rem_pio2f+0x214>
 80176bc:	4271      	negs	r1, r6
 80176be:	4620      	mov	r0, r4
 80176c0:	f000 fac4 	bl	8017c4c <scalbnf>
 80176c4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80176c8:	4604      	mov	r4, r0
 80176ca:	f7e9 fced 	bl	80010a8 <__aeabi_fcmpge>
 80176ce:	b1f8      	cbz	r0, 8017710 <__kernel_rem_pio2f+0x398>
 80176d0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80176d4:	4620      	mov	r0, r4
 80176d6:	f7e9 fb35 	bl	8000d44 <__aeabi_fmul>
 80176da:	f7e9 fcf9 	bl	80010d0 <__aeabi_f2iz>
 80176de:	f7e9 fadd 	bl	8000c9c <__aeabi_i2f>
 80176e2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80176e6:	4680      	mov	r8, r0
 80176e8:	f7e9 fb2c 	bl	8000d44 <__aeabi_fmul>
 80176ec:	4601      	mov	r1, r0
 80176ee:	4620      	mov	r0, r4
 80176f0:	f7e9 fa1e 	bl	8000b30 <__aeabi_fsub>
 80176f4:	f7e9 fcec 	bl	80010d0 <__aeabi_f2iz>
 80176f8:	ab08      	add	r3, sp, #32
 80176fa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80176fe:	4640      	mov	r0, r8
 8017700:	f7e9 fce6 	bl	80010d0 <__aeabi_f2iz>
 8017704:	1c7c      	adds	r4, r7, #1
 8017706:	ab08      	add	r3, sp, #32
 8017708:	3608      	adds	r6, #8
 801770a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801770e:	e744      	b.n	801759a <__kernel_rem_pio2f+0x222>
 8017710:	4620      	mov	r0, r4
 8017712:	f7e9 fcdd 	bl	80010d0 <__aeabi_f2iz>
 8017716:	ab08      	add	r3, sp, #32
 8017718:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 801771c:	463c      	mov	r4, r7
 801771e:	e73c      	b.n	801759a <__kernel_rem_pio2f+0x222>
 8017720:	ab08      	add	r3, sp, #32
 8017722:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017726:	f7e9 fab9 	bl	8000c9c <__aeabi_i2f>
 801772a:	4651      	mov	r1, sl
 801772c:	f7e9 fb0a 	bl	8000d44 <__aeabi_fmul>
 8017730:	4631      	mov	r1, r6
 8017732:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8017736:	4650      	mov	r0, sl
 8017738:	f7e9 fb04 	bl	8000d44 <__aeabi_fmul>
 801773c:	f108 38ff 	add.w	r8, r8, #4294967295
 8017740:	4682      	mov	sl, r0
 8017742:	e734      	b.n	80175ae <__kernel_rem_pio2f+0x236>
 8017744:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8017748:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 801774c:	9304      	str	r3, [sp, #16]
 801774e:	9203      	str	r2, [sp, #12]
 8017750:	f7e9 faf8 	bl	8000d44 <__aeabi_fmul>
 8017754:	4601      	mov	r1, r0
 8017756:	4658      	mov	r0, fp
 8017758:	f7e9 f9ec 	bl	8000b34 <__addsf3>
 801775c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8017760:	4683      	mov	fp, r0
 8017762:	f108 0801 	add.w	r8, r8, #1
 8017766:	9902      	ldr	r1, [sp, #8]
 8017768:	4588      	cmp	r8, r1
 801776a:	dc01      	bgt.n	8017770 <__kernel_rem_pio2f+0x3f8>
 801776c:	45c2      	cmp	sl, r8
 801776e:	dae9      	bge.n	8017744 <__kernel_rem_pio2f+0x3cc>
 8017770:	a958      	add	r1, sp, #352	; 0x160
 8017772:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017776:	f841 bca0 	str.w	fp, [r1, #-160]
 801777a:	f10a 0a01 	add.w	sl, sl, #1
 801777e:	3f04      	subs	r7, #4
 8017780:	e71f      	b.n	80175c2 <__kernel_rem_pio2f+0x24a>
 8017782:	469b      	mov	fp, r3
 8017784:	f04f 0800 	mov.w	r8, #0
 8017788:	e7ed      	b.n	8017766 <__kernel_rem_pio2f+0x3ee>
 801778a:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 801778e:	4456      	add	r6, sl
 8017790:	4637      	mov	r7, r6
 8017792:	46a0      	mov	r8, r4
 8017794:	f1b8 0f00 	cmp.w	r8, #0
 8017798:	dc4a      	bgt.n	8017830 <__kernel_rem_pio2f+0x4b8>
 801779a:	4627      	mov	r7, r4
 801779c:	2f01      	cmp	r7, #1
 801779e:	dc60      	bgt.n	8017862 <__kernel_rem_pio2f+0x4ea>
 80177a0:	2000      	movs	r0, #0
 80177a2:	2c01      	cmp	r4, #1
 80177a4:	dc74      	bgt.n	8017890 <__kernel_rem_pio2f+0x518>
 80177a6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80177a8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80177aa:	2d00      	cmp	r5, #0
 80177ac:	d176      	bne.n	801789c <__kernel_rem_pio2f+0x524>
 80177ae:	9901      	ldr	r1, [sp, #4]
 80177b0:	600a      	str	r2, [r1, #0]
 80177b2:	460a      	mov	r2, r1
 80177b4:	604b      	str	r3, [r1, #4]
 80177b6:	6090      	str	r0, [r2, #8]
 80177b8:	e00b      	b.n	80177d2 <__kernel_rem_pio2f+0x45a>
 80177ba:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80177be:	f7e9 f9b9 	bl	8000b34 <__addsf3>
 80177c2:	3c01      	subs	r4, #1
 80177c4:	2c00      	cmp	r4, #0
 80177c6:	daf8      	bge.n	80177ba <__kernel_rem_pio2f+0x442>
 80177c8:	b10d      	cbz	r5, 80177ce <__kernel_rem_pio2f+0x456>
 80177ca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80177ce:	9b01      	ldr	r3, [sp, #4]
 80177d0:	6018      	str	r0, [r3, #0]
 80177d2:	f009 0007 	and.w	r0, r9, #7
 80177d6:	b059      	add	sp, #356	; 0x164
 80177d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177dc:	2000      	movs	r0, #0
 80177de:	ae30      	add	r6, sp, #192	; 0xc0
 80177e0:	e7f0      	b.n	80177c4 <__kernel_rem_pio2f+0x44c>
 80177e2:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80177e6:	f7e9 f9a5 	bl	8000b34 <__addsf3>
 80177ea:	3e01      	subs	r6, #1
 80177ec:	2e00      	cmp	r6, #0
 80177ee:	daf8      	bge.n	80177e2 <__kernel_rem_pio2f+0x46a>
 80177f0:	b1b5      	cbz	r5, 8017820 <__kernel_rem_pio2f+0x4a8>
 80177f2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80177f6:	9a01      	ldr	r2, [sp, #4]
 80177f8:	af58      	add	r7, sp, #352	; 0x160
 80177fa:	4601      	mov	r1, r0
 80177fc:	6013      	str	r3, [r2, #0]
 80177fe:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8017802:	f7e9 f995 	bl	8000b30 <__aeabi_fsub>
 8017806:	2601      	movs	r6, #1
 8017808:	42b4      	cmp	r4, r6
 801780a:	da0b      	bge.n	8017824 <__kernel_rem_pio2f+0x4ac>
 801780c:	b10d      	cbz	r5, 8017812 <__kernel_rem_pio2f+0x49a>
 801780e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8017812:	9b01      	ldr	r3, [sp, #4]
 8017814:	6058      	str	r0, [r3, #4]
 8017816:	e7dc      	b.n	80177d2 <__kernel_rem_pio2f+0x45a>
 8017818:	4626      	mov	r6, r4
 801781a:	2000      	movs	r0, #0
 801781c:	af30      	add	r7, sp, #192	; 0xc0
 801781e:	e7e5      	b.n	80177ec <__kernel_rem_pio2f+0x474>
 8017820:	4603      	mov	r3, r0
 8017822:	e7e8      	b.n	80177f6 <__kernel_rem_pio2f+0x47e>
 8017824:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8017828:	f7e9 f984 	bl	8000b34 <__addsf3>
 801782c:	3601      	adds	r6, #1
 801782e:	e7eb      	b.n	8017808 <__kernel_rem_pio2f+0x490>
 8017830:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8017834:	f108 38ff 	add.w	r8, r8, #4294967295
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	4610      	mov	r0, r2
 801783c:	4619      	mov	r1, r3
 801783e:	9303      	str	r3, [sp, #12]
 8017840:	9202      	str	r2, [sp, #8]
 8017842:	f7e9 f977 	bl	8000b34 <__addsf3>
 8017846:	9a02      	ldr	r2, [sp, #8]
 8017848:	4601      	mov	r1, r0
 801784a:	4683      	mov	fp, r0
 801784c:	4610      	mov	r0, r2
 801784e:	f7e9 f96f 	bl	8000b30 <__aeabi_fsub>
 8017852:	9b03      	ldr	r3, [sp, #12]
 8017854:	4619      	mov	r1, r3
 8017856:	f7e9 f96d 	bl	8000b34 <__addsf3>
 801785a:	f8c7 b000 	str.w	fp, [r7]
 801785e:	6078      	str	r0, [r7, #4]
 8017860:	e798      	b.n	8017794 <__kernel_rem_pio2f+0x41c>
 8017862:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8017866:	3f01      	subs	r7, #1
 8017868:	f8d6 b004 	ldr.w	fp, [r6, #4]
 801786c:	4618      	mov	r0, r3
 801786e:	4659      	mov	r1, fp
 8017870:	9302      	str	r3, [sp, #8]
 8017872:	f7e9 f95f 	bl	8000b34 <__addsf3>
 8017876:	9b02      	ldr	r3, [sp, #8]
 8017878:	4601      	mov	r1, r0
 801787a:	4680      	mov	r8, r0
 801787c:	4618      	mov	r0, r3
 801787e:	f7e9 f957 	bl	8000b30 <__aeabi_fsub>
 8017882:	4659      	mov	r1, fp
 8017884:	f7e9 f956 	bl	8000b34 <__addsf3>
 8017888:	f8c6 8000 	str.w	r8, [r6]
 801788c:	6070      	str	r0, [r6, #4]
 801788e:	e785      	b.n	801779c <__kernel_rem_pio2f+0x424>
 8017890:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8017894:	f7e9 f94e 	bl	8000b34 <__addsf3>
 8017898:	3c01      	subs	r4, #1
 801789a:	e782      	b.n	80177a2 <__kernel_rem_pio2f+0x42a>
 801789c:	9901      	ldr	r1, [sp, #4]
 801789e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80178a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80178a6:	600a      	str	r2, [r1, #0]
 80178a8:	604b      	str	r3, [r1, #4]
 80178aa:	460a      	mov	r2, r1
 80178ac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80178b0:	e781      	b.n	80177b6 <__kernel_rem_pio2f+0x43e>
 80178b2:	bf00      	nop

080178b4 <__kernel_sinf>:
 80178b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178b8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80178bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80178c0:	4604      	mov	r4, r0
 80178c2:	460f      	mov	r7, r1
 80178c4:	4691      	mov	r9, r2
 80178c6:	da03      	bge.n	80178d0 <__kernel_sinf+0x1c>
 80178c8:	f7e9 fc02 	bl	80010d0 <__aeabi_f2iz>
 80178cc:	2800      	cmp	r0, #0
 80178ce:	d035      	beq.n	801793c <__kernel_sinf+0x88>
 80178d0:	4621      	mov	r1, r4
 80178d2:	4620      	mov	r0, r4
 80178d4:	f7e9 fa36 	bl	8000d44 <__aeabi_fmul>
 80178d8:	4605      	mov	r5, r0
 80178da:	4601      	mov	r1, r0
 80178dc:	4620      	mov	r0, r4
 80178de:	f7e9 fa31 	bl	8000d44 <__aeabi_fmul>
 80178e2:	4929      	ldr	r1, [pc, #164]	; (8017988 <__kernel_sinf+0xd4>)
 80178e4:	4606      	mov	r6, r0
 80178e6:	4628      	mov	r0, r5
 80178e8:	f7e9 fa2c 	bl	8000d44 <__aeabi_fmul>
 80178ec:	4927      	ldr	r1, [pc, #156]	; (801798c <__kernel_sinf+0xd8>)
 80178ee:	f7e9 f91f 	bl	8000b30 <__aeabi_fsub>
 80178f2:	4629      	mov	r1, r5
 80178f4:	f7e9 fa26 	bl	8000d44 <__aeabi_fmul>
 80178f8:	4925      	ldr	r1, [pc, #148]	; (8017990 <__kernel_sinf+0xdc>)
 80178fa:	f7e9 f91b 	bl	8000b34 <__addsf3>
 80178fe:	4629      	mov	r1, r5
 8017900:	f7e9 fa20 	bl	8000d44 <__aeabi_fmul>
 8017904:	4923      	ldr	r1, [pc, #140]	; (8017994 <__kernel_sinf+0xe0>)
 8017906:	f7e9 f913 	bl	8000b30 <__aeabi_fsub>
 801790a:	4629      	mov	r1, r5
 801790c:	f7e9 fa1a 	bl	8000d44 <__aeabi_fmul>
 8017910:	4921      	ldr	r1, [pc, #132]	; (8017998 <__kernel_sinf+0xe4>)
 8017912:	f7e9 f90f 	bl	8000b34 <__addsf3>
 8017916:	4680      	mov	r8, r0
 8017918:	f1b9 0f00 	cmp.w	r9, #0
 801791c:	d111      	bne.n	8017942 <__kernel_sinf+0x8e>
 801791e:	4601      	mov	r1, r0
 8017920:	4628      	mov	r0, r5
 8017922:	f7e9 fa0f 	bl	8000d44 <__aeabi_fmul>
 8017926:	491d      	ldr	r1, [pc, #116]	; (801799c <__kernel_sinf+0xe8>)
 8017928:	f7e9 f902 	bl	8000b30 <__aeabi_fsub>
 801792c:	4631      	mov	r1, r6
 801792e:	f7e9 fa09 	bl	8000d44 <__aeabi_fmul>
 8017932:	4601      	mov	r1, r0
 8017934:	4620      	mov	r0, r4
 8017936:	f7e9 f8fd 	bl	8000b34 <__addsf3>
 801793a:	4604      	mov	r4, r0
 801793c:	4620      	mov	r0, r4
 801793e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017942:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017946:	4638      	mov	r0, r7
 8017948:	f7e9 f9fc 	bl	8000d44 <__aeabi_fmul>
 801794c:	4641      	mov	r1, r8
 801794e:	4681      	mov	r9, r0
 8017950:	4630      	mov	r0, r6
 8017952:	f7e9 f9f7 	bl	8000d44 <__aeabi_fmul>
 8017956:	4601      	mov	r1, r0
 8017958:	4648      	mov	r0, r9
 801795a:	f7e9 f8e9 	bl	8000b30 <__aeabi_fsub>
 801795e:	4629      	mov	r1, r5
 8017960:	f7e9 f9f0 	bl	8000d44 <__aeabi_fmul>
 8017964:	4639      	mov	r1, r7
 8017966:	f7e9 f8e3 	bl	8000b30 <__aeabi_fsub>
 801796a:	490c      	ldr	r1, [pc, #48]	; (801799c <__kernel_sinf+0xe8>)
 801796c:	4605      	mov	r5, r0
 801796e:	4630      	mov	r0, r6
 8017970:	f7e9 f9e8 	bl	8000d44 <__aeabi_fmul>
 8017974:	4601      	mov	r1, r0
 8017976:	4628      	mov	r0, r5
 8017978:	f7e9 f8dc 	bl	8000b34 <__addsf3>
 801797c:	4601      	mov	r1, r0
 801797e:	4620      	mov	r0, r4
 8017980:	f7e9 f8d6 	bl	8000b30 <__aeabi_fsub>
 8017984:	e7d9      	b.n	801793a <__kernel_sinf+0x86>
 8017986:	bf00      	nop
 8017988:	2f2ec9d3 	.word	0x2f2ec9d3
 801798c:	32d72f34 	.word	0x32d72f34
 8017990:	3638ef1b 	.word	0x3638ef1b
 8017994:	39500d01 	.word	0x39500d01
 8017998:	3c088889 	.word	0x3c088889
 801799c:	3e2aaaab 	.word	0x3e2aaaab

080179a0 <fabs>:
 80179a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80179a4:	4619      	mov	r1, r3
 80179a6:	4770      	bx	lr

080179a8 <finite>:
 80179a8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80179ac:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80179b0:	0fc0      	lsrs	r0, r0, #31
 80179b2:	4770      	bx	lr

080179b4 <matherr>:
 80179b4:	2000      	movs	r0, #0
 80179b6:	4770      	bx	lr

080179b8 <nan>:
 80179b8:	2000      	movs	r0, #0
 80179ba:	4901      	ldr	r1, [pc, #4]	; (80179c0 <nan+0x8>)
 80179bc:	4770      	bx	lr
 80179be:	bf00      	nop
 80179c0:	7ff80000 	.word	0x7ff80000

080179c4 <rint>:
 80179c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80179ca:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 80179ce:	f1bc 0f13 	cmp.w	ip, #19
 80179d2:	4604      	mov	r4, r0
 80179d4:	460d      	mov	r5, r1
 80179d6:	460b      	mov	r3, r1
 80179d8:	4606      	mov	r6, r0
 80179da:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 80179de:	dc5a      	bgt.n	8017a96 <rint+0xd2>
 80179e0:	f1bc 0f00 	cmp.w	ip, #0
 80179e4:	da2b      	bge.n	8017a3e <rint+0x7a>
 80179e6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80179ea:	4302      	orrs	r2, r0
 80179ec:	d023      	beq.n	8017a36 <rint+0x72>
 80179ee:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80179f2:	4302      	orrs	r2, r0
 80179f4:	4256      	negs	r6, r2
 80179f6:	4316      	orrs	r6, r2
 80179f8:	0c4b      	lsrs	r3, r1, #17
 80179fa:	0b36      	lsrs	r6, r6, #12
 80179fc:	4934      	ldr	r1, [pc, #208]	; (8017ad0 <rint+0x10c>)
 80179fe:	045b      	lsls	r3, r3, #17
 8017a00:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8017a04:	ea46 0503 	orr.w	r5, r6, r3
 8017a08:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8017a0c:	4602      	mov	r2, r0
 8017a0e:	462b      	mov	r3, r5
 8017a10:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017a14:	4620      	mov	r0, r4
 8017a16:	4629      	mov	r1, r5
 8017a18:	f7e8 fba8 	bl	800016c <__adddf3>
 8017a1c:	e9cd 0100 	strd	r0, r1, [sp]
 8017a20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a24:	462b      	mov	r3, r5
 8017a26:	4622      	mov	r2, r4
 8017a28:	f7e8 fb9e 	bl	8000168 <__aeabi_dsub>
 8017a2c:	4604      	mov	r4, r0
 8017a2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017a32:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8017a36:	4620      	mov	r0, r4
 8017a38:	4629      	mov	r1, r5
 8017a3a:	b003      	add	sp, #12
 8017a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a3e:	4a25      	ldr	r2, [pc, #148]	; (8017ad4 <rint+0x110>)
 8017a40:	fa42 f20c 	asr.w	r2, r2, ip
 8017a44:	4011      	ands	r1, r2
 8017a46:	4301      	orrs	r1, r0
 8017a48:	d0f5      	beq.n	8017a36 <rint+0x72>
 8017a4a:	0852      	lsrs	r2, r2, #1
 8017a4c:	ea05 0102 	and.w	r1, r5, r2
 8017a50:	ea50 0601 	orrs.w	r6, r0, r1
 8017a54:	d00c      	beq.n	8017a70 <rint+0xac>
 8017a56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017a5a:	f1bc 0f13 	cmp.w	ip, #19
 8017a5e:	bf0c      	ite	eq
 8017a60:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8017a64:	2600      	movne	r6, #0
 8017a66:	ea25 0202 	bic.w	r2, r5, r2
 8017a6a:	fa43 f30c 	asr.w	r3, r3, ip
 8017a6e:	4313      	orrs	r3, r2
 8017a70:	4917      	ldr	r1, [pc, #92]	; (8017ad0 <rint+0x10c>)
 8017a72:	4632      	mov	r2, r6
 8017a74:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8017a78:	e9d7 4500 	ldrd	r4, r5, [r7]
 8017a7c:	4620      	mov	r0, r4
 8017a7e:	4629      	mov	r1, r5
 8017a80:	f7e8 fb74 	bl	800016c <__adddf3>
 8017a84:	e9cd 0100 	strd	r0, r1, [sp]
 8017a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a8c:	4622      	mov	r2, r4
 8017a8e:	462b      	mov	r3, r5
 8017a90:	f7e8 fb6a 	bl	8000168 <__aeabi_dsub>
 8017a94:	e008      	b.n	8017aa8 <rint+0xe4>
 8017a96:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8017a9a:	dd08      	ble.n	8017aae <rint+0xea>
 8017a9c:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8017aa0:	d1c9      	bne.n	8017a36 <rint+0x72>
 8017aa2:	4602      	mov	r2, r0
 8017aa4:	f7e8 fb62 	bl	800016c <__adddf3>
 8017aa8:	4604      	mov	r4, r0
 8017aaa:	460d      	mov	r5, r1
 8017aac:	e7c3      	b.n	8017a36 <rint+0x72>
 8017aae:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8017ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8017ab6:	40ca      	lsrs	r2, r1
 8017ab8:	4210      	tst	r0, r2
 8017aba:	d0bc      	beq.n	8017a36 <rint+0x72>
 8017abc:	0852      	lsrs	r2, r2, #1
 8017abe:	4210      	tst	r0, r2
 8017ac0:	bf1f      	itttt	ne
 8017ac2:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8017ac6:	ea20 0202 	bicne.w	r2, r0, r2
 8017aca:	410e      	asrne	r6, r1
 8017acc:	4316      	orrne	r6, r2
 8017ace:	e7cf      	b.n	8017a70 <rint+0xac>
 8017ad0:	080193f0 	.word	0x080193f0
 8017ad4:	000fffff 	.word	0x000fffff

08017ad8 <scalbn>:
 8017ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ada:	4616      	mov	r6, r2
 8017adc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017ae0:	4604      	mov	r4, r0
 8017ae2:	460d      	mov	r5, r1
 8017ae4:	460b      	mov	r3, r1
 8017ae6:	b982      	cbnz	r2, 8017b0a <scalbn+0x32>
 8017ae8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017aec:	4303      	orrs	r3, r0
 8017aee:	d034      	beq.n	8017b5a <scalbn+0x82>
 8017af0:	4b2d      	ldr	r3, [pc, #180]	; (8017ba8 <scalbn+0xd0>)
 8017af2:	2200      	movs	r2, #0
 8017af4:	f7e8 fcf0 	bl	80004d8 <__aeabi_dmul>
 8017af8:	4b2c      	ldr	r3, [pc, #176]	; (8017bac <scalbn+0xd4>)
 8017afa:	4604      	mov	r4, r0
 8017afc:	429e      	cmp	r6, r3
 8017afe:	460d      	mov	r5, r1
 8017b00:	da0d      	bge.n	8017b1e <scalbn+0x46>
 8017b02:	a325      	add	r3, pc, #148	; (adr r3, 8017b98 <scalbn+0xc0>)
 8017b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b08:	e01c      	b.n	8017b44 <scalbn+0x6c>
 8017b0a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8017b0e:	42ba      	cmp	r2, r7
 8017b10:	d109      	bne.n	8017b26 <scalbn+0x4e>
 8017b12:	4602      	mov	r2, r0
 8017b14:	f7e8 fb2a 	bl	800016c <__adddf3>
 8017b18:	4604      	mov	r4, r0
 8017b1a:	460d      	mov	r5, r1
 8017b1c:	e01d      	b.n	8017b5a <scalbn+0x82>
 8017b1e:	460b      	mov	r3, r1
 8017b20:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017b24:	3a36      	subs	r2, #54	; 0x36
 8017b26:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017b2a:	4432      	add	r2, r6
 8017b2c:	428a      	cmp	r2, r1
 8017b2e:	dd0c      	ble.n	8017b4a <scalbn+0x72>
 8017b30:	4622      	mov	r2, r4
 8017b32:	462b      	mov	r3, r5
 8017b34:	a11a      	add	r1, pc, #104	; (adr r1, 8017ba0 <scalbn+0xc8>)
 8017b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b3a:	f000 f8d3 	bl	8017ce4 <copysign>
 8017b3e:	a318      	add	r3, pc, #96	; (adr r3, 8017ba0 <scalbn+0xc8>)
 8017b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b44:	f7e8 fcc8 	bl	80004d8 <__aeabi_dmul>
 8017b48:	e7e6      	b.n	8017b18 <scalbn+0x40>
 8017b4a:	2a00      	cmp	r2, #0
 8017b4c:	dd08      	ble.n	8017b60 <scalbn+0x88>
 8017b4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017b52:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017b56:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	4629      	mov	r1, r5
 8017b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b60:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017b64:	da0b      	bge.n	8017b7e <scalbn+0xa6>
 8017b66:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017b6a:	429e      	cmp	r6, r3
 8017b6c:	4622      	mov	r2, r4
 8017b6e:	462b      	mov	r3, r5
 8017b70:	dce0      	bgt.n	8017b34 <scalbn+0x5c>
 8017b72:	a109      	add	r1, pc, #36	; (adr r1, 8017b98 <scalbn+0xc0>)
 8017b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b78:	f000 f8b4 	bl	8017ce4 <copysign>
 8017b7c:	e7c1      	b.n	8017b02 <scalbn+0x2a>
 8017b7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017b82:	3236      	adds	r2, #54	; 0x36
 8017b84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017b88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017b8c:	4620      	mov	r0, r4
 8017b8e:	4629      	mov	r1, r5
 8017b90:	2200      	movs	r2, #0
 8017b92:	4b07      	ldr	r3, [pc, #28]	; (8017bb0 <scalbn+0xd8>)
 8017b94:	e7d6      	b.n	8017b44 <scalbn+0x6c>
 8017b96:	bf00      	nop
 8017b98:	c2f8f359 	.word	0xc2f8f359
 8017b9c:	01a56e1f 	.word	0x01a56e1f
 8017ba0:	8800759c 	.word	0x8800759c
 8017ba4:	7e37e43c 	.word	0x7e37e43c
 8017ba8:	43500000 	.word	0x43500000
 8017bac:	ffff3cb0 	.word	0xffff3cb0
 8017bb0:	3c900000 	.word	0x3c900000

08017bb4 <fabsf>:
 8017bb4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017bb8:	4770      	bx	lr

08017bba <finitef>:
 8017bba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017bbe:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8017bc2:	bfac      	ite	ge
 8017bc4:	2000      	movge	r0, #0
 8017bc6:	2001      	movlt	r0, #1
 8017bc8:	4770      	bx	lr
	...

08017bcc <floorf>:
 8017bcc:	b570      	push	{r4, r5, r6, lr}
 8017bce:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8017bd2:	0df5      	lsrs	r5, r6, #23
 8017bd4:	3d7f      	subs	r5, #127	; 0x7f
 8017bd6:	2d16      	cmp	r5, #22
 8017bd8:	4601      	mov	r1, r0
 8017bda:	4604      	mov	r4, r0
 8017bdc:	dc26      	bgt.n	8017c2c <floorf+0x60>
 8017bde:	2d00      	cmp	r5, #0
 8017be0:	da0e      	bge.n	8017c00 <floorf+0x34>
 8017be2:	4917      	ldr	r1, [pc, #92]	; (8017c40 <floorf+0x74>)
 8017be4:	f7e8 ffa6 	bl	8000b34 <__addsf3>
 8017be8:	2100      	movs	r1, #0
 8017bea:	f7e9 fa67 	bl	80010bc <__aeabi_fcmpgt>
 8017bee:	b128      	cbz	r0, 8017bfc <floorf+0x30>
 8017bf0:	2c00      	cmp	r4, #0
 8017bf2:	da23      	bge.n	8017c3c <floorf+0x70>
 8017bf4:	4b13      	ldr	r3, [pc, #76]	; (8017c44 <floorf+0x78>)
 8017bf6:	2e00      	cmp	r6, #0
 8017bf8:	bf18      	it	ne
 8017bfa:	461c      	movne	r4, r3
 8017bfc:	4621      	mov	r1, r4
 8017bfe:	e01b      	b.n	8017c38 <floorf+0x6c>
 8017c00:	4e11      	ldr	r6, [pc, #68]	; (8017c48 <floorf+0x7c>)
 8017c02:	412e      	asrs	r6, r5
 8017c04:	4230      	tst	r0, r6
 8017c06:	d017      	beq.n	8017c38 <floorf+0x6c>
 8017c08:	490d      	ldr	r1, [pc, #52]	; (8017c40 <floorf+0x74>)
 8017c0a:	f7e8 ff93 	bl	8000b34 <__addsf3>
 8017c0e:	2100      	movs	r1, #0
 8017c10:	f7e9 fa54 	bl	80010bc <__aeabi_fcmpgt>
 8017c14:	2800      	cmp	r0, #0
 8017c16:	d0f1      	beq.n	8017bfc <floorf+0x30>
 8017c18:	2c00      	cmp	r4, #0
 8017c1a:	bfbe      	ittt	lt
 8017c1c:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8017c20:	fa43 f505 	asrlt.w	r5, r3, r5
 8017c24:	1964      	addlt	r4, r4, r5
 8017c26:	ea24 0406 	bic.w	r4, r4, r6
 8017c2a:	e7e7      	b.n	8017bfc <floorf+0x30>
 8017c2c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8017c30:	d302      	bcc.n	8017c38 <floorf+0x6c>
 8017c32:	f7e8 ff7f 	bl	8000b34 <__addsf3>
 8017c36:	4601      	mov	r1, r0
 8017c38:	4608      	mov	r0, r1
 8017c3a:	bd70      	pop	{r4, r5, r6, pc}
 8017c3c:	2400      	movs	r4, #0
 8017c3e:	e7dd      	b.n	8017bfc <floorf+0x30>
 8017c40:	7149f2ca 	.word	0x7149f2ca
 8017c44:	bf800000 	.word	0xbf800000
 8017c48:	007fffff 	.word	0x007fffff

08017c4c <scalbnf>:
 8017c4c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8017c50:	b510      	push	{r4, lr}
 8017c52:	4602      	mov	r2, r0
 8017c54:	460c      	mov	r4, r1
 8017c56:	4601      	mov	r1, r0
 8017c58:	d027      	beq.n	8017caa <scalbnf+0x5e>
 8017c5a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017c5e:	d303      	bcc.n	8017c68 <scalbnf+0x1c>
 8017c60:	f7e8 ff68 	bl	8000b34 <__addsf3>
 8017c64:	4602      	mov	r2, r0
 8017c66:	e020      	b.n	8017caa <scalbnf+0x5e>
 8017c68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017c6c:	d215      	bcs.n	8017c9a <scalbnf+0x4e>
 8017c6e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8017c72:	f7e9 f867 	bl	8000d44 <__aeabi_fmul>
 8017c76:	4b18      	ldr	r3, [pc, #96]	; (8017cd8 <scalbnf+0x8c>)
 8017c78:	4602      	mov	r2, r0
 8017c7a:	429c      	cmp	r4, r3
 8017c7c:	db22      	blt.n	8017cc4 <scalbnf+0x78>
 8017c7e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017c82:	3b19      	subs	r3, #25
 8017c84:	4423      	add	r3, r4
 8017c86:	2bfe      	cmp	r3, #254	; 0xfe
 8017c88:	dd09      	ble.n	8017c9e <scalbnf+0x52>
 8017c8a:	4611      	mov	r1, r2
 8017c8c:	4813      	ldr	r0, [pc, #76]	; (8017cdc <scalbnf+0x90>)
 8017c8e:	f000 f832 	bl	8017cf6 <copysignf>
 8017c92:	4912      	ldr	r1, [pc, #72]	; (8017cdc <scalbnf+0x90>)
 8017c94:	f7e9 f856 	bl	8000d44 <__aeabi_fmul>
 8017c98:	e7e4      	b.n	8017c64 <scalbnf+0x18>
 8017c9a:	0ddb      	lsrs	r3, r3, #23
 8017c9c:	e7f2      	b.n	8017c84 <scalbnf+0x38>
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	dd05      	ble.n	8017cae <scalbnf+0x62>
 8017ca2:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8017ca6:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8017caa:	4610      	mov	r0, r2
 8017cac:	bd10      	pop	{r4, pc}
 8017cae:	f113 0f16 	cmn.w	r3, #22
 8017cb2:	da09      	bge.n	8017cc8 <scalbnf+0x7c>
 8017cb4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017cb8:	429c      	cmp	r4, r3
 8017cba:	4611      	mov	r1, r2
 8017cbc:	dce6      	bgt.n	8017c8c <scalbnf+0x40>
 8017cbe:	4808      	ldr	r0, [pc, #32]	; (8017ce0 <scalbnf+0x94>)
 8017cc0:	f000 f819 	bl	8017cf6 <copysignf>
 8017cc4:	4906      	ldr	r1, [pc, #24]	; (8017ce0 <scalbnf+0x94>)
 8017cc6:	e7e5      	b.n	8017c94 <scalbnf+0x48>
 8017cc8:	3319      	adds	r3, #25
 8017cca:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8017cce:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8017cd2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8017cd6:	e7dd      	b.n	8017c94 <scalbnf+0x48>
 8017cd8:	ffff3cb0 	.word	0xffff3cb0
 8017cdc:	7149f2ca 	.word	0x7149f2ca
 8017ce0:	0da24260 	.word	0x0da24260

08017ce4 <copysign>:
 8017ce4:	b530      	push	{r4, r5, lr}
 8017ce6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017cee:	ea42 0503 	orr.w	r5, r2, r3
 8017cf2:	4629      	mov	r1, r5
 8017cf4:	bd30      	pop	{r4, r5, pc}

08017cf6 <copysignf>:
 8017cf6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8017cfa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017cfe:	4308      	orrs	r0, r1
 8017d00:	4770      	bx	lr

08017d02 <abort>:
 8017d02:	b508      	push	{r3, lr}
 8017d04:	2006      	movs	r0, #6
 8017d06:	f000 f965 	bl	8017fd4 <raise>
 8017d0a:	2001      	movs	r0, #1
 8017d0c:	f7ea f90b 	bl	8001f26 <_exit>

08017d10 <__errno>:
 8017d10:	4b01      	ldr	r3, [pc, #4]	; (8017d18 <__errno+0x8>)
 8017d12:	6818      	ldr	r0, [r3, #0]
 8017d14:	4770      	bx	lr
 8017d16:	bf00      	nop
 8017d18:	20000728 	.word	0x20000728

08017d1c <__libc_init_array>:
 8017d1c:	b570      	push	{r4, r5, r6, lr}
 8017d1e:	2500      	movs	r5, #0
 8017d20:	4e0c      	ldr	r6, [pc, #48]	; (8017d54 <__libc_init_array+0x38>)
 8017d22:	4c0d      	ldr	r4, [pc, #52]	; (8017d58 <__libc_init_array+0x3c>)
 8017d24:	1ba4      	subs	r4, r4, r6
 8017d26:	10a4      	asrs	r4, r4, #2
 8017d28:	42a5      	cmp	r5, r4
 8017d2a:	d109      	bne.n	8017d40 <__libc_init_array+0x24>
 8017d2c:	f000 fd68 	bl	8018800 <_init>
 8017d30:	2500      	movs	r5, #0
 8017d32:	4e0a      	ldr	r6, [pc, #40]	; (8017d5c <__libc_init_array+0x40>)
 8017d34:	4c0a      	ldr	r4, [pc, #40]	; (8017d60 <__libc_init_array+0x44>)
 8017d36:	1ba4      	subs	r4, r4, r6
 8017d38:	10a4      	asrs	r4, r4, #2
 8017d3a:	42a5      	cmp	r5, r4
 8017d3c:	d105      	bne.n	8017d4a <__libc_init_array+0x2e>
 8017d3e:	bd70      	pop	{r4, r5, r6, pc}
 8017d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017d44:	4798      	blx	r3
 8017d46:	3501      	adds	r5, #1
 8017d48:	e7ee      	b.n	8017d28 <__libc_init_array+0xc>
 8017d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017d4e:	4798      	blx	r3
 8017d50:	3501      	adds	r5, #1
 8017d52:	e7f2      	b.n	8017d3a <__libc_init_array+0x1e>
 8017d54:	08019540 	.word	0x08019540
 8017d58:	08019540 	.word	0x08019540
 8017d5c:	08019540 	.word	0x08019540
 8017d60:	0801954c 	.word	0x0801954c

08017d64 <malloc>:
 8017d64:	4b02      	ldr	r3, [pc, #8]	; (8017d70 <malloc+0xc>)
 8017d66:	4601      	mov	r1, r0
 8017d68:	6818      	ldr	r0, [r3, #0]
 8017d6a:	f000 b8a1 	b.w	8017eb0 <_malloc_r>
 8017d6e:	bf00      	nop
 8017d70:	20000728 	.word	0x20000728

08017d74 <free>:
 8017d74:	4b02      	ldr	r3, [pc, #8]	; (8017d80 <free+0xc>)
 8017d76:	4601      	mov	r1, r0
 8017d78:	6818      	ldr	r0, [r3, #0]
 8017d7a:	f000 b84d 	b.w	8017e18 <_free_r>
 8017d7e:	bf00      	nop
 8017d80:	20000728 	.word	0x20000728

08017d84 <memchr>:
 8017d84:	b510      	push	{r4, lr}
 8017d86:	b2c9      	uxtb	r1, r1
 8017d88:	4402      	add	r2, r0
 8017d8a:	4290      	cmp	r0, r2
 8017d8c:	4603      	mov	r3, r0
 8017d8e:	d101      	bne.n	8017d94 <memchr+0x10>
 8017d90:	2300      	movs	r3, #0
 8017d92:	e003      	b.n	8017d9c <memchr+0x18>
 8017d94:	781c      	ldrb	r4, [r3, #0]
 8017d96:	3001      	adds	r0, #1
 8017d98:	428c      	cmp	r4, r1
 8017d9a:	d1f6      	bne.n	8017d8a <memchr+0x6>
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	bd10      	pop	{r4, pc}

08017da0 <memcmp>:
 8017da0:	b530      	push	{r4, r5, lr}
 8017da2:	2400      	movs	r4, #0
 8017da4:	42a2      	cmp	r2, r4
 8017da6:	d101      	bne.n	8017dac <memcmp+0xc>
 8017da8:	2000      	movs	r0, #0
 8017daa:	e007      	b.n	8017dbc <memcmp+0x1c>
 8017dac:	5d03      	ldrb	r3, [r0, r4]
 8017dae:	3401      	adds	r4, #1
 8017db0:	190d      	adds	r5, r1, r4
 8017db2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017db6:	42ab      	cmp	r3, r5
 8017db8:	d0f4      	beq.n	8017da4 <memcmp+0x4>
 8017dba:	1b58      	subs	r0, r3, r5
 8017dbc:	bd30      	pop	{r4, r5, pc}

08017dbe <memcpy>:
 8017dbe:	b510      	push	{r4, lr}
 8017dc0:	1e43      	subs	r3, r0, #1
 8017dc2:	440a      	add	r2, r1
 8017dc4:	4291      	cmp	r1, r2
 8017dc6:	d100      	bne.n	8017dca <memcpy+0xc>
 8017dc8:	bd10      	pop	{r4, pc}
 8017dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017dd2:	e7f7      	b.n	8017dc4 <memcpy+0x6>

08017dd4 <memmove>:
 8017dd4:	4288      	cmp	r0, r1
 8017dd6:	b510      	push	{r4, lr}
 8017dd8:	eb01 0302 	add.w	r3, r1, r2
 8017ddc:	d807      	bhi.n	8017dee <memmove+0x1a>
 8017dde:	1e42      	subs	r2, r0, #1
 8017de0:	4299      	cmp	r1, r3
 8017de2:	d00a      	beq.n	8017dfa <memmove+0x26>
 8017de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017de8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017dec:	e7f8      	b.n	8017de0 <memmove+0xc>
 8017dee:	4283      	cmp	r3, r0
 8017df0:	d9f5      	bls.n	8017dde <memmove+0xa>
 8017df2:	1881      	adds	r1, r0, r2
 8017df4:	1ad2      	subs	r2, r2, r3
 8017df6:	42d3      	cmn	r3, r2
 8017df8:	d100      	bne.n	8017dfc <memmove+0x28>
 8017dfa:	bd10      	pop	{r4, pc}
 8017dfc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e00:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017e04:	e7f7      	b.n	8017df6 <memmove+0x22>

08017e06 <memset>:
 8017e06:	4603      	mov	r3, r0
 8017e08:	4402      	add	r2, r0
 8017e0a:	4293      	cmp	r3, r2
 8017e0c:	d100      	bne.n	8017e10 <memset+0xa>
 8017e0e:	4770      	bx	lr
 8017e10:	f803 1b01 	strb.w	r1, [r3], #1
 8017e14:	e7f9      	b.n	8017e0a <memset+0x4>
	...

08017e18 <_free_r>:
 8017e18:	b538      	push	{r3, r4, r5, lr}
 8017e1a:	4605      	mov	r5, r0
 8017e1c:	2900      	cmp	r1, #0
 8017e1e:	d043      	beq.n	8017ea8 <_free_r+0x90>
 8017e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e24:	1f0c      	subs	r4, r1, #4
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	bfb8      	it	lt
 8017e2a:	18e4      	addlt	r4, r4, r3
 8017e2c:	f000 f9cf 	bl	80181ce <__malloc_lock>
 8017e30:	4a1e      	ldr	r2, [pc, #120]	; (8017eac <_free_r+0x94>)
 8017e32:	6813      	ldr	r3, [r2, #0]
 8017e34:	4610      	mov	r0, r2
 8017e36:	b933      	cbnz	r3, 8017e46 <_free_r+0x2e>
 8017e38:	6063      	str	r3, [r4, #4]
 8017e3a:	6014      	str	r4, [r2, #0]
 8017e3c:	4628      	mov	r0, r5
 8017e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e42:	f000 b9c5 	b.w	80181d0 <__malloc_unlock>
 8017e46:	42a3      	cmp	r3, r4
 8017e48:	d90b      	bls.n	8017e62 <_free_r+0x4a>
 8017e4a:	6821      	ldr	r1, [r4, #0]
 8017e4c:	1862      	adds	r2, r4, r1
 8017e4e:	4293      	cmp	r3, r2
 8017e50:	bf01      	itttt	eq
 8017e52:	681a      	ldreq	r2, [r3, #0]
 8017e54:	685b      	ldreq	r3, [r3, #4]
 8017e56:	1852      	addeq	r2, r2, r1
 8017e58:	6022      	streq	r2, [r4, #0]
 8017e5a:	6063      	str	r3, [r4, #4]
 8017e5c:	6004      	str	r4, [r0, #0]
 8017e5e:	e7ed      	b.n	8017e3c <_free_r+0x24>
 8017e60:	4613      	mov	r3, r2
 8017e62:	685a      	ldr	r2, [r3, #4]
 8017e64:	b10a      	cbz	r2, 8017e6a <_free_r+0x52>
 8017e66:	42a2      	cmp	r2, r4
 8017e68:	d9fa      	bls.n	8017e60 <_free_r+0x48>
 8017e6a:	6819      	ldr	r1, [r3, #0]
 8017e6c:	1858      	adds	r0, r3, r1
 8017e6e:	42a0      	cmp	r0, r4
 8017e70:	d10b      	bne.n	8017e8a <_free_r+0x72>
 8017e72:	6820      	ldr	r0, [r4, #0]
 8017e74:	4401      	add	r1, r0
 8017e76:	1858      	adds	r0, r3, r1
 8017e78:	4282      	cmp	r2, r0
 8017e7a:	6019      	str	r1, [r3, #0]
 8017e7c:	d1de      	bne.n	8017e3c <_free_r+0x24>
 8017e7e:	6810      	ldr	r0, [r2, #0]
 8017e80:	6852      	ldr	r2, [r2, #4]
 8017e82:	4401      	add	r1, r0
 8017e84:	6019      	str	r1, [r3, #0]
 8017e86:	605a      	str	r2, [r3, #4]
 8017e88:	e7d8      	b.n	8017e3c <_free_r+0x24>
 8017e8a:	d902      	bls.n	8017e92 <_free_r+0x7a>
 8017e8c:	230c      	movs	r3, #12
 8017e8e:	602b      	str	r3, [r5, #0]
 8017e90:	e7d4      	b.n	8017e3c <_free_r+0x24>
 8017e92:	6820      	ldr	r0, [r4, #0]
 8017e94:	1821      	adds	r1, r4, r0
 8017e96:	428a      	cmp	r2, r1
 8017e98:	bf01      	itttt	eq
 8017e9a:	6811      	ldreq	r1, [r2, #0]
 8017e9c:	6852      	ldreq	r2, [r2, #4]
 8017e9e:	1809      	addeq	r1, r1, r0
 8017ea0:	6021      	streq	r1, [r4, #0]
 8017ea2:	6062      	str	r2, [r4, #4]
 8017ea4:	605c      	str	r4, [r3, #4]
 8017ea6:	e7c9      	b.n	8017e3c <_free_r+0x24>
 8017ea8:	bd38      	pop	{r3, r4, r5, pc}
 8017eaa:	bf00      	nop
 8017eac:	20001508 	.word	0x20001508

08017eb0 <_malloc_r>:
 8017eb0:	b570      	push	{r4, r5, r6, lr}
 8017eb2:	1ccd      	adds	r5, r1, #3
 8017eb4:	f025 0503 	bic.w	r5, r5, #3
 8017eb8:	3508      	adds	r5, #8
 8017eba:	2d0c      	cmp	r5, #12
 8017ebc:	bf38      	it	cc
 8017ebe:	250c      	movcc	r5, #12
 8017ec0:	2d00      	cmp	r5, #0
 8017ec2:	4606      	mov	r6, r0
 8017ec4:	db01      	blt.n	8017eca <_malloc_r+0x1a>
 8017ec6:	42a9      	cmp	r1, r5
 8017ec8:	d903      	bls.n	8017ed2 <_malloc_r+0x22>
 8017eca:	230c      	movs	r3, #12
 8017ecc:	6033      	str	r3, [r6, #0]
 8017ece:	2000      	movs	r0, #0
 8017ed0:	bd70      	pop	{r4, r5, r6, pc}
 8017ed2:	f000 f97c 	bl	80181ce <__malloc_lock>
 8017ed6:	4a21      	ldr	r2, [pc, #132]	; (8017f5c <_malloc_r+0xac>)
 8017ed8:	6814      	ldr	r4, [r2, #0]
 8017eda:	4621      	mov	r1, r4
 8017edc:	b991      	cbnz	r1, 8017f04 <_malloc_r+0x54>
 8017ede:	4c20      	ldr	r4, [pc, #128]	; (8017f60 <_malloc_r+0xb0>)
 8017ee0:	6823      	ldr	r3, [r4, #0]
 8017ee2:	b91b      	cbnz	r3, 8017eec <_malloc_r+0x3c>
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	f000 f83d 	bl	8017f64 <_sbrk_r>
 8017eea:	6020      	str	r0, [r4, #0]
 8017eec:	4629      	mov	r1, r5
 8017eee:	4630      	mov	r0, r6
 8017ef0:	f000 f838 	bl	8017f64 <_sbrk_r>
 8017ef4:	1c43      	adds	r3, r0, #1
 8017ef6:	d124      	bne.n	8017f42 <_malloc_r+0x92>
 8017ef8:	230c      	movs	r3, #12
 8017efa:	4630      	mov	r0, r6
 8017efc:	6033      	str	r3, [r6, #0]
 8017efe:	f000 f967 	bl	80181d0 <__malloc_unlock>
 8017f02:	e7e4      	b.n	8017ece <_malloc_r+0x1e>
 8017f04:	680b      	ldr	r3, [r1, #0]
 8017f06:	1b5b      	subs	r3, r3, r5
 8017f08:	d418      	bmi.n	8017f3c <_malloc_r+0x8c>
 8017f0a:	2b0b      	cmp	r3, #11
 8017f0c:	d90f      	bls.n	8017f2e <_malloc_r+0x7e>
 8017f0e:	600b      	str	r3, [r1, #0]
 8017f10:	18cc      	adds	r4, r1, r3
 8017f12:	50cd      	str	r5, [r1, r3]
 8017f14:	4630      	mov	r0, r6
 8017f16:	f000 f95b 	bl	80181d0 <__malloc_unlock>
 8017f1a:	f104 000b 	add.w	r0, r4, #11
 8017f1e:	1d23      	adds	r3, r4, #4
 8017f20:	f020 0007 	bic.w	r0, r0, #7
 8017f24:	1ac3      	subs	r3, r0, r3
 8017f26:	d0d3      	beq.n	8017ed0 <_malloc_r+0x20>
 8017f28:	425a      	negs	r2, r3
 8017f2a:	50e2      	str	r2, [r4, r3]
 8017f2c:	e7d0      	b.n	8017ed0 <_malloc_r+0x20>
 8017f2e:	684b      	ldr	r3, [r1, #4]
 8017f30:	428c      	cmp	r4, r1
 8017f32:	bf16      	itet	ne
 8017f34:	6063      	strne	r3, [r4, #4]
 8017f36:	6013      	streq	r3, [r2, #0]
 8017f38:	460c      	movne	r4, r1
 8017f3a:	e7eb      	b.n	8017f14 <_malloc_r+0x64>
 8017f3c:	460c      	mov	r4, r1
 8017f3e:	6849      	ldr	r1, [r1, #4]
 8017f40:	e7cc      	b.n	8017edc <_malloc_r+0x2c>
 8017f42:	1cc4      	adds	r4, r0, #3
 8017f44:	f024 0403 	bic.w	r4, r4, #3
 8017f48:	42a0      	cmp	r0, r4
 8017f4a:	d005      	beq.n	8017f58 <_malloc_r+0xa8>
 8017f4c:	1a21      	subs	r1, r4, r0
 8017f4e:	4630      	mov	r0, r6
 8017f50:	f000 f808 	bl	8017f64 <_sbrk_r>
 8017f54:	3001      	adds	r0, #1
 8017f56:	d0cf      	beq.n	8017ef8 <_malloc_r+0x48>
 8017f58:	6025      	str	r5, [r4, #0]
 8017f5a:	e7db      	b.n	8017f14 <_malloc_r+0x64>
 8017f5c:	20001508 	.word	0x20001508
 8017f60:	2000150c 	.word	0x2000150c

08017f64 <_sbrk_r>:
 8017f64:	b538      	push	{r3, r4, r5, lr}
 8017f66:	2300      	movs	r3, #0
 8017f68:	4c05      	ldr	r4, [pc, #20]	; (8017f80 <_sbrk_r+0x1c>)
 8017f6a:	4605      	mov	r5, r0
 8017f6c:	4608      	mov	r0, r1
 8017f6e:	6023      	str	r3, [r4, #0]
 8017f70:	f7e9 ffe4 	bl	8001f3c <_sbrk>
 8017f74:	1c43      	adds	r3, r0, #1
 8017f76:	d102      	bne.n	8017f7e <_sbrk_r+0x1a>
 8017f78:	6823      	ldr	r3, [r4, #0]
 8017f7a:	b103      	cbz	r3, 8017f7e <_sbrk_r+0x1a>
 8017f7c:	602b      	str	r3, [r5, #0]
 8017f7e:	bd38      	pop	{r3, r4, r5, pc}
 8017f80:	200021a0 	.word	0x200021a0

08017f84 <_raise_r>:
 8017f84:	291f      	cmp	r1, #31
 8017f86:	b538      	push	{r3, r4, r5, lr}
 8017f88:	4604      	mov	r4, r0
 8017f8a:	460d      	mov	r5, r1
 8017f8c:	d904      	bls.n	8017f98 <_raise_r+0x14>
 8017f8e:	2316      	movs	r3, #22
 8017f90:	6003      	str	r3, [r0, #0]
 8017f92:	f04f 30ff 	mov.w	r0, #4294967295
 8017f96:	bd38      	pop	{r3, r4, r5, pc}
 8017f98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017f9a:	b112      	cbz	r2, 8017fa2 <_raise_r+0x1e>
 8017f9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017fa0:	b94b      	cbnz	r3, 8017fb6 <_raise_r+0x32>
 8017fa2:	4620      	mov	r0, r4
 8017fa4:	f000 f830 	bl	8018008 <_getpid_r>
 8017fa8:	462a      	mov	r2, r5
 8017faa:	4601      	mov	r1, r0
 8017fac:	4620      	mov	r0, r4
 8017fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017fb2:	f000 b817 	b.w	8017fe4 <_kill_r>
 8017fb6:	2b01      	cmp	r3, #1
 8017fb8:	d00a      	beq.n	8017fd0 <_raise_r+0x4c>
 8017fba:	1c59      	adds	r1, r3, #1
 8017fbc:	d103      	bne.n	8017fc6 <_raise_r+0x42>
 8017fbe:	2316      	movs	r3, #22
 8017fc0:	6003      	str	r3, [r0, #0]
 8017fc2:	2001      	movs	r0, #1
 8017fc4:	e7e7      	b.n	8017f96 <_raise_r+0x12>
 8017fc6:	2400      	movs	r4, #0
 8017fc8:	4628      	mov	r0, r5
 8017fca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017fce:	4798      	blx	r3
 8017fd0:	2000      	movs	r0, #0
 8017fd2:	e7e0      	b.n	8017f96 <_raise_r+0x12>

08017fd4 <raise>:
 8017fd4:	4b02      	ldr	r3, [pc, #8]	; (8017fe0 <raise+0xc>)
 8017fd6:	4601      	mov	r1, r0
 8017fd8:	6818      	ldr	r0, [r3, #0]
 8017fda:	f7ff bfd3 	b.w	8017f84 <_raise_r>
 8017fde:	bf00      	nop
 8017fe0:	20000728 	.word	0x20000728

08017fe4 <_kill_r>:
 8017fe4:	b538      	push	{r3, r4, r5, lr}
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	4c06      	ldr	r4, [pc, #24]	; (8018004 <_kill_r+0x20>)
 8017fea:	4605      	mov	r5, r0
 8017fec:	4608      	mov	r0, r1
 8017fee:	4611      	mov	r1, r2
 8017ff0:	6023      	str	r3, [r4, #0]
 8017ff2:	f7e9 ff88 	bl	8001f06 <_kill>
 8017ff6:	1c43      	adds	r3, r0, #1
 8017ff8:	d102      	bne.n	8018000 <_kill_r+0x1c>
 8017ffa:	6823      	ldr	r3, [r4, #0]
 8017ffc:	b103      	cbz	r3, 8018000 <_kill_r+0x1c>
 8017ffe:	602b      	str	r3, [r5, #0]
 8018000:	bd38      	pop	{r3, r4, r5, pc}
 8018002:	bf00      	nop
 8018004:	200021a0 	.word	0x200021a0

08018008 <_getpid_r>:
 8018008:	f7e9 bf76 	b.w	8001ef8 <_getpid>

0801800c <_strtol_l.isra.0>:
 801800c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018010:	4680      	mov	r8, r0
 8018012:	4689      	mov	r9, r1
 8018014:	4692      	mov	sl, r2
 8018016:	461e      	mov	r6, r3
 8018018:	460f      	mov	r7, r1
 801801a:	463d      	mov	r5, r7
 801801c:	9808      	ldr	r0, [sp, #32]
 801801e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018022:	f000 f8bf 	bl	80181a4 <__locale_ctype_ptr_l>
 8018026:	4420      	add	r0, r4
 8018028:	7843      	ldrb	r3, [r0, #1]
 801802a:	f013 0308 	ands.w	r3, r3, #8
 801802e:	d132      	bne.n	8018096 <_strtol_l.isra.0+0x8a>
 8018030:	2c2d      	cmp	r4, #45	; 0x2d
 8018032:	d132      	bne.n	801809a <_strtol_l.isra.0+0x8e>
 8018034:	2201      	movs	r2, #1
 8018036:	787c      	ldrb	r4, [r7, #1]
 8018038:	1cbd      	adds	r5, r7, #2
 801803a:	2e00      	cmp	r6, #0
 801803c:	d05d      	beq.n	80180fa <_strtol_l.isra.0+0xee>
 801803e:	2e10      	cmp	r6, #16
 8018040:	d109      	bne.n	8018056 <_strtol_l.isra.0+0x4a>
 8018042:	2c30      	cmp	r4, #48	; 0x30
 8018044:	d107      	bne.n	8018056 <_strtol_l.isra.0+0x4a>
 8018046:	782b      	ldrb	r3, [r5, #0]
 8018048:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801804c:	2b58      	cmp	r3, #88	; 0x58
 801804e:	d14f      	bne.n	80180f0 <_strtol_l.isra.0+0xe4>
 8018050:	2610      	movs	r6, #16
 8018052:	786c      	ldrb	r4, [r5, #1]
 8018054:	3502      	adds	r5, #2
 8018056:	2a00      	cmp	r2, #0
 8018058:	bf14      	ite	ne
 801805a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801805e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8018062:	2700      	movs	r7, #0
 8018064:	fbb1 fcf6 	udiv	ip, r1, r6
 8018068:	4638      	mov	r0, r7
 801806a:	fb06 1e1c 	mls	lr, r6, ip, r1
 801806e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018072:	2b09      	cmp	r3, #9
 8018074:	d817      	bhi.n	80180a6 <_strtol_l.isra.0+0x9a>
 8018076:	461c      	mov	r4, r3
 8018078:	42a6      	cmp	r6, r4
 801807a:	dd23      	ble.n	80180c4 <_strtol_l.isra.0+0xb8>
 801807c:	1c7b      	adds	r3, r7, #1
 801807e:	d007      	beq.n	8018090 <_strtol_l.isra.0+0x84>
 8018080:	4584      	cmp	ip, r0
 8018082:	d31c      	bcc.n	80180be <_strtol_l.isra.0+0xb2>
 8018084:	d101      	bne.n	801808a <_strtol_l.isra.0+0x7e>
 8018086:	45a6      	cmp	lr, r4
 8018088:	db19      	blt.n	80180be <_strtol_l.isra.0+0xb2>
 801808a:	2701      	movs	r7, #1
 801808c:	fb00 4006 	mla	r0, r0, r6, r4
 8018090:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018094:	e7eb      	b.n	801806e <_strtol_l.isra.0+0x62>
 8018096:	462f      	mov	r7, r5
 8018098:	e7bf      	b.n	801801a <_strtol_l.isra.0+0xe>
 801809a:	2c2b      	cmp	r4, #43	; 0x2b
 801809c:	bf04      	itt	eq
 801809e:	1cbd      	addeq	r5, r7, #2
 80180a0:	787c      	ldrbeq	r4, [r7, #1]
 80180a2:	461a      	mov	r2, r3
 80180a4:	e7c9      	b.n	801803a <_strtol_l.isra.0+0x2e>
 80180a6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80180aa:	2b19      	cmp	r3, #25
 80180ac:	d801      	bhi.n	80180b2 <_strtol_l.isra.0+0xa6>
 80180ae:	3c37      	subs	r4, #55	; 0x37
 80180b0:	e7e2      	b.n	8018078 <_strtol_l.isra.0+0x6c>
 80180b2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80180b6:	2b19      	cmp	r3, #25
 80180b8:	d804      	bhi.n	80180c4 <_strtol_l.isra.0+0xb8>
 80180ba:	3c57      	subs	r4, #87	; 0x57
 80180bc:	e7dc      	b.n	8018078 <_strtol_l.isra.0+0x6c>
 80180be:	f04f 37ff 	mov.w	r7, #4294967295
 80180c2:	e7e5      	b.n	8018090 <_strtol_l.isra.0+0x84>
 80180c4:	1c7b      	adds	r3, r7, #1
 80180c6:	d108      	bne.n	80180da <_strtol_l.isra.0+0xce>
 80180c8:	2322      	movs	r3, #34	; 0x22
 80180ca:	4608      	mov	r0, r1
 80180cc:	f8c8 3000 	str.w	r3, [r8]
 80180d0:	f1ba 0f00 	cmp.w	sl, #0
 80180d4:	d107      	bne.n	80180e6 <_strtol_l.isra.0+0xda>
 80180d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180da:	b102      	cbz	r2, 80180de <_strtol_l.isra.0+0xd2>
 80180dc:	4240      	negs	r0, r0
 80180de:	f1ba 0f00 	cmp.w	sl, #0
 80180e2:	d0f8      	beq.n	80180d6 <_strtol_l.isra.0+0xca>
 80180e4:	b10f      	cbz	r7, 80180ea <_strtol_l.isra.0+0xde>
 80180e6:	f105 39ff 	add.w	r9, r5, #4294967295
 80180ea:	f8ca 9000 	str.w	r9, [sl]
 80180ee:	e7f2      	b.n	80180d6 <_strtol_l.isra.0+0xca>
 80180f0:	2430      	movs	r4, #48	; 0x30
 80180f2:	2e00      	cmp	r6, #0
 80180f4:	d1af      	bne.n	8018056 <_strtol_l.isra.0+0x4a>
 80180f6:	2608      	movs	r6, #8
 80180f8:	e7ad      	b.n	8018056 <_strtol_l.isra.0+0x4a>
 80180fa:	2c30      	cmp	r4, #48	; 0x30
 80180fc:	d0a3      	beq.n	8018046 <_strtol_l.isra.0+0x3a>
 80180fe:	260a      	movs	r6, #10
 8018100:	e7a9      	b.n	8018056 <_strtol_l.isra.0+0x4a>
	...

08018104 <strtol>:
 8018104:	4b08      	ldr	r3, [pc, #32]	; (8018128 <strtol+0x24>)
 8018106:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018108:	681c      	ldr	r4, [r3, #0]
 801810a:	4d08      	ldr	r5, [pc, #32]	; (801812c <strtol+0x28>)
 801810c:	6a23      	ldr	r3, [r4, #32]
 801810e:	2b00      	cmp	r3, #0
 8018110:	bf08      	it	eq
 8018112:	462b      	moveq	r3, r5
 8018114:	9300      	str	r3, [sp, #0]
 8018116:	4613      	mov	r3, r2
 8018118:	460a      	mov	r2, r1
 801811a:	4601      	mov	r1, r0
 801811c:	4620      	mov	r0, r4
 801811e:	f7ff ff75 	bl	801800c <_strtol_l.isra.0>
 8018122:	b003      	add	sp, #12
 8018124:	bd30      	pop	{r4, r5, pc}
 8018126:	bf00      	nop
 8018128:	20000728 	.word	0x20000728
 801812c:	2000078c 	.word	0x2000078c

08018130 <_vsniprintf_r>:
 8018130:	b530      	push	{r4, r5, lr}
 8018132:	1e14      	subs	r4, r2, #0
 8018134:	4605      	mov	r5, r0
 8018136:	b09b      	sub	sp, #108	; 0x6c
 8018138:	4618      	mov	r0, r3
 801813a:	da05      	bge.n	8018148 <_vsniprintf_r+0x18>
 801813c:	238b      	movs	r3, #139	; 0x8b
 801813e:	f04f 30ff 	mov.w	r0, #4294967295
 8018142:	602b      	str	r3, [r5, #0]
 8018144:	b01b      	add	sp, #108	; 0x6c
 8018146:	bd30      	pop	{r4, r5, pc}
 8018148:	f44f 7302 	mov.w	r3, #520	; 0x208
 801814c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018150:	bf0c      	ite	eq
 8018152:	4623      	moveq	r3, r4
 8018154:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018158:	9302      	str	r3, [sp, #8]
 801815a:	9305      	str	r3, [sp, #20]
 801815c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018160:	9100      	str	r1, [sp, #0]
 8018162:	9104      	str	r1, [sp, #16]
 8018164:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018168:	4602      	mov	r2, r0
 801816a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801816c:	4669      	mov	r1, sp
 801816e:	4628      	mov	r0, r5
 8018170:	f000 f88a 	bl	8018288 <_svfiprintf_r>
 8018174:	1c43      	adds	r3, r0, #1
 8018176:	bfbc      	itt	lt
 8018178:	238b      	movlt	r3, #139	; 0x8b
 801817a:	602b      	strlt	r3, [r5, #0]
 801817c:	2c00      	cmp	r4, #0
 801817e:	d0e1      	beq.n	8018144 <_vsniprintf_r+0x14>
 8018180:	2200      	movs	r2, #0
 8018182:	9b00      	ldr	r3, [sp, #0]
 8018184:	701a      	strb	r2, [r3, #0]
 8018186:	e7dd      	b.n	8018144 <_vsniprintf_r+0x14>

08018188 <vsniprintf>:
 8018188:	b507      	push	{r0, r1, r2, lr}
 801818a:	9300      	str	r3, [sp, #0]
 801818c:	4613      	mov	r3, r2
 801818e:	460a      	mov	r2, r1
 8018190:	4601      	mov	r1, r0
 8018192:	4803      	ldr	r0, [pc, #12]	; (80181a0 <vsniprintf+0x18>)
 8018194:	6800      	ldr	r0, [r0, #0]
 8018196:	f7ff ffcb 	bl	8018130 <_vsniprintf_r>
 801819a:	b003      	add	sp, #12
 801819c:	f85d fb04 	ldr.w	pc, [sp], #4
 80181a0:	20000728 	.word	0x20000728

080181a4 <__locale_ctype_ptr_l>:
 80181a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80181a8:	4770      	bx	lr

080181aa <__ascii_mbtowc>:
 80181aa:	b082      	sub	sp, #8
 80181ac:	b901      	cbnz	r1, 80181b0 <__ascii_mbtowc+0x6>
 80181ae:	a901      	add	r1, sp, #4
 80181b0:	b142      	cbz	r2, 80181c4 <__ascii_mbtowc+0x1a>
 80181b2:	b14b      	cbz	r3, 80181c8 <__ascii_mbtowc+0x1e>
 80181b4:	7813      	ldrb	r3, [r2, #0]
 80181b6:	600b      	str	r3, [r1, #0]
 80181b8:	7812      	ldrb	r2, [r2, #0]
 80181ba:	1c10      	adds	r0, r2, #0
 80181bc:	bf18      	it	ne
 80181be:	2001      	movne	r0, #1
 80181c0:	b002      	add	sp, #8
 80181c2:	4770      	bx	lr
 80181c4:	4610      	mov	r0, r2
 80181c6:	e7fb      	b.n	80181c0 <__ascii_mbtowc+0x16>
 80181c8:	f06f 0001 	mvn.w	r0, #1
 80181cc:	e7f8      	b.n	80181c0 <__ascii_mbtowc+0x16>

080181ce <__malloc_lock>:
 80181ce:	4770      	bx	lr

080181d0 <__malloc_unlock>:
 80181d0:	4770      	bx	lr

080181d2 <__ssputs_r>:
 80181d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181d6:	688e      	ldr	r6, [r1, #8]
 80181d8:	4682      	mov	sl, r0
 80181da:	429e      	cmp	r6, r3
 80181dc:	460c      	mov	r4, r1
 80181de:	4690      	mov	r8, r2
 80181e0:	4699      	mov	r9, r3
 80181e2:	d837      	bhi.n	8018254 <__ssputs_r+0x82>
 80181e4:	898a      	ldrh	r2, [r1, #12]
 80181e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80181ea:	d031      	beq.n	8018250 <__ssputs_r+0x7e>
 80181ec:	2302      	movs	r3, #2
 80181ee:	6825      	ldr	r5, [r4, #0]
 80181f0:	6909      	ldr	r1, [r1, #16]
 80181f2:	1a6f      	subs	r7, r5, r1
 80181f4:	6965      	ldr	r5, [r4, #20]
 80181f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80181fa:	fb95 f5f3 	sdiv	r5, r5, r3
 80181fe:	f109 0301 	add.w	r3, r9, #1
 8018202:	443b      	add	r3, r7
 8018204:	429d      	cmp	r5, r3
 8018206:	bf38      	it	cc
 8018208:	461d      	movcc	r5, r3
 801820a:	0553      	lsls	r3, r2, #21
 801820c:	d530      	bpl.n	8018270 <__ssputs_r+0x9e>
 801820e:	4629      	mov	r1, r5
 8018210:	f7ff fe4e 	bl	8017eb0 <_malloc_r>
 8018214:	4606      	mov	r6, r0
 8018216:	b950      	cbnz	r0, 801822e <__ssputs_r+0x5c>
 8018218:	230c      	movs	r3, #12
 801821a:	f04f 30ff 	mov.w	r0, #4294967295
 801821e:	f8ca 3000 	str.w	r3, [sl]
 8018222:	89a3      	ldrh	r3, [r4, #12]
 8018224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018228:	81a3      	strh	r3, [r4, #12]
 801822a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801822e:	463a      	mov	r2, r7
 8018230:	6921      	ldr	r1, [r4, #16]
 8018232:	f7ff fdc4 	bl	8017dbe <memcpy>
 8018236:	89a3      	ldrh	r3, [r4, #12]
 8018238:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801823c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018240:	81a3      	strh	r3, [r4, #12]
 8018242:	6126      	str	r6, [r4, #16]
 8018244:	443e      	add	r6, r7
 8018246:	6026      	str	r6, [r4, #0]
 8018248:	464e      	mov	r6, r9
 801824a:	6165      	str	r5, [r4, #20]
 801824c:	1bed      	subs	r5, r5, r7
 801824e:	60a5      	str	r5, [r4, #8]
 8018250:	454e      	cmp	r6, r9
 8018252:	d900      	bls.n	8018256 <__ssputs_r+0x84>
 8018254:	464e      	mov	r6, r9
 8018256:	4632      	mov	r2, r6
 8018258:	4641      	mov	r1, r8
 801825a:	6820      	ldr	r0, [r4, #0]
 801825c:	f7ff fdba 	bl	8017dd4 <memmove>
 8018260:	68a3      	ldr	r3, [r4, #8]
 8018262:	2000      	movs	r0, #0
 8018264:	1b9b      	subs	r3, r3, r6
 8018266:	60a3      	str	r3, [r4, #8]
 8018268:	6823      	ldr	r3, [r4, #0]
 801826a:	441e      	add	r6, r3
 801826c:	6026      	str	r6, [r4, #0]
 801826e:	e7dc      	b.n	801822a <__ssputs_r+0x58>
 8018270:	462a      	mov	r2, r5
 8018272:	f000 fa96 	bl	80187a2 <_realloc_r>
 8018276:	4606      	mov	r6, r0
 8018278:	2800      	cmp	r0, #0
 801827a:	d1e2      	bne.n	8018242 <__ssputs_r+0x70>
 801827c:	6921      	ldr	r1, [r4, #16]
 801827e:	4650      	mov	r0, sl
 8018280:	f7ff fdca 	bl	8017e18 <_free_r>
 8018284:	e7c8      	b.n	8018218 <__ssputs_r+0x46>
	...

08018288 <_svfiprintf_r>:
 8018288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801828c:	461d      	mov	r5, r3
 801828e:	898b      	ldrh	r3, [r1, #12]
 8018290:	b09d      	sub	sp, #116	; 0x74
 8018292:	061f      	lsls	r7, r3, #24
 8018294:	4680      	mov	r8, r0
 8018296:	460c      	mov	r4, r1
 8018298:	4616      	mov	r6, r2
 801829a:	d50f      	bpl.n	80182bc <_svfiprintf_r+0x34>
 801829c:	690b      	ldr	r3, [r1, #16]
 801829e:	b96b      	cbnz	r3, 80182bc <_svfiprintf_r+0x34>
 80182a0:	2140      	movs	r1, #64	; 0x40
 80182a2:	f7ff fe05 	bl	8017eb0 <_malloc_r>
 80182a6:	6020      	str	r0, [r4, #0]
 80182a8:	6120      	str	r0, [r4, #16]
 80182aa:	b928      	cbnz	r0, 80182b8 <_svfiprintf_r+0x30>
 80182ac:	230c      	movs	r3, #12
 80182ae:	f8c8 3000 	str.w	r3, [r8]
 80182b2:	f04f 30ff 	mov.w	r0, #4294967295
 80182b6:	e0c8      	b.n	801844a <_svfiprintf_r+0x1c2>
 80182b8:	2340      	movs	r3, #64	; 0x40
 80182ba:	6163      	str	r3, [r4, #20]
 80182bc:	2300      	movs	r3, #0
 80182be:	9309      	str	r3, [sp, #36]	; 0x24
 80182c0:	2320      	movs	r3, #32
 80182c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80182c6:	2330      	movs	r3, #48	; 0x30
 80182c8:	f04f 0b01 	mov.w	fp, #1
 80182cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80182d0:	9503      	str	r5, [sp, #12]
 80182d2:	4637      	mov	r7, r6
 80182d4:	463d      	mov	r5, r7
 80182d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80182da:	b10b      	cbz	r3, 80182e0 <_svfiprintf_r+0x58>
 80182dc:	2b25      	cmp	r3, #37	; 0x25
 80182de:	d13e      	bne.n	801835e <_svfiprintf_r+0xd6>
 80182e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80182e4:	d00b      	beq.n	80182fe <_svfiprintf_r+0x76>
 80182e6:	4653      	mov	r3, sl
 80182e8:	4632      	mov	r2, r6
 80182ea:	4621      	mov	r1, r4
 80182ec:	4640      	mov	r0, r8
 80182ee:	f7ff ff70 	bl	80181d2 <__ssputs_r>
 80182f2:	3001      	adds	r0, #1
 80182f4:	f000 80a4 	beq.w	8018440 <_svfiprintf_r+0x1b8>
 80182f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182fa:	4453      	add	r3, sl
 80182fc:	9309      	str	r3, [sp, #36]	; 0x24
 80182fe:	783b      	ldrb	r3, [r7, #0]
 8018300:	2b00      	cmp	r3, #0
 8018302:	f000 809d 	beq.w	8018440 <_svfiprintf_r+0x1b8>
 8018306:	2300      	movs	r3, #0
 8018308:	f04f 32ff 	mov.w	r2, #4294967295
 801830c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018310:	9304      	str	r3, [sp, #16]
 8018312:	9307      	str	r3, [sp, #28]
 8018314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018318:	931a      	str	r3, [sp, #104]	; 0x68
 801831a:	462f      	mov	r7, r5
 801831c:	2205      	movs	r2, #5
 801831e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018322:	4850      	ldr	r0, [pc, #320]	; (8018464 <_svfiprintf_r+0x1dc>)
 8018324:	f7ff fd2e 	bl	8017d84 <memchr>
 8018328:	9b04      	ldr	r3, [sp, #16]
 801832a:	b9d0      	cbnz	r0, 8018362 <_svfiprintf_r+0xda>
 801832c:	06d9      	lsls	r1, r3, #27
 801832e:	bf44      	itt	mi
 8018330:	2220      	movmi	r2, #32
 8018332:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018336:	071a      	lsls	r2, r3, #28
 8018338:	bf44      	itt	mi
 801833a:	222b      	movmi	r2, #43	; 0x2b
 801833c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018340:	782a      	ldrb	r2, [r5, #0]
 8018342:	2a2a      	cmp	r2, #42	; 0x2a
 8018344:	d015      	beq.n	8018372 <_svfiprintf_r+0xea>
 8018346:	462f      	mov	r7, r5
 8018348:	2000      	movs	r0, #0
 801834a:	250a      	movs	r5, #10
 801834c:	9a07      	ldr	r2, [sp, #28]
 801834e:	4639      	mov	r1, r7
 8018350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018354:	3b30      	subs	r3, #48	; 0x30
 8018356:	2b09      	cmp	r3, #9
 8018358:	d94d      	bls.n	80183f6 <_svfiprintf_r+0x16e>
 801835a:	b1b8      	cbz	r0, 801838c <_svfiprintf_r+0x104>
 801835c:	e00f      	b.n	801837e <_svfiprintf_r+0xf6>
 801835e:	462f      	mov	r7, r5
 8018360:	e7b8      	b.n	80182d4 <_svfiprintf_r+0x4c>
 8018362:	4a40      	ldr	r2, [pc, #256]	; (8018464 <_svfiprintf_r+0x1dc>)
 8018364:	463d      	mov	r5, r7
 8018366:	1a80      	subs	r0, r0, r2
 8018368:	fa0b f000 	lsl.w	r0, fp, r0
 801836c:	4318      	orrs	r0, r3
 801836e:	9004      	str	r0, [sp, #16]
 8018370:	e7d3      	b.n	801831a <_svfiprintf_r+0x92>
 8018372:	9a03      	ldr	r2, [sp, #12]
 8018374:	1d11      	adds	r1, r2, #4
 8018376:	6812      	ldr	r2, [r2, #0]
 8018378:	9103      	str	r1, [sp, #12]
 801837a:	2a00      	cmp	r2, #0
 801837c:	db01      	blt.n	8018382 <_svfiprintf_r+0xfa>
 801837e:	9207      	str	r2, [sp, #28]
 8018380:	e004      	b.n	801838c <_svfiprintf_r+0x104>
 8018382:	4252      	negs	r2, r2
 8018384:	f043 0302 	orr.w	r3, r3, #2
 8018388:	9207      	str	r2, [sp, #28]
 801838a:	9304      	str	r3, [sp, #16]
 801838c:	783b      	ldrb	r3, [r7, #0]
 801838e:	2b2e      	cmp	r3, #46	; 0x2e
 8018390:	d10c      	bne.n	80183ac <_svfiprintf_r+0x124>
 8018392:	787b      	ldrb	r3, [r7, #1]
 8018394:	2b2a      	cmp	r3, #42	; 0x2a
 8018396:	d133      	bne.n	8018400 <_svfiprintf_r+0x178>
 8018398:	9b03      	ldr	r3, [sp, #12]
 801839a:	3702      	adds	r7, #2
 801839c:	1d1a      	adds	r2, r3, #4
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	9203      	str	r2, [sp, #12]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	bfb8      	it	lt
 80183a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80183aa:	9305      	str	r3, [sp, #20]
 80183ac:	4d2e      	ldr	r5, [pc, #184]	; (8018468 <_svfiprintf_r+0x1e0>)
 80183ae:	2203      	movs	r2, #3
 80183b0:	7839      	ldrb	r1, [r7, #0]
 80183b2:	4628      	mov	r0, r5
 80183b4:	f7ff fce6 	bl	8017d84 <memchr>
 80183b8:	b138      	cbz	r0, 80183ca <_svfiprintf_r+0x142>
 80183ba:	2340      	movs	r3, #64	; 0x40
 80183bc:	1b40      	subs	r0, r0, r5
 80183be:	fa03 f000 	lsl.w	r0, r3, r0
 80183c2:	9b04      	ldr	r3, [sp, #16]
 80183c4:	3701      	adds	r7, #1
 80183c6:	4303      	orrs	r3, r0
 80183c8:	9304      	str	r3, [sp, #16]
 80183ca:	7839      	ldrb	r1, [r7, #0]
 80183cc:	2206      	movs	r2, #6
 80183ce:	4827      	ldr	r0, [pc, #156]	; (801846c <_svfiprintf_r+0x1e4>)
 80183d0:	1c7e      	adds	r6, r7, #1
 80183d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80183d6:	f7ff fcd5 	bl	8017d84 <memchr>
 80183da:	2800      	cmp	r0, #0
 80183dc:	d038      	beq.n	8018450 <_svfiprintf_r+0x1c8>
 80183de:	4b24      	ldr	r3, [pc, #144]	; (8018470 <_svfiprintf_r+0x1e8>)
 80183e0:	bb13      	cbnz	r3, 8018428 <_svfiprintf_r+0x1a0>
 80183e2:	9b03      	ldr	r3, [sp, #12]
 80183e4:	3307      	adds	r3, #7
 80183e6:	f023 0307 	bic.w	r3, r3, #7
 80183ea:	3308      	adds	r3, #8
 80183ec:	9303      	str	r3, [sp, #12]
 80183ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183f0:	444b      	add	r3, r9
 80183f2:	9309      	str	r3, [sp, #36]	; 0x24
 80183f4:	e76d      	b.n	80182d2 <_svfiprintf_r+0x4a>
 80183f6:	fb05 3202 	mla	r2, r5, r2, r3
 80183fa:	2001      	movs	r0, #1
 80183fc:	460f      	mov	r7, r1
 80183fe:	e7a6      	b.n	801834e <_svfiprintf_r+0xc6>
 8018400:	2300      	movs	r3, #0
 8018402:	250a      	movs	r5, #10
 8018404:	4619      	mov	r1, r3
 8018406:	3701      	adds	r7, #1
 8018408:	9305      	str	r3, [sp, #20]
 801840a:	4638      	mov	r0, r7
 801840c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018410:	3a30      	subs	r2, #48	; 0x30
 8018412:	2a09      	cmp	r2, #9
 8018414:	d903      	bls.n	801841e <_svfiprintf_r+0x196>
 8018416:	2b00      	cmp	r3, #0
 8018418:	d0c8      	beq.n	80183ac <_svfiprintf_r+0x124>
 801841a:	9105      	str	r1, [sp, #20]
 801841c:	e7c6      	b.n	80183ac <_svfiprintf_r+0x124>
 801841e:	fb05 2101 	mla	r1, r5, r1, r2
 8018422:	2301      	movs	r3, #1
 8018424:	4607      	mov	r7, r0
 8018426:	e7f0      	b.n	801840a <_svfiprintf_r+0x182>
 8018428:	ab03      	add	r3, sp, #12
 801842a:	9300      	str	r3, [sp, #0]
 801842c:	4622      	mov	r2, r4
 801842e:	4b11      	ldr	r3, [pc, #68]	; (8018474 <_svfiprintf_r+0x1ec>)
 8018430:	a904      	add	r1, sp, #16
 8018432:	4640      	mov	r0, r8
 8018434:	f3af 8000 	nop.w
 8018438:	f1b0 3fff 	cmp.w	r0, #4294967295
 801843c:	4681      	mov	r9, r0
 801843e:	d1d6      	bne.n	80183ee <_svfiprintf_r+0x166>
 8018440:	89a3      	ldrh	r3, [r4, #12]
 8018442:	065b      	lsls	r3, r3, #25
 8018444:	f53f af35 	bmi.w	80182b2 <_svfiprintf_r+0x2a>
 8018448:	9809      	ldr	r0, [sp, #36]	; 0x24
 801844a:	b01d      	add	sp, #116	; 0x74
 801844c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018450:	ab03      	add	r3, sp, #12
 8018452:	9300      	str	r3, [sp, #0]
 8018454:	4622      	mov	r2, r4
 8018456:	4b07      	ldr	r3, [pc, #28]	; (8018474 <_svfiprintf_r+0x1ec>)
 8018458:	a904      	add	r1, sp, #16
 801845a:	4640      	mov	r0, r8
 801845c:	f000 f882 	bl	8018564 <_printf_i>
 8018460:	e7ea      	b.n	8018438 <_svfiprintf_r+0x1b0>
 8018462:	bf00      	nop
 8018464:	0801940a 	.word	0x0801940a
 8018468:	08019410 	.word	0x08019410
 801846c:	08019414 	.word	0x08019414
 8018470:	00000000 	.word	0x00000000
 8018474:	080181d3 	.word	0x080181d3

08018478 <_printf_common>:
 8018478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801847c:	4691      	mov	r9, r2
 801847e:	461f      	mov	r7, r3
 8018480:	688a      	ldr	r2, [r1, #8]
 8018482:	690b      	ldr	r3, [r1, #16]
 8018484:	4606      	mov	r6, r0
 8018486:	4293      	cmp	r3, r2
 8018488:	bfb8      	it	lt
 801848a:	4613      	movlt	r3, r2
 801848c:	f8c9 3000 	str.w	r3, [r9]
 8018490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018494:	460c      	mov	r4, r1
 8018496:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801849a:	b112      	cbz	r2, 80184a2 <_printf_common+0x2a>
 801849c:	3301      	adds	r3, #1
 801849e:	f8c9 3000 	str.w	r3, [r9]
 80184a2:	6823      	ldr	r3, [r4, #0]
 80184a4:	0699      	lsls	r1, r3, #26
 80184a6:	bf42      	ittt	mi
 80184a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80184ac:	3302      	addmi	r3, #2
 80184ae:	f8c9 3000 	strmi.w	r3, [r9]
 80184b2:	6825      	ldr	r5, [r4, #0]
 80184b4:	f015 0506 	ands.w	r5, r5, #6
 80184b8:	d107      	bne.n	80184ca <_printf_common+0x52>
 80184ba:	f104 0a19 	add.w	sl, r4, #25
 80184be:	68e3      	ldr	r3, [r4, #12]
 80184c0:	f8d9 2000 	ldr.w	r2, [r9]
 80184c4:	1a9b      	subs	r3, r3, r2
 80184c6:	42ab      	cmp	r3, r5
 80184c8:	dc29      	bgt.n	801851e <_printf_common+0xa6>
 80184ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80184ce:	6822      	ldr	r2, [r4, #0]
 80184d0:	3300      	adds	r3, #0
 80184d2:	bf18      	it	ne
 80184d4:	2301      	movne	r3, #1
 80184d6:	0692      	lsls	r2, r2, #26
 80184d8:	d42e      	bmi.n	8018538 <_printf_common+0xc0>
 80184da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80184de:	4639      	mov	r1, r7
 80184e0:	4630      	mov	r0, r6
 80184e2:	47c0      	blx	r8
 80184e4:	3001      	adds	r0, #1
 80184e6:	d021      	beq.n	801852c <_printf_common+0xb4>
 80184e8:	6823      	ldr	r3, [r4, #0]
 80184ea:	68e5      	ldr	r5, [r4, #12]
 80184ec:	f003 0306 	and.w	r3, r3, #6
 80184f0:	2b04      	cmp	r3, #4
 80184f2:	bf18      	it	ne
 80184f4:	2500      	movne	r5, #0
 80184f6:	f8d9 2000 	ldr.w	r2, [r9]
 80184fa:	f04f 0900 	mov.w	r9, #0
 80184fe:	bf08      	it	eq
 8018500:	1aad      	subeq	r5, r5, r2
 8018502:	68a3      	ldr	r3, [r4, #8]
 8018504:	6922      	ldr	r2, [r4, #16]
 8018506:	bf08      	it	eq
 8018508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801850c:	4293      	cmp	r3, r2
 801850e:	bfc4      	itt	gt
 8018510:	1a9b      	subgt	r3, r3, r2
 8018512:	18ed      	addgt	r5, r5, r3
 8018514:	341a      	adds	r4, #26
 8018516:	454d      	cmp	r5, r9
 8018518:	d11a      	bne.n	8018550 <_printf_common+0xd8>
 801851a:	2000      	movs	r0, #0
 801851c:	e008      	b.n	8018530 <_printf_common+0xb8>
 801851e:	2301      	movs	r3, #1
 8018520:	4652      	mov	r2, sl
 8018522:	4639      	mov	r1, r7
 8018524:	4630      	mov	r0, r6
 8018526:	47c0      	blx	r8
 8018528:	3001      	adds	r0, #1
 801852a:	d103      	bne.n	8018534 <_printf_common+0xbc>
 801852c:	f04f 30ff 	mov.w	r0, #4294967295
 8018530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018534:	3501      	adds	r5, #1
 8018536:	e7c2      	b.n	80184be <_printf_common+0x46>
 8018538:	2030      	movs	r0, #48	; 0x30
 801853a:	18e1      	adds	r1, r4, r3
 801853c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018540:	1c5a      	adds	r2, r3, #1
 8018542:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018546:	4422      	add	r2, r4
 8018548:	3302      	adds	r3, #2
 801854a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801854e:	e7c4      	b.n	80184da <_printf_common+0x62>
 8018550:	2301      	movs	r3, #1
 8018552:	4622      	mov	r2, r4
 8018554:	4639      	mov	r1, r7
 8018556:	4630      	mov	r0, r6
 8018558:	47c0      	blx	r8
 801855a:	3001      	adds	r0, #1
 801855c:	d0e6      	beq.n	801852c <_printf_common+0xb4>
 801855e:	f109 0901 	add.w	r9, r9, #1
 8018562:	e7d8      	b.n	8018516 <_printf_common+0x9e>

08018564 <_printf_i>:
 8018564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018568:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801856c:	460c      	mov	r4, r1
 801856e:	7e09      	ldrb	r1, [r1, #24]
 8018570:	b085      	sub	sp, #20
 8018572:	296e      	cmp	r1, #110	; 0x6e
 8018574:	4617      	mov	r7, r2
 8018576:	4606      	mov	r6, r0
 8018578:	4698      	mov	r8, r3
 801857a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801857c:	f000 80b3 	beq.w	80186e6 <_printf_i+0x182>
 8018580:	d822      	bhi.n	80185c8 <_printf_i+0x64>
 8018582:	2963      	cmp	r1, #99	; 0x63
 8018584:	d036      	beq.n	80185f4 <_printf_i+0x90>
 8018586:	d80a      	bhi.n	801859e <_printf_i+0x3a>
 8018588:	2900      	cmp	r1, #0
 801858a:	f000 80b9 	beq.w	8018700 <_printf_i+0x19c>
 801858e:	2958      	cmp	r1, #88	; 0x58
 8018590:	f000 8083 	beq.w	801869a <_printf_i+0x136>
 8018594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018598:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801859c:	e032      	b.n	8018604 <_printf_i+0xa0>
 801859e:	2964      	cmp	r1, #100	; 0x64
 80185a0:	d001      	beq.n	80185a6 <_printf_i+0x42>
 80185a2:	2969      	cmp	r1, #105	; 0x69
 80185a4:	d1f6      	bne.n	8018594 <_printf_i+0x30>
 80185a6:	6820      	ldr	r0, [r4, #0]
 80185a8:	6813      	ldr	r3, [r2, #0]
 80185aa:	0605      	lsls	r5, r0, #24
 80185ac:	f103 0104 	add.w	r1, r3, #4
 80185b0:	d52a      	bpl.n	8018608 <_printf_i+0xa4>
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	6011      	str	r1, [r2, #0]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	da03      	bge.n	80185c2 <_printf_i+0x5e>
 80185ba:	222d      	movs	r2, #45	; 0x2d
 80185bc:	425b      	negs	r3, r3
 80185be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80185c2:	486f      	ldr	r0, [pc, #444]	; (8018780 <_printf_i+0x21c>)
 80185c4:	220a      	movs	r2, #10
 80185c6:	e039      	b.n	801863c <_printf_i+0xd8>
 80185c8:	2973      	cmp	r1, #115	; 0x73
 80185ca:	f000 809d 	beq.w	8018708 <_printf_i+0x1a4>
 80185ce:	d808      	bhi.n	80185e2 <_printf_i+0x7e>
 80185d0:	296f      	cmp	r1, #111	; 0x6f
 80185d2:	d020      	beq.n	8018616 <_printf_i+0xb2>
 80185d4:	2970      	cmp	r1, #112	; 0x70
 80185d6:	d1dd      	bne.n	8018594 <_printf_i+0x30>
 80185d8:	6823      	ldr	r3, [r4, #0]
 80185da:	f043 0320 	orr.w	r3, r3, #32
 80185de:	6023      	str	r3, [r4, #0]
 80185e0:	e003      	b.n	80185ea <_printf_i+0x86>
 80185e2:	2975      	cmp	r1, #117	; 0x75
 80185e4:	d017      	beq.n	8018616 <_printf_i+0xb2>
 80185e6:	2978      	cmp	r1, #120	; 0x78
 80185e8:	d1d4      	bne.n	8018594 <_printf_i+0x30>
 80185ea:	2378      	movs	r3, #120	; 0x78
 80185ec:	4865      	ldr	r0, [pc, #404]	; (8018784 <_printf_i+0x220>)
 80185ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80185f2:	e055      	b.n	80186a0 <_printf_i+0x13c>
 80185f4:	6813      	ldr	r3, [r2, #0]
 80185f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80185fa:	1d19      	adds	r1, r3, #4
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	6011      	str	r1, [r2, #0]
 8018600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018604:	2301      	movs	r3, #1
 8018606:	e08c      	b.n	8018722 <_printf_i+0x1be>
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801860e:	6011      	str	r1, [r2, #0]
 8018610:	bf18      	it	ne
 8018612:	b21b      	sxthne	r3, r3
 8018614:	e7cf      	b.n	80185b6 <_printf_i+0x52>
 8018616:	6813      	ldr	r3, [r2, #0]
 8018618:	6825      	ldr	r5, [r4, #0]
 801861a:	1d18      	adds	r0, r3, #4
 801861c:	6010      	str	r0, [r2, #0]
 801861e:	0628      	lsls	r0, r5, #24
 8018620:	d501      	bpl.n	8018626 <_printf_i+0xc2>
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	e002      	b.n	801862c <_printf_i+0xc8>
 8018626:	0668      	lsls	r0, r5, #25
 8018628:	d5fb      	bpl.n	8018622 <_printf_i+0xbe>
 801862a:	881b      	ldrh	r3, [r3, #0]
 801862c:	296f      	cmp	r1, #111	; 0x6f
 801862e:	bf14      	ite	ne
 8018630:	220a      	movne	r2, #10
 8018632:	2208      	moveq	r2, #8
 8018634:	4852      	ldr	r0, [pc, #328]	; (8018780 <_printf_i+0x21c>)
 8018636:	2100      	movs	r1, #0
 8018638:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801863c:	6865      	ldr	r5, [r4, #4]
 801863e:	2d00      	cmp	r5, #0
 8018640:	60a5      	str	r5, [r4, #8]
 8018642:	f2c0 8095 	blt.w	8018770 <_printf_i+0x20c>
 8018646:	6821      	ldr	r1, [r4, #0]
 8018648:	f021 0104 	bic.w	r1, r1, #4
 801864c:	6021      	str	r1, [r4, #0]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d13d      	bne.n	80186ce <_printf_i+0x16a>
 8018652:	2d00      	cmp	r5, #0
 8018654:	f040 808e 	bne.w	8018774 <_printf_i+0x210>
 8018658:	4665      	mov	r5, ip
 801865a:	2a08      	cmp	r2, #8
 801865c:	d10b      	bne.n	8018676 <_printf_i+0x112>
 801865e:	6823      	ldr	r3, [r4, #0]
 8018660:	07db      	lsls	r3, r3, #31
 8018662:	d508      	bpl.n	8018676 <_printf_i+0x112>
 8018664:	6923      	ldr	r3, [r4, #16]
 8018666:	6862      	ldr	r2, [r4, #4]
 8018668:	429a      	cmp	r2, r3
 801866a:	bfde      	ittt	le
 801866c:	2330      	movle	r3, #48	; 0x30
 801866e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018672:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018676:	ebac 0305 	sub.w	r3, ip, r5
 801867a:	6123      	str	r3, [r4, #16]
 801867c:	f8cd 8000 	str.w	r8, [sp]
 8018680:	463b      	mov	r3, r7
 8018682:	aa03      	add	r2, sp, #12
 8018684:	4621      	mov	r1, r4
 8018686:	4630      	mov	r0, r6
 8018688:	f7ff fef6 	bl	8018478 <_printf_common>
 801868c:	3001      	adds	r0, #1
 801868e:	d14d      	bne.n	801872c <_printf_i+0x1c8>
 8018690:	f04f 30ff 	mov.w	r0, #4294967295
 8018694:	b005      	add	sp, #20
 8018696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801869a:	4839      	ldr	r0, [pc, #228]	; (8018780 <_printf_i+0x21c>)
 801869c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80186a0:	6813      	ldr	r3, [r2, #0]
 80186a2:	6821      	ldr	r1, [r4, #0]
 80186a4:	1d1d      	adds	r5, r3, #4
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	6015      	str	r5, [r2, #0]
 80186aa:	060a      	lsls	r2, r1, #24
 80186ac:	d50b      	bpl.n	80186c6 <_printf_i+0x162>
 80186ae:	07ca      	lsls	r2, r1, #31
 80186b0:	bf44      	itt	mi
 80186b2:	f041 0120 	orrmi.w	r1, r1, #32
 80186b6:	6021      	strmi	r1, [r4, #0]
 80186b8:	b91b      	cbnz	r3, 80186c2 <_printf_i+0x15e>
 80186ba:	6822      	ldr	r2, [r4, #0]
 80186bc:	f022 0220 	bic.w	r2, r2, #32
 80186c0:	6022      	str	r2, [r4, #0]
 80186c2:	2210      	movs	r2, #16
 80186c4:	e7b7      	b.n	8018636 <_printf_i+0xd2>
 80186c6:	064d      	lsls	r5, r1, #25
 80186c8:	bf48      	it	mi
 80186ca:	b29b      	uxthmi	r3, r3
 80186cc:	e7ef      	b.n	80186ae <_printf_i+0x14a>
 80186ce:	4665      	mov	r5, ip
 80186d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80186d4:	fb02 3311 	mls	r3, r2, r1, r3
 80186d8:	5cc3      	ldrb	r3, [r0, r3]
 80186da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80186de:	460b      	mov	r3, r1
 80186e0:	2900      	cmp	r1, #0
 80186e2:	d1f5      	bne.n	80186d0 <_printf_i+0x16c>
 80186e4:	e7b9      	b.n	801865a <_printf_i+0xf6>
 80186e6:	6813      	ldr	r3, [r2, #0]
 80186e8:	6825      	ldr	r5, [r4, #0]
 80186ea:	1d18      	adds	r0, r3, #4
 80186ec:	6961      	ldr	r1, [r4, #20]
 80186ee:	6010      	str	r0, [r2, #0]
 80186f0:	0628      	lsls	r0, r5, #24
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	d501      	bpl.n	80186fa <_printf_i+0x196>
 80186f6:	6019      	str	r1, [r3, #0]
 80186f8:	e002      	b.n	8018700 <_printf_i+0x19c>
 80186fa:	066a      	lsls	r2, r5, #25
 80186fc:	d5fb      	bpl.n	80186f6 <_printf_i+0x192>
 80186fe:	8019      	strh	r1, [r3, #0]
 8018700:	2300      	movs	r3, #0
 8018702:	4665      	mov	r5, ip
 8018704:	6123      	str	r3, [r4, #16]
 8018706:	e7b9      	b.n	801867c <_printf_i+0x118>
 8018708:	6813      	ldr	r3, [r2, #0]
 801870a:	1d19      	adds	r1, r3, #4
 801870c:	6011      	str	r1, [r2, #0]
 801870e:	681d      	ldr	r5, [r3, #0]
 8018710:	6862      	ldr	r2, [r4, #4]
 8018712:	2100      	movs	r1, #0
 8018714:	4628      	mov	r0, r5
 8018716:	f7ff fb35 	bl	8017d84 <memchr>
 801871a:	b108      	cbz	r0, 8018720 <_printf_i+0x1bc>
 801871c:	1b40      	subs	r0, r0, r5
 801871e:	6060      	str	r0, [r4, #4]
 8018720:	6863      	ldr	r3, [r4, #4]
 8018722:	6123      	str	r3, [r4, #16]
 8018724:	2300      	movs	r3, #0
 8018726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801872a:	e7a7      	b.n	801867c <_printf_i+0x118>
 801872c:	6923      	ldr	r3, [r4, #16]
 801872e:	462a      	mov	r2, r5
 8018730:	4639      	mov	r1, r7
 8018732:	4630      	mov	r0, r6
 8018734:	47c0      	blx	r8
 8018736:	3001      	adds	r0, #1
 8018738:	d0aa      	beq.n	8018690 <_printf_i+0x12c>
 801873a:	6823      	ldr	r3, [r4, #0]
 801873c:	079b      	lsls	r3, r3, #30
 801873e:	d413      	bmi.n	8018768 <_printf_i+0x204>
 8018740:	68e0      	ldr	r0, [r4, #12]
 8018742:	9b03      	ldr	r3, [sp, #12]
 8018744:	4298      	cmp	r0, r3
 8018746:	bfb8      	it	lt
 8018748:	4618      	movlt	r0, r3
 801874a:	e7a3      	b.n	8018694 <_printf_i+0x130>
 801874c:	2301      	movs	r3, #1
 801874e:	464a      	mov	r2, r9
 8018750:	4639      	mov	r1, r7
 8018752:	4630      	mov	r0, r6
 8018754:	47c0      	blx	r8
 8018756:	3001      	adds	r0, #1
 8018758:	d09a      	beq.n	8018690 <_printf_i+0x12c>
 801875a:	3501      	adds	r5, #1
 801875c:	68e3      	ldr	r3, [r4, #12]
 801875e:	9a03      	ldr	r2, [sp, #12]
 8018760:	1a9b      	subs	r3, r3, r2
 8018762:	42ab      	cmp	r3, r5
 8018764:	dcf2      	bgt.n	801874c <_printf_i+0x1e8>
 8018766:	e7eb      	b.n	8018740 <_printf_i+0x1dc>
 8018768:	2500      	movs	r5, #0
 801876a:	f104 0919 	add.w	r9, r4, #25
 801876e:	e7f5      	b.n	801875c <_printf_i+0x1f8>
 8018770:	2b00      	cmp	r3, #0
 8018772:	d1ac      	bne.n	80186ce <_printf_i+0x16a>
 8018774:	7803      	ldrb	r3, [r0, #0]
 8018776:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801877a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801877e:	e76c      	b.n	801865a <_printf_i+0xf6>
 8018780:	0801941b 	.word	0x0801941b
 8018784:	0801942c 	.word	0x0801942c

08018788 <__ascii_wctomb>:
 8018788:	b149      	cbz	r1, 801879e <__ascii_wctomb+0x16>
 801878a:	2aff      	cmp	r2, #255	; 0xff
 801878c:	bf8b      	itete	hi
 801878e:	238a      	movhi	r3, #138	; 0x8a
 8018790:	700a      	strbls	r2, [r1, #0]
 8018792:	6003      	strhi	r3, [r0, #0]
 8018794:	2001      	movls	r0, #1
 8018796:	bf88      	it	hi
 8018798:	f04f 30ff 	movhi.w	r0, #4294967295
 801879c:	4770      	bx	lr
 801879e:	4608      	mov	r0, r1
 80187a0:	4770      	bx	lr

080187a2 <_realloc_r>:
 80187a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187a4:	4607      	mov	r7, r0
 80187a6:	4614      	mov	r4, r2
 80187a8:	460e      	mov	r6, r1
 80187aa:	b921      	cbnz	r1, 80187b6 <_realloc_r+0x14>
 80187ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80187b0:	4611      	mov	r1, r2
 80187b2:	f7ff bb7d 	b.w	8017eb0 <_malloc_r>
 80187b6:	b922      	cbnz	r2, 80187c2 <_realloc_r+0x20>
 80187b8:	f7ff fb2e 	bl	8017e18 <_free_r>
 80187bc:	4625      	mov	r5, r4
 80187be:	4628      	mov	r0, r5
 80187c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187c2:	f000 f814 	bl	80187ee <_malloc_usable_size_r>
 80187c6:	42a0      	cmp	r0, r4
 80187c8:	d20f      	bcs.n	80187ea <_realloc_r+0x48>
 80187ca:	4621      	mov	r1, r4
 80187cc:	4638      	mov	r0, r7
 80187ce:	f7ff fb6f 	bl	8017eb0 <_malloc_r>
 80187d2:	4605      	mov	r5, r0
 80187d4:	2800      	cmp	r0, #0
 80187d6:	d0f2      	beq.n	80187be <_realloc_r+0x1c>
 80187d8:	4631      	mov	r1, r6
 80187da:	4622      	mov	r2, r4
 80187dc:	f7ff faef 	bl	8017dbe <memcpy>
 80187e0:	4631      	mov	r1, r6
 80187e2:	4638      	mov	r0, r7
 80187e4:	f7ff fb18 	bl	8017e18 <_free_r>
 80187e8:	e7e9      	b.n	80187be <_realloc_r+0x1c>
 80187ea:	4635      	mov	r5, r6
 80187ec:	e7e7      	b.n	80187be <_realloc_r+0x1c>

080187ee <_malloc_usable_size_r>:
 80187ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187f2:	1f18      	subs	r0, r3, #4
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	bfbc      	itt	lt
 80187f8:	580b      	ldrlt	r3, [r1, r0]
 80187fa:	18c0      	addlt	r0, r0, r3
 80187fc:	4770      	bx	lr
	...

08018800 <_init>:
 8018800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018802:	bf00      	nop
 8018804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018806:	bc08      	pop	{r3}
 8018808:	469e      	mov	lr, r3
 801880a:	4770      	bx	lr

0801880c <_fini>:
 801880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801880e:	bf00      	nop
 8018810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018812:	bc08      	pop	{r3}
 8018814:	469e      	mov	lr, r3
 8018816:	4770      	bx	lr
